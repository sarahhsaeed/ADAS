
NTI_RTOS_MOTOR_USART_SELF_UPDATED_GP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1dc  0800a1dc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1e4  0800a1e4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1e4  0800a1e4  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1e8  0800a1e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a1ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba8  20000088  0800a274  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004c30  0800a274  00024c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d418  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004139  00000000  00000000  0003d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00041610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00042c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195a2  00000000  00000000  00044148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9cd  00000000  00000000  0005d6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097a07  00000000  00000000  000780b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fabe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e20  00000000  00000000  0010fb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e8c 	.word	0x08009e8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08009e8c 	.word	0x08009e8c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <DCMotor_stop>:
#include "tim.h"

extern osMessageQueueId_t motorQueueHandle;

void DCMotor_stop(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	motorControl_t payload = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0; i < 2; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	71fb      	strb	r3, [r7, #7]
 8000d72:	e01d      	b.n	8000db0 <DCMotor_stop+0x50>
	{
	  payload.motors[i].modify = 1;
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3308      	adds	r3, #8
 8000d7e:	443b      	add	r3, r7
 8000d80:	3b08      	subs	r3, #8
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].speed = 0;
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3308      	adds	r3, #8
 8000d90:	443b      	add	r3, r7
 8000d92:	3b07      	subs	r3, #7
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].control = MOTOR_OFF;
 8000d98:	79fa      	ldrb	r2, [r7, #7]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	3308      	adds	r3, #8
 8000da2:	443b      	add	r3, r7
 8000da4:	3b06      	subs	r3, #6
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	3301      	adds	r3, #1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d9de      	bls.n	8000d74 <DCMotor_stop+0x14>
	}
	osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <DCMotor_stop+0x6c>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	4639      	mov	r1, r7
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f006 fa40 	bl	8007244 <osMessageQueuePut>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000fc 	.word	0x200000fc

08000dd0 <DCMotor_moveForward>:

void DCMotor_moveForward(uint8_t speed)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	motorControl_t payload = {0};
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0; i < 2; i++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e01d      	b.n	8000e26 <DCMotor_moveForward+0x56>
	{
	  payload.motors[i].modify = 1;
 8000dea:	7bfa      	ldrb	r2, [r7, #15]
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	3310      	adds	r3, #16
 8000df4:	443b      	add	r3, r7
 8000df6:	3b08      	subs	r3, #8
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].speed = speed;
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	3310      	adds	r3, #16
 8000e06:	443b      	add	r3, r7
 8000e08:	3b07      	subs	r3, #7
 8000e0a:	79fa      	ldrb	r2, [r7, #7]
 8000e0c:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].control = MOTOR_FWD;
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	3310      	adds	r3, #16
 8000e18:	443b      	add	r3, r7
 8000e1a:	3b06      	subs	r3, #6
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++)
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	3301      	adds	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d9de      	bls.n	8000dea <DCMotor_moveForward+0x1a>
	}
	osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <DCMotor_moveForward+0x74>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	f107 0108 	add.w	r1, r7, #8
 8000e34:	2301      	movs	r3, #1
 8000e36:	2200      	movs	r2, #0
 8000e38:	f006 fa04 	bl	8007244 <osMessageQueuePut>
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200000fc 	.word	0x200000fc

08000e48 <DCMotor_moveBackward>:

void DCMotor_moveBackward(uint8_t speed)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	motorControl_t payload = {0};
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0; i < 2; i++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e01d      	b.n	8000e9e <DCMotor_moveBackward+0x56>
	{
	  payload.motors[i].modify = 1;
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	3310      	adds	r3, #16
 8000e6c:	443b      	add	r3, r7
 8000e6e:	3b08      	subs	r3, #8
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].speed = speed;
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3310      	adds	r3, #16
 8000e7e:	443b      	add	r3, r7
 8000e80:	3b07      	subs	r3, #7
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].control = MOTOR_REV;
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3310      	adds	r3, #16
 8000e90:	443b      	add	r3, r7
 8000e92:	3b06      	subs	r3, #6
 8000e94:	2204      	movs	r2, #4
 8000e96:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++)
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d9de      	bls.n	8000e62 <DCMotor_moveBackward+0x1a>
	}
	osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <DCMotor_moveBackward+0x74>)
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	f107 0108 	add.w	r1, r7, #8
 8000eac:	2301      	movs	r3, #1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f006 f9c8 	bl	8007244 <osMessageQueuePut>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000fc 	.word	0x200000fc

08000ec0 <DCMotor_moveLeft>:

void DCMotor_moveLeft(uint8_t speed)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	motorControl_t payload = {0};
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	809a      	strh	r2, [r3, #4]

	payload.motors[0].modify = 1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	723b      	strb	r3, [r7, #8]
	payload.motors[0].speed = speed;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	727b      	strb	r3, [r7, #9]
	payload.motors[0].control = MOTOR_FWD;
 8000edc:	2302      	movs	r3, #2
 8000ede:	72bb      	strb	r3, [r7, #10]

	payload.motors[1].modify = 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	72fb      	strb	r3, [r7, #11]
	payload.motors[1].speed = speed;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	733b      	strb	r3, [r7, #12]
	payload.motors[1].control = MOTOR_REV;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	737b      	strb	r3, [r7, #13]
	osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <DCMotor_moveLeft+0x44>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	f107 0108 	add.w	r1, r7, #8
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f006 f9a4 	bl	8007244 <osMessageQueuePut>
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200000fc 	.word	0x200000fc

08000f08 <DCMotor_moveRight>:

void DCMotor_moveRight(uint8_t speed)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	motorControl_t payload = {0};
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	809a      	strh	r2, [r3, #4]

	payload.motors[0].modify = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	723b      	strb	r3, [r7, #8]
	payload.motors[0].speed = speed;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	727b      	strb	r3, [r7, #9]
	payload.motors[0].control = MOTOR_REV;
 8000f24:	2304      	movs	r3, #4
 8000f26:	72bb      	strb	r3, [r7, #10]

	payload.motors[1].modify = 1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	72fb      	strb	r3, [r7, #11]
	payload.motors[1].speed = speed;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	733b      	strb	r3, [r7, #12]
	payload.motors[1].control = MOTOR_FWD;
 8000f30:	2302      	movs	r3, #2
 8000f32:	737b      	strb	r3, [r7, #13]
	osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <DCMotor_moveRight+0x44>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	f107 0108 	add.w	r1, r7, #8
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f006 f980 	bl	8007244 <osMessageQueuePut>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000fc 	.word	0x200000fc

08000f50 <DCMotor_handleRequest>:

void DCMotor_handleRequest(motorControl_t* motorRequest)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 2; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	75fb      	strb	r3, [r7, #23]
 8000f5c:	e07e      	b.n	800105c <DCMotor_handleRequest+0x10c>
	{
	  uint16_t INx1_pin, INx2_pin;
	  GPIO_TypeDef *INx1_port, *INx2_port;
	  if(motorRequest->motors[i].modify == 0) continue;
 8000f5e:	7dfa      	ldrb	r2, [r7, #23]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d071      	beq.n	8001054 <DCMotor_handleRequest+0x104>
	  if(i == 0){
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d119      	bne.n	8000faa <DCMotor_handleRequest+0x5a>
		  Motor1_SetSpeed(motorRequest->motors[i].speed);
 8000f76:	7dfa      	ldrb	r2, [r7, #23]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	3301      	adds	r3, #1
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa6c 	bl	8000464 <__aeabi_ui2d>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	ec43 2b10 	vmov	d0, r2, r3
 8000f94:	f002 fa58 	bl	8003448 <Motor1_SetSpeed>
		  INx1_port = MOTOR_IN1_GPIO_Port;
 8000f98:	4b35      	ldr	r3, [pc, #212]	; (8001070 <DCMotor_handleRequest+0x120>)
 8000f9a:	60fb      	str	r3, [r7, #12]
		  INx2_port = MOTOR_IN2_GPIO_Port;
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <DCMotor_handleRequest+0x120>)
 8000f9e:	60bb      	str	r3, [r7, #8]
		  INx1_pin = MOTOR_IN1_Pin;
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	82bb      	strh	r3, [r7, #20]
		  INx2_pin = MOTOR_IN2_Pin;
 8000fa4:	2340      	movs	r3, #64	; 0x40
 8000fa6:	827b      	strh	r3, [r7, #18]
 8000fa8:	e01c      	b.n	8000fe4 <DCMotor_handleRequest+0x94>
	  }
	  else if(i == 1){
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d119      	bne.n	8000fe4 <DCMotor_handleRequest+0x94>
		  Motor2_SetSpeed(motorRequest->motors[i].speed);
 8000fb0:	7dfa      	ldrb	r2, [r7, #23]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa4f 	bl	8000464 <__aeabi_ui2d>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	ec43 2b10 	vmov	d0, r2, r3
 8000fce:	f002 fa8b 	bl	80034e8 <Motor2_SetSpeed>
		  INx1_port = MOTOR_IN3_GPIO_Port;
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <DCMotor_handleRequest+0x120>)
 8000fd4:	60fb      	str	r3, [r7, #12]
		  INx2_port = MOTOR_IN4_GPIO_Port;
 8000fd6:	4b27      	ldr	r3, [pc, #156]	; (8001074 <DCMotor_handleRequest+0x124>)
 8000fd8:	60bb      	str	r3, [r7, #8]
		  INx1_pin = MOTOR_IN3_Pin;
 8000fda:	2320      	movs	r3, #32
 8000fdc:	82bb      	strh	r3, [r7, #20]
		  INx2_pin = MOTOR_IN4_Pin;
 8000fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe2:	827b      	strh	r3, [r7, #18]
	  }
	switch(motorRequest->motors[i].control)
 8000fe4:	7dfa      	ldrb	r2, [r7, #23]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d020      	beq.n	800103a <DCMotor_handleRequest+0xea>
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	dc2c      	bgt.n	8001056 <DCMotor_handleRequest+0x106>
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <DCMotor_handleRequest+0xb6>
 8001000:	2b02      	cmp	r3, #2
 8001002:	d00d      	beq.n	8001020 <DCMotor_handleRequest+0xd0>
 8001004:	e027      	b.n	8001056 <DCMotor_handleRequest+0x106>
	{
	case MOTOR_OFF:
	  HAL_GPIO_WritePin(INx1_port, INx1_pin, 0);
 8001006:	8abb      	ldrh	r3, [r7, #20]
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f002 feb1 	bl	8003d74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(INx2_port, INx2_pin, 0);
 8001012:	8a7b      	ldrh	r3, [r7, #18]
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	68b8      	ldr	r0, [r7, #8]
 800101a:	f002 feab 	bl	8003d74 <HAL_GPIO_WritePin>
	  break;
 800101e:	e01a      	b.n	8001056 <DCMotor_handleRequest+0x106>
	case MOTOR_FWD:
	  HAL_GPIO_WritePin(INx1_port, INx1_pin, 1);
 8001020:	8abb      	ldrh	r3, [r7, #20]
 8001022:	2201      	movs	r2, #1
 8001024:	4619      	mov	r1, r3
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f002 fea4 	bl	8003d74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(INx2_port, INx2_pin, 0);
 800102c:	8a7b      	ldrh	r3, [r7, #18]
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	68b8      	ldr	r0, [r7, #8]
 8001034:	f002 fe9e 	bl	8003d74 <HAL_GPIO_WritePin>
	  break;
 8001038:	e00d      	b.n	8001056 <DCMotor_handleRequest+0x106>
	case MOTOR_REV:
	  HAL_GPIO_WritePin(INx1_port, INx1_pin, 0);
 800103a:	8abb      	ldrh	r3, [r7, #20]
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f002 fe97 	bl	8003d74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(INx2_port, INx2_pin, 1);
 8001046:	8a7b      	ldrh	r3, [r7, #18]
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	68b8      	ldr	r0, [r7, #8]
 800104e:	f002 fe91 	bl	8003d74 <HAL_GPIO_WritePin>
	  break;
 8001052:	e000      	b.n	8001056 <DCMotor_handleRequest+0x106>
	  if(motorRequest->motors[i].modify == 0) continue;
 8001054:	bf00      	nop
	for(uint8_t i = 0; i < 2; i++)
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	3301      	adds	r3, #1
 800105a:	75fb      	strb	r3, [r7, #23]
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	2b01      	cmp	r3, #1
 8001060:	f67f af7d 	bls.w	8000f5e <DCMotor_handleRequest+0xe>
	}
	}
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020400 	.word	0x40020400
 8001074:	40020000 	.word	0x40020000

08001078 <DWT_Delay_Init>:


#include "stm32f4xx_hal.h"
//uint32_t DWT_Delay_Init(void);
__STATIC_INLINE uint32_t DWT_Delay_Init(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <DWT_Delay_Init+0x58>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <DWT_Delay_Init+0x58>)
 8001082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001086:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <DWT_Delay_Init+0x58>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <DWT_Delay_Init+0x58>)
 800108e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001092:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <DWT_Delay_Init+0x5c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <DWT_Delay_Init+0x5c>)
 800109a:	f023 0301 	bic.w	r3, r3, #1
 800109e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <DWT_Delay_Init+0x5c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <DWT_Delay_Init+0x5c>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <DWT_Delay_Init+0x5c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80010b2:	bf00      	nop
    __ASM volatile ("NOP");
 80010b4:	bf00      	nop
    __ASM volatile ("NOP");
 80010b6:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <DWT_Delay_Init+0x5c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80010c0:	2300      	movs	r3, #0
 80010c2:	e000      	b.n	80010c6 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80010c4:	2301      	movs	r3, #1
    }
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000edf0 	.word	0xe000edf0
 80010d4:	e0001000 	.word	0xe0001000

080010d8 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <DWT_Delay_us+0x40>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80010e6:	f003 fa9b 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <DWT_Delay_us+0x44>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9b      	lsrs	r3, r3, #18
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80010fc:	bf00      	nop
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <DWT_Delay_us+0x40>)
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad2      	subs	r2, r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3f8      	bcc.n	80010fe <DWT_Delay_us+0x26>
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e0001000 	.word	0xe0001000
 800111c:	431bde83 	.word	0x431bde83

08001120 <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	; 0x58
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 800112c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]

    DWT_Delay_Init();
 8001162:	f7ff ff89 	bl	8001078 <DWT_Delay_Init>

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	49a2      	ldr	r1, [pc, #648]	; (80013f4 <HCSR04_Init+0x2d4>)
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4aa0      	ldr	r2, [pc, #640]	; (80013f8 <HCSR04_Init+0x2d8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d10e      	bne.n	800119a <HCSR04_Init+0x7a>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
 8001180:	4b9e      	ldr	r3, [pc, #632]	; (80013fc <HCSR04_Init+0x2dc>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a9d      	ldr	r2, [pc, #628]	; (80013fc <HCSR04_Init+0x2dc>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b9b      	ldr	r3, [pc, #620]	; (80013fc <HCSR04_Init+0x2dc>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	e066      	b.n	8001268 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4995      	ldr	r1, [pc, #596]	; (80013f4 <HCSR04_Init+0x2d4>)
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a95      	ldr	r2, [pc, #596]	; (8001400 <HCSR04_Init+0x2e0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d10e      	bne.n	80011ce <HCSR04_Init+0xae>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	4b91      	ldr	r3, [pc, #580]	; (80013fc <HCSR04_Init+0x2dc>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a90      	ldr	r2, [pc, #576]	; (80013fc <HCSR04_Init+0x2dc>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b8e      	ldr	r3, [pc, #568]	; (80013fc <HCSR04_Init+0x2dc>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	e04c      	b.n	8001268 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 80011ce:	79fa      	ldrb	r2, [r7, #7]
 80011d0:	4988      	ldr	r1, [pc, #544]	; (80013f4 <HCSR04_Init+0x2d4>)
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a89      	ldr	r2, [pc, #548]	; (8001404 <HCSR04_Init+0x2e4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d10e      	bne.n	8001202 <HCSR04_Init+0xe2>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	4b84      	ldr	r3, [pc, #528]	; (80013fc <HCSR04_Init+0x2dc>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a83      	ldr	r2, [pc, #524]	; (80013fc <HCSR04_Init+0x2dc>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b81      	ldr	r3, [pc, #516]	; (80013fc <HCSR04_Init+0x2dc>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	e032      	b.n	8001268 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	497b      	ldr	r1, [pc, #492]	; (80013f4 <HCSR04_Init+0x2d4>)
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a7d      	ldr	r2, [pc, #500]	; (8001408 <HCSR04_Init+0x2e8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d10e      	bne.n	8001236 <HCSR04_Init+0x116>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	4b77      	ldr	r3, [pc, #476]	; (80013fc <HCSR04_Init+0x2dc>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a76      	ldr	r2, [pc, #472]	; (80013fc <HCSR04_Init+0x2dc>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b74      	ldr	r3, [pc, #464]	; (80013fc <HCSR04_Init+0x2dc>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	e018      	b.n	8001268 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	496e      	ldr	r1, [pc, #440]	; (80013f4 <HCSR04_Init+0x2d4>)
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a71      	ldr	r2, [pc, #452]	; (800140c <HCSR04_Init+0x2ec>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d10d      	bne.n	8001268 <HCSR04_Init+0x148>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b6a      	ldr	r3, [pc, #424]	; (80013fc <HCSR04_Init+0x2dc>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a69      	ldr	r2, [pc, #420]	; (80013fc <HCSR04_Init+0x2dc>)
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b67      	ldr	r3, [pc, #412]	; (80013fc <HCSR04_Init+0x2dc>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    }
    HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, GPIO_PIN_RESET);
 8001268:	79fa      	ldrb	r2, [r7, #7]
 800126a:	4962      	ldr	r1, [pc, #392]	; (80013f4 <HCSR04_Init+0x2d4>)
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	79fa      	ldrb	r2, [r7, #7]
 800127a:	495e      	ldr	r1, [pc, #376]	; (80013f4 <HCSR04_Init+0x2d4>)
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	3304      	adds	r3, #4
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	f002 fd71 	bl	8003d74 <HAL_GPIO_WritePin>
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	4957      	ldr	r1, [pc, #348]	; (80013f4 <HCSR04_Init+0x2d4>)
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3304      	adds	r3, #4
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	494f      	ldr	r1, [pc, #316]	; (80013f4 <HCSR04_Init+0x2d4>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fbb7 	bl	8003a3c <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	4948      	ldr	r1, [pc, #288]	; (80013f4 <HCSR04_Init+0x2d4>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3308      	adds	r3, #8
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	79fa      	ldrb	r2, [r7, #7]
 80012e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80012e4:	484a      	ldr	r0, [pc, #296]	; (8001410 <HCSR04_Init+0x2f0>)
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4403      	add	r3, r0
 80012f0:	3304      	adds	r3, #4
 80012f2:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	493f      	ldr	r1, [pc, #252]	; (80013f4 <HCSR04_Init+0x2d4>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	3308      	adds	r3, #8
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	79fa      	ldrb	r2, [r7, #7]
 8001308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800130a:	4841      	ldr	r0, [pc, #260]	; (8001410 <HCSR04_Init+0x2f0>)
 800130c:	4613      	mov	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4403      	add	r3, r0
 8001316:	3308      	adds	r3, #8
 8001318:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	493c      	ldr	r1, [pc, #240]	; (8001410 <HCSR04_Init+0x2f0>)
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	3302      	adds	r3, #2
 800132a:	2200      	movs	r2, #0
 800132c:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	4937      	ldr	r1, [pc, #220]	; (8001410 <HCSR04_Init+0x2f0>)
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	331c      	adds	r3, #28
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 8001342:	79fa      	ldrb	r2, [r7, #7]
 8001344:	4932      	ldr	r1, [pc, #200]	; (8001410 <HCSR04_Init+0x2f0>)
 8001346:	4613      	mov	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4413      	add	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	3308      	adds	r3, #8
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10a      	bne.n	800136e <HCSR04_Init+0x24e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	492d      	ldr	r1, [pc, #180]	; (8001410 <HCSR04_Init+0x2f0>)
 800135c:	4613      	mov	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136c:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 800136e:	79fa      	ldrb	r2, [r7, #7]
 8001370:	4920      	ldr	r1, [pc, #128]	; (80013f4 <HCSR04_Init+0x2d4>)
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	440b      	add	r3, r1
 800137c:	330c      	adds	r3, #12
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10a      	bne.n	800139a <HCSR04_Init+0x27a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8001384:	79fa      	ldrb	r2, [r7, #7]
 8001386:	4922      	ldr	r1, [pc, #136]	; (8001410 <HCSR04_Init+0x2f0>)
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	3320      	adds	r3, #32
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e051      	b.n	800143e <HCSR04_Init+0x31e>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	4915      	ldr	r1, [pc, #84]	; (80013f4 <HCSR04_Init+0x2d4>)
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	330c      	adds	r3, #12
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d10a      	bne.n	80013c6 <HCSR04_Init+0x2a6>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	4917      	ldr	r1, [pc, #92]	; (8001410 <HCSR04_Init+0x2f0>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	3320      	adds	r3, #32
 80013c0:	2202      	movs	r2, #2
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e03b      	b.n	800143e <HCSR04_Init+0x31e>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 80013c6:	79fa      	ldrb	r2, [r7, #7]
 80013c8:	490a      	ldr	r1, [pc, #40]	; (80013f4 <HCSR04_Init+0x2d4>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	330c      	adds	r3, #12
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d11b      	bne.n	8001414 <HCSR04_Init+0x2f4>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	490c      	ldr	r1, [pc, #48]	; (8001410 <HCSR04_Init+0x2f0>)
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	3320      	adds	r3, #32
 80013ec:	2204      	movs	r2, #4
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	e025      	b.n	800143e <HCSR04_Init+0x31e>
 80013f2:	bf00      	nop
 80013f4:	08009f34 	.word	0x08009f34
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40021000 	.word	0x40021000
 8001410:	200000a4 	.word	0x200000a4
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 8001414:	79fa      	ldrb	r2, [r7, #7]
 8001416:	493f      	ldr	r1, [pc, #252]	; (8001514 <HCSR04_Init+0x3f4>)
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	330c      	adds	r3, #12
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b0c      	cmp	r3, #12
 8001428:	d109      	bne.n	800143e <HCSR04_Init+0x31e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 800142a:	79fa      	ldrb	r2, [r7, #7]
 800142c:	493a      	ldr	r1, [pc, #232]	; (8001518 <HCSR04_Init+0x3f8>)
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3320      	adds	r3, #32
 800143a:	2208      	movs	r2, #8
 800143c:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	4934      	ldr	r1, [pc, #208]	; (8001514 <HCSR04_Init+0x3f4>)
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	3308      	adds	r3, #8
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	4930      	ldr	r1, [pc, #192]	; (8001518 <HCSR04_Init+0x3f8>)
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	3304      	adds	r3, #4
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	4929      	ldr	r1, [pc, #164]	; (8001518 <HCSR04_Init+0x3f8>)
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	3308      	adds	r3, #8
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
	//TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 8001492:	6838      	ldr	r0, [r7, #0]
 8001494:	f003 f92a 	bl	80046ec <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 800149e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014a2:	4619      	mov	r1, r3
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f003 ff11 	bl	80052cc <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 80014aa:	6838      	ldr	r0, [r7, #0]
 80014ac:	f003 fb34 	bl	8004b18 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80014b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014bc:	4619      	mov	r1, r3
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f004 fc18 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	623b      	str	r3, [r7, #32]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigIC.ICFilter = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80014d4:	79fa      	ldrb	r2, [r7, #7]
 80014d6:	490f      	ldr	r1, [pc, #60]	; (8001514 <HCSR04_Init+0x3f4>)
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	330c      	adds	r3, #12
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	6838      	ldr	r0, [r7, #0]
 80014ee:	f003 fd8f 	bl	8005010 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	//HAL_TIM_Base_Start_IT(TMR_Handle);
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <HCSR04_Init+0x3f4>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	330c      	adds	r3, #12
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	6838      	ldr	r0, [r7, #0]
 8001508:	f003 fb60 	bl	8004bcc <HAL_TIM_IC_Start_IT>
}
 800150c:	bf00      	nop
 800150e:	3758      	adds	r7, #88	; 0x58
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	08009f34 	.word	0x08009f34
 8001518:	200000a4 	.word	0x200000a4

0800151c <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e023      	b.n	8001576 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	4815      	ldr	r0, [pc, #84]	; (800158c <HCSR04_TMR_OVF_ISR+0x70>)
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4403      	add	r3, r0
 8001540:	3308      	adds	r3, #8
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4299      	cmp	r1, r3
 8001546:	d113      	bne.n	8001570 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	4911      	ldr	r1, [pc, #68]	; (8001590 <HCSR04_TMR_OVF_ISR+0x74>)
 800154c:	4613      	mov	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3302      	adds	r3, #2
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	b298      	uxth	r0, r3
 800155e:	490c      	ldr	r1, [pc, #48]	; (8001590 <HCSR04_TMR_OVF_ISR+0x74>)
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3302      	adds	r3, #2
 800156c:	4602      	mov	r2, r0
 800156e:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	3301      	adds	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0d8      	beq.n	800152e <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	08009f34 	.word	0x08009f34
 8001590:	200000a4 	.word	0x200000a4
 8001594:	00000000 	.word	0x00000000

08001598 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e230      	b.n	8001a10 <HCSR04_TMR_IC_ISR+0x478>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance)/* && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH)*/)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6819      	ldr	r1, [r3, #0]
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	489c      	ldr	r0, [pc, #624]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4403      	add	r3, r0
 80015c0:	3308      	adds	r3, #8
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4299      	cmp	r1, r3
 80015c6:	f040 8220 	bne.w	8001a0a <HCSR04_TMR_IC_ISR+0x472>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	4997      	ldr	r1, [pc, #604]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 80b3 	bne.w	8001746 <HCSR04_TMR_IC_ISR+0x1ae>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	4991      	ldr	r1, [pc, #580]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	330c      	adds	r3, #12
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	7bfc      	ldrb	r4, [r7, #15]
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f003 ff30 	bl	800545c <HAL_TIM_ReadCapturedValue>
 80015fc:	4602      	mov	r2, r0
 80015fe:	498b      	ldr	r1, [pc, #556]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 8001600:	4623      	mov	r3, r4
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4423      	add	r3, r4
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	330c      	adds	r3, #12
 800160c:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	4986      	ldr	r1, [pc, #536]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
				//gs_HCSR04_info[i].T1 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	4981      	ldr	r1, [pc, #516]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	330c      	adds	r3, #12
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d108      	bne.n	8001648 <HCSR04_TMR_IC_ISR+0xb0>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 020a 	bic.w	r2, r2, #10
 8001644:	621a      	str	r2, [r3, #32]
 8001646:	e02f      	b.n	80016a8 <HCSR04_TMR_IC_ISR+0x110>
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	4977      	ldr	r1, [pc, #476]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	330c      	adds	r3, #12
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b04      	cmp	r3, #4
 800165c:	d108      	bne.n	8001670 <HCSR04_TMR_IC_ISR+0xd8>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	e01b      	b.n	80016a8 <HCSR04_TMR_IC_ISR+0x110>
 8001670:	7bfa      	ldrb	r2, [r7, #15]
 8001672:	496d      	ldr	r1, [pc, #436]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	330c      	adds	r3, #12
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b08      	cmp	r3, #8
 8001684:	d108      	bne.n	8001698 <HCSR04_TMR_IC_ISR+0x100>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	e007      	b.n	80016a8 <HCSR04_TMR_IC_ISR+0x110>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	495f      	ldr	r1, [pc, #380]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	330c      	adds	r3, #12
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d108      	bne.n	80016d0 <HCSR04_TMR_IC_ISR+0x138>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6a1a      	ldr	r2, [r3, #32]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0202 	orr.w	r2, r2, #2
 80016cc:	621a      	str	r2, [r3, #32]
 80016ce:	e02f      	b.n	8001730 <HCSR04_TMR_IC_ISR+0x198>
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	4955      	ldr	r1, [pc, #340]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	330c      	adds	r3, #12
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d108      	bne.n	80016f8 <HCSR04_TMR_IC_ISR+0x160>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	f043 0320 	orr.w	r3, r3, #32
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	e01b      	b.n	8001730 <HCSR04_TMR_IC_ISR+0x198>
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	494b      	ldr	r1, [pc, #300]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	330c      	adds	r3, #12
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b08      	cmp	r3, #8
 800170c:	d108      	bne.n	8001720 <HCSR04_TMR_IC_ISR+0x188>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171c:	6213      	str	r3, [r2, #32]
 800171e:	e007      	b.n	8001730 <HCSR04_TMR_IC_ISR+0x198>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800172e:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8001730:	7bfa      	ldrb	r2, [r7, #15]
 8001732:	493e      	ldr	r1, [pc, #248]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 8001734:	4613      	mov	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	3302      	adds	r3, #2
 8001740:	2200      	movs	r2, #0
 8001742:	801a      	strh	r2, [r3, #0]
 8001744:	e161      	b.n	8001a0a <HCSR04_TMR_IC_ISR+0x472>
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	4938      	ldr	r1, [pc, #224]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	f040 8157 	bne.w	8001a0a <HCSR04_TMR_IC_ISR+0x472>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	4932      	ldr	r1, [pc, #200]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	3308      	adds	r3, #8
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 8001772:	7bfa      	ldrb	r2, [r7, #15]
 8001774:	492c      	ldr	r1, [pc, #176]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	3308      	adds	r3, #8
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001788:	4828      	ldr	r0, [pc, #160]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4403      	add	r3, r0
 8001794:	3308      	adds	r3, #8
 8001796:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	4923      	ldr	r1, [pc, #140]	; (8001828 <HCSR04_TMR_IC_ISR+0x290>)
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	330c      	adds	r3, #12
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	7bfc      	ldrb	r4, [r7, #15]
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f003 fe54 	bl	800545c <HAL_TIM_ReadCapturedValue>
 80017b4:	4602      	mov	r2, r0
 80017b6:	491d      	ldr	r1, [pc, #116]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 80017b8:	4623      	mov	r3, r4
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4423      	add	r3, r4
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3310      	adds	r3, #16
 80017c4:	601a      	str	r2, [r3, #0]
				//gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
				//gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
				if(gs_HCSR04_info[i].T2 > gs_HCSR04_info[i].T1)
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	4918      	ldr	r1, [pc, #96]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	3310      	adds	r3, #16
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	4814      	ldr	r0, [pc, #80]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4403      	add	r3, r0
 80017e6:	330c      	adds	r3, #12
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4299      	cmp	r1, r3
 80017ec:	d920      	bls.n	8001830 <HCSR04_TMR_IC_ISR+0x298>
				{
					gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	490e      	ldr	r1, [pc, #56]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3310      	adds	r3, #16
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	480a      	ldr	r0, [pc, #40]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4403      	add	r3, r0
 800180e:	330c      	adds	r3, #12
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	1ac9      	subs	r1, r1, r3
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <HCSR04_TMR_IC_ISR+0x294>)
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4403      	add	r3, r0
 8001822:	3314      	adds	r3, #20
 8001824:	6019      	str	r1, [r3, #0]
 8001826:	e022      	b.n	800186e <HCSR04_TMR_IC_ISR+0x2d6>
 8001828:	08009f34 	.word	0x08009f34
 800182c:	200000a4 	.word	0x200000a4
				}
				else
				{
					gs_HCSR04_info[i].DIFF = (0xffff-gs_HCSR04_info[i].T1) + gs_HCSR04_info[i].T2;
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	497f      	ldr	r1, [pc, #508]	; (8001a30 <HCSR04_TMR_IC_ISR+0x498>)
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3310      	adds	r3, #16
 8001840:	6819      	ldr	r1, [r3, #0]
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	487a      	ldr	r0, [pc, #488]	; (8001a30 <HCSR04_TMR_IC_ISR+0x498>)
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4403      	add	r3, r0
 8001850:	330c      	adds	r3, #12
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	1acb      	subs	r3, r1, r3
 8001856:	7bf9      	ldrb	r1, [r7, #15]
 8001858:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
 800185c:	32ff      	adds	r2, #255	; 0xff
 800185e:	4874      	ldr	r0, [pc, #464]	; (8001a30 <HCSR04_TMR_IC_ISR+0x498>)
 8001860:	460b      	mov	r3, r1
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4403      	add	r3, r0
 800186a:	3314      	adds	r3, #20
 800186c:	601a      	str	r2, [r3, #0]
				}
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	496f      	ldr	r1, [pc, #444]	; (8001a30 <HCSR04_TMR_IC_ISR+0x498>)
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3314      	adds	r3, #20
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fdef 	bl	8000464 <__aeabi_ui2d>
 8001886:	a368      	add	r3, pc, #416	; (adr r3, 8001a28 <HCSR04_TMR_IC_ISR+0x490>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe fe64 	bl	8000558 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4614      	mov	r4, r2
 8001896:	461d      	mov	r5, r3
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	4966      	ldr	r1, [pc, #408]	; (8001a34 <HCSR04_TMR_IC_ISR+0x49c>)
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	3310      	adds	r3, #16
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3301      	adds	r3, #1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fdd6 	bl	8000464 <__aeabi_ui2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe ff74 	bl	80007ac <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	7bfc      	ldrb	r4, [r7, #15]
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f875 	bl	80009bc <__aeabi_d2f>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4956      	ldr	r1, [pc, #344]	; (8001a30 <HCSR04_TMR_IC_ISR+0x498>)
 80018d6:	4623      	mov	r3, r4
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4423      	add	r3, r4
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3318      	adds	r3, #24
 80018e2:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	4952      	ldr	r1, [pc, #328]	; (8001a30 <HCSR04_TMR_IC_ISR+0x498>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
				gs_HCSR04_info[i].TMR_OVC = 0;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	494d      	ldr	r1, [pc, #308]	; (8001a30 <HCSR04_TMR_IC_ISR+0x498>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3302      	adds	r3, #2
 8001906:	2200      	movs	r2, #0
 8001908:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	4949      	ldr	r1, [pc, #292]	; (8001a34 <HCSR04_TMR_IC_ISR+0x49c>)
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	330c      	adds	r3, #12
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d108      	bne.n	8001932 <HCSR04_TMR_IC_ISR+0x39a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a1a      	ldr	r2, [r3, #32]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 020a 	bic.w	r2, r2, #10
 800192e:	621a      	str	r2, [r3, #32]
 8001930:	e02f      	b.n	8001992 <HCSR04_TMR_IC_ISR+0x3fa>
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	493f      	ldr	r1, [pc, #252]	; (8001a34 <HCSR04_TMR_IC_ISR+0x49c>)
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	330c      	adds	r3, #12
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d108      	bne.n	800195a <HCSR04_TMR_IC_ISR+0x3c2>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001956:	6213      	str	r3, [r2, #32]
 8001958:	e01b      	b.n	8001992 <HCSR04_TMR_IC_ISR+0x3fa>
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	4935      	ldr	r1, [pc, #212]	; (8001a34 <HCSR04_TMR_IC_ISR+0x49c>)
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	330c      	adds	r3, #12
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d108      	bne.n	8001982 <HCSR04_TMR_IC_ISR+0x3ea>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	e007      	b.n	8001992 <HCSR04_TMR_IC_ISR+0x3fa>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001990:	6213      	str	r3, [r2, #32]
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	4927      	ldr	r1, [pc, #156]	; (8001a34 <HCSR04_TMR_IC_ISR+0x49c>)
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	330c      	adds	r3, #12
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d106      	bne.n	80019b6 <HCSR04_TMR_IC_ISR+0x41e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a12      	ldr	r2, [r2, #32]
 80019b2:	621a      	str	r2, [r3, #32]
 80019b4:	e029      	b.n	8001a0a <HCSR04_TMR_IC_ISR+0x472>
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	491e      	ldr	r1, [pc, #120]	; (8001a34 <HCSR04_TMR_IC_ISR+0x49c>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	330c      	adds	r3, #12
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d106      	bne.n	80019da <HCSR04_TMR_IC_ISR+0x442>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e017      	b.n	8001a0a <HCSR04_TMR_IC_ISR+0x472>
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	4915      	ldr	r1, [pc, #84]	; (8001a34 <HCSR04_TMR_IC_ISR+0x49c>)
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	330c      	adds	r3, #12
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d106      	bne.n	80019fe <HCSR04_TMR_IC_ISR+0x466>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e005      	b.n	8001a0a <HCSR04_TMR_IC_ISR+0x472>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f43f adcb 	beq.w	80015ae <HCSR04_TMR_IC_ISR+0x16>
				//HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
				//HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
			}
		}
	}
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bdb0      	pop	{r4, r5, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	f3af 8000 	nop.w
 8001a28:	b020c49c 	.word	0xb020c49c
 8001a2c:	3f916872 	.word	0x3f916872
 8001a30:	200000a4 	.word	0x200000a4
 8001a34:	08009f34 	.word	0x08009f34

08001a38 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 8001a42:	79fa      	ldrb	r2, [r7, #7]
 8001a44:	4908      	ldr	r1, [pc, #32]	; (8001a68 <HCSR04_Read+0x30>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	3318      	adds	r3, #24
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	ee07 3a90 	vmov	s15, r3
}
 8001a58:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	200000a4 	.word	0x200000a4

08001a6c <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	//__HAL_TIM_SET_COUNTER(gs_HCSR04_info[au8_HCSR04_Instance].HTIM, 0);
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	4917      	ldr	r1, [pc, #92]	; (8001ad8 <HCSR04_Trigger+0x6c>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	4913      	ldr	r1, [pc, #76]	; (8001ad8 <HCSR04_Trigger+0x6c>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3304      	adds	r3, #4
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f002 f96a 	bl	8003d74 <HAL_GPIO_WritePin>
	//HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
	//HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
	//DWT_Delay_us(2);
	DWT_Delay_us(10);
 8001aa0:	200a      	movs	r0, #10
 8001aa2:	f7ff fb19 	bl	80010d8 <DWT_Delay_us>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 8001aa6:	79fa      	ldrb	r2, [r7, #7]
 8001aa8:	490b      	ldr	r1, [pc, #44]	; (8001ad8 <HCSR04_Trigger+0x6c>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	79fa      	ldrb	r2, [r7, #7]
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <HCSR04_Trigger+0x6c>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4619      	mov	r1, r3
 8001acc:	f002 f952 	bl	8003d74 <HAL_GPIO_WritePin>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	08009f34 	.word	0x08009f34

08001adc <DWT_Delay_Init>:


#include "stm32f4xx_hal.h"
//uint32_t DWT_Delay_Init(void);
__STATIC_INLINE uint32_t DWT_Delay_Init(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <DWT_Delay_Init+0x58>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <DWT_Delay_Init+0x58>)
 8001ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aea:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <DWT_Delay_Init+0x58>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <DWT_Delay_Init+0x58>)
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af6:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <DWT_Delay_Init+0x5c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <DWT_Delay_Init+0x5c>)
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <DWT_Delay_Init+0x5c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <DWT_Delay_Init+0x5c>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <DWT_Delay_Init+0x5c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001b16:	bf00      	nop
    __ASM volatile ("NOP");
 8001b18:	bf00      	nop
    __ASM volatile ("NOP");
 8001b1a:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <DWT_Delay_Init+0x5c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001b24:	2300      	movs	r3, #0
 8001b26:	e000      	b.n	8001b2a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001b28:	2301      	movs	r3, #1
    }
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000edf0 	.word	0xe000edf0
 8001b38:	e0001000 	.word	0xe0001000

08001b3c <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8001b3c:	b5b0      	push	{r4, r5, r7, lr}
 8001b3e:	b0b2      	sub	sp, #200	; 0xc8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t ARR_Value = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    DWT_Delay_Init();
 8001b8e:	f7ff ffa5 	bl	8001adc <DWT_Delay_Init>

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOA)
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	4a95      	ldr	r2, [pc, #596]	; (8001dec <SERVO_Init+0x2b0>)
 8001b96:	015b      	lsls	r3, r3, #5
 8001b98:	4413      	add	r3, r2
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a94      	ldr	r2, [pc, #592]	; (8001df0 <SERVO_Init+0x2b4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10e      	bne.n	8001bc0 <SERVO_Init+0x84>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba6:	4b93      	ldr	r3, [pc, #588]	; (8001df4 <SERVO_Init+0x2b8>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a92      	ldr	r2, [pc, #584]	; (8001df4 <SERVO_Init+0x2b8>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b90      	ldr	r3, [pc, #576]	; (8001df4 <SERVO_Init+0x2b8>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbe:	e05a      	b.n	8001c76 <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOB)
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	4a8a      	ldr	r2, [pc, #552]	; (8001dec <SERVO_Init+0x2b0>)
 8001bc4:	015b      	lsls	r3, r3, #5
 8001bc6:	4413      	add	r3, r2
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a8b      	ldr	r2, [pc, #556]	; (8001df8 <SERVO_Init+0x2bc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d10e      	bne.n	8001bee <SERVO_Init+0xb2>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd4:	4b87      	ldr	r3, [pc, #540]	; (8001df4 <SERVO_Init+0x2b8>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4a86      	ldr	r2, [pc, #536]	; (8001df4 <SERVO_Init+0x2b8>)
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	6313      	str	r3, [r2, #48]	; 0x30
 8001be0:	4b84      	ldr	r3, [pc, #528]	; (8001df4 <SERVO_Init+0x2b8>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bec:	e043      	b.n	8001c76 <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOC)
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	4a7e      	ldr	r2, [pc, #504]	; (8001dec <SERVO_Init+0x2b0>)
 8001bf2:	015b      	lsls	r3, r3, #5
 8001bf4:	4413      	add	r3, r2
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a80      	ldr	r2, [pc, #512]	; (8001dfc <SERVO_Init+0x2c0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10e      	bne.n	8001c1c <SERVO_Init+0xe0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
 8001c02:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <SERVO_Init+0x2b8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a7b      	ldr	r2, [pc, #492]	; (8001df4 <SERVO_Init+0x2b8>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b79      	ldr	r3, [pc, #484]	; (8001df4 <SERVO_Init+0x2b8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	e02c      	b.n	8001c76 <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOD)
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	4a73      	ldr	r2, [pc, #460]	; (8001dec <SERVO_Init+0x2b0>)
 8001c20:	015b      	lsls	r3, r3, #5
 8001c22:	4413      	add	r3, r2
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a76      	ldr	r2, [pc, #472]	; (8001e00 <SERVO_Init+0x2c4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d10e      	bne.n	8001c4a <SERVO_Init+0x10e>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <SERVO_Init+0x2b8>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a6f      	ldr	r2, [pc, #444]	; (8001df4 <SERVO_Init+0x2b8>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <SERVO_Init+0x2b8>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	e015      	b.n	8001c76 <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOE)
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	4a67      	ldr	r2, [pc, #412]	; (8001dec <SERVO_Init+0x2b0>)
 8001c4e:	015b      	lsls	r3, r3, #5
 8001c50:	4413      	add	r3, r2
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a6b      	ldr	r2, [pc, #428]	; (8001e04 <SERVO_Init+0x2c8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10d      	bne.n	8001c76 <SERVO_Init+0x13a>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <SERVO_Init+0x2b8>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a64      	ldr	r2, [pc, #400]	; (8001df4 <SERVO_Init+0x2b8>)
 8001c64:	f043 0310 	orr.w	r3, r3, #16
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b62      	ldr	r3, [pc, #392]	; (8001df4 <SERVO_Init+0x2b8>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam[au16_SERVO_Instance].SERVO_PIN;
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	4a5c      	ldr	r2, [pc, #368]	; (8001dec <SERVO_Init+0x2b0>)
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3304      	adds	r3, #4
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	//HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	4a55      	ldr	r2, [pc, #340]	; (8001dec <SERVO_Init+0x2b0>)
 8001c96:	015b      	lsls	r3, r3, #5
 8001c98:	4413      	add	r3, r2
 8001c9a:	3314      	adds	r3, #20
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fbe0 	bl	8000464 <__aeabi_ui2d>
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b57      	ldr	r3, [pc, #348]	; (8001e08 <SERVO_Init+0x2cc>)
 8001caa:	f7fe fd7f 	bl	80007ac <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe fe61 	bl	800097c <__aeabi_d2uiz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	4a4a      	ldr	r2, [pc, #296]	; (8001dec <SERVO_Init+0x2b0>)
 8001cc4:	015b      	lsls	r3, r3, #5
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3314      	adds	r3, #20
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fbc9 	bl	8000464 <__aeabi_ui2d>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	460d      	mov	r5, r1
 8001cd6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001cda:	f7fe fbc3 	bl	8000464 <__aeabi_ui2d>
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <SERVO_Init+0x2d0>)
 8001ce4:	f7fe fa82 	bl	80001ec <__adddf3>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <SERVO_Init+0x2d4>)
 8001cf6:	f7fe fc2f 	bl	8000558 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe fd53 	bl	80007ac <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <SERVO_Init+0x2d0>)
 8001d14:	f7fe fa68 	bl	80001e8 <__aeabi_dsub>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe fe2c 	bl	800097c <__aeabi_d2uiz>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	4a2f      	ldr	r2, [pc, #188]	; (8001dec <SERVO_Init+0x2b0>)
 8001d2e:	015b      	lsls	r3, r3, #5
 8001d30:	4413      	add	r3, r2
 8001d32:	3308      	adds	r3, #8
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <SERVO_Init+0x2d8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d10e      	bne.n	8001d5a <SERVO_Init+0x21e>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <SERVO_Init+0x2b8>)
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	4a2b      	ldr	r2, [pc, #172]	; (8001df4 <SERVO_Init+0x2b8>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <SERVO_Init+0x2b8>)
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	e079      	b.n	8001e4e <SERVO_Init+0x312>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4a23      	ldr	r2, [pc, #140]	; (8001dec <SERVO_Init+0x2b0>)
 8001d5e:	015b      	lsls	r3, r3, #5
 8001d60:	4413      	add	r3, r2
 8001d62:	3308      	adds	r3, #8
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6a:	d10e      	bne.n	8001d8a <SERVO_Init+0x24e>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <SERVO_Init+0x2b8>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <SERVO_Init+0x2b8>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <SERVO_Init+0x2b8>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	e061      	b.n	8001e4e <SERVO_Init+0x312>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	4a17      	ldr	r2, [pc, #92]	; (8001dec <SERVO_Init+0x2b0>)
 8001d8e:	015b      	lsls	r3, r3, #5
 8001d90:	4413      	add	r3, r2
 8001d92:	3308      	adds	r3, #8
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <SERVO_Init+0x2dc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d10e      	bne.n	8001dba <SERVO_Init+0x27e>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <SERVO_Init+0x2b8>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <SERVO_Init+0x2b8>)
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <SERVO_Init+0x2b8>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	e049      	b.n	8001e4e <SERVO_Init+0x312>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <SERVO_Init+0x2b0>)
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <SERVO_Init+0x2e0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d129      	bne.n	8001e20 <SERVO_Init+0x2e4>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <SERVO_Init+0x2b8>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <SERVO_Init+0x2b8>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6413      	str	r3, [r2, #64]	; 0x40
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SERVO_Init+0x2b8>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	e031      	b.n	8001e4e <SERVO_Init+0x312>
 8001dea:	bf00      	nop
 8001dec:	08009f48 	.word	0x08009f48
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	41490000 	.word	0x41490000
 8001e0c:	3ff00000 	.word	0x3ff00000
 8001e10:	40490000 	.word	0x40490000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40000800 	.word	0x40000800
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM11)
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	4a61      	ldr	r2, [pc, #388]	; (8001fa8 <SERVO_Init+0x46c>)
 8001e24:	015b      	lsls	r3, r3, #5
 8001e26:	4413      	add	r3, r2
 8001e28:	3308      	adds	r3, #8
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a5f      	ldr	r2, [pc, #380]	; (8001fac <SERVO_Init+0x470>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d10d      	bne.n	8001e4e <SERVO_Init+0x312>
	{
		__HAL_RCC_TIM11_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b5e      	ldr	r3, [pc, #376]	; (8001fb0 <SERVO_Init+0x474>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a5d      	ldr	r2, [pc, #372]	; (8001fb0 <SERVO_Init+0x474>)
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b5b      	ldr	r3, [pc, #364]	; (8001fb0 <SERVO_Init+0x474>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	4a55      	ldr	r2, [pc, #340]	; (8001fa8 <SERVO_Init+0x46c>)
 8001e52:	015b      	lsls	r3, r3, #5
 8001e54:	4413      	add	r3, r2
 8001e56:	3308      	adds	r3, #8
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.Prescaler = PSC_Value;
 8001e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e62:	2300      	movs	r3, #0
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.Period = ARR_Value;
 8001e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	643b      	str	r3, [r7, #64]	; 0x40
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_TIM_Base_Init(&htim);
 8001e74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f002 fc37 	bl	80046ec <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8001e86:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fa1b 	bl	80052cc <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8001e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fcd8 	bl	8004850 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001eac:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001eb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 ff1c 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ebc:	2360      	movs	r3, #96	; 0x60
 8001ebe:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.Pulse = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	4a35      	ldr	r2, [pc, #212]	; (8001fa8 <SERVO_Init+0x46c>)
 8001ed4:	015b      	lsls	r3, r3, #5
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3310      	adds	r3, #16
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001ee0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f92f 	bl	8005148 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 8001eea:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001eee:	f7fe fab9 	bl	8000464 <__aeabi_ui2d>
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	460d      	mov	r5, r1
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <SERVO_Init+0x46c>)
 8001efa:	015b      	lsls	r3, r3, #5
 8001efc:	4413      	add	r3, r2
 8001efe:	3318      	adds	r3, #24
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fad0 	bl	80004a8 <__aeabi_f2d>
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <SERVO_Init+0x478>)
 8001f0e:	f7fe fc4d 	bl	80007ac <__aeabi_ddiv>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4620      	mov	r0, r4
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f7fe fb1d 	bl	8000558 <__aeabi_dmul>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	88fc      	ldrh	r4, [r7, #6]
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fd28 	bl	800097c <__aeabi_d2uiz>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <SERVO_Init+0x47c>)
 8001f32:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 8001f36:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001f3a:	f7fe fa93 	bl	8000464 <__aeabi_ui2d>
 8001f3e:	4604      	mov	r4, r0
 8001f40:	460d      	mov	r5, r1
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <SERVO_Init+0x46c>)
 8001f46:	015b      	lsls	r3, r3, #5
 8001f48:	4413      	add	r3, r2
 8001f4a:	331c      	adds	r3, #28
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe faaa 	bl	80004a8 <__aeabi_f2d>
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <SERVO_Init+0x478>)
 8001f5a:	f7fe fc27 	bl	80007ac <__aeabi_ddiv>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4620      	mov	r0, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	f7fe faf7 	bl	8000558 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	88fc      	ldrh	r4, [r7, #6]
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f7fe fd02 	bl	800097c <__aeabi_d2uiz>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	b299      	uxth	r1, r3
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <SERVO_Init+0x47c>)
 8001f7e:	00a3      	lsls	r3, r4, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	460a      	mov	r2, r1
 8001f84:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <SERVO_Init+0x46c>)
 8001f8a:	015b      	lsls	r3, r3, #5
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3310      	adds	r3, #16
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 fca9 	bl	80048f0 <HAL_TIM_PWM_Start>
}
 8001f9e:	bf00      	nop
 8001fa0:	37c8      	adds	r7, #200	; 0xc8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	08009f48 	.word	0x08009f48
 8001fac:	40014800 	.word	0x40014800
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40340000 	.word	0x40340000
 8001fb8:	200000c8 	.word	0x200000c8

08001fbc <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 8001fbc:	b5b0      	push	{r4, r5, r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	ed87 0a00 	vstr	s0, [r7]
 8001fc8:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <SERVO_MoveTo+0x94>)
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	885b      	ldrh	r3, [r3, #2]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <SERVO_MoveTo+0x94>)
 8001fde:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001fe2:	1acb      	subs	r3, r1, r3
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fec:	edd7 7a00 	vldr	s15, [r7]
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff4:	ee17 0a90 	vmov	r0, s15
 8001ff8:	f7fe fa56 	bl	80004a8 <__aeabi_f2d>
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <SERVO_MoveTo+0x98>)
 8002002:	f7fe fbd3 	bl	80007ac <__aeabi_ddiv>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4614      	mov	r4, r2
 800200c:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <SERVO_MoveTo+0x94>)
 8002012:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa34 	bl	8000484 <__aeabi_i2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4620      	mov	r0, r4
 8002022:	4629      	mov	r1, r5
 8002024:	f7fe f8e2 	bl	80001ec <__adddf3>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fca4 	bl	800097c <__aeabi_d2uiz>
 8002034:	4603      	mov	r3, r0
 8002036:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <SERVO_MoveTo+0x9c>)
 800203c:	015b      	lsls	r3, r3, #5
 800203e:	4413      	add	r3, r2
 8002040:	330c      	adds	r3, #12
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	89fa      	ldrh	r2, [r7, #14]
 8002046:	601a      	str	r2, [r3, #0]
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bdb0      	pop	{r4, r5, r7, pc}
 8002050:	200000c8 	.word	0x200000c8
 8002054:	40668000 	.word	0x40668000
 8002058:	08009f48 	.word	0x08009f48

0800205c <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of motorQueue */
	motorQueueHandle = osMessageQueueNew (16, sizeof(motorControl_t), &motorQueue_attributes);
 8002060:	4a24      	ldr	r2, [pc, #144]	; (80020f4 <MX_FREERTOS_Init+0x98>)
 8002062:	2106      	movs	r1, #6
 8002064:	2010      	movs	r0, #16
 8002066:	f005 f87a 	bl	800715e <osMessageQueueNew>
 800206a:	4603      	mov	r3, r0
 800206c:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <MX_FREERTOS_Init+0x9c>)
 800206e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of motorTask */
	motorTaskHandle = osThreadNew(StartmotorTask, NULL, &motorTask_attributes);
 8002070:	4a22      	ldr	r2, [pc, #136]	; (80020fc <MX_FREERTOS_Init+0xa0>)
 8002072:	2100      	movs	r1, #0
 8002074:	4822      	ldr	r0, [pc, #136]	; (8002100 <MX_FREERTOS_Init+0xa4>)
 8002076:	f004 ffc5 	bl	8007004 <osThreadNew>
 800207a:	4603      	mov	r3, r0
 800207c:	4a21      	ldr	r2, [pc, #132]	; (8002104 <MX_FREERTOS_Init+0xa8>)
 800207e:	6013      	str	r3, [r2, #0]

	/* creation of ACCTask */
	ACCTaskHandle = osThreadNew(StartACCTask, NULL, &ACCTask_attributes);
 8002080:	4a21      	ldr	r2, [pc, #132]	; (8002108 <MX_FREERTOS_Init+0xac>)
 8002082:	2100      	movs	r1, #0
 8002084:	4821      	ldr	r0, [pc, #132]	; (800210c <MX_FREERTOS_Init+0xb0>)
 8002086:	f004 ffbd 	bl	8007004 <osThreadNew>
 800208a:	4603      	mov	r3, r0
 800208c:	4a20      	ldr	r2, [pc, #128]	; (8002110 <MX_FREERTOS_Init+0xb4>)
 800208e:	6013      	str	r3, [r2, #0]

	/* creation of NormalModeTask */
	NormalModeTaskHandle = osThreadNew(StartNormalMode, NULL, &NormalModeTask_attributes);
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <MX_FREERTOS_Init+0xb8>)
 8002092:	2100      	movs	r1, #0
 8002094:	4820      	ldr	r0, [pc, #128]	; (8002118 <MX_FREERTOS_Init+0xbc>)
 8002096:	f004 ffb5 	bl	8007004 <osThreadNew>
 800209a:	4603      	mov	r3, r0
 800209c:	4a1f      	ldr	r2, [pc, #124]	; (800211c <MX_FREERTOS_Init+0xc0>)
 800209e:	6013      	str	r3, [r2, #0]

	/* creation of GUI_UpdateTask */
	GUI_UpdateTaskHandle = osThreadNew(StartGUI_UpdateTask, NULL, &GUI_UpdateTask_attributes);
 80020a0:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <MX_FREERTOS_Init+0xc4>)
 80020a2:	2100      	movs	r1, #0
 80020a4:	481f      	ldr	r0, [pc, #124]	; (8002124 <MX_FREERTOS_Init+0xc8>)
 80020a6:	f004 ffad 	bl	8007004 <osThreadNew>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <MX_FREERTOS_Init+0xcc>)
 80020ae:	6013      	str	r3, [r2, #0]

	/* creation of SelfDrivingTask */
	SelfDrivingTaskHandle = osThreadNew(StartSelfDrivingTask, NULL, &SelfDrivingTask_attributes);
 80020b0:	4a1e      	ldr	r2, [pc, #120]	; (800212c <MX_FREERTOS_Init+0xd0>)
 80020b2:	2100      	movs	r1, #0
 80020b4:	481e      	ldr	r0, [pc, #120]	; (8002130 <MX_FREERTOS_Init+0xd4>)
 80020b6:	f004 ffa5 	bl	8007004 <osThreadNew>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <MX_FREERTOS_Init+0xd8>)
 80020be:	6013      	str	r3, [r2, #0]

	/* creation of LDW_TASK */
	LDW_TASKHandle = osThreadNew(LaneDepartureWarning, NULL, &LDW_TASK_attributes);
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <MX_FREERTOS_Init+0xdc>)
 80020c2:	2100      	movs	r1, #0
 80020c4:	481d      	ldr	r0, [pc, #116]	; (800213c <MX_FREERTOS_Init+0xe0>)
 80020c6:	f004 ff9d 	bl	8007004 <osThreadNew>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <MX_FREERTOS_Init+0xe4>)
 80020ce:	6013      	str	r3, [r2, #0]

	/* creation of RainDetect_TASK */
	RainDetect_TASKHandle = osThreadNew(RainDetection, NULL, &RainDetect_TASK_attributes);
 80020d0:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <MX_FREERTOS_Init+0xe8>)
 80020d2:	2100      	movs	r1, #0
 80020d4:	481c      	ldr	r0, [pc, #112]	; (8002148 <MX_FREERTOS_Init+0xec>)
 80020d6:	f004 ff95 	bl	8007004 <osThreadNew>
 80020da:	4603      	mov	r3, r0
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <MX_FREERTOS_Init+0xf0>)
 80020de:	6013      	str	r3, [r2, #0]

	/* creation of LKA_TASK */
	LKA_TASKHandle = osThreadNew(LaneKeepAssist, NULL, &LKA_TASK_attributes);
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <MX_FREERTOS_Init+0xf4>)
 80020e2:	2100      	movs	r1, #0
 80020e4:	481b      	ldr	r0, [pc, #108]	; (8002154 <MX_FREERTOS_Init+0xf8>)
 80020e6:	f004 ff8d 	bl	8007004 <osThreadNew>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <MX_FREERTOS_Init+0xfc>)
 80020ee:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	0800a0a8 	.word	0x0800a0a8
 80020f8:	200000fc 	.word	0x200000fc
 80020fc:	08009f88 	.word	0x08009f88
 8002100:	0800215d 	.word	0x0800215d
 8002104:	200000dc 	.word	0x200000dc
 8002108:	08009fac 	.word	0x08009fac
 800210c:	08002195 	.word	0x08002195
 8002110:	200000e0 	.word	0x200000e0
 8002114:	08009fd0 	.word	0x08009fd0
 8002118:	08002349 	.word	0x08002349
 800211c:	200000e4 	.word	0x200000e4
 8002120:	08009ff4 	.word	0x08009ff4
 8002124:	08002491 	.word	0x08002491
 8002128:	200000e8 	.word	0x200000e8
 800212c:	0800a018 	.word	0x0800a018
 8002130:	080024c9 	.word	0x080024c9
 8002134:	200000ec 	.word	0x200000ec
 8002138:	0800a03c 	.word	0x0800a03c
 800213c:	08002659 	.word	0x08002659
 8002140:	200000f0 	.word	0x200000f0
 8002144:	0800a060 	.word	0x0800a060
 8002148:	08002779 	.word	0x08002779
 800214c:	200000f4 	.word	0x200000f4
 8002150:	0800a084 	.word	0x0800a084
 8002154:	080027f1 	.word	0x080027f1
 8002158:	200000f8 	.word	0x200000f8

0800215c <StartmotorTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartmotorTask */
void StartmotorTask(void *argument)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		motorControl_t motortask;
		uint8_t motortask_prio;
		if(osMessageQueueGet(motorQueueHandle, &motortask, &motortask_prio, 10) == osOK)
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <StartmotorTask+0x34>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f107 020f 	add.w	r2, r7, #15
 800216c:	f107 0110 	add.w	r1, r7, #16
 8002170:	230a      	movs	r3, #10
 8002172:	f005 f8c7 	bl	8007304 <osMessageQueueGet>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d104      	bne.n	8002186 <StartmotorTask+0x2a>
		  {
			  Motor1_SetSpeed(70);
			  Motor2_SetSpeed(70);
			  HAL_Delay(5);
		  }*/
			DCMotor_handleRequest(&motortask);
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fee5 	bl	8000f50 <DCMotor_handleRequest>
		}
		osDelay(10);
 8002186:	200a      	movs	r0, #10
 8002188:	f004 ffce 	bl	8007128 <osDelay>
	{
 800218c:	e7ea      	b.n	8002164 <StartmotorTask+0x8>
 800218e:	bf00      	nop
 8002190:	200000fc 	.word	0x200000fc

08002194 <StartACCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartACCTask */
void StartACCTask(void *argument)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	static double prev_distance;
	static double prev_distances[2];
	/* Infinite loop */
	for(;;)
	{
		if(Car_Current_Mode == ACC_MODE)
 800219c:	4b60      	ldr	r3, [pc, #384]	; (8002320 <StartACCTask+0x18c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b09      	cmp	r3, #9
 80021a2:	f040 80b7 	bne.w	8002314 <StartACCTask+0x180>
		{
			Distance = HCSR04_Read(HCSR04_SENSOR1);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7ff fc46 	bl	8001a38 <HCSR04_Read>
 80021ac:	eef0 7a40 	vmov.f32	s15, s0
 80021b0:	4b5c      	ldr	r3, [pc, #368]	; (8002324 <StartACCTask+0x190>)
 80021b2:	edc3 7a00 	vstr	s15, [r3]
			/*if(Distance == prev_distances[0] && Distance == prev_distances[1])
	  {
		  Distance = 9999.0;
	  }*/
			TRIG_Ticks++;
 80021b6:	4b5c      	ldr	r3, [pc, #368]	; (8002328 <StartACCTask+0x194>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	3301      	adds	r3, #1
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b5a      	ldr	r3, [pc, #360]	; (8002328 <StartACCTask+0x194>)
 80021c0:	701a      	strb	r2, [r3, #0]
			if(TRIG_Ticks >= 5)
 80021c2:	4b59      	ldr	r3, [pc, #356]	; (8002328 <StartACCTask+0x194>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d905      	bls.n	80021d6 <StartACCTask+0x42>
			{
				HCSR04_Trigger(HCSR04_SENSOR1);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7ff fc4e 	bl	8001a6c <HCSR04_Trigger>
				TRIG_Ticks = 0;
 80021d0:	4b55      	ldr	r3, [pc, #340]	; (8002328 <StartACCTask+0x194>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
				break;
			}
			}
#endif
#if 1
			if(Distance == 9999.0) continue;
 80021d6:	4b53      	ldr	r3, [pc, #332]	; (8002324 <StartACCTask+0x190>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800232c <StartACCTask+0x198>
 80021e0:	eef4 7a47 	vcmp.f32	s15, s14
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	f000 8098 	beq.w	800231c <StartACCTask+0x188>
			if(Distance > DISTANCE_1)
 80021ec:	4b4d      	ldr	r3, [pc, #308]	; (8002324 <StartACCTask+0x190>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002330 <StartACCTask+0x19c>
 80021f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	dd03      	ble.n	8002208 <StartACCTask+0x74>
			{
				DCMotor_moveForward(SPEED_1);
 8002200:	2064      	movs	r0, #100	; 0x64
 8002202:	f7fe fde5 	bl	8000dd0 <DCMotor_moveForward>
 8002206:	e06b      	b.n	80022e0 <StartACCTask+0x14c>
			}
			else if(Distance < DISTANCE_1 && Distance > DISTANCE_2)
 8002208:	4b46      	ldr	r3, [pc, #280]	; (8002324 <StartACCTask+0x190>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002330 <StartACCTask+0x19c>
 8002212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	d50d      	bpl.n	8002238 <StartACCTask+0xa4>
 800221c:	4b41      	ldr	r3, [pc, #260]	; (8002324 <StartACCTask+0x190>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002334 <StartACCTask+0x1a0>
 8002226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	dd03      	ble.n	8002238 <StartACCTask+0xa4>
			{
				DCMotor_moveForward(SPEED_2);
 8002230:	2050      	movs	r0, #80	; 0x50
 8002232:	f7fe fdcd 	bl	8000dd0 <DCMotor_moveForward>
 8002236:	e053      	b.n	80022e0 <StartACCTask+0x14c>
			}
			else if(Distance < DISTANCE_2 && Distance > DISTANCE_3)
 8002238:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <StartACCTask+0x190>)
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002334 <StartACCTask+0x1a0>
 8002242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224a:	d50d      	bpl.n	8002268 <StartACCTask+0xd4>
 800224c:	4b35      	ldr	r3, [pc, #212]	; (8002324 <StartACCTask+0x190>)
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002338 <StartACCTask+0x1a4>
 8002256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225e:	dd03      	ble.n	8002268 <StartACCTask+0xd4>
			{
				DCMotor_moveForward(SPEED_3);
 8002260:	203c      	movs	r0, #60	; 0x3c
 8002262:	f7fe fdb5 	bl	8000dd0 <DCMotor_moveForward>
 8002266:	e03b      	b.n	80022e0 <StartACCTask+0x14c>
			}
			else if(Distance < DISTANCE_3 && Distance > DISTANCE_4)
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <StartACCTask+0x190>)
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002338 <StartACCTask+0x1a4>
 8002272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	d50d      	bpl.n	8002298 <StartACCTask+0x104>
 800227c:	4b29      	ldr	r3, [pc, #164]	; (8002324 <StartACCTask+0x190>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800233c <StartACCTask+0x1a8>
 8002286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	dd03      	ble.n	8002298 <StartACCTask+0x104>
			{
				DCMotor_moveForward(SPEED_4);
 8002290:	2028      	movs	r0, #40	; 0x28
 8002292:	f7fe fd9d 	bl	8000dd0 <DCMotor_moveForward>
 8002296:	e023      	b.n	80022e0 <StartACCTask+0x14c>
			}
			else if(Distance < DISTANCE_4 && Distance > DISTANCE_5)
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <StartACCTask+0x190>)
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800233c <StartACCTask+0x1a8>
 80022a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	d50d      	bpl.n	80022c8 <StartACCTask+0x134>
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <StartACCTask+0x190>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80022b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	dd03      	ble.n	80022c8 <StartACCTask+0x134>
			{
				DCMotor_moveForward(SPEED_5);
 80022c0:	2014      	movs	r0, #20
 80022c2:	f7fe fd85 	bl	8000dd0 <DCMotor_moveForward>
 80022c6:	e00b      	b.n	80022e0 <StartACCTask+0x14c>
			}
			else if(Distance < DISTANCE_5)
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <StartACCTask+0x190>)
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80022d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	d501      	bpl.n	80022e0 <StartACCTask+0x14c>
			{
				DCMotor_stop();
 80022dc:	f7fe fd40 	bl	8000d60 <DCMotor_stop>
			}
#endif
			prev_distance = Distance;
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <StartACCTask+0x190>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f8df 	bl	80004a8 <__aeabi_f2d>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4914      	ldr	r1, [pc, #80]	; (8002340 <StartACCTask+0x1ac>)
 80022f0:	e9c1 2300 	strd	r2, r3, [r1]
			prev_distances[1] = prev_distances[0];
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <StartACCTask+0x1b0>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	4912      	ldr	r1, [pc, #72]	; (8002344 <StartACCTask+0x1b0>)
 80022fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			prev_distances[0] = Distance;
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <StartACCTask+0x190>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f8cf 	bl	80004a8 <__aeabi_f2d>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	490d      	ldr	r1, [pc, #52]	; (8002344 <StartACCTask+0x1b0>)
 8002310:	e9c1 2300 	strd	r2, r3, [r1]
			// ACC END
#endif
		}
		osDelay(20);
 8002314:	2014      	movs	r0, #20
 8002316:	f004 ff07 	bl	8007128 <osDelay>
 800231a:	e73f      	b.n	800219c <StartACCTask+0x8>
			if(Distance == 9999.0) continue;
 800231c:	bf00      	nop
		if(Car_Current_Mode == ACC_MODE)
 800231e:	e73d      	b.n	800219c <StartACCTask+0x8>
 8002320:	2000012c 	.word	0x2000012c
 8002324:	200000d0 	.word	0x200000d0
 8002328:	20000100 	.word	0x20000100
 800232c:	461c3c00 	.word	0x461c3c00
 8002330:	42a00000 	.word	0x42a00000
 8002334:	42820000 	.word	0x42820000
 8002338:	42480000 	.word	0x42480000
 800233c:	420c0000 	.word	0x420c0000
 8002340:	20000108 	.word	0x20000108
 8002344:	20000110 	.word	0x20000110

08002348 <StartNormalMode>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartNormalMode */
void StartNormalMode(void *argument)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartNormalMode */
	/* Infinite loop */
	for(;;)
	{
		if(Car_Current_Mode == NORMAL_MODE)
 8002350:	4b48      	ldr	r3, [pc, #288]	; (8002474 <StartNormalMode+0x12c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b06      	cmp	r3, #6
 8002356:	f040 8089 	bne.w	800246c <StartNormalMode+0x124>
		{
			Buffer_GUI[MODE_DIG_1_IDx] = CHARACTER_ZERO;
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <StartNormalMode+0x130>)
 800235c:	2230      	movs	r2, #48	; 0x30
 800235e:	701a      	strb	r2, [r3, #0]
			Buffer_GUI[MODE_DIG_2_IDx] = CHARACTER_ZERO;
 8002360:	4b45      	ldr	r3, [pc, #276]	; (8002478 <StartNormalMode+0x130>)
 8002362:	2230      	movs	r2, #48	; 0x30
 8002364:	705a      	strb	r2, [r3, #1]

			Buffer_GUI[SPEED_DIG_1_IDx] = ((Car_Current_Speed  * 2) / 100) + CHARACTER_ZERO;
 8002366:	4b45      	ldr	r3, [pc, #276]	; (800247c <StartNormalMode+0x134>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4a45      	ldr	r2, [pc, #276]	; (8002480 <StartNormalMode+0x138>)
 800236c:	fb82 1203 	smull	r1, r2, r2, r3
 8002370:	1112      	asrs	r2, r2, #4
 8002372:	17db      	asrs	r3, r3, #31
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	3330      	adds	r3, #48	; 0x30
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <StartNormalMode+0x130>)
 800237e:	715a      	strb	r2, [r3, #5]
			Buffer_GUI[SPEED_DIG_2_IDx] = (((Car_Current_Speed * 2) / 10) % 10) + CHARACTER_ZERO;
 8002380:	4b3e      	ldr	r3, [pc, #248]	; (800247c <StartNormalMode+0x134>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4a3f      	ldr	r2, [pc, #252]	; (8002484 <StartNormalMode+0x13c>)
 8002386:	fb82 1203 	smull	r1, r2, r2, r3
 800238a:	1052      	asrs	r2, r2, #1
 800238c:	17db      	asrs	r3, r3, #31
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <StartNormalMode+0x13c>)
 8002392:	fb83 1302 	smull	r1, r3, r3, r2
 8002396:	1099      	asrs	r1, r3, #2
 8002398:	17d3      	asrs	r3, r2, #31
 800239a:	1ac9      	subs	r1, r1, r3
 800239c:	460b      	mov	r3, r1
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	1ad1      	subs	r1, r2, r3
 80023a6:	b2cb      	uxtb	r3, r1
 80023a8:	3330      	adds	r3, #48	; 0x30
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b32      	ldr	r3, [pc, #200]	; (8002478 <StartNormalMode+0x130>)
 80023ae:	719a      	strb	r2, [r3, #6]
			Buffer_GUI[SPEED_DIG_3_IDx] = ((Car_Current_Speed  * 2) % 10) + CHARACTER_ZERO;
 80023b0:	4b32      	ldr	r3, [pc, #200]	; (800247c <StartNormalMode+0x134>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	005a      	lsls	r2, r3, #1
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <StartNormalMode+0x13c>)
 80023b8:	fb83 1302 	smull	r1, r3, r3, r2
 80023bc:	1099      	asrs	r1, r3, #2
 80023be:	17d3      	asrs	r3, r2, #31
 80023c0:	1ac9      	subs	r1, r1, r3
 80023c2:	460b      	mov	r3, r1
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	1ad1      	subs	r1, r2, r3
 80023cc:	b2cb      	uxtb	r3, r1
 80023ce:	3330      	adds	r3, #48	; 0x30
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <StartNormalMode+0x130>)
 80023d4:	71da      	strb	r2, [r3, #7]

			if(Car_Current_Status == CAR_RUNNING)
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <StartNormalMode+0x140>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d13e      	bne.n	800245c <StartNormalMode+0x114>
			{
				switch (Car_Current_Direction)
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <StartNormalMode+0x144>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d840      	bhi.n	800246a <StartNormalMode+0x122>
 80023e8:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <StartNormalMode+0xa8>)
 80023ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ee:	bf00      	nop
 80023f0:	0800243b 	.word	0x0800243b
 80023f4:	08002401 	.word	0x08002401
 80023f8:	08002419 	.word	0x08002419
 80023fc:	0800240d 	.word	0x0800240d
				{
				case MOVE_FORWARD:
					DCMotor_moveForward(Car_Current_Speed);
 8002400:	4b1e      	ldr	r3, [pc, #120]	; (800247c <StartNormalMode+0x134>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fce3 	bl	8000dd0 <DCMotor_moveForward>
					break;
 800240a:	e02f      	b.n	800246c <StartNormalMode+0x124>

				case MOVE_BACKWORD:
					DCMotor_moveBackward(Car_Current_Speed);
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <StartNormalMode+0x134>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fd19 	bl	8000e48 <DCMotor_moveBackward>
					break;
 8002416:	e029      	b.n	800246c <StartNormalMode+0x124>
				case MOVE_RIGHT:
					DCMotor_moveRight(Car_Current_Speed);
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <StartNormalMode+0x134>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fd73 	bl	8000f08 <DCMotor_moveRight>
					osDelay(100);         // TODO :: TEST
 8002422:	2064      	movs	r0, #100	; 0x64
 8002424:	f004 fe80 	bl	8007128 <osDelay>
					DCMotor_moveForward(Car_Current_Speed);
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <StartNormalMode+0x134>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fccf 	bl	8000dd0 <DCMotor_moveForward>
					Car_Current_Direction = MOVE_FORWARD;
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <StartNormalMode+0x144>)
 8002434:	2202      	movs	r2, #2
 8002436:	701a      	strb	r2, [r3, #0]
					break;
 8002438:	e018      	b.n	800246c <StartNormalMode+0x124>
				case MOVE_LEFT:
					DCMotor_moveLeft(Car_Current_Speed);
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <StartNormalMode+0x134>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fd3e 	bl	8000ec0 <DCMotor_moveLeft>
					osDelay(100);        // TODO :: TEST
 8002444:	2064      	movs	r0, #100	; 0x64
 8002446:	f004 fe6f 	bl	8007128 <osDelay>
					DCMotor_moveForward(Car_Current_Speed);
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <StartNormalMode+0x134>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fcbe 	bl	8000dd0 <DCMotor_moveForward>
					Car_Current_Direction = MOVE_FORWARD;
 8002454:	4b0d      	ldr	r3, [pc, #52]	; (800248c <StartNormalMode+0x144>)
 8002456:	2202      	movs	r2, #2
 8002458:	701a      	strb	r2, [r3, #0]
					break;
 800245a:	e007      	b.n	800246c <StartNormalMode+0x124>
				default:
					break;
				}
			}
			else if (Car_Current_Status == CAR_STOP)
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <StartNormalMode+0x140>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d103      	bne.n	800246c <StartNormalMode+0x124>
			{
				DCMotor_stop();
 8002464:	f7fe fc7c 	bl	8000d60 <DCMotor_stop>
 8002468:	e000      	b.n	800246c <StartNormalMode+0x124>
					break;
 800246a:	bf00      	nop
			else
			{
				// RETURN ERROR //
			}
		}
		osDelay(10);
 800246c:	200a      	movs	r0, #10
 800246e:	f004 fe5b 	bl	8007128 <osDelay>
		if(Car_Current_Mode == NORMAL_MODE)
 8002472:	e76d      	b.n	8002350 <StartNormalMode+0x8>
 8002474:	2000012c 	.word	0x2000012c
 8002478:	20000004 	.word	0x20000004
 800247c:	20000001 	.word	0x20000001
 8002480:	51eb851f 	.word	0x51eb851f
 8002484:	66666667 	.word	0x66666667
 8002488:	20000000 	.word	0x20000000
 800248c:	2000012d 	.word	0x2000012d

08002490 <StartGUI_UpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGUI_UpdateTask */
void StartGUI_UpdateTask(void *argument)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGUI_UpdateTask */
	/* Infinite loop */
	for(;;)
	{
		if(GUI_TRANSMIT_INSTANT == 1 )
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <StartGUI_UpdateTask+0x2c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d108      	bne.n	80024b2 <StartGUI_UpdateTask+0x22>
		{
			HAL_UART_Transmit(&huart2, Buffer_GUI, 14, 20);
 80024a0:	2314      	movs	r3, #20
 80024a2:	220e      	movs	r2, #14
 80024a4:	4906      	ldr	r1, [pc, #24]	; (80024c0 <StartGUI_UpdateTask+0x30>)
 80024a6:	4807      	ldr	r0, [pc, #28]	; (80024c4 <StartGUI_UpdateTask+0x34>)
 80024a8:	f003 fcf3 	bl	8005e92 <HAL_UART_Transmit>
			/********* To Protect Global Variable "GUI_TRANSMIT_INSTANT" *********/
			//		HAL_NVIC_DisableIRQ(USART2_IRQn);
			GUI_TRANSMIT_INSTANT = 0 ;   //TODO:: Disable/Enable EXTI - IR
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <StartGUI_UpdateTask+0x2c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
			//		HAL_NVIC_EnableIRQ(USART2_IRQn);
		}
		osDelay(10);
 80024b2:	200a      	movs	r0, #10
 80024b4:	f004 fe38 	bl	8007128 <osDelay>
		if(GUI_TRANSMIT_INSTANT == 1 )
 80024b8:	e7ee      	b.n	8002498 <StartGUI_UpdateTask+0x8>
 80024ba:	bf00      	nop
 80024bc:	2000012e 	.word	0x2000012e
 80024c0:	20000004 	.word	0x20000004
 80024c4:	20000298 	.word	0x20000298

080024c8 <StartSelfDrivingTask>:
 * @param argument: Not used
 * @\ None
 */
/* USER CODE END Header_StartSelfDrivingTask */
void StartSelfDrivingTask(void *argument)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSelfDrivingTask */
	static uint8_t TRIG_Ticks = 0;
	/* Infinite loop */
	for(;;)
	{
		if(Car_Current_Mode == SELF_DRIVING_MODE)
 80024d0:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <StartSelfDrivingTask+0x178>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b07      	cmp	r3, #7
 80024d6:	f040 80ae 	bne.w	8002636 <StartSelfDrivingTask+0x16e>
		{
			Distance = HCSR04_Read(HCSR04_SENSOR1);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7ff faac 	bl	8001a38 <HCSR04_Read>
 80024e0:	eef0 7a40 	vmov.f32	s15, s0
 80024e4:	4b57      	ldr	r3, [pc, #348]	; (8002644 <StartSelfDrivingTask+0x17c>)
 80024e6:	edc3 7a00 	vstr	s15, [r3]
			/*if(Distance == prev_distances[0] && Distance == prev_distances[1])
		  	  {
		  		  Distance = 9999.0;
		  	  }*/
			TRIG_Ticks++;
 80024ea:	4b57      	ldr	r3, [pc, #348]	; (8002648 <StartSelfDrivingTask+0x180>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b55      	ldr	r3, [pc, #340]	; (8002648 <StartSelfDrivingTask+0x180>)
 80024f4:	701a      	strb	r2, [r3, #0]
			if(TRIG_Ticks >= 1)
 80024f6:	4b54      	ldr	r3, [pc, #336]	; (8002648 <StartSelfDrivingTask+0x180>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <StartSelfDrivingTask+0x42>
			{
				HCSR04_Trigger(HCSR04_SENSOR1);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff fab4 	bl	8001a6c <HCSR04_Trigger>
				TRIG_Ticks = 0;
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <StartSelfDrivingTask+0x180>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
			}
			if (Distance <= SELF_DRIVING_CRITICAL_RANGE)
 800250a:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <StartSelfDrivingTask+0x17c>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	f200 8086 	bhi.w	800262c <StartSelfDrivingTask+0x164>
			{
				uint8_t last_speed = Car_Current_Speed;
 8002520:	4b4a      	ldr	r3, [pc, #296]	; (800264c <StartSelfDrivingTask+0x184>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	73fb      	strb	r3, [r7, #15]
				const uint8_t turn_speed = 80;
 8002526:	2350      	movs	r3, #80	; 0x50
 8002528:	73bb      	strb	r3, [r7, #14]
				SelfDrivingCheck_side(); //Check both sides - Lefat and Right - to get a dicision for moving
 800252a:	f000 f9bf 	bl	80028ac <SelfDrivingCheck_side>
				if(Distance_Left > Distance_Right)
 800252e:	4b48      	ldr	r3, [pc, #288]	; (8002650 <StartSelfDrivingTask+0x188>)
 8002530:	ed93 7a00 	vldr	s14, [r3]
 8002534:	4b47      	ldr	r3, [pc, #284]	; (8002654 <StartSelfDrivingTask+0x18c>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	dd39      	ble.n	80025b8 <StartSelfDrivingTask+0xf0>
				{
					DCMotor_moveLeft(turn_speed);
 8002544:	7bbb      	ldrb	r3, [r7, #14]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fcba 	bl	8000ec0 <DCMotor_moveLeft>
					osDelay(500);
 800254c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002550:	f004 fdea 	bl	8007128 <osDelay>
					DCMotor_moveForward(last_speed);
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fc3a 	bl	8000dd0 <DCMotor_moveForward>
					osDelay(600);
 800255c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002560:	f004 fde2 	bl	8007128 <osDelay>
					DCMotor_stop();
 8002564:	f7fe fbfc 	bl	8000d60 <DCMotor_stop>
					osDelay(100);
 8002568:	2064      	movs	r0, #100	; 0x64
 800256a:	f004 fddd 	bl	8007128 <osDelay>
					DCMotor_moveRight(turn_speed);
 800256e:	7bbb      	ldrb	r3, [r7, #14]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fcc9 	bl	8000f08 <DCMotor_moveRight>
					osDelay(500);
 8002576:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800257a:	f004 fdd5 	bl	8007128 <osDelay>
					DCMotor_moveForward(last_speed);
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fc25 	bl	8000dd0 <DCMotor_moveForward>
					osDelay(600);
 8002586:	f44f 7016 	mov.w	r0, #600	; 0x258
 800258a:	f004 fdcd 	bl	8007128 <osDelay>
					DCMotor_stop();
 800258e:	f7fe fbe7 	bl	8000d60 <DCMotor_stop>
					osDelay(100);
 8002592:	2064      	movs	r0, #100	; 0x64
 8002594:	f004 fdc8 	bl	8007128 <osDelay>
					DCMotor_moveRight(turn_speed);
 8002598:	7bbb      	ldrb	r3, [r7, #14]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fcb4 	bl	8000f08 <DCMotor_moveRight>
					osDelay(400);
 80025a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80025a4:	f004 fdc0 	bl	8007128 <osDelay>
					DCMotor_moveForward(last_speed);
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fc10 	bl	8000dd0 <DCMotor_moveForward>
					osDelay(100);
 80025b0:	2064      	movs	r0, #100	; 0x64
 80025b2:	f004 fdb9 	bl	8007128 <osDelay>
 80025b6:	e03e      	b.n	8002636 <StartSelfDrivingTask+0x16e>
				}
				else
				{
					DCMotor_moveRight(turn_speed);
 80025b8:	7bbb      	ldrb	r3, [r7, #14]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fca4 	bl	8000f08 <DCMotor_moveRight>
					osDelay(500);
 80025c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025c4:	f004 fdb0 	bl	8007128 <osDelay>
					DCMotor_moveForward(last_speed);
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fc00 	bl	8000dd0 <DCMotor_moveForward>
					osDelay(600);
 80025d0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80025d4:	f004 fda8 	bl	8007128 <osDelay>
					DCMotor_stop();
 80025d8:	f7fe fbc2 	bl	8000d60 <DCMotor_stop>
					osDelay(100);
 80025dc:	2064      	movs	r0, #100	; 0x64
 80025de:	f004 fda3 	bl	8007128 <osDelay>
					DCMotor_moveLeft(turn_speed);
 80025e2:	7bbb      	ldrb	r3, [r7, #14]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fc6b 	bl	8000ec0 <DCMotor_moveLeft>
					osDelay(500);
 80025ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025ee:	f004 fd9b 	bl	8007128 <osDelay>
					DCMotor_moveForward(last_speed);
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fbeb 	bl	8000dd0 <DCMotor_moveForward>
					osDelay(600);
 80025fa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80025fe:	f004 fd93 	bl	8007128 <osDelay>
					DCMotor_stop();
 8002602:	f7fe fbad 	bl	8000d60 <DCMotor_stop>
					osDelay(100);
 8002606:	2064      	movs	r0, #100	; 0x64
 8002608:	f004 fd8e 	bl	8007128 <osDelay>
					DCMotor_moveLeft(turn_speed);
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fc56 	bl	8000ec0 <DCMotor_moveLeft>
					osDelay(400);
 8002614:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002618:	f004 fd86 	bl	8007128 <osDelay>
					DCMotor_moveForward(last_speed);
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fbd6 	bl	8000dd0 <DCMotor_moveForward>
					osDelay(100);
 8002624:	2064      	movs	r0, #100	; 0x64
 8002626:	f004 fd7f 	bl	8007128 <osDelay>
 800262a:	e004      	b.n	8002636 <StartSelfDrivingTask+0x16e>

			}

			else
			{
				DCMotor_moveForward(Car_Current_Speed);  //Just keeping forward if there is no obstacles in front of the car
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <StartSelfDrivingTask+0x184>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fbcd 	bl	8000dd0 <DCMotor_moveForward>
			}
		}
		osDelay(30);
 8002636:	201e      	movs	r0, #30
 8002638:	f004 fd76 	bl	8007128 <osDelay>
		if(Car_Current_Mode == SELF_DRIVING_MODE)
 800263c:	e748      	b.n	80024d0 <StartSelfDrivingTask+0x8>
 800263e:	bf00      	nop
 8002640:	2000012c 	.word	0x2000012c
 8002644:	200000d0 	.word	0x200000d0
 8002648:	20000120 	.word	0x20000120
 800264c:	20000001 	.word	0x20000001
 8002650:	200000d8 	.word	0x200000d8
 8002654:	200000d4 	.word	0x200000d4

08002658 <LaneDepartureWarning>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LaneDepartureWarning */
void LaneDepartureWarning(void *argument)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN LaneDepartureWarning */
	/* Infinite loop */
	for(;;)
	{
		if(LeftIrCounter>2)
 8002660:	4b42      	ldr	r3, [pc, #264]	; (800276c <LaneDepartureWarning+0x114>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d902      	bls.n	8002670 <LaneDepartureWarning+0x18>
		{
			LeftIrCounter=0;
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <LaneDepartureWarning+0x114>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
		}
		if(RightIrCounter>2)
 8002670:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <LaneDepartureWarning+0x118>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d902      	bls.n	8002680 <LaneDepartureWarning+0x28>
		{
			RightIrCounter=0;
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <LaneDepartureWarning+0x118>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
		}
		if(LeftIrCounter == 1 && RightIrCounter == 0)
 8002680:	4b3a      	ldr	r3, [pc, #232]	; (800276c <LaneDepartureWarning+0x114>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d10e      	bne.n	80026a8 <LaneDepartureWarning+0x50>
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <LaneDepartureWarning+0x118>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <LaneDepartureWarning+0x50>
		{
			// Activate left lane warning
			HAL_GPIO_WritePin(LEFT_IR_LED_GPIO_Port,LEFT_IR_LED_Pin,1);
 8002694:	2201      	movs	r2, #1
 8002696:	2110      	movs	r1, #16
 8002698:	4836      	ldr	r0, [pc, #216]	; (8002774 <LaneDepartureWarning+0x11c>)
 800269a:	f001 fb6b 	bl	8003d74 <HAL_GPIO_WritePin>
			osDelay(500);
 800269e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026a2:	f004 fd41 	bl	8007128 <osDelay>
 80026a6:	e05f      	b.n	8002768 <LaneDepartureWarning+0x110>
		}
		else if(LeftIrCounter == 2 )
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <LaneDepartureWarning+0x114>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d10f      	bne.n	80026d2 <LaneDepartureWarning+0x7a>
		{
			// Deactivate left lane warning
			LeftIrCounter = 0;
 80026b2:	4b2e      	ldr	r3, [pc, #184]	; (800276c <LaneDepartureWarning+0x114>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
			RightIrCounter = 0;
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <LaneDepartureWarning+0x118>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LEFT_IR_LED_GPIO_Port,LEFT_IR_LED_Pin,0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2110      	movs	r1, #16
 80026c2:	482c      	ldr	r0, [pc, #176]	; (8002774 <LaneDepartureWarning+0x11c>)
 80026c4:	f001 fb56 	bl	8003d74 <HAL_GPIO_WritePin>
			osDelay(500);
 80026c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026cc:	f004 fd2c 	bl	8007128 <osDelay>
 80026d0:	e7c6      	b.n	8002660 <LaneDepartureWarning+0x8>
		}
		else if(RightIrCounter == 1 && LeftIrCounter == 0)
 80026d2:	4b27      	ldr	r3, [pc, #156]	; (8002770 <LaneDepartureWarning+0x118>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10e      	bne.n	80026fa <LaneDepartureWarning+0xa2>
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <LaneDepartureWarning+0x114>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <LaneDepartureWarning+0xa2>
		{
			// Activate right lane warning
			HAL_GPIO_WritePin(RIGHT_IR_LED_GPIO_Port,RIGHT_IR_LED_Pin,1);
 80026e6:	2201      	movs	r2, #1
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	4822      	ldr	r0, [pc, #136]	; (8002774 <LaneDepartureWarning+0x11c>)
 80026ec:	f001 fb42 	bl	8003d74 <HAL_GPIO_WritePin>
			osDelay(500);
 80026f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026f4:	f004 fd18 	bl	8007128 <osDelay>
 80026f8:	e036      	b.n	8002768 <LaneDepartureWarning+0x110>
		}
		else if(RightIrCounter == 2)
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <LaneDepartureWarning+0x118>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d10f      	bne.n	8002724 <LaneDepartureWarning+0xcc>
		{
			// Deactivate right lane warning
			LeftIrCounter = 0;
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <LaneDepartureWarning+0x114>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
			RightIrCounter = 0;
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <LaneDepartureWarning+0x118>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RIGHT_IR_LED_GPIO_Port,RIGHT_IR_LED_Pin,0);
 8002710:	2200      	movs	r2, #0
 8002712:	2180      	movs	r1, #128	; 0x80
 8002714:	4817      	ldr	r0, [pc, #92]	; (8002774 <LaneDepartureWarning+0x11c>)
 8002716:	f001 fb2d 	bl	8003d74 <HAL_GPIO_WritePin>
			osDelay(500);
 800271a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800271e:	f004 fd03 	bl	8007128 <osDelay>
 8002722:	e79d      	b.n	8002660 <LaneDepartureWarning+0x8>
		}
		else if((RightIrCounter == 1 && LeftIrCounter == 1))
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <LaneDepartureWarning+0x118>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d119      	bne.n	8002762 <LaneDepartureWarning+0x10a>
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <LaneDepartureWarning+0x114>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d114      	bne.n	8002762 <LaneDepartureWarning+0x10a>
		{
			LeftIrCounter = 0;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <LaneDepartureWarning+0x114>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
			RightIrCounter = 0;
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <LaneDepartureWarning+0x118>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LEFT_IR_LED_GPIO_Port,LEFT_IR_LED_Pin,0);
 8002744:	2200      	movs	r2, #0
 8002746:	2110      	movs	r1, #16
 8002748:	480a      	ldr	r0, [pc, #40]	; (8002774 <LaneDepartureWarning+0x11c>)
 800274a:	f001 fb13 	bl	8003d74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RIGHT_IR_LED_GPIO_Port,RIGHT_IR_LED_Pin,0);
 800274e:	2200      	movs	r2, #0
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	4808      	ldr	r0, [pc, #32]	; (8002774 <LaneDepartureWarning+0x11c>)
 8002754:	f001 fb0e 	bl	8003d74 <HAL_GPIO_WritePin>
			osDelay(500);
 8002758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800275c:	f004 fce4 	bl	8007128 <osDelay>
 8002760:	e002      	b.n	8002768 <LaneDepartureWarning+0x110>
		}
		else
		{
			// No lane departure warning
			osDelay(100);
 8002762:	2064      	movs	r0, #100	; 0x64
 8002764:	f004 fce0 	bl	8007128 <osDelay>
		if(LeftIrCounter>2)
 8002768:	e77a      	b.n	8002660 <LaneDepartureWarning+0x8>
 800276a:	bf00      	nop
 800276c:	20000121 	.word	0x20000121
 8002770:	20000122 	.word	0x20000122
 8002774:	40020000 	.word	0x40020000

08002778 <RainDetection>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_RainDetection */
void RainDetection(void *argument)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN RainDetection */
	/* Infinite loop */
	/* Infinite loop */
	int32_t RainDetectFlag = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if(HAL_GPIO_ReadPin(RAIN_SENSOR_GPIO_Port, RAIN_SENSOR_Pin)==1)
 8002784:	2104      	movs	r1, #4
 8002786:	4816      	ldr	r0, [pc, #88]	; (80027e0 <RainDetection+0x68>)
 8002788:	f001 fadc 	bl	8003d44 <HAL_GPIO_ReadPin>
 800278c:	4603      	mov	r3, r0
 800278e:	2b01      	cmp	r3, #1
 8002790:	d11b      	bne.n	80027ca <RainDetection+0x52>
		{
			HAL_GPIO_WritePin(RAIN_LED_GPIO_Port, RAIN_LED_Pin, 1);
 8002792:	2201      	movs	r2, #1
 8002794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002798:	4812      	ldr	r0, [pc, #72]	; (80027e4 <RainDetection+0x6c>)
 800279a:	f001 faeb 	bl	8003d74 <HAL_GPIO_WritePin>
			if(RainDetectFlag==0)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <RainDetection+0x3c>
			{
				//__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 100);
				SERVO_MoveTo(SERVO_MOTOR2,180);
 80027a4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80027e8 <RainDetection+0x70>
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7ff fc07 	bl	8001fbc <SERVO_MoveTo>
				RainDetectFlag=1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	e010      	b.n	80027d6 <RainDetection+0x5e>
			}
			else if(RainDetectFlag==1)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10d      	bne.n	80027d6 <RainDetection+0x5e>
			{
				//__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 2000);
				SERVO_MoveTo(SERVO_MOTOR2,0);
 80027ba:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80027ec <RainDetection+0x74>
 80027be:	2001      	movs	r0, #1
 80027c0:	f7ff fbfc 	bl	8001fbc <SERVO_MoveTo>
				RainDetectFlag=0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e005      	b.n	80027d6 <RainDetection+0x5e>

			}
		}
		else
		{
			HAL_GPIO_WritePin(RAIN_LED_GPIO_Port, RAIN_LED_Pin, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027d0:	4804      	ldr	r0, [pc, #16]	; (80027e4 <RainDetection+0x6c>)
 80027d2:	f001 facf 	bl	8003d74 <HAL_GPIO_WritePin>

		}
		osDelay(100);
 80027d6:	2064      	movs	r0, #100	; 0x64
 80027d8:	f004 fca6 	bl	8007128 <osDelay>
		if(HAL_GPIO_ReadPin(RAIN_SENSOR_GPIO_Port, RAIN_SENSOR_Pin)==1)
 80027dc:	e7d2      	b.n	8002784 <RainDetection+0xc>
 80027de:	bf00      	nop
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40020000 	.word	0x40020000
 80027e8:	43340000 	.word	0x43340000
 80027ec:	00000000 	.word	0x00000000

080027f0 <LaneKeepAssist>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LaneKeepAssist */
void LaneKeepAssist(void *argument)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN LaneKeepAssist */
	uint8_t laneKeepFlag=0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		if(LeftIrCounter==1)
 80027fc:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <LaneKeepAssist+0xb0>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10c      	bne.n	8002820 <LaneKeepAssist+0x30>
		{
			laneKeepFlag=1;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
			Car_Current_Speed=30;
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <LaneKeepAssist+0xb4>)
 800280c:	221e      	movs	r2, #30
 800280e:	701a      	strb	r2, [r3, #0]
			DCMotor_moveRight(Car_Current_Speed);
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <LaneKeepAssist+0xb4>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fb77 	bl	8000f08 <DCMotor_moveRight>
			osDelay(200);
 800281a:	20c8      	movs	r0, #200	; 0xc8
 800281c:	f004 fc84 	bl	8007128 <osDelay>

		}
		if(laneKeepFlag==1 && LeftIrCounter==0)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d111      	bne.n	800284a <LaneKeepAssist+0x5a>
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <LaneKeepAssist+0xb0>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10c      	bne.n	800284a <LaneKeepAssist+0x5a>
		{
			laneKeepFlag=0;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
			Car_Current_Speed=50;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <LaneKeepAssist+0xb4>)
 8002836:	2232      	movs	r2, #50	; 0x32
 8002838:	701a      	strb	r2, [r3, #0]
			DCMotor_moveForward(Car_Current_Speed);
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <LaneKeepAssist+0xb4>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fac6 	bl	8000dd0 <DCMotor_moveForward>
			osDelay(200);
 8002844:	20c8      	movs	r0, #200	; 0xc8
 8002846:	f004 fc6f 	bl	8007128 <osDelay>
		}
		if(RightIrCounter==1)
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <LaneKeepAssist+0xb8>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10c      	bne.n	800286e <LaneKeepAssist+0x7e>
		{
			laneKeepFlag=1;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
			Car_Current_Speed=30;
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <LaneKeepAssist+0xb4>)
 800285a:	221e      	movs	r2, #30
 800285c:	701a      	strb	r2, [r3, #0]
			DCMotor_moveLeft(Car_Current_Speed);
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <LaneKeepAssist+0xb4>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fb2c 	bl	8000ec0 <DCMotor_moveLeft>
			osDelay(200);
 8002868:	20c8      	movs	r0, #200	; 0xc8
 800286a:	f004 fc5d 	bl	8007128 <osDelay>

		}
		if(laneKeepFlag==1 && RightIrCounter==0)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d111      	bne.n	8002898 <LaneKeepAssist+0xa8>
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <LaneKeepAssist+0xb8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <LaneKeepAssist+0xa8>
		{
			laneKeepFlag=0;
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
			Car_Current_Speed=50;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <LaneKeepAssist+0xb4>)
 8002884:	2232      	movs	r2, #50	; 0x32
 8002886:	701a      	strb	r2, [r3, #0]
			DCMotor_moveForward(Car_Current_Speed);
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <LaneKeepAssist+0xb4>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fa9f 	bl	8000dd0 <DCMotor_moveForward>
			osDelay(200);
 8002892:	20c8      	movs	r0, #200	; 0xc8
 8002894:	f004 fc48 	bl	8007128 <osDelay>
		}
		osDelay(100);
 8002898:	2064      	movs	r0, #100	; 0x64
 800289a:	f004 fc45 	bl	8007128 <osDelay>
		if(LeftIrCounter==1)
 800289e:	e7ad      	b.n	80027fc <LaneKeepAssist+0xc>
 80028a0:	20000121 	.word	0x20000121
 80028a4:	20000001 	.word	0x20000001
 80028a8:	20000122 	.word	0x20000122

080028ac <SelfDrivingCheck_side>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void SelfDrivingCheck_side(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0

	DCMotor_stop();
 80028b0:	f7fe fa56 	bl	8000d60 <DCMotor_stop>
	DCMotor_moveBackward(Car_Current_Speed);
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <SelfDrivingCheck_side+0x84>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fac5 	bl	8000e48 <DCMotor_moveBackward>
	osDelay(500);
 80028be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028c2:	f004 fc31 	bl	8007128 <osDelay>
	DCMotor_stop();
 80028c6:	f7fe fa4b 	bl	8000d60 <DCMotor_stop>
	osDelay(10);
 80028ca:	200a      	movs	r0, #10
 80028cc:	f004 fc2c 	bl	8007128 <osDelay>
	/* Servo turn to Left (150) then read distance*/
	SERVO_MoveTo(SERVO_MOTOR1,150);
 80028d0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002934 <SelfDrivingCheck_side+0x88>
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7ff fb71 	bl	8001fbc <SERVO_MoveTo>
	HCSR04_Trigger(HCSR04_SENSOR1);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7ff f8c6 	bl	8001a6c <HCSR04_Trigger>
	osDelay(800);
 80028e0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028e4:	f004 fc20 	bl	8007128 <osDelay>
	Distance_Left = HCSR04_Read(HCSR04_SENSOR1);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7ff f8a5 	bl	8001a38 <HCSR04_Read>
 80028ee:	eef0 7a40 	vmov.f32	s15, s0
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <SelfDrivingCheck_side+0x8c>)
 80028f4:	edc3 7a00 	vstr	s15, [r3]

	/* Servo turn to Right (50) then read distance*/
	SERVO_MoveTo(SERVO_MOTOR1,50);
 80028f8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800293c <SelfDrivingCheck_side+0x90>
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7ff fb5d 	bl	8001fbc <SERVO_MoveTo>
	HCSR04_Trigger(HCSR04_SENSOR1);
 8002902:	2000      	movs	r0, #0
 8002904:	f7ff f8b2 	bl	8001a6c <HCSR04_Trigger>
	osDelay(800);
 8002908:	f44f 7048 	mov.w	r0, #800	; 0x320
 800290c:	f004 fc0c 	bl	8007128 <osDelay>
	Distance_Right = HCSR04_Read(HCSR04_SENSOR1);
 8002910:	2000      	movs	r0, #0
 8002912:	f7ff f891 	bl	8001a38 <HCSR04_Read>
 8002916:	eef0 7a40 	vmov.f32	s15, s0
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <SelfDrivingCheck_side+0x94>)
 800291c:	edc3 7a00 	vstr	s15, [r3]
	/* Servo turn to origin (100) then read distance*/
	SERVO_MoveTo(SERVO_MOTOR1,100);
 8002920:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002944 <SelfDrivingCheck_side+0x98>
 8002924:	2000      	movs	r0, #0
 8002926:	f7ff fb49 	bl	8001fbc <SERVO_MoveTo>

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000001 	.word	0x20000001
 8002934:	43160000 	.word	0x43160000
 8002938:	200000d8 	.word	0x200000d8
 800293c:	42480000 	.word	0x42480000
 8002940:	200000d4 	.word	0x200000d4
 8002944:	42c80000 	.word	0x42c80000

08002948 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
 800295c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <MX_GPIO_Init+0xfc>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a37      	ldr	r2, [pc, #220]	; (8002a44 <MX_GPIO_Init+0xfc>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <MX_GPIO_Init+0xfc>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <MX_GPIO_Init+0xfc>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a30      	ldr	r2, [pc, #192]	; (8002a44 <MX_GPIO_Init+0xfc>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <MX_GPIO_Init+0xfc>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEFT_IR_LED_Pin|RIGHT_IR_LED_Pin|RAIN_LED_Pin|MOTOR_IN4_Pin, GPIO_PIN_RESET);
 8002996:	2200      	movs	r2, #0
 8002998:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 800299c:	482a      	ldr	r0, [pc, #168]	; (8002a48 <MX_GPIO_Init+0x100>)
 800299e:	f001 f9e9 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|MOTOR_IN3_Pin|MOTOR_IN2_Pin|MOTOR_IN1_Pin, GPIO_PIN_RESET);
 80029a2:	2200      	movs	r2, #0
 80029a4:	f244 01e0 	movw	r1, #16608	; 0x40e0
 80029a8:	4828      	ldr	r0, [pc, #160]	; (8002a4c <MX_GPIO_Init+0x104>)
 80029aa:	f001 f9e3 	bl	8003d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEFT_IR_LED_Pin|RIGHT_IR_LED_Pin|RAIN_LED_Pin|MOTOR_IN4_Pin;
 80029ae:	f44f 63b2 	mov.w	r3, #1424	; 0x590
 80029b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b4:	2301      	movs	r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	4619      	mov	r1, r3
 80029c6:	4820      	ldr	r0, [pc, #128]	; (8002a48 <MX_GPIO_Init+0x100>)
 80029c8:	f001 f838 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_IR_Pin|RIGHT_IR_Pin;
 80029cc:	2303      	movs	r3, #3
 80029ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	4619      	mov	r1, r3
 80029e0:	481a      	ldr	r0, [pc, #104]	; (8002a4c <MX_GPIO_Init+0x104>)
 80029e2:	f001 f82b 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RAIN_SENSOR_Pin;
 80029e6:	2304      	movs	r3, #4
 80029e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RAIN_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	4619      	mov	r1, r3
 80029f8:	4814      	ldr	r0, [pc, #80]	; (8002a4c <MX_GPIO_Init+0x104>)
 80029fa:	f001 f81f 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|MOTOR_IN3_Pin|MOTOR_IN2_Pin|MOTOR_IN1_Pin;
 80029fe:	f244 03e0 	movw	r3, #16608	; 0x40e0
 8002a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a04:	2301      	movs	r3, #1
 8002a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	4619      	mov	r1, r3
 8002a16:	480d      	ldr	r0, [pc, #52]	; (8002a4c <MX_GPIO_Init+0x104>)
 8002a18:	f001 f810 	bl	8003a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2105      	movs	r1, #5
 8002a20:	2006      	movs	r0, #6
 8002a22:	f000 ff4f 	bl	80038c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a26:	2006      	movs	r0, #6
 8002a28:	f000 ff68 	bl	80038fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2105      	movs	r1, #5
 8002a30:	2007      	movs	r0, #7
 8002a32:	f000 ff47 	bl	80038c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a36:	2007      	movs	r0, #7
 8002a38:	f000 ff60 	bl	80038fc <HAL_NVIC_EnableIRQ>

}
 8002a3c:	bf00      	nop
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	40020400 	.word	0x40020400

08002a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a54:	f000 fe3c 	bl	80036d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a58:	f000 f836 	bl	8002ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a5c:	f7ff ff74 	bl	8002948 <MX_GPIO_Init>
  MX_TIM5_Init();
 8002a60:	f000 fb1c 	bl	800309c <MX_TIM5_Init>
  MX_TIM2_Init();
 8002a64:	f000 fa34 	bl	8002ed0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002a68:	f000 fd8e 	bl	8003588 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8002a6c:	f000 fb7a 	bl	8003164 <MX_TIM11_Init>
  MX_TIM3_Init();
 8002a70:	f000 fa9e 	bl	8002fb0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HCSR04_Init(HCSR04_SENSOR1, &htim2);
 8002a74:	490f      	ldr	r1, [pc, #60]	; (8002ab4 <main+0x64>)
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7fe fb52 	bl	8001120 <HCSR04_Init>
  SERVO_Init(SERVO_MOTOR1);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7ff f85d 	bl	8001b3c <SERVO_Init>
  //SERVO_Init(SERVO_MOTOR2);

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002a82:	2100      	movs	r1, #0
 8002a84:	480c      	ldr	r0, [pc, #48]	; (8002ab8 <main+0x68>)
 8002a86:	f001 ff33 	bl	80048f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	480a      	ldr	r0, [pc, #40]	; (8002ab8 <main+0x68>)
 8002a8e:	f001 ff2f 	bl	80048f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002a92:	2100      	movs	r1, #0
 8002a94:	4809      	ldr	r0, [pc, #36]	; (8002abc <main+0x6c>)
 8002a96:	f001 ff2b 	bl	80048f0 <HAL_TIM_PWM_Start>


  /* UART Receive */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Buffer, 4);
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <main+0x70>)
 8002a9e:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <main+0x74>)
 8002aa0:	f003 fa89 	bl	8005fb6 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002aa4:	f004 fa64 	bl	8006f70 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002aa8:	f7ff fad8 	bl	800205c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002aac:	f004 fa84 	bl	8006fb8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <main+0x60>
 8002ab2:	bf00      	nop
 8002ab4:	20000178 	.word	0x20000178
 8002ab8:	20000208 	.word	0x20000208
 8002abc:	200001c0 	.word	0x200001c0
 8002ac0:	20000128 	.word	0x20000128
 8002ac4:	20000298 	.word	0x20000298

08002ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b094      	sub	sp, #80	; 0x50
 8002acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ace:	f107 0320 	add.w	r3, r7, #32
 8002ad2:	2230      	movs	r2, #48	; 0x30
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f007 f944 	bl	8009d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <SystemClock_Config+0xb8>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <SystemClock_Config+0xb8>)
 8002af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afa:	6413      	str	r3, [r2, #64]	; 0x40
 8002afc:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <SystemClock_Config+0xb8>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <SystemClock_Config+0xbc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <SystemClock_Config+0xbc>)
 8002b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <SystemClock_Config+0xbc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b30:	2310      	movs	r3, #16
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b38:	f107 0320 	add.w	r3, r7, #32
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 f94b 	bl	8003dd8 <HAL_RCC_OscConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002b48:	f000 f8c4 	bl	8002cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 fbae 	bl	80042c8 <HAL_RCC_ClockConfig>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002b72:	f000 f8af 	bl	8002cd4 <Error_Handler>
  }
}
 8002b76:	bf00      	nop
 8002b78:	3750      	adds	r7, #80	; 0x50
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40007000 	.word	0x40007000

08002b88 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_IC_ISR(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7fe fd01 	bl	8001598 <HCSR04_TMR_IC_ISR>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, Buffer_GUI, 14, 20);
	Buffer_ASCII_TO_INT = atoi((char*)Buffer);
 8002ba8:	4826      	ldr	r0, [pc, #152]	; (8002c44 <HAL_UART_RxCpltCallback+0xa4>)
 8002baa:	f007 f89f 	bl	8009cec <atoi>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002bb4:	801a      	strh	r2, [r3, #0]
	if((Buffer_ASCII_TO_INT == NORMAL_MODE)||(Buffer_ASCII_TO_INT == ACC_MODE) || (Buffer_ASCII_TO_INT == SELF_DRIVING_MODE))
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d007      	beq.n	8002bce <HAL_UART_RxCpltCallback+0x2e>
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	2b09      	cmp	r3, #9
 8002bc4:	d003      	beq.n	8002bce <HAL_UART_RxCpltCallback+0x2e>
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	2b07      	cmp	r3, #7
 8002bcc:	d108      	bne.n	8002be0 <HAL_UART_RxCpltCallback+0x40>
	{
		Car_Current_Mode = Buffer_ASCII_TO_INT;
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HAL_UART_RxCpltCallback+0xac>)
 8002bd6:	701a      	strb	r2, [r3, #0]
		Car_Current_Status = CAR_RUNNING ;
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HAL_UART_RxCpltCallback+0xb0>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e02a      	b.n	8002c36 <HAL_UART_RxCpltCallback+0x96>

	}
	else if((Buffer_ASCII_TO_INT == MOVE_FORWARD)||(Buffer_ASCII_TO_INT == MOVE_BACKWORD)||(Buffer_ASCII_TO_INT == MOVE_RIGHT)||(Buffer_ASCII_TO_INT == MOVE_LEFT))
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d00b      	beq.n	8002c00 <HAL_UART_RxCpltCallback+0x60>
 8002be8:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d007      	beq.n	8002c00 <HAL_UART_RxCpltCallback+0x60>
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d003      	beq.n	8002c00 <HAL_UART_RxCpltCallback+0x60>
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_UART_RxCpltCallback+0x6c>
	{
		Car_Current_Direction = Buffer_ASCII_TO_INT;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <HAL_UART_RxCpltCallback+0xb4>)
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e014      	b.n	8002c36 <HAL_UART_RxCpltCallback+0x96>
	}
	else if (Buffer_ASCII_TO_INT == STOP_MOTOR)
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d106      	bne.n	8002c22 <HAL_UART_RxCpltCallback+0x82>
	{
		Car_Current_Speed  = CAR_STOP ;
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_UART_RxCpltCallback+0xb8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
		Car_Current_Status = CAR_STOP ;
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_UART_RxCpltCallback+0xb0>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e009      	b.n	8002c36 <HAL_UART_RxCpltCallback+0x96>
	}
	else
	{
		Car_Current_Speed = Buffer_ASCII_TO_INT - CAR_SPEED_OFFSET ;
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_UART_RxCpltCallback+0xa8>)
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	3318      	adds	r3, #24
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_UART_RxCpltCallback+0xb8>)
 8002c2e:	701a      	strb	r2, [r3, #0]
		Car_Current_Status = CAR_RUNNING ;
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_UART_RxCpltCallback+0xb0>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]

	}
	GUI_TRANSMIT_INSTANT = 1 ;
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_UART_RxCpltCallback+0xbc>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000128 	.word	0x20000128
 8002c48:	20000124 	.word	0x20000124
 8002c4c:	2000012c 	.word	0x2000012c
 8002c50:	20000000 	.word	0x20000000
 8002c54:	2000012d 	.word	0x2000012d
 8002c58:	20000001 	.word	0x20000001
 8002c5c:	2000012e 	.word	0x2000012e

08002c60 <HAL_GPIO_EXTI_Callback>:
/* EXTI interrupt callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d002      	beq.n	8002c76 <HAL_GPIO_EXTI_Callback+0x16>
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d008      	beq.n	8002c86 <HAL_GPIO_EXTI_Callback+0x26>
		break;
	case RIGHT_IR_Pin:
		RightIrCounter++;
		break;
	}
}
 8002c74:	e00f      	b.n	8002c96 <HAL_GPIO_EXTI_Callback+0x36>
		LeftIrCounter++;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_GPIO_EXTI_Callback+0x44>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_GPIO_EXTI_Callback+0x44>)
 8002c82:	701a      	strb	r2, [r3, #0]
		break;
 8002c84:	e007      	b.n	8002c96 <HAL_GPIO_EXTI_Callback+0x36>
		RightIrCounter++;
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_GPIO_EXTI_Callback+0x48>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_GPIO_EXTI_Callback+0x48>)
 8002c92:	701a      	strb	r2, [r3, #0]
		break;
 8002c94:	bf00      	nop
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000121 	.word	0x20000121
 8002ca8:	20000122 	.word	0x20000122

08002cac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cbe:	f000 fd29 	bl	8003714 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HCSR04_TMR_OVF_ISR(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe fc2a 	bl	800151c <HCSR04_TMR_OVF_ISR>
  /* USER CODE END Callback 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40014400 	.word	0x40014400

08002cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd8:	b672      	cpsid	i
}
 8002cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cdc:	e7fe      	b.n	8002cdc <Error_Handler+0x8>
	...

08002ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_MspInit+0x54>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <HAL_MspInit+0x54>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_MspInit+0x54>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_MspInit+0x54>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <HAL_MspInit+0x54>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_MspInit+0x54>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	210f      	movs	r1, #15
 8002d22:	f06f 0001 	mvn.w	r0, #1
 8002d26:	f000 fdcd 	bl	80038c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08c      	sub	sp, #48	; 0x30
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	4b2e      	ldr	r3, [pc, #184]	; (8002e08 <HAL_InitTick+0xd0>)
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	4a2d      	ldr	r2, [pc, #180]	; (8002e08 <HAL_InitTick+0xd0>)
 8002d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d56:	6453      	str	r3, [r2, #68]	; 0x44
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_InitTick+0xd0>)
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d64:	f107 020c 	add.w	r2, r7, #12
 8002d68:	f107 0310 	add.w	r3, r7, #16
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 fc8a 	bl	8004688 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d74:	f001 fc74 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 8002d78:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <HAL_InitTick+0xd4>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0c9b      	lsrs	r3, r3, #18
 8002d84:	3b01      	subs	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002d88:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <HAL_InitTick+0xd8>)
 8002d8a:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <HAL_InitTick+0xdc>)
 8002d8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_InitTick+0xd8>)
 8002d90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d94:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002d96:	4a1e      	ldr	r2, [pc, #120]	; (8002e10 <HAL_InitTick+0xd8>)
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <HAL_InitTick+0xd8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_InitTick+0xd8>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_InitTick+0xd8>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8002dae:	4818      	ldr	r0, [pc, #96]	; (8002e10 <HAL_InitTick+0xd8>)
 8002db0:	f001 fc9c 	bl	80046ec <HAL_TIM_Base_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d11b      	bne.n	8002dfa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002dc2:	4813      	ldr	r0, [pc, #76]	; (8002e10 <HAL_InitTick+0xd8>)
 8002dc4:	f001 fce2 	bl	800478c <HAL_TIM_Base_Start_IT>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d111      	bne.n	8002dfa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002dd6:	2019      	movs	r0, #25
 8002dd8:	f000 fd90 	bl	80038fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	d808      	bhi.n	8002df4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002de2:	2200      	movs	r2, #0
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	2019      	movs	r0, #25
 8002de8:	f000 fd6c 	bl	80038c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dec:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <HAL_InitTick+0xe0>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e002      	b.n	8002dfa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3730      	adds	r7, #48	; 0x30
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	431bde83 	.word	0x431bde83
 8002e10:	20000130 	.word	0x20000130
 8002e14:	40014400 	.word	0x40014400
 8002e18:	20000018 	.word	0x20000018

08002e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <NMI_Handler+0x4>

08002e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e26:	e7fe      	b.n	8002e26 <HardFault_Handler+0x4>

08002e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <MemManage_Handler+0x4>

08002e2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <BusFault_Handler+0x4>

08002e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <UsageFault_Handler+0x4>

08002e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_IR_Pin);
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f000 ffab 	bl	8003da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_IR_Pin);
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	f000 ffa4 	bl	8003da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HCSR04_TMR_OVF_ISR(&htim1);
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e6a:	f001 ffc9 	bl	8004e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000130 	.word	0x20000130

08002e78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <TIM2_IRQHandler+0x10>)
 8002e7e:	f001 ffbf 	bl	8004e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000178 	.word	0x20000178

08002e8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <USART2_IRQHandler+0x18>)
 8002e92:	f003 f8c1 	bl	8006018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Buffer, 4);
 8002e96:	2204      	movs	r2, #4
 8002e98:	4903      	ldr	r1, [pc, #12]	; (8002ea8 <USART2_IRQHandler+0x1c>)
 8002e9a:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <USART2_IRQHandler+0x18>)
 8002e9c:	f003 f88b 	bl	8005fb6 <HAL_UART_Receive_IT>

  /* USER CODE END USART2_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000298 	.word	0x20000298
 8002ea8:	20000128 	.word	0x20000128

08002eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <SystemInit+0x20>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <SystemInit+0x20>)
 8002eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed6:	f107 0318 	add.w	r3, r7, #24
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002eee:	463b      	mov	r3, r7
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002f04:	220f      	movs	r2, #15
 8002f06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002f0e:	4b27      	ldr	r3, [pc, #156]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f22:	4822      	ldr	r0, [pc, #136]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002f24:	f001 fbe2 	bl	80046ec <HAL_TIM_Base_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002f2e:	f7ff fed1 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f36:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f38:	f107 0318 	add.w	r3, r7, #24
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	481b      	ldr	r0, [pc, #108]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002f40:	f002 f9c4 	bl	80052cc <HAL_TIM_ConfigClockSource>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002f4a:	f7ff fec3 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002f4e:	4817      	ldr	r0, [pc, #92]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002f50:	f001 fde2 	bl	8004b18 <HAL_TIM_IC_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002f5a:	f7ff febb 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	480f      	ldr	r0, [pc, #60]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002f6e:	f002 fec1 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002f78:	f7ff feac 	bl	8002cd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f80:	2301      	movs	r3, #1
 8002f82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f8c:	463b      	mov	r3, r7
 8002f8e:	2200      	movs	r2, #0
 8002f90:	4619      	mov	r1, r3
 8002f92:	4806      	ldr	r0, [pc, #24]	; (8002fac <MX_TIM2_Init+0xdc>)
 8002f94:	f002 f83c 	bl	8005010 <HAL_TIM_IC_ConfigChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002f9e:	f7ff fe99 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	3728      	adds	r7, #40	; 0x28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000178 	.word	0x20000178

08002fb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	; 0x38
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc4:	f107 0320 	add.w	r3, r7, #32
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
 8002fdc:	615a      	str	r2, [r3, #20]
 8002fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <MX_TIM3_Init+0xe4>)
 8002fe2:	4a2d      	ldr	r2, [pc, #180]	; (8003098 <MX_TIM3_Init+0xe8>)
 8002fe4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <MX_TIM3_Init+0xe4>)
 8002fe8:	2210      	movs	r2, #16
 8002fea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <MX_TIM3_Init+0xe4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <MX_TIM3_Init+0xe4>)
 8002ff4:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ff8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <MX_TIM3_Init+0xe4>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003000:	4b24      	ldr	r3, [pc, #144]	; (8003094 <MX_TIM3_Init+0xe4>)
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003006:	4823      	ldr	r0, [pc, #140]	; (8003094 <MX_TIM3_Init+0xe4>)
 8003008:	f001 fb70 	bl	80046ec <HAL_TIM_Base_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003012:	f7ff fe5f 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800301c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003020:	4619      	mov	r1, r3
 8003022:	481c      	ldr	r0, [pc, #112]	; (8003094 <MX_TIM3_Init+0xe4>)
 8003024:	f002 f952 	bl	80052cc <HAL_TIM_ConfigClockSource>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800302e:	f7ff fe51 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003032:	4818      	ldr	r0, [pc, #96]	; (8003094 <MX_TIM3_Init+0xe4>)
 8003034:	f001 fc0c 	bl	8004850 <HAL_TIM_PWM_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800303e:	f7ff fe49 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800304a:	f107 0320 	add.w	r3, r7, #32
 800304e:	4619      	mov	r1, r3
 8003050:	4810      	ldr	r0, [pc, #64]	; (8003094 <MX_TIM3_Init+0xe4>)
 8003052:	f002 fe4f 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800305c:	f7ff fe3a 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003060:	2360      	movs	r3, #96	; 0x60
 8003062:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	2200      	movs	r2, #0
 8003074:	4619      	mov	r1, r3
 8003076:	4807      	ldr	r0, [pc, #28]	; (8003094 <MX_TIM3_Init+0xe4>)
 8003078:	f002 f866 	bl	8005148 <HAL_TIM_PWM_ConfigChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003082:	f7ff fe27 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003086:	4803      	ldr	r0, [pc, #12]	; (8003094 <MX_TIM3_Init+0xe4>)
 8003088:	f000 f956 	bl	8003338 <HAL_TIM_MspPostInit>

}
 800308c:	bf00      	nop
 800308e:	3738      	adds	r7, #56	; 0x38
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	200001c0 	.word	0x200001c0
 8003098:	40000400 	.word	0x40000400

0800309c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a2:	f107 0320 	add.w	r3, r7, #32
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	60da      	str	r2, [r3, #12]
 80030b8:	611a      	str	r2, [r3, #16]
 80030ba:	615a      	str	r2, [r3, #20]
 80030bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <MX_TIM5_Init+0xc0>)
 80030c0:	4a27      	ldr	r2, [pc, #156]	; (8003160 <MX_TIM5_Init+0xc4>)
 80030c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <MX_TIM5_Init+0xc0>)
 80030c6:	220f      	movs	r2, #15
 80030c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ca:	4b24      	ldr	r3, [pc, #144]	; (800315c <MX_TIM5_Init+0xc0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 80030d0:	4b22      	ldr	r3, [pc, #136]	; (800315c <MX_TIM5_Init+0xc0>)
 80030d2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80030d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d8:	4b20      	ldr	r3, [pc, #128]	; (800315c <MX_TIM5_Init+0xc0>)
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030de:	4b1f      	ldr	r3, [pc, #124]	; (800315c <MX_TIM5_Init+0xc0>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80030e4:	481d      	ldr	r0, [pc, #116]	; (800315c <MX_TIM5_Init+0xc0>)
 80030e6:	f001 fbb3 	bl	8004850 <HAL_TIM_PWM_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80030f0:	f7ff fdf0 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f4:	2300      	movs	r3, #0
 80030f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80030fc:	f107 0320 	add.w	r3, r7, #32
 8003100:	4619      	mov	r1, r3
 8003102:	4816      	ldr	r0, [pc, #88]	; (800315c <MX_TIM5_Init+0xc0>)
 8003104:	f002 fdf6 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800310e:	f7ff fde1 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003112:	2360      	movs	r3, #96	; 0x60
 8003114:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	2200      	movs	r2, #0
 8003126:	4619      	mov	r1, r3
 8003128:	480c      	ldr	r0, [pc, #48]	; (800315c <MX_TIM5_Init+0xc0>)
 800312a:	f002 f80d 	bl	8005148 <HAL_TIM_PWM_ConfigChannel>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003134:	f7ff fdce 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	2204      	movs	r2, #4
 800313c:	4619      	mov	r1, r3
 800313e:	4807      	ldr	r0, [pc, #28]	; (800315c <MX_TIM5_Init+0xc0>)
 8003140:	f002 f802 	bl	8005148 <HAL_TIM_PWM_ConfigChannel>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800314a:	f7ff fdc3 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800314e:	4803      	ldr	r0, [pc, #12]	; (800315c <MX_TIM5_Init+0xc0>)
 8003150:	f000 f8f2 	bl	8003338 <HAL_TIM_MspPostInit>

}
 8003154:	bf00      	nop
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000208 	.word	0x20000208
 8003160:	40000c00 	.word	0x40000c00

08003164 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
 8003178:	615a      	str	r2, [r3, #20]
 800317a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800317c:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <MX_TIM11_Init+0x94>)
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <MX_TIM11_Init+0x98>)
 8003180:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16-1;
 8003182:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <MX_TIM11_Init+0x94>)
 8003184:	220f      	movs	r2, #15
 8003186:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <MX_TIM11_Init+0x94>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 20000-1;
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <MX_TIM11_Init+0x94>)
 8003190:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003194:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003196:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <MX_TIM11_Init+0x94>)
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800319c:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <MX_TIM11_Init+0x94>)
 800319e:	2200      	movs	r2, #0
 80031a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80031a2:	4815      	ldr	r0, [pc, #84]	; (80031f8 <MX_TIM11_Init+0x94>)
 80031a4:	f001 faa2 	bl	80046ec <HAL_TIM_Base_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80031ae:	f7ff fd91 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80031b2:	4811      	ldr	r0, [pc, #68]	; (80031f8 <MX_TIM11_Init+0x94>)
 80031b4:	f001 fb4c 	bl	8004850 <HAL_TIM_PWM_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80031be:	f7ff fd89 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031c2:	2360      	movs	r3, #96	; 0x60
 80031c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	2200      	movs	r2, #0
 80031d6:	4619      	mov	r1, r3
 80031d8:	4807      	ldr	r0, [pc, #28]	; (80031f8 <MX_TIM11_Init+0x94>)
 80031da:	f001 ffb5 	bl	8005148 <HAL_TIM_PWM_ConfigChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80031e4:	f7ff fd76 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80031e8:	4803      	ldr	r0, [pc, #12]	; (80031f8 <MX_TIM11_Init+0x94>)
 80031ea:	f000 f8a5 	bl	8003338 <HAL_TIM_MspPostInit>

}
 80031ee:	bf00      	nop
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000250 	.word	0x20000250
 80031fc:	40014800 	.word	0x40014800

08003200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 031c 	add.w	r3, r7, #28
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d134      	bne.n	800328c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a2e      	ldr	r2, [pc, #184]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800325a:	2320      	movs	r3, #32
 800325c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325e:	2302      	movs	r3, #2
 8003260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800326a:	2301      	movs	r3, #1
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326e:	f107 031c 	add.w	r3, r7, #28
 8003272:	4619      	mov	r1, r3
 8003274:	481c      	ldr	r0, [pc, #112]	; (80032e8 <HAL_TIM_Base_MspInit+0xe8>)
 8003276:	f000 fbe1 	bl	8003a3c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	2105      	movs	r1, #5
 800327e:	201c      	movs	r0, #28
 8003280:	f000 fb20 	bl	80038c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003284:	201c      	movs	r0, #28
 8003286:	f000 fb39 	bl	80038fc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800328a:	e026      	b.n	80032da <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM3)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_TIM_Base_MspInit+0xec>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4a11      	ldr	r2, [pc, #68]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	6413      	str	r3, [r2, #64]	; 0x40
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]
}
 80032b2:	e012      	b.n	80032da <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM11)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <HAL_TIM_Base_MspInit+0xf0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d10d      	bne.n	80032da <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 80032c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032cc:	6453      	str	r3, [r2, #68]	; 0x44
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	bf00      	nop
 80032dc:	3730      	adds	r7, #48	; 0x30
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40020000 	.word	0x40020000
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40014800 	.word	0x40014800

080032f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <HAL_TIM_PWM_MspInit+0x3c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10d      	bne.n	8003322 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_TIM_PWM_MspInit+0x40>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <HAL_TIM_PWM_MspInit+0x40>)
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_TIM_PWM_MspInit+0x40>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40023800 	.word	0x40023800

08003338 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a36      	ldr	r2, [pc, #216]	; (8003430 <HAL_TIM_MspPostInit+0xf8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d11e      	bne.n	8003398 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	4b35      	ldr	r3, [pc, #212]	; (8003434 <HAL_TIM_MspPostInit+0xfc>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a34      	ldr	r2, [pc, #208]	; (8003434 <HAL_TIM_MspPostInit+0xfc>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b32      	ldr	r3, [pc, #200]	; (8003434 <HAL_TIM_MspPostInit+0xfc>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003376:	2340      	movs	r3, #64	; 0x40
 8003378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003386:	2302      	movs	r3, #2
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	4619      	mov	r1, r3
 8003390:	4829      	ldr	r0, [pc, #164]	; (8003438 <HAL_TIM_MspPostInit+0x100>)
 8003392:	f000 fb53 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003396:	e047      	b.n	8003428 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a27      	ldr	r2, [pc, #156]	; (800343c <HAL_TIM_MspPostInit+0x104>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d11e      	bne.n	80033e0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_TIM_MspPostInit+0xfc>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	4a22      	ldr	r2, [pc, #136]	; (8003434 <HAL_TIM_MspPostInit+0xfc>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6313      	str	r3, [r2, #48]	; 0x30
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_TIM_MspPostInit+0xfc>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_EN1_Pin|MOTOR_EN2_Pin;
 80033be:	2303      	movs	r3, #3
 80033c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80033ce:	2302      	movs	r3, #2
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	4619      	mov	r1, r3
 80033d8:	4817      	ldr	r0, [pc, #92]	; (8003438 <HAL_TIM_MspPostInit+0x100>)
 80033da:	f000 fb2f 	bl	8003a3c <HAL_GPIO_Init>
}
 80033de:	e023      	b.n	8003428 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM11)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_TIM_MspPostInit+0x108>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d11e      	bne.n	8003428 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_TIM_MspPostInit+0xfc>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a10      	ldr	r2, [pc, #64]	; (8003434 <HAL_TIM_MspPostInit+0xfc>)
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <HAL_TIM_MspPostInit+0xfc>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 8003406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800340a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340c:	2302      	movs	r3, #2
 800340e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003414:	2300      	movs	r3, #0
 8003416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003418:	2303      	movs	r3, #3
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	4619      	mov	r1, r3
 8003422:	4808      	ldr	r0, [pc, #32]	; (8003444 <HAL_TIM_MspPostInit+0x10c>)
 8003424:	f000 fb0a 	bl	8003a3c <HAL_GPIO_Init>
}
 8003428:	bf00      	nop
 800342a:	3728      	adds	r7, #40	; 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40000400 	.word	0x40000400
 8003434:	40023800 	.word	0x40023800
 8003438:	40020000 	.word	0x40020000
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40014800 	.word	0x40014800
 8003444:	40020400 	.word	0x40020400

08003448 <Motor1_SetSpeed>:
  }
}

/* USER CODE BEGIN 1 */
void Motor1_SetSpeed(double speed)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	ed87 0b00 	vstr	d0, [r7]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8003452:	f107 030c 	add.w	r3, r7, #12
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	60da      	str	r2, [r3, #12]
 8003460:	611a      	str	r2, [r3, #16]
 8003462:	615a      	str	r2, [r3, #20]
 8003464:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003466:	2360      	movs	r3, #96	; 0x60
 8003468:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = (speed/100.0) * (20000-1);
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <Motor1_SetSpeed+0x98>)
 8003470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003474:	f7fd f99a 	bl	80007ac <__aeabi_ddiv>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	a315      	add	r3, pc, #84	; (adr r3, 80034d8 <Motor1_SetSpeed+0x90>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fd f867 	bl	8000558 <__aeabi_dmul>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f7fd fa73 	bl	800097c <__aeabi_d2uiz>
 8003496:	4603      	mov	r3, r0
 8003498:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	2200      	movs	r2, #0
 80034a8:	4619      	mov	r1, r3
 80034aa:	480e      	ldr	r0, [pc, #56]	; (80034e4 <Motor1_SetSpeed+0x9c>)
 80034ac:	f001 fe4c 	bl	8005148 <HAL_TIM_PWM_ConfigChannel>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <Motor1_SetSpeed+0x72>
	  {
	    Error_Handler();
 80034b6:	f7ff fc0d 	bl	8002cd4 <Error_Handler>
	  }
	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 80034ba:	2100      	movs	r1, #0
 80034bc:	4809      	ldr	r0, [pc, #36]	; (80034e4 <Motor1_SetSpeed+0x9c>)
 80034be:	f001 fac7 	bl	8004a50 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80034c2:	2100      	movs	r1, #0
 80034c4:	4807      	ldr	r0, [pc, #28]	; (80034e4 <Motor1_SetSpeed+0x9c>)
 80034c6:	f001 fa13 	bl	80048f0 <HAL_TIM_PWM_Start>
}
 80034ca:	bf00      	nop
 80034cc:	3728      	adds	r7, #40	; 0x28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	f3af 8000 	nop.w
 80034d8:	00000000 	.word	0x00000000
 80034dc:	40d387c0 	.word	0x40d387c0
 80034e0:	40590000 	.word	0x40590000
 80034e4:	20000208 	.word	0x20000208

080034e8 <Motor2_SetSpeed>:

void Motor2_SetSpeed(double speed)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	ed87 0b00 	vstr	d0, [r7]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	60da      	str	r2, [r3, #12]
 8003500:	611a      	str	r2, [r3, #16]
 8003502:	615a      	str	r2, [r3, #20]
 8003504:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003506:	2360      	movs	r3, #96	; 0x60
 8003508:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = (speed/100.0) * (20000-1);
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <Motor2_SetSpeed+0x98>)
 8003510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003514:	f7fd f94a 	bl	80007ac <__aeabi_ddiv>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	a315      	add	r3, pc, #84	; (adr r3, 8003578 <Motor2_SetSpeed+0x90>)
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f7fd f817 	bl	8000558 <__aeabi_dmul>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f7fd fa23 	bl	800097c <__aeabi_d2uiz>
 8003536:	4603      	mov	r3, r0
 8003538:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	2204      	movs	r2, #4
 8003548:	4619      	mov	r1, r3
 800354a:	480e      	ldr	r0, [pc, #56]	; (8003584 <Motor2_SetSpeed+0x9c>)
 800354c:	f001 fdfc 	bl	8005148 <HAL_TIM_PWM_ConfigChannel>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <Motor2_SetSpeed+0x72>
	  {
	    Error_Handler();
 8003556:	f7ff fbbd 	bl	8002cd4 <Error_Handler>
	  }
	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
 800355a:	2104      	movs	r1, #4
 800355c:	4809      	ldr	r0, [pc, #36]	; (8003584 <Motor2_SetSpeed+0x9c>)
 800355e:	f001 fa77 	bl	8004a50 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003562:	2104      	movs	r1, #4
 8003564:	4807      	ldr	r0, [pc, #28]	; (8003584 <Motor2_SetSpeed+0x9c>)
 8003566:	f001 f9c3 	bl	80048f0 <HAL_TIM_PWM_Start>
}
 800356a:	bf00      	nop
 800356c:	3728      	adds	r7, #40	; 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	f3af 8000 	nop.w
 8003578:	00000000 	.word	0x00000000
 800357c:	40d387c0 	.word	0x40d387c0
 8003580:	40590000 	.word	0x40590000
 8003584:	20000208 	.word	0x20000208

08003588 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <MX_USART2_UART_Init+0x50>)
 8003590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 8003594:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035ae:	220c      	movs	r2, #12
 80035b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035be:	4805      	ldr	r0, [pc, #20]	; (80035d4 <MX_USART2_UART_Init+0x4c>)
 80035c0:	f002 fc1a 	bl	8005df8 <HAL_UART_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80035ca:	f7ff fb83 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000298 	.word	0x20000298
 80035d8:	40004400 	.word	0x40004400

080035dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <HAL_UART_MspInit+0x94>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d133      	bne.n	8003666 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <HAL_UART_MspInit+0x98>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_UART_MspInit+0x98>)
 8003608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_UART_MspInit+0x98>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_UART_MspInit+0x98>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a14      	ldr	r2, [pc, #80]	; (8003674 <HAL_UART_MspInit+0x98>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_UART_MspInit+0x98>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003636:	230c      	movs	r3, #12
 8003638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003642:	2303      	movs	r3, #3
 8003644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003646:	2307      	movs	r3, #7
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4619      	mov	r1, r3
 8003650:	4809      	ldr	r0, [pc, #36]	; (8003678 <HAL_UART_MspInit+0x9c>)
 8003652:	f000 f9f3 	bl	8003a3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003656:	2200      	movs	r2, #0
 8003658:	2105      	movs	r1, #5
 800365a:	2026      	movs	r0, #38	; 0x26
 800365c:	f000 f932 	bl	80038c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003660:	2026      	movs	r0, #38	; 0x26
 8003662:	f000 f94b 	bl	80038fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003666:	bf00      	nop
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40004400 	.word	0x40004400
 8003674:	40023800 	.word	0x40023800
 8003678:	40020000 	.word	0x40020000

0800367c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800367c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003680:	480d      	ldr	r0, [pc, #52]	; (80036b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003682:	490e      	ldr	r1, [pc, #56]	; (80036bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003684:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003688:	e002      	b.n	8003690 <LoopCopyDataInit>

0800368a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800368c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368e:	3304      	adds	r3, #4

08003690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003694:	d3f9      	bcc.n	800368a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003696:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003698:	4c0b      	ldr	r4, [pc, #44]	; (80036c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800369c:	e001      	b.n	80036a2 <LoopFillZerobss>

0800369e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800369e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a0:	3204      	adds	r2, #4

080036a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a4:	d3fb      	bcc.n	800369e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036a6:	f7ff fc01 	bl	8002eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036aa:	f006 fb29 	bl	8009d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ae:	f7ff f9cf 	bl	8002a50 <main>
  bx  lr    
 80036b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036bc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80036c0:	0800a1ec 	.word	0x0800a1ec
  ldr r2, =_sbss
 80036c4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80036c8:	20004c30 	.word	0x20004c30

080036cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC_IRQHandler>
	...

080036d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_Init+0x40>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <HAL_Init+0x40>)
 80036da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_Init+0x40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <HAL_Init+0x40>)
 80036e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <HAL_Init+0x40>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a07      	ldr	r2, [pc, #28]	; (8003710 <HAL_Init+0x40>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f8:	2003      	movs	r0, #3
 80036fa:	f000 f8d8 	bl	80038ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036fe:	2005      	movs	r0, #5
 8003700:	f7ff fb1a 	bl	8002d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003704:	f7ff faec 	bl	8002ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00

08003714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_IncTick+0x20>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_IncTick+0x24>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4413      	add	r3, r2
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <HAL_IncTick+0x24>)
 8003726:	6013      	str	r3, [r2, #0]
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	2000001c 	.word	0x2000001c
 8003738:	200002dc 	.word	0x200002dc

0800373c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return uwTick;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_GetTick+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	200002dc 	.word	0x200002dc

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4907      	ldr	r1, [pc, #28]	; (80037f0 <__NVIC_EnableIRQ+0x38>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100

080037f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db0a      	blt.n	800381e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	490c      	ldr	r1, [pc, #48]	; (8003840 <__NVIC_SetPriority+0x4c>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	440b      	add	r3, r1
 8003818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800381c:	e00a      	b.n	8003834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4908      	ldr	r1, [pc, #32]	; (8003844 <__NVIC_SetPriority+0x50>)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	3b04      	subs	r3, #4
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	440b      	add	r3, r1
 8003832:	761a      	strb	r2, [r3, #24]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003848:	b480      	push	{r7}
 800384a:	b089      	sub	sp, #36	; 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f1c3 0307 	rsb	r3, r3, #7
 8003862:	2b04      	cmp	r3, #4
 8003864:	bf28      	it	cs
 8003866:	2304      	movcs	r3, #4
 8003868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3304      	adds	r3, #4
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <NVIC_EncodePriority+0x30>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3b03      	subs	r3, #3
 8003876:	e000      	b.n	800387a <NVIC_EncodePriority+0x32>
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	f04f 32ff 	mov.w	r2, #4294967295
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	401a      	ands	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003890:	f04f 31ff 	mov.w	r1, #4294967295
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	43d9      	mvns	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	4313      	orrs	r3, r2
         );
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff ff4c 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d6:	f7ff ff61 	bl	800379c <__NVIC_GetPriorityGrouping>
 80038da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	6978      	ldr	r0, [r7, #20]
 80038e2:	f7ff ffb1 	bl	8003848 <NVIC_EncodePriority>
 80038e6:	4602      	mov	r2, r0
 80038e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff80 	bl	80037f4 <__NVIC_SetPriority>
}
 80038f4:	bf00      	nop
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ff54 	bl	80037b8 <__NVIC_EnableIRQ>
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003926:	f7ff ff09 	bl	800373c <HAL_GetTick>
 800392a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d008      	beq.n	800394a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2280      	movs	r2, #128	; 0x80
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e052      	b.n	80039f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0216 	bic.w	r2, r2, #22
 8003958:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003968:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_DMA_Abort+0x62>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0208 	bic.w	r2, r2, #8
 8003988:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800399a:	e013      	b.n	80039c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800399c:	f7ff fece 	bl	800373c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d90c      	bls.n	80039c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2203      	movs	r2, #3
 80039b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e015      	b.n	80039f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e4      	bne.n	800399c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	223f      	movs	r2, #63	; 0x3f
 80039d8:	409a      	lsls	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d004      	beq.n	8003a16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00c      	b.n	8003a30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2205      	movs	r2, #5
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e159      	b.n	8003d0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a58:	2201      	movs	r2, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	f040 8148 	bne.w	8003d06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d005      	beq.n	8003a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d130      	bne.n	8003af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2203      	movs	r2, #3
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 0201 	and.w	r2, r3, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d017      	beq.n	8003b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2203      	movs	r2, #3
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d123      	bne.n	8003b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	08da      	lsrs	r2, r3, #3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3208      	adds	r2, #8
 8003b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	220f      	movs	r2, #15
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	08da      	lsrs	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3208      	adds	r2, #8
 8003b7a:	69b9      	ldr	r1, [r7, #24]
 8003b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0203 	and.w	r2, r3, #3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80a2 	beq.w	8003d06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <HAL_GPIO_Init+0x2e8>)
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	4a56      	ldr	r2, [pc, #344]	; (8003d24 <HAL_GPIO_Init+0x2e8>)
 8003bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd2:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <HAL_GPIO_Init+0x2e8>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bde:	4a52      	ldr	r2, [pc, #328]	; (8003d28 <HAL_GPIO_Init+0x2ec>)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a49      	ldr	r2, [pc, #292]	; (8003d2c <HAL_GPIO_Init+0x2f0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d019      	beq.n	8003c3e <HAL_GPIO_Init+0x202>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a48      	ldr	r2, [pc, #288]	; (8003d30 <HAL_GPIO_Init+0x2f4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_GPIO_Init+0x1fe>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a47      	ldr	r2, [pc, #284]	; (8003d34 <HAL_GPIO_Init+0x2f8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00d      	beq.n	8003c36 <HAL_GPIO_Init+0x1fa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a46      	ldr	r2, [pc, #280]	; (8003d38 <HAL_GPIO_Init+0x2fc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <HAL_GPIO_Init+0x1f6>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a45      	ldr	r2, [pc, #276]	; (8003d3c <HAL_GPIO_Init+0x300>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d101      	bne.n	8003c2e <HAL_GPIO_Init+0x1f2>
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	e008      	b.n	8003c40 <HAL_GPIO_Init+0x204>
 8003c2e:	2307      	movs	r3, #7
 8003c30:	e006      	b.n	8003c40 <HAL_GPIO_Init+0x204>
 8003c32:	2303      	movs	r3, #3
 8003c34:	e004      	b.n	8003c40 <HAL_GPIO_Init+0x204>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e002      	b.n	8003c40 <HAL_GPIO_Init+0x204>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_GPIO_Init+0x204>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	f002 0203 	and.w	r2, r2, #3
 8003c46:	0092      	lsls	r2, r2, #2
 8003c48:	4093      	lsls	r3, r2
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c50:	4935      	ldr	r1, [pc, #212]	; (8003d28 <HAL_GPIO_Init+0x2ec>)
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	089b      	lsrs	r3, r3, #2
 8003c56:	3302      	adds	r3, #2
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c5e:	4b38      	ldr	r3, [pc, #224]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c82:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c88:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cac:	4a24      	ldr	r2, [pc, #144]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cd6:	4a1a      	ldr	r2, [pc, #104]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cdc:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d00:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b0f      	cmp	r3, #15
 8003d10:	f67f aea2 	bls.w	8003a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40013800 	.word	0x40013800
 8003d2c:	40020000 	.word	0x40020000
 8003d30:	40020400 	.word	0x40020400
 8003d34:	40020800 	.word	0x40020800
 8003d38:	40020c00 	.word	0x40020c00
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40013c00 	.word	0x40013c00

08003d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	887b      	ldrh	r3, [r7, #2]
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
 8003d60:	e001      	b.n	8003d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
 8003d80:	4613      	mov	r3, r2
 8003d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d84:	787b      	ldrb	r3, [r7, #1]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d8a:	887a      	ldrh	r2, [r7, #2]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d90:	e003      	b.n	8003d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	041a      	lsls	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	619a      	str	r2, [r3, #24]
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dbe:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe ff4a 	bl	8002c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e267      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d075      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df6:	4b88      	ldr	r3, [pc, #544]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d00c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e02:	4b85      	ldr	r3, [pc, #532]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d112      	bne.n	8003e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0e:	4b82      	ldr	r3, [pc, #520]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e1a:	d10b      	bne.n	8003e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1c:	4b7e      	ldr	r3, [pc, #504]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d05b      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x108>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d157      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e242      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_OscConfig+0x74>
 8003e3e:	4b76      	ldr	r3, [pc, #472]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a75      	ldr	r2, [pc, #468]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e01d      	b.n	8003e88 <HAL_RCC_OscConfig+0xb0>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x98>
 8003e56:	4b70      	ldr	r3, [pc, #448]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a6f      	ldr	r2, [pc, #444]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	4b6d      	ldr	r3, [pc, #436]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6c      	ldr	r2, [pc, #432]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCC_OscConfig+0xb0>
 8003e70:	4b69      	ldr	r3, [pc, #420]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a68      	ldr	r2, [pc, #416]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	4b66      	ldr	r3, [pc, #408]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a65      	ldr	r2, [pc, #404]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d013      	beq.n	8003eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7ff fc54 	bl	800373c <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e98:	f7ff fc50 	bl	800373c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e207      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eaa:	4b5b      	ldr	r3, [pc, #364]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0xc0>
 8003eb6:	e014      	b.n	8003ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7ff fc40 	bl	800373c <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7ff fc3c 	bl	800373c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e1f3      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed2:	4b51      	ldr	r3, [pc, #324]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0xe8>
 8003ede:	e000      	b.n	8003ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d063      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eee:	4b4a      	ldr	r3, [pc, #296]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efa:	4b47      	ldr	r3, [pc, #284]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d11c      	bne.n	8003f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f06:	4b44      	ldr	r3, [pc, #272]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d116      	bne.n	8003f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f12:	4b41      	ldr	r3, [pc, #260]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_RCC_OscConfig+0x152>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d001      	beq.n	8003f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e1c7      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2a:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4937      	ldr	r1, [pc, #220]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3e:	e03a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f48:	4b34      	ldr	r3, [pc, #208]	; (800401c <HAL_RCC_OscConfig+0x244>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7ff fbf5 	bl	800373c <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f56:	f7ff fbf1 	bl	800373c <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e1a8      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f68:	4b2b      	ldr	r3, [pc, #172]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f74:	4b28      	ldr	r3, [pc, #160]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4925      	ldr	r1, [pc, #148]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	600b      	str	r3, [r1, #0]
 8003f88:	e015      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8a:	4b24      	ldr	r3, [pc, #144]	; (800401c <HAL_RCC_OscConfig+0x244>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7ff fbd4 	bl	800373c <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f98:	f7ff fbd0 	bl	800373c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e187      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d036      	beq.n	8004030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fca:	4b15      	ldr	r3, [pc, #84]	; (8004020 <HAL_RCC_OscConfig+0x248>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd0:	f7ff fbb4 	bl	800373c <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd8:	f7ff fbb0 	bl	800373c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e167      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_OscConfig+0x240>)
 8003fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x200>
 8003ff6:	e01b      	b.n	8004030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_RCC_OscConfig+0x248>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffe:	f7ff fb9d 	bl	800373c <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	e00e      	b.n	8004024 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004006:	f7ff fb99 	bl	800373c <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d907      	bls.n	8004024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e150      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
 8004018:	40023800 	.word	0x40023800
 800401c:	42470000 	.word	0x42470000
 8004020:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004024:	4b88      	ldr	r3, [pc, #544]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ea      	bne.n	8004006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8097 	beq.w	800416c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004042:	4b81      	ldr	r3, [pc, #516]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10f      	bne.n	800406e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	4b7d      	ldr	r3, [pc, #500]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a7c      	ldr	r2, [pc, #496]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405c:	6413      	str	r3, [r2, #64]	; 0x40
 800405e:	4b7a      	ldr	r3, [pc, #488]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	4b77      	ldr	r3, [pc, #476]	; (800424c <HAL_RCC_OscConfig+0x474>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d118      	bne.n	80040ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407a:	4b74      	ldr	r3, [pc, #464]	; (800424c <HAL_RCC_OscConfig+0x474>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a73      	ldr	r2, [pc, #460]	; (800424c <HAL_RCC_OscConfig+0x474>)
 8004080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004086:	f7ff fb59 	bl	800373c <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408e:	f7ff fb55 	bl	800373c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e10c      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a0:	4b6a      	ldr	r3, [pc, #424]	; (800424c <HAL_RCC_OscConfig+0x474>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_OscConfig+0x2ea>
 80040b4:	4b64      	ldr	r3, [pc, #400]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a63      	ldr	r2, [pc, #396]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
 80040c0:	e01c      	b.n	80040fc <HAL_RCC_OscConfig+0x324>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x30c>
 80040ca:	4b5f      	ldr	r3, [pc, #380]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	4a5e      	ldr	r2, [pc, #376]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80040d0:	f043 0304 	orr.w	r3, r3, #4
 80040d4:	6713      	str	r3, [r2, #112]	; 0x70
 80040d6:	4b5c      	ldr	r3, [pc, #368]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a5b      	ldr	r2, [pc, #364]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0x324>
 80040e4:	4b58      	ldr	r3, [pc, #352]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	4a57      	ldr	r2, [pc, #348]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6713      	str	r3, [r2, #112]	; 0x70
 80040f0:	4b55      	ldr	r3, [pc, #340]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a54      	ldr	r2, [pc, #336]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80040f6:	f023 0304 	bic.w	r3, r3, #4
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d015      	beq.n	8004130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7ff fb1a 	bl	800373c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	e00a      	b.n	8004122 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7ff fb16 	bl	800373c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	; 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e0cb      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	4b49      	ldr	r3, [pc, #292]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ee      	beq.n	800410c <HAL_RCC_OscConfig+0x334>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004130:	f7ff fb04 	bl	800373c <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004136:	e00a      	b.n	800414e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004138:	f7ff fb00 	bl	800373c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f241 3288 	movw	r2, #5000	; 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e0b5      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414e:	4b3e      	ldr	r3, [pc, #248]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1ee      	bne.n	8004138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d105      	bne.n	800416c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004160:	4b39      	ldr	r3, [pc, #228]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	4a38      	ldr	r2, [pc, #224]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80a1 	beq.w	80042b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004176:	4b34      	ldr	r3, [pc, #208]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b08      	cmp	r3, #8
 8004180:	d05c      	beq.n	800423c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d141      	bne.n	800420e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418a:	4b31      	ldr	r3, [pc, #196]	; (8004250 <HAL_RCC_OscConfig+0x478>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7ff fad4 	bl	800373c <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004198:	f7ff fad0 	bl	800373c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e087      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041aa:	4b27      	ldr	r3, [pc, #156]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	019b      	lsls	r3, r3, #6
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	3b01      	subs	r3, #1
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	061b      	lsls	r3, r3, #24
 80041da:	491b      	ldr	r1, [pc, #108]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e0:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <HAL_RCC_OscConfig+0x478>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7ff faa9 	bl	800373c <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ee:	f7ff faa5 	bl	800373c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e05c      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004200:	4b11      	ldr	r3, [pc, #68]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x416>
 800420c:	e054      	b.n	80042b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_RCC_OscConfig+0x478>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7ff fa92 	bl	800373c <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421c:	f7ff fa8e 	bl	800373c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e045      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_OscConfig+0x470>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x444>
 800423a:	e03d      	b.n	80042b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e038      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
 8004248:	40023800 	.word	0x40023800
 800424c:	40007000 	.word	0x40007000
 8004250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <HAL_RCC_OscConfig+0x4ec>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d028      	beq.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d121      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d11a      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004284:	4013      	ands	r3, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800428a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800428c:	4293      	cmp	r3, r2
 800428e:	d111      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	3b01      	subs	r3, #1
 800429e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800

080042c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0cc      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042dc:	4b68      	ldr	r3, [pc, #416]	; (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d90c      	bls.n	8004304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b65      	ldr	r3, [pc, #404]	; (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b63      	ldr	r3, [pc, #396]	; (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0b8      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800431c:	4b59      	ldr	r3, [pc, #356]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a58      	ldr	r2, [pc, #352]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004334:	4b53      	ldr	r3, [pc, #332]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	4a52      	ldr	r2, [pc, #328]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800433e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004340:	4b50      	ldr	r3, [pc, #320]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	494d      	ldr	r1, [pc, #308]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d044      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d119      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e07f      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d003      	beq.n	8004386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004382:	2b03      	cmp	r3, #3
 8004384:	d107      	bne.n	8004396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004386:	4b3f      	ldr	r3, [pc, #252]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e06f      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004396:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e067      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043a6:	4b37      	ldr	r3, [pc, #220]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f023 0203 	bic.w	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4934      	ldr	r1, [pc, #208]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b8:	f7ff f9c0 	bl	800373c <HAL_GetTick>
 80043bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c0:	f7ff f9bc 	bl	800373c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e04f      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d6:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 020c 	and.w	r2, r3, #12
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d1eb      	bne.n	80043c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e8:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d20c      	bcs.n	8004410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b22      	ldr	r3, [pc, #136]	; (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	4b20      	ldr	r3, [pc, #128]	; (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e032      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4916      	ldr	r1, [pc, #88]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	490e      	ldr	r1, [pc, #56]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	4313      	orrs	r3, r2
 800444c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800444e:	f000 f821 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8004452:	4602      	mov	r2, r0
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	490a      	ldr	r1, [pc, #40]	; (8004488 <HAL_RCC_ClockConfig+0x1c0>)
 8004460:	5ccb      	ldrb	r3, [r1, r3]
 8004462:	fa22 f303 	lsr.w	r3, r2, r3
 8004466:	4a09      	ldr	r2, [pc, #36]	; (800448c <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fc62 	bl	8002d38 <HAL_InitTick>

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40023c00 	.word	0x40023c00
 8004484:	40023800 	.word	0x40023800
 8004488:	0800a0c0 	.word	0x0800a0c0
 800448c:	20000014 	.word	0x20000014
 8004490:	20000018 	.word	0x20000018

08004494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004498:	b090      	sub	sp, #64	; 0x40
 800449a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
 80044a0:	2300      	movs	r3, #0
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a4:	2300      	movs	r3, #0
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ac:	4b59      	ldr	r3, [pc, #356]	; (8004614 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d00d      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x40>
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	f200 80a1 	bhi.w	8004600 <HAL_RCC_GetSysClockFreq+0x16c>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_RCC_GetSysClockFreq+0x34>
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d003      	beq.n	80044ce <HAL_RCC_GetSysClockFreq+0x3a>
 80044c6:	e09b      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c8:	4b53      	ldr	r3, [pc, #332]	; (8004618 <HAL_RCC_GetSysClockFreq+0x184>)
 80044ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80044cc:	e09b      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ce:	4b53      	ldr	r3, [pc, #332]	; (800461c <HAL_RCC_GetSysClockFreq+0x188>)
 80044d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044d2:	e098      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044d4:	4b4f      	ldr	r3, [pc, #316]	; (8004614 <HAL_RCC_GetSysClockFreq+0x180>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044de:	4b4d      	ldr	r3, [pc, #308]	; (8004614 <HAL_RCC_GetSysClockFreq+0x180>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d028      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ea:	4b4a      	ldr	r3, [pc, #296]	; (8004614 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	099b      	lsrs	r3, r3, #6
 80044f0:	2200      	movs	r2, #0
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	627a      	str	r2, [r7, #36]	; 0x24
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044fc:	2100      	movs	r1, #0
 80044fe:	4b47      	ldr	r3, [pc, #284]	; (800461c <HAL_RCC_GetSysClockFreq+0x188>)
 8004500:	fb03 f201 	mul.w	r2, r3, r1
 8004504:	2300      	movs	r3, #0
 8004506:	fb00 f303 	mul.w	r3, r0, r3
 800450a:	4413      	add	r3, r2
 800450c:	4a43      	ldr	r2, [pc, #268]	; (800461c <HAL_RCC_GetSysClockFreq+0x188>)
 800450e:	fba0 1202 	umull	r1, r2, r0, r2
 8004512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004514:	460a      	mov	r2, r1
 8004516:	62ba      	str	r2, [r7, #40]	; 0x28
 8004518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800451a:	4413      	add	r3, r2
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	2200      	movs	r2, #0
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	61fa      	str	r2, [r7, #28]
 8004526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800452a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800452e:	f7fc fa95 	bl	8000a5c <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4613      	mov	r3, r2
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800453a:	e053      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453c:	4b35      	ldr	r3, [pc, #212]	; (8004614 <HAL_RCC_GetSysClockFreq+0x180>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	099b      	lsrs	r3, r3, #6
 8004542:	2200      	movs	r2, #0
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	617a      	str	r2, [r7, #20]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800454e:	f04f 0b00 	mov.w	fp, #0
 8004552:	4652      	mov	r2, sl
 8004554:	465b      	mov	r3, fp
 8004556:	f04f 0000 	mov.w	r0, #0
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	0159      	lsls	r1, r3, #5
 8004560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004564:	0150      	lsls	r0, r2, #5
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	ebb2 080a 	subs.w	r8, r2, sl
 800456e:	eb63 090b 	sbc.w	r9, r3, fp
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800457e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004582:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004586:	ebb2 0408 	subs.w	r4, r2, r8
 800458a:	eb63 0509 	sbc.w	r5, r3, r9
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	00eb      	lsls	r3, r5, #3
 8004598:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800459c:	00e2      	lsls	r2, r4, #3
 800459e:	4614      	mov	r4, r2
 80045a0:	461d      	mov	r5, r3
 80045a2:	eb14 030a 	adds.w	r3, r4, sl
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	eb45 030b 	adc.w	r3, r5, fp
 80045ac:	607b      	str	r3, [r7, #4]
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045ba:	4629      	mov	r1, r5
 80045bc:	028b      	lsls	r3, r1, #10
 80045be:	4621      	mov	r1, r4
 80045c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045c4:	4621      	mov	r1, r4
 80045c6:	028a      	lsls	r2, r1, #10
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ce:	2200      	movs	r2, #0
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	60fa      	str	r2, [r7, #12]
 80045d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045d8:	f7fc fa40 	bl	8000a5c <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4613      	mov	r3, r2
 80045e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_GetSysClockFreq+0x180>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	0c1b      	lsrs	r3, r3, #16
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	3301      	adds	r3, #1
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80045f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045fe:	e002      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetSysClockFreq+0x184>)
 8004602:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004608:	4618      	mov	r0, r3
 800460a:	3740      	adds	r7, #64	; 0x40
 800460c:	46bd      	mov	sp, r7
 800460e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	00f42400 	.word	0x00f42400
 800461c:	017d7840 	.word	0x017d7840

08004620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004624:	4b03      	ldr	r3, [pc, #12]	; (8004634 <HAL_RCC_GetHCLKFreq+0x14>)
 8004626:	681b      	ldr	r3, [r3, #0]
}
 8004628:	4618      	mov	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000014 	.word	0x20000014

08004638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800463c:	f7ff fff0 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0a9b      	lsrs	r3, r3, #10
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCC_GetPCLK1Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	0800a0d0 	.word	0x0800a0d0

08004660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004664:	f7ff ffdc 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0b5b      	lsrs	r3, r3, #13
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4903      	ldr	r1, [pc, #12]	; (8004684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40023800 	.word	0x40023800
 8004684:	0800a0d0 	.word	0x0800a0d0

08004688 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	220f      	movs	r2, #15
 8004696:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_RCC_GetClockConfig+0x5c>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0203 	and.w	r2, r3, #3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046a4:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <HAL_RCC_GetClockConfig+0x5c>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046b0:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <HAL_RCC_GetClockConfig+0x5c>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <HAL_RCC_GetClockConfig+0x5c>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	08db      	lsrs	r3, r3, #3
 80046c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <HAL_RCC_GetClockConfig+0x60>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0207 	and.w	r2, r3, #7
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	601a      	str	r2, [r3, #0]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40023c00 	.word	0x40023c00

080046ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e041      	b.n	8004782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fe fd74 	bl	8003200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f000 fef8 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	d001      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e044      	b.n	800482e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1e      	ldr	r2, [pc, #120]	; (800483c <HAL_TIM_Base_Start_IT+0xb0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x6c>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ce:	d013      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x6c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <HAL_TIM_Base_Start_IT+0xb4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x6c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a19      	ldr	r2, [pc, #100]	; (8004844 <HAL_TIM_Base_Start_IT+0xb8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x6c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a17      	ldr	r2, [pc, #92]	; (8004848 <HAL_TIM_Base_Start_IT+0xbc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x6c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a16      	ldr	r2, [pc, #88]	; (800484c <HAL_TIM_Base_Start_IT+0xc0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d111      	bne.n	800481c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b06      	cmp	r3, #6
 8004808:	d010      	beq.n	800482c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	e007      	b.n	800482c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00
 800484c:	40014000 	.word	0x40014000

08004850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e041      	b.n	80048e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fe fd3c 	bl	80032f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f000 fe46 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_TIM_PWM_Start+0x24>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	e022      	b.n	800495a <HAL_TIM_PWM_Start+0x6a>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b04      	cmp	r3, #4
 8004918:	d109      	bne.n	800492e <HAL_TIM_PWM_Start+0x3e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	bf14      	ite	ne
 8004926:	2301      	movne	r3, #1
 8004928:	2300      	moveq	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	e015      	b.n	800495a <HAL_TIM_PWM_Start+0x6a>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b08      	cmp	r3, #8
 8004932:	d109      	bne.n	8004948 <HAL_TIM_PWM_Start+0x58>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e008      	b.n	800495a <HAL_TIM_PWM_Start+0x6a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e068      	b.n	8004a34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <HAL_TIM_PWM_Start+0x82>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004970:	e013      	b.n	800499a <HAL_TIM_PWM_Start+0xaa>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b04      	cmp	r3, #4
 8004976:	d104      	bne.n	8004982 <HAL_TIM_PWM_Start+0x92>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004980:	e00b      	b.n	800499a <HAL_TIM_PWM_Start+0xaa>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d104      	bne.n	8004992 <HAL_TIM_PWM_Start+0xa2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004990:	e003      	b.n	800499a <HAL_TIM_PWM_Start+0xaa>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2201      	movs	r2, #1
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 f980 	bl	8005ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a23      	ldr	r2, [pc, #140]	; (8004a3c <HAL_TIM_PWM_Start+0x14c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d107      	bne.n	80049c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1d      	ldr	r2, [pc, #116]	; (8004a3c <HAL_TIM_PWM_Start+0x14c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <HAL_TIM_PWM_Start+0x10e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d4:	d013      	beq.n	80049fe <HAL_TIM_PWM_Start+0x10e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a19      	ldr	r2, [pc, #100]	; (8004a40 <HAL_TIM_PWM_Start+0x150>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_TIM_PWM_Start+0x10e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <HAL_TIM_PWM_Start+0x154>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_TIM_PWM_Start+0x10e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a16      	ldr	r2, [pc, #88]	; (8004a48 <HAL_TIM_PWM_Start+0x158>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_TIM_PWM_Start+0x10e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a14      	ldr	r2, [pc, #80]	; (8004a4c <HAL_TIM_PWM_Start+0x15c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d111      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b06      	cmp	r3, #6
 8004a0e:	d010      	beq.n	8004a32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	e007      	b.n	8004a32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00
 8004a4c:	40014000 	.word	0x40014000

08004a50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 f920 	bl	8005ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a29      	ldr	r2, [pc, #164]	; (8004b14 <HAL_TIM_PWM_Stop+0xc4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d117      	bne.n	8004aa2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <HAL_TIM_PWM_Stop+0x52>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6a1a      	ldr	r2, [r3, #32]
 8004a88:	f240 4344 	movw	r3, #1092	; 0x444
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d107      	bne.n	8004aa2 <HAL_TIM_PWM_Stop+0x52>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a1a      	ldr	r2, [r3, #32]
 8004aa8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <HAL_TIM_PWM_Stop+0x82>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
 8004ab8:	f240 4344 	movw	r3, #1092	; 0x444
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <HAL_TIM_PWM_Stop+0x82>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <HAL_TIM_PWM_Stop+0x92>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae0:	e013      	b.n	8004b0a <HAL_TIM_PWM_Stop+0xba>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d104      	bne.n	8004af2 <HAL_TIM_PWM_Stop+0xa2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af0:	e00b      	b.n	8004b0a <HAL_TIM_PWM_Stop+0xba>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d104      	bne.n	8004b02 <HAL_TIM_PWM_Stop+0xb2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b00:	e003      	b.n	8004b0a <HAL_TIM_PWM_Stop+0xba>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40010000 	.word	0x40010000

08004b18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e041      	b.n	8004bae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f839 	bl	8004bb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f000 fce2 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_IC_Start_IT+0x1e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	e013      	b.n	8004c12 <HAL_TIM_IC_Start_IT+0x46>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_IC_Start_IT+0x2e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e00b      	b.n	8004c12 <HAL_TIM_IC_Start_IT+0x46>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_IC_Start_IT+0x3e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	e003      	b.n	8004c12 <HAL_TIM_IC_Start_IT+0x46>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <HAL_TIM_IC_Start_IT+0x58>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	e013      	b.n	8004c4c <HAL_TIM_IC_Start_IT+0x80>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d104      	bne.n	8004c34 <HAL_TIM_IC_Start_IT+0x68>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e00b      	b.n	8004c4c <HAL_TIM_IC_Start_IT+0x80>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d104      	bne.n	8004c44 <HAL_TIM_IC_Start_IT+0x78>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	e003      	b.n	8004c4c <HAL_TIM_IC_Start_IT+0x80>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c4e:	7bbb      	ldrb	r3, [r7, #14]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d102      	bne.n	8004c5a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c54:	7b7b      	ldrb	r3, [r7, #13]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0c2      	b.n	8004de4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <HAL_TIM_IC_Start_IT+0xa2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c6c:	e013      	b.n	8004c96 <HAL_TIM_IC_Start_IT+0xca>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d104      	bne.n	8004c7e <HAL_TIM_IC_Start_IT+0xb2>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c7c:	e00b      	b.n	8004c96 <HAL_TIM_IC_Start_IT+0xca>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_IC_Start_IT+0xc2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c8c:	e003      	b.n	8004c96 <HAL_TIM_IC_Start_IT+0xca>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_IC_Start_IT+0xda>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca4:	e013      	b.n	8004cce <HAL_TIM_IC_Start_IT+0x102>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_IC_Start_IT+0xea>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb4:	e00b      	b.n	8004cce <HAL_TIM_IC_Start_IT+0x102>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d104      	bne.n	8004cc6 <HAL_TIM_IC_Start_IT+0xfa>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc4:	e003      	b.n	8004cce <HAL_TIM_IC_Start_IT+0x102>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	d841      	bhi.n	8004d58 <HAL_TIM_IC_Start_IT+0x18c>
 8004cd4:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <HAL_TIM_IC_Start_IT+0x110>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004d11 	.word	0x08004d11
 8004ce0:	08004d59 	.word	0x08004d59
 8004ce4:	08004d59 	.word	0x08004d59
 8004ce8:	08004d59 	.word	0x08004d59
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d59 	.word	0x08004d59
 8004cf4:	08004d59 	.word	0x08004d59
 8004cf8:	08004d59 	.word	0x08004d59
 8004cfc:	08004d35 	.word	0x08004d35
 8004d00:	08004d59 	.word	0x08004d59
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004d59 	.word	0x08004d59
 8004d0c:	08004d47 	.word	0x08004d47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0202 	orr.w	r2, r2, #2
 8004d1e:	60da      	str	r2, [r3, #12]
      break;
 8004d20:	e01d      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0204 	orr.w	r2, r2, #4
 8004d30:	60da      	str	r2, [r3, #12]
      break;
 8004d32:	e014      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0208 	orr.w	r2, r2, #8
 8004d42:	60da      	str	r2, [r3, #12]
      break;
 8004d44:	e00b      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0210 	orr.w	r2, r2, #16
 8004d54:	60da      	str	r2, [r3, #12]
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d13e      	bne.n	8004de2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	6839      	ldr	r1, [r7, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 ff9b 	bl	8005ca8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <HAL_TIM_IC_Start_IT+0x220>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d018      	beq.n	8004dae <HAL_TIM_IC_Start_IT+0x1e2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d84:	d013      	beq.n	8004dae <HAL_TIM_IC_Start_IT+0x1e2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <HAL_TIM_IC_Start_IT+0x224>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_TIM_IC_Start_IT+0x1e2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <HAL_TIM_IC_Start_IT+0x228>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_TIM_IC_Start_IT+0x1e2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	; (8004df8 <HAL_TIM_IC_Start_IT+0x22c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_TIM_IC_Start_IT+0x1e2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <HAL_TIM_IC_Start_IT+0x230>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d111      	bne.n	8004dd2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d010      	beq.n	8004de2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd0:	e007      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40010000 	.word	0x40010000
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	40000c00 	.word	0x40000c00
 8004dfc:	40014000 	.word	0x40014000

08004e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d122      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d11b      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0202 	mvn.w	r2, #2
 8004e2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fd fea0 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 8004e48:	e005      	b.n	8004e56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fb4a 	bl	80054e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fb51 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d122      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d11b      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0204 	mvn.w	r2, #4
 8004e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fd fe76 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e005      	b.n	8004eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fb20 	bl	80054e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fb27 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d122      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d11b      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0208 	mvn.w	r2, #8
 8004ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2204      	movs	r2, #4
 8004eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fd fe4c 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e005      	b.n	8004efe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 faf6 	bl	80054e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fafd 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d122      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d11b      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0210 	mvn.w	r2, #16
 8004f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fd fe22 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 facc 	bl	80054e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fad3 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d10e      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d107      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0201 	mvn.w	r2, #1
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fd fe94 	bl	8002cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8e:	2b80      	cmp	r3, #128	; 0x80
 8004f90:	d10e      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9c:	2b80      	cmp	r3, #128	; 0x80
 8004f9e:	d107      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 ff1a 	bl	8005de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d10e      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	d107      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa98 	bl	800550c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d10e      	bne.n	8005008 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d107      	bne.n	8005008 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0220 	mvn.w	r2, #32
 8005000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fee4 	bl	8005dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005008:	bf00      	nop
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_TIM_IC_ConfigChannel+0x1e>
 800502a:	2302      	movs	r3, #2
 800502c:	e088      	b.n	8005140 <HAL_TIM_IC_ConfigChannel+0x130>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11b      	bne.n	8005074 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f000 fc74 	bl	8005938 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 020c 	bic.w	r2, r2, #12
 800505e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6999      	ldr	r1, [r3, #24]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	619a      	str	r2, [r3, #24]
 8005072:	e060      	b.n	8005136 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d11c      	bne.n	80050b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6819      	ldr	r1, [r3, #0]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f000 fcec 	bl	8005a66 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800509c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6999      	ldr	r1, [r3, #24]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	021a      	lsls	r2, r3, #8
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	619a      	str	r2, [r3, #24]
 80050b2:	e040      	b.n	8005136 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d11b      	bne.n	80050f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f000 fd39 	bl	8005b40 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 020c 	bic.w	r2, r2, #12
 80050dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69d9      	ldr	r1, [r3, #28]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	61da      	str	r2, [r3, #28]
 80050f0:	e021      	b.n	8005136 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b0c      	cmp	r3, #12
 80050f6:	d11c      	bne.n	8005132 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6819      	ldr	r1, [r3, #0]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f000 fd56 	bl	8005bb8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69da      	ldr	r2, [r3, #28]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800511a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69d9      	ldr	r1, [r3, #28]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	021a      	lsls	r2, r3, #8
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	61da      	str	r2, [r3, #28]
 8005130:	e001      	b.n	8005136 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800513e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005162:	2302      	movs	r3, #2
 8005164:	e0ae      	b.n	80052c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	f200 809f 	bhi.w	80052b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005176:	a201      	add	r2, pc, #4	; (adr r2, 800517c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	080051b1 	.word	0x080051b1
 8005180:	080052b5 	.word	0x080052b5
 8005184:	080052b5 	.word	0x080052b5
 8005188:	080052b5 	.word	0x080052b5
 800518c:	080051f1 	.word	0x080051f1
 8005190:	080052b5 	.word	0x080052b5
 8005194:	080052b5 	.word	0x080052b5
 8005198:	080052b5 	.word	0x080052b5
 800519c:	08005233 	.word	0x08005233
 80051a0:	080052b5 	.word	0x080052b5
 80051a4:	080052b5 	.word	0x080052b5
 80051a8:	080052b5 	.word	0x080052b5
 80051ac:	08005273 	.word	0x08005273
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fa32 	bl	8005620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0208 	orr.w	r2, r2, #8
 80051ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0204 	bic.w	r2, r2, #4
 80051da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6999      	ldr	r1, [r3, #24]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	619a      	str	r2, [r3, #24]
      break;
 80051ee:	e064      	b.n	80052ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fa78 	bl	80056ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800520a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6999      	ldr	r1, [r3, #24]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	021a      	lsls	r2, r3, #8
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	619a      	str	r2, [r3, #24]
      break;
 8005230:	e043      	b.n	80052ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fac3 	bl	80057c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0208 	orr.w	r2, r2, #8
 800524c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0204 	bic.w	r2, r2, #4
 800525c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69d9      	ldr	r1, [r3, #28]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	61da      	str	r2, [r3, #28]
      break;
 8005270:	e023      	b.n	80052ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fb0d 	bl	8005898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800528c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69d9      	ldr	r1, [r3, #28]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	021a      	lsls	r2, r3, #8
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	61da      	str	r2, [r3, #28]
      break;
 80052b2:	e002      	b.n	80052ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	75fb      	strb	r3, [r7, #23]
      break;
 80052b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_TIM_ConfigClockSource+0x1c>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e0b4      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x186>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800530e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005320:	d03e      	beq.n	80053a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005326:	f200 8087 	bhi.w	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532e:	f000 8086 	beq.w	800543e <HAL_TIM_ConfigClockSource+0x172>
 8005332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005336:	d87f      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b70      	cmp	r3, #112	; 0x70
 800533a:	d01a      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0xa6>
 800533c:	2b70      	cmp	r3, #112	; 0x70
 800533e:	d87b      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b60      	cmp	r3, #96	; 0x60
 8005342:	d050      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005344:	2b60      	cmp	r3, #96	; 0x60
 8005346:	d877      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b50      	cmp	r3, #80	; 0x50
 800534a:	d03c      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0xfa>
 800534c:	2b50      	cmp	r3, #80	; 0x50
 800534e:	d873      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d058      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x13a>
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d86f      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b30      	cmp	r3, #48	; 0x30
 800535a:	d064      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x15a>
 800535c:	2b30      	cmp	r3, #48	; 0x30
 800535e:	d86b      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b20      	cmp	r3, #32
 8005362:	d060      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x15a>
 8005364:	2b20      	cmp	r3, #32
 8005366:	d867      	bhi.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d05c      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x15a>
 800536c:	2b10      	cmp	r3, #16
 800536e:	d05a      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x15a>
 8005370:	e062      	b.n	8005438 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6899      	ldr	r1, [r3, #8]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f000 fc71 	bl	8005c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	609a      	str	r2, [r3, #8]
      break;
 800539e:	e04f      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	6899      	ldr	r1, [r3, #8]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f000 fc5a 	bl	8005c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053c2:	609a      	str	r2, [r3, #8]
      break;
 80053c4:	e03c      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6859      	ldr	r1, [r3, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f000 fb18 	bl	8005a08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2150      	movs	r1, #80	; 0x50
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fc27 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 80053e4:	e02c      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6859      	ldr	r1, [r3, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f000 fb74 	bl	8005ae0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2160      	movs	r1, #96	; 0x60
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fc17 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 8005404:	e01c      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	461a      	mov	r2, r3
 8005414:	f000 faf8 	bl	8005a08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2140      	movs	r1, #64	; 0x40
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fc07 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 8005424:	e00c      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4619      	mov	r1, r3
 8005430:	4610      	mov	r0, r2
 8005432:	f000 fbfe 	bl	8005c32 <TIM_ITRx_SetConfig>
      break;
 8005436:	e003      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	73fb      	strb	r3, [r7, #15]
      break;
 800543c:	e000      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800543e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b0c      	cmp	r3, #12
 800546e:	d831      	bhi.n	80054d4 <HAL_TIM_ReadCapturedValue+0x78>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054d5 	.word	0x080054d5
 8005480:	080054d5 	.word	0x080054d5
 8005484:	080054d5 	.word	0x080054d5
 8005488:	080054b7 	.word	0x080054b7
 800548c:	080054d5 	.word	0x080054d5
 8005490:	080054d5 	.word	0x080054d5
 8005494:	080054d5 	.word	0x080054d5
 8005498:	080054c1 	.word	0x080054c1
 800549c:	080054d5 	.word	0x080054d5
 80054a0:	080054d5 	.word	0x080054d5
 80054a4:	080054d5 	.word	0x080054d5
 80054a8:	080054cb 	.word	0x080054cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	60fb      	str	r3, [r7, #12]

      break;
 80054b4:	e00f      	b.n	80054d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	60fb      	str	r3, [r7, #12]

      break;
 80054be:	e00a      	b.n	80054d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	60fb      	str	r3, [r7, #12]

      break;
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	60fb      	str	r3, [r7, #12]

      break;
 80054d2:	e000      	b.n	80054d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80054d4:	bf00      	nop
  }

  return tmpreg;
 80054d6:	68fb      	ldr	r3, [r7, #12]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a34      	ldr	r2, [pc, #208]	; (8005604 <TIM_Base_SetConfig+0xe4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00f      	beq.n	8005558 <TIM_Base_SetConfig+0x38>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d00b      	beq.n	8005558 <TIM_Base_SetConfig+0x38>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a31      	ldr	r2, [pc, #196]	; (8005608 <TIM_Base_SetConfig+0xe8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d007      	beq.n	8005558 <TIM_Base_SetConfig+0x38>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a30      	ldr	r2, [pc, #192]	; (800560c <TIM_Base_SetConfig+0xec>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_Base_SetConfig+0x38>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a2f      	ldr	r2, [pc, #188]	; (8005610 <TIM_Base_SetConfig+0xf0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d108      	bne.n	800556a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a25      	ldr	r2, [pc, #148]	; (8005604 <TIM_Base_SetConfig+0xe4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01b      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d017      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a22      	ldr	r2, [pc, #136]	; (8005608 <TIM_Base_SetConfig+0xe8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a21      	ldr	r2, [pc, #132]	; (800560c <TIM_Base_SetConfig+0xec>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00f      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a20      	ldr	r2, [pc, #128]	; (8005610 <TIM_Base_SetConfig+0xf0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00b      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <TIM_Base_SetConfig+0xf4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a1e      	ldr	r2, [pc, #120]	; (8005618 <TIM_Base_SetConfig+0xf8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_Base_SetConfig+0x8a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1d      	ldr	r2, [pc, #116]	; (800561c <TIM_Base_SetConfig+0xfc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d108      	bne.n	80055bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a08      	ldr	r2, [pc, #32]	; (8005604 <TIM_Base_SetConfig+0xe4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d103      	bne.n	80055f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	615a      	str	r2, [r3, #20]
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0201 	bic.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 0302 	bic.w	r3, r3, #2
 8005668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <TIM_OC1_SetConfig+0xc8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d10c      	bne.n	8005696 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f023 0308 	bic.w	r3, r3, #8
 8005682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 0304 	bic.w	r3, r3, #4
 8005694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <TIM_OC1_SetConfig+0xc8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d111      	bne.n	80056c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	621a      	str	r2, [r3, #32]
}
 80056dc:	bf00      	nop
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40010000 	.word	0x40010000

080056ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f023 0210 	bic.w	r2, r3, #16
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0320 	bic.w	r3, r3, #32
 8005736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a1e      	ldr	r2, [pc, #120]	; (80057c0 <TIM_OC2_SetConfig+0xd4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d10d      	bne.n	8005768 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005766:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <TIM_OC2_SetConfig+0xd4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d113      	bne.n	8005798 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800577e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000

080057c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0303 	bic.w	r3, r3, #3
 80057fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800580c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <TIM_OC3_SetConfig+0xd0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10d      	bne.n	800583e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800583c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a14      	ldr	r2, [pc, #80]	; (8005894 <TIM_OC3_SetConfig+0xd0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d113      	bne.n	800586e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800584c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	40010000 	.word	0x40010000

08005898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	031b      	lsls	r3, r3, #12
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a10      	ldr	r2, [pc, #64]	; (8005934 <TIM_OC4_SetConfig+0x9c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d109      	bne.n	800590c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	019b      	lsls	r3, r3, #6
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000

08005938 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0201 	bic.w	r2, r3, #1
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <TIM_TI1_SetConfig+0xbc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <TIM_TI1_SetConfig+0x56>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596c:	d00f      	beq.n	800598e <TIM_TI1_SetConfig+0x56>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <TIM_TI1_SetConfig+0xc0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00b      	beq.n	800598e <TIM_TI1_SetConfig+0x56>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4a20      	ldr	r2, [pc, #128]	; (80059fc <TIM_TI1_SetConfig+0xc4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d007      	beq.n	800598e <TIM_TI1_SetConfig+0x56>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <TIM_TI1_SetConfig+0xc8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d003      	beq.n	800598e <TIM_TI1_SetConfig+0x56>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <TIM_TI1_SetConfig+0xcc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d101      	bne.n	8005992 <TIM_TI1_SetConfig+0x5a>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <TIM_TI1_SetConfig+0x5c>
 8005992:	2300      	movs	r3, #0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0303 	bic.w	r3, r3, #3
 800599e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e003      	b.n	80059b2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f043 0301 	orr.w	r3, r3, #1
 80059b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f023 030a 	bic.w	r3, r3, #10
 80059cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f003 030a 	and.w	r3, r3, #10
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40010000 	.word	0x40010000
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40000c00 	.word	0x40000c00
 8005a04:	40014000 	.word	0x40014000

08005a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f023 0201 	bic.w	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 030a 	bic.w	r3, r3, #10
 8005a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	621a      	str	r2, [r3, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b087      	sub	sp, #28
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	f023 0210 	bic.w	r2, r3, #16
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	031b      	lsls	r3, r3, #12
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	621a      	str	r2, [r3, #32]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f023 0210 	bic.w	r2, r3, #16
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	031b      	lsls	r3, r3, #12
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	621a      	str	r2, [r3, #32]
}
 8005b34:	bf00      	nop
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 0303 	bic.w	r3, r3, #3
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005b90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	621a      	str	r2, [r3, #32]
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	021b      	lsls	r3, r3, #8
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bf6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	031b      	lsls	r3, r3, #12
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005c0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	031b      	lsls	r3, r3, #12
 8005c10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f043 0307 	orr.w	r3, r3, #7
 8005c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	609a      	str	r2, [r3, #8]
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	021a      	lsls	r2, r3, #8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	609a      	str	r2, [r3, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	2201      	movs	r2, #1
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	401a      	ands	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e050      	b.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d018      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d58:	d013      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00e      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a16      	ldr	r2, [pc, #88]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d009      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d10c      	bne.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800
 8005dc8:	40000c00 	.word	0x40000c00
 8005dcc:	40014000 	.word	0x40014000

08005dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e03f      	b.n	8005e8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fd fbdc 	bl	80035dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	; 0x24
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fddf 	bl	8006a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695a      	ldr	r2, [r3, #20]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b08a      	sub	sp, #40	; 0x28
 8005e96:	af02      	add	r7, sp, #8
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	603b      	str	r3, [r7, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d17c      	bne.n	8005fac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_UART_Transmit+0x2c>
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e075      	b.n	8005fae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_UART_Transmit+0x3e>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e06e      	b.n	8005fae <HAL_UART_Transmit+0x11c>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2221      	movs	r2, #33	; 0x21
 8005ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ee6:	f7fd fc29 	bl	800373c <HAL_GetTick>
 8005eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	88fa      	ldrh	r2, [r7, #6]
 8005ef0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d108      	bne.n	8005f14 <HAL_UART_Transmit+0x82>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e003      	b.n	8005f1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f24:	e02a      	b.n	8005f7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2180      	movs	r1, #128	; 0x80
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fb1f 	bl	8006574 <UART_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e036      	b.n	8005fae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	3302      	adds	r3, #2
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e007      	b.n	8005f6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1cf      	bne.n	8005f26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2140      	movs	r1, #64	; 0x40
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 faef 	bl	8006574 <UART_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e006      	b.n	8005fae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e000      	b.n	8005fae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005fac:	2302      	movs	r3, #2
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d11d      	bne.n	800600c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_UART_Receive_IT+0x26>
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e016      	b.n	800600e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_UART_Receive_IT+0x38>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e00f      	b.n	800600e <HAL_UART_Receive_IT+0x58>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	461a      	mov	r2, r3
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fb24 	bl	8006650 <UART_Start_Receive_IT>
 8006008:	4603      	mov	r3, r0
 800600a:	e000      	b.n	800600e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800600c:	2302      	movs	r3, #2
  }
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b0ba      	sub	sp, #232	; 0xe8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800603e:	2300      	movs	r3, #0
 8006040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006044:	2300      	movs	r3, #0
 8006046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800604a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800605e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d009      	beq.n	800607e <HAL_UART_IRQHandler+0x66>
 800606a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fc07 	bl	800688a <UART_Receive_IT>
      return;
 800607c:	e256      	b.n	800652c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800607e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 80de 	beq.w	8006244 <HAL_UART_IRQHandler+0x22c>
 8006088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006098:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80d1 	beq.w	8006244 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <HAL_UART_IRQHandler+0xae>
 80060ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f043 0201 	orr.w	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <HAL_UART_IRQHandler+0xd2>
 80060d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f043 0202 	orr.w	r2, r3, #2
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <HAL_UART_IRQHandler+0xf6>
 80060f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f043 0204 	orr.w	r2, r3, #4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800610e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d011      	beq.n	800613e <HAL_UART_IRQHandler+0x126>
 800611a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d105      	bne.n	8006132 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d005      	beq.n	800613e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	f043 0208 	orr.w	r2, r3, #8
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 81ed 	beq.w	8006522 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b00      	cmp	r3, #0
 8006152:	d008      	beq.n	8006166 <HAL_UART_IRQHandler+0x14e>
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fb92 	bl	800688a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b40      	cmp	r3, #64	; 0x40
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d103      	bne.n	8006192 <HAL_UART_IRQHandler+0x17a>
 800618a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d04f      	beq.n	8006232 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa9a 	bl	80066cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d141      	bne.n	800622a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3314      	adds	r3, #20
 80061ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3314      	adds	r3, #20
 80061ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1d9      	bne.n	80061a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d013      	beq.n	8006222 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	4a7d      	ldr	r2, [pc, #500]	; (80063f4 <HAL_UART_IRQHandler+0x3dc>)
 8006200:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	4618      	mov	r0, r3
 8006208:	f7fd fbf6 	bl	80039f8 <HAL_DMA_Abort_IT>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d016      	beq.n	8006240 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006220:	e00e      	b.n	8006240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f990 	bl	8006548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006228:	e00a      	b.n	8006240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f98c 	bl	8006548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	e006      	b.n	8006240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f988 	bl	8006548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800623e:	e170      	b.n	8006522 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006240:	bf00      	nop
    return;
 8006242:	e16e      	b.n	8006522 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	2b01      	cmp	r3, #1
 800624a:	f040 814a 	bne.w	80064e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 8143 	beq.w	80064e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800625c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 813c 	beq.w	80064e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800626a:	2300      	movs	r3, #0
 800626c:	60bb      	str	r3, [r7, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	f040 80b4 	bne.w	80063f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800629c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8140 	beq.w	8006526 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ae:	429a      	cmp	r2, r3
 80062b0:	f080 8139 	bcs.w	8006526 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c6:	f000 8088 	beq.w	80063da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	330c      	adds	r3, #12
 80062d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80062f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006302:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800630e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1d9      	bne.n	80062ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3314      	adds	r3, #20
 800631c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006328:	f023 0301 	bic.w	r3, r3, #1
 800632c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3314      	adds	r3, #20
 8006336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800633a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800633e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006342:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800634c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e1      	bne.n	8006316 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3314      	adds	r3, #20
 8006358:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3314      	adds	r3, #20
 8006372:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006376:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006378:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800637c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e3      	bne.n	8006352 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063aa:	f023 0310 	bic.w	r3, r3, #16
 80063ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	330c      	adds	r3, #12
 80063b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80063be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e3      	bne.n	8006398 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fd fa9f 	bl	8003918 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8b6 	bl	800655c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063f0:	e099      	b.n	8006526 <HAL_UART_IRQHandler+0x50e>
 80063f2:	bf00      	nop
 80063f4:	08006793 	.word	0x08006793
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006400:	b29b      	uxth	r3, r3
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 808b 	beq.w	800652a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 8086 	beq.w	800652a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	330c      	adds	r3, #12
 8006424:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800642e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006442:	647a      	str	r2, [r7, #68]	; 0x44
 8006444:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e3      	bne.n	800641e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3314      	adds	r3, #20
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	623b      	str	r3, [r7, #32]
   return(result);
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	f023 0301 	bic.w	r3, r3, #1
 800646c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3314      	adds	r3, #20
 8006476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800647a:	633a      	str	r2, [r7, #48]	; 0x30
 800647c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e3      	bne.n	8006456 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0310 	bic.w	r3, r3, #16
 80064b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064c0:	61fa      	str	r2, [r7, #28]
 80064c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	69b9      	ldr	r1, [r7, #24]
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	617b      	str	r3, [r7, #20]
   return(result);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e3      	bne.n	800649c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f83e 	bl	800655c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064e0:	e023      	b.n	800652a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <HAL_UART_IRQHandler+0x4ea>
 80064ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f95d 	bl	80067ba <UART_Transmit_IT>
    return;
 8006500:	e014      	b.n	800652c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <HAL_UART_IRQHandler+0x514>
 800650e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f99d 	bl	800685a <UART_EndTransmit_IT>
    return;
 8006520:	e004      	b.n	800652c <HAL_UART_IRQHandler+0x514>
    return;
 8006522:	bf00      	nop
 8006524:	e002      	b.n	800652c <HAL_UART_IRQHandler+0x514>
      return;
 8006526:	bf00      	nop
 8006528:	e000      	b.n	800652c <HAL_UART_IRQHandler+0x514>
      return;
 800652a:	bf00      	nop
  }
}
 800652c:	37e8      	adds	r7, #232	; 0xe8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop

08006534 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b090      	sub	sp, #64	; 0x40
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006584:	e050      	b.n	8006628 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d04c      	beq.n	8006628 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800658e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006594:	f7fd f8d2 	bl	800373c <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d241      	bcs.n	8006628 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	330c      	adds	r3, #12
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065c4:	637a      	str	r2, [r7, #52]	; 0x34
 80065c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e5      	bne.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3314      	adds	r3, #20
 80065de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	613b      	str	r3, [r7, #16]
   return(result);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f023 0301 	bic.w	r3, r3, #1
 80065ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3314      	adds	r3, #20
 80065f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f8:	623a      	str	r2, [r7, #32]
 80065fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	69f9      	ldr	r1, [r7, #28]
 80065fe:	6a3a      	ldr	r2, [r7, #32]
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	61bb      	str	r3, [r7, #24]
   return(result);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e5      	bne.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e00f      	b.n	8006648 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	4013      	ands	r3, r2
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	429a      	cmp	r2, r3
 8006636:	bf0c      	ite	eq
 8006638:	2301      	moveq	r3, #1
 800663a:	2300      	movne	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	429a      	cmp	r2, r3
 8006644:	d09f      	beq.n	8006586 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3740      	adds	r7, #64	; 0x40
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	88fa      	ldrh	r2, [r7, #6]
 8006668:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2222      	movs	r2, #34	; 0x22
 800667a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d007      	beq.n	800669e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800669c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0201 	orr.w	r2, r2, #1
 80066ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0220 	orr.w	r2, r2, #32
 80066bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b095      	sub	sp, #84	; 0x54
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066f4:	643a      	str	r2, [r7, #64]	; 0x40
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e5      	bne.n	80066d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3314      	adds	r3, #20
 800670e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	61fb      	str	r3, [r7, #28]
   return(result);
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f023 0301 	bic.w	r3, r3, #1
 800671e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3314      	adds	r3, #20
 8006726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800672e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e5      	bne.n	8006708 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	2b01      	cmp	r3, #1
 8006742:	d119      	bne.n	8006778 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	60bb      	str	r3, [r7, #8]
   return(result);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f023 0310 	bic.w	r3, r3, #16
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	330c      	adds	r3, #12
 8006762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006764:	61ba      	str	r2, [r7, #24]
 8006766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	6979      	ldr	r1, [r7, #20]
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	613b      	str	r3, [r7, #16]
   return(result);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e5      	bne.n	8006744 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006786:	bf00      	nop
 8006788:	3754      	adds	r7, #84	; 0x54
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fecb 	bl	8006548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b21      	cmp	r3, #33	; 0x21
 80067cc:	d13e      	bne.n	800684c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d6:	d114      	bne.n	8006802 <UART_Transmit_IT+0x48>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d110      	bne.n	8006802 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	1c9a      	adds	r2, r3, #2
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	621a      	str	r2, [r3, #32]
 8006800:	e008      	b.n	8006814 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	1c59      	adds	r1, r3, #1
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6211      	str	r1, [r2, #32]
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29b      	uxth	r3, r3
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	4619      	mov	r1, r3
 8006822:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10f      	bne.n	8006848 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006836:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006846:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800684c:	2302      	movs	r3, #2
  }
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff fe5a 	bl	8006534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b08c      	sub	sp, #48	; 0x30
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b22      	cmp	r3, #34	; 0x22
 800689c:	f040 80ab 	bne.w	80069f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a8:	d117      	bne.n	80068da <UART_Receive_IT+0x50>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d113      	bne.n	80068da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	1c9a      	adds	r2, r3, #2
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	629a      	str	r2, [r3, #40]	; 0x28
 80068d8:	e026      	b.n	8006928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ec:	d007      	beq.n	80068fe <UART_Receive_IT+0x74>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <UART_Receive_IT+0x82>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	b2da      	uxtb	r2, r3
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	e008      	b.n	800691e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006918:	b2da      	uxtb	r2, r3
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29b      	uxth	r3, r3
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4619      	mov	r1, r3
 8006936:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006938:	2b00      	cmp	r3, #0
 800693a:	d15a      	bne.n	80069f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0220 	bic.w	r2, r2, #32
 800694a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800695a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695a      	ldr	r2, [r3, #20]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0201 	bic.w	r2, r2, #1
 800696a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006978:	2b01      	cmp	r3, #1
 800697a:	d135      	bne.n	80069e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	330c      	adds	r3, #12
 8006988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	613b      	str	r3, [r7, #16]
   return(result);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f023 0310 	bic.w	r3, r3, #16
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	330c      	adds	r3, #12
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	623a      	str	r2, [r7, #32]
 80069a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	69f9      	ldr	r1, [r7, #28]
 80069a8:	6a3a      	ldr	r2, [r7, #32]
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e5      	bne.n	8006982 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	2b10      	cmp	r3, #16
 80069c2:	d10a      	bne.n	80069da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069c4:	2300      	movs	r3, #0
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff fdbb 	bl	800655c <HAL_UARTEx_RxEventCallback>
 80069e6:	e002      	b.n	80069ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7fc f8d9 	bl	8002ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e002      	b.n	80069f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e000      	b.n	80069f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069f6:	2302      	movs	r3, #2
  }
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3730      	adds	r7, #48	; 0x30
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a04:	b0c0      	sub	sp, #256	; 0x100
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	68d9      	ldr	r1, [r3, #12]
 8006a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	ea40 0301 	orr.w	r3, r0, r1
 8006a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	431a      	orrs	r2, r3
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a58:	f021 010c 	bic.w	r1, r1, #12
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a66:	430b      	orrs	r3, r1
 8006a68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7a:	6999      	ldr	r1, [r3, #24]
 8006a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	ea40 0301 	orr.w	r3, r0, r1
 8006a86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4b8f      	ldr	r3, [pc, #572]	; (8006ccc <UART_SetConfig+0x2cc>)
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d005      	beq.n	8006aa0 <UART_SetConfig+0xa0>
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4b8d      	ldr	r3, [pc, #564]	; (8006cd0 <UART_SetConfig+0x2d0>)
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d104      	bne.n	8006aaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006aa0:	f7fd fdde 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 8006aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006aa8:	e003      	b.n	8006ab2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006aaa:	f7fd fdc5 	bl	8004638 <HAL_RCC_GetPCLK1Freq>
 8006aae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006abc:	f040 810c 	bne.w	8006cd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006aca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	1891      	adds	r1, r2, r2
 8006ad8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ada:	415b      	adcs	r3, r3
 8006adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ade:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	eb12 0801 	adds.w	r8, r2, r1
 8006ae8:	4629      	mov	r1, r5
 8006aea:	eb43 0901 	adc.w	r9, r3, r1
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b02:	4690      	mov	r8, r2
 8006b04:	4699      	mov	r9, r3
 8006b06:	4623      	mov	r3, r4
 8006b08:	eb18 0303 	adds.w	r3, r8, r3
 8006b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b10:	462b      	mov	r3, r5
 8006b12:	eb49 0303 	adc.w	r3, r9, r3
 8006b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b2e:	460b      	mov	r3, r1
 8006b30:	18db      	adds	r3, r3, r3
 8006b32:	653b      	str	r3, [r7, #80]	; 0x50
 8006b34:	4613      	mov	r3, r2
 8006b36:	eb42 0303 	adc.w	r3, r2, r3
 8006b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b44:	f7f9 ff8a 	bl	8000a5c <__aeabi_uldivmod>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4b61      	ldr	r3, [pc, #388]	; (8006cd4 <UART_SetConfig+0x2d4>)
 8006b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	011c      	lsls	r4, r3, #4
 8006b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b68:	4642      	mov	r2, r8
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	1891      	adds	r1, r2, r2
 8006b6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b70:	415b      	adcs	r3, r3
 8006b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b78:	4641      	mov	r1, r8
 8006b7a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b7e:	4649      	mov	r1, r9
 8006b80:	eb43 0b01 	adc.w	fp, r3, r1
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b98:	4692      	mov	sl, r2
 8006b9a:	469b      	mov	fp, r3
 8006b9c:	4643      	mov	r3, r8
 8006b9e:	eb1a 0303 	adds.w	r3, sl, r3
 8006ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8006bac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006bc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	18db      	adds	r3, r3, r3
 8006bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8006bca:	4613      	mov	r3, r2
 8006bcc:	eb42 0303 	adc.w	r3, r2, r3
 8006bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006bda:	f7f9 ff3f 	bl	8000a5c <__aeabi_uldivmod>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	4b3b      	ldr	r3, [pc, #236]	; (8006cd4 <UART_SetConfig+0x2d4>)
 8006be6:	fba3 2301 	umull	r2, r3, r3, r1
 8006bea:	095b      	lsrs	r3, r3, #5
 8006bec:	2264      	movs	r2, #100	; 0x64
 8006bee:	fb02 f303 	mul.w	r3, r2, r3
 8006bf2:	1acb      	subs	r3, r1, r3
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bfa:	4b36      	ldr	r3, [pc, #216]	; (8006cd4 <UART_SetConfig+0x2d4>)
 8006bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c08:	441c      	add	r4, r3
 8006c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	464b      	mov	r3, r9
 8006c20:	1891      	adds	r1, r2, r2
 8006c22:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c24:	415b      	adcs	r3, r3
 8006c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	1851      	adds	r1, r2, r1
 8006c30:	6339      	str	r1, [r7, #48]	; 0x30
 8006c32:	4649      	mov	r1, r9
 8006c34:	414b      	adcs	r3, r1
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c44:	4659      	mov	r1, fp
 8006c46:	00cb      	lsls	r3, r1, #3
 8006c48:	4651      	mov	r1, sl
 8006c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c4e:	4651      	mov	r1, sl
 8006c50:	00ca      	lsls	r2, r1, #3
 8006c52:	4610      	mov	r0, r2
 8006c54:	4619      	mov	r1, r3
 8006c56:	4603      	mov	r3, r0
 8006c58:	4642      	mov	r2, r8
 8006c5a:	189b      	adds	r3, r3, r2
 8006c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c60:	464b      	mov	r3, r9
 8006c62:	460a      	mov	r2, r1
 8006c64:	eb42 0303 	adc.w	r3, r2, r3
 8006c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c80:	460b      	mov	r3, r1
 8006c82:	18db      	adds	r3, r3, r3
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c86:	4613      	mov	r3, r2
 8006c88:	eb42 0303 	adc.w	r3, r2, r3
 8006c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c96:	f7f9 fee1 	bl	8000a5c <__aeabi_uldivmod>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <UART_SetConfig+0x2d4>)
 8006ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	2164      	movs	r1, #100	; 0x64
 8006ca8:	fb01 f303 	mul.w	r3, r1, r3
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	3332      	adds	r3, #50	; 0x32
 8006cb2:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <UART_SetConfig+0x2d4>)
 8006cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	f003 0207 	and.w	r2, r3, #7
 8006cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4422      	add	r2, r4
 8006cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cc8:	e105      	b.n	8006ed6 <UART_SetConfig+0x4d6>
 8006cca:	bf00      	nop
 8006ccc:	40011000 	.word	0x40011000
 8006cd0:	40011400 	.word	0x40011400
 8006cd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ce2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ce6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006cea:	4642      	mov	r2, r8
 8006cec:	464b      	mov	r3, r9
 8006cee:	1891      	adds	r1, r2, r2
 8006cf0:	6239      	str	r1, [r7, #32]
 8006cf2:	415b      	adcs	r3, r3
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	1854      	adds	r4, r2, r1
 8006cfe:	4649      	mov	r1, r9
 8006d00:	eb43 0501 	adc.w	r5, r3, r1
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	00eb      	lsls	r3, r5, #3
 8006d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d12:	00e2      	lsls	r2, r4, #3
 8006d14:	4614      	mov	r4, r2
 8006d16:	461d      	mov	r5, r3
 8006d18:	4643      	mov	r3, r8
 8006d1a:	18e3      	adds	r3, r4, r3
 8006d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d20:	464b      	mov	r3, r9
 8006d22:	eb45 0303 	adc.w	r3, r5, r3
 8006d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	f04f 0300 	mov.w	r3, #0
 8006d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d46:	4629      	mov	r1, r5
 8006d48:	008b      	lsls	r3, r1, #2
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d50:	4621      	mov	r1, r4
 8006d52:	008a      	lsls	r2, r1, #2
 8006d54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d58:	f7f9 fe80 	bl	8000a5c <__aeabi_uldivmod>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4b60      	ldr	r3, [pc, #384]	; (8006ee4 <UART_SetConfig+0x4e4>)
 8006d62:	fba3 2302 	umull	r2, r3, r3, r2
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	011c      	lsls	r4, r3, #4
 8006d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d7c:	4642      	mov	r2, r8
 8006d7e:	464b      	mov	r3, r9
 8006d80:	1891      	adds	r1, r2, r2
 8006d82:	61b9      	str	r1, [r7, #24]
 8006d84:	415b      	adcs	r3, r3
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	1851      	adds	r1, r2, r1
 8006d90:	6139      	str	r1, [r7, #16]
 8006d92:	4649      	mov	r1, r9
 8006d94:	414b      	adcs	r3, r1
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006da4:	4659      	mov	r1, fp
 8006da6:	00cb      	lsls	r3, r1, #3
 8006da8:	4651      	mov	r1, sl
 8006daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dae:	4651      	mov	r1, sl
 8006db0:	00ca      	lsls	r2, r1, #3
 8006db2:	4610      	mov	r0, r2
 8006db4:	4619      	mov	r1, r3
 8006db6:	4603      	mov	r3, r0
 8006db8:	4642      	mov	r2, r8
 8006dba:	189b      	adds	r3, r3, r2
 8006dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dc0:	464b      	mov	r3, r9
 8006dc2:	460a      	mov	r2, r1
 8006dc4:	eb42 0303 	adc.w	r3, r2, r3
 8006dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006de4:	4649      	mov	r1, r9
 8006de6:	008b      	lsls	r3, r1, #2
 8006de8:	4641      	mov	r1, r8
 8006dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dee:	4641      	mov	r1, r8
 8006df0:	008a      	lsls	r2, r1, #2
 8006df2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006df6:	f7f9 fe31 	bl	8000a5c <__aeabi_uldivmod>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4b39      	ldr	r3, [pc, #228]	; (8006ee4 <UART_SetConfig+0x4e4>)
 8006e00:	fba3 1302 	umull	r1, r3, r3, r2
 8006e04:	095b      	lsrs	r3, r3, #5
 8006e06:	2164      	movs	r1, #100	; 0x64
 8006e08:	fb01 f303 	mul.w	r3, r1, r3
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	3332      	adds	r3, #50	; 0x32
 8006e12:	4a34      	ldr	r2, [pc, #208]	; (8006ee4 <UART_SetConfig+0x4e4>)
 8006e14:	fba2 2303 	umull	r2, r3, r2, r3
 8006e18:	095b      	lsrs	r3, r3, #5
 8006e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e1e:	441c      	add	r4, r3
 8006e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e24:	2200      	movs	r2, #0
 8006e26:	673b      	str	r3, [r7, #112]	; 0x70
 8006e28:	677a      	str	r2, [r7, #116]	; 0x74
 8006e2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e2e:	4642      	mov	r2, r8
 8006e30:	464b      	mov	r3, r9
 8006e32:	1891      	adds	r1, r2, r2
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	415b      	adcs	r3, r3
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e3e:	4641      	mov	r1, r8
 8006e40:	1851      	adds	r1, r2, r1
 8006e42:	6039      	str	r1, [r7, #0]
 8006e44:	4649      	mov	r1, r9
 8006e46:	414b      	adcs	r3, r1
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	f04f 0300 	mov.w	r3, #0
 8006e52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e56:	4659      	mov	r1, fp
 8006e58:	00cb      	lsls	r3, r1, #3
 8006e5a:	4651      	mov	r1, sl
 8006e5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e60:	4651      	mov	r1, sl
 8006e62:	00ca      	lsls	r2, r1, #3
 8006e64:	4610      	mov	r0, r2
 8006e66:	4619      	mov	r1, r3
 8006e68:	4603      	mov	r3, r0
 8006e6a:	4642      	mov	r2, r8
 8006e6c:	189b      	adds	r3, r3, r2
 8006e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e70:	464b      	mov	r3, r9
 8006e72:	460a      	mov	r2, r1
 8006e74:	eb42 0303 	adc.w	r3, r2, r3
 8006e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	663b      	str	r3, [r7, #96]	; 0x60
 8006e84:	667a      	str	r2, [r7, #100]	; 0x64
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	f04f 0300 	mov.w	r3, #0
 8006e8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e92:	4649      	mov	r1, r9
 8006e94:	008b      	lsls	r3, r1, #2
 8006e96:	4641      	mov	r1, r8
 8006e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e9c:	4641      	mov	r1, r8
 8006e9e:	008a      	lsls	r2, r1, #2
 8006ea0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ea4:	f7f9 fdda 	bl	8000a5c <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <UART_SetConfig+0x4e4>)
 8006eae:	fba3 1302 	umull	r1, r3, r3, r2
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	2164      	movs	r1, #100	; 0x64
 8006eb6:	fb01 f303 	mul.w	r3, r1, r3
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	3332      	adds	r3, #50	; 0x32
 8006ec0:	4a08      	ldr	r2, [pc, #32]	; (8006ee4 <UART_SetConfig+0x4e4>)
 8006ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	f003 020f 	and.w	r2, r3, #15
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4422      	add	r2, r4
 8006ed4:	609a      	str	r2, [r3, #8]
}
 8006ed6:	bf00      	nop
 8006ed8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006edc:	46bd      	mov	sp, r7
 8006ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ee2:	bf00      	nop
 8006ee4:	51eb851f 	.word	0x51eb851f

08006ee8 <__NVIC_SetPriority>:
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	6039      	str	r1, [r7, #0]
 8006ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	db0a      	blt.n	8006f12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	490c      	ldr	r1, [pc, #48]	; (8006f34 <__NVIC_SetPriority+0x4c>)
 8006f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f06:	0112      	lsls	r2, r2, #4
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f10:	e00a      	b.n	8006f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	4908      	ldr	r1, [pc, #32]	; (8006f38 <__NVIC_SetPriority+0x50>)
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	3b04      	subs	r3, #4
 8006f20:	0112      	lsls	r2, r2, #4
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	440b      	add	r3, r1
 8006f26:	761a      	strb	r2, [r3, #24]
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	e000e100 	.word	0xe000e100
 8006f38:	e000ed00 	.word	0xe000ed00

08006f3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006f40:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <SysTick_Handler+0x1c>)
 8006f42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006f44:	f001 fe6e 	bl	8008c24 <xTaskGetSchedulerState>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d001      	beq.n	8006f52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006f4e:	f002 fc53 	bl	80097f8 <xPortSysTickHandler>
  }
}
 8006f52:	bf00      	nop
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	e000e010 	.word	0xe000e010

08006f5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f60:	2100      	movs	r1, #0
 8006f62:	f06f 0004 	mvn.w	r0, #4
 8006f66:	f7ff ffbf 	bl	8006ee8 <__NVIC_SetPriority>
#endif
}
 8006f6a:	bf00      	nop
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f76:	f3ef 8305 	mrs	r3, IPSR
 8006f7a:	603b      	str	r3, [r7, #0]
  return(result);
 8006f7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f82:	f06f 0305 	mvn.w	r3, #5
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	e00c      	b.n	8006fa4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <osKernelInitialize+0x44>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d105      	bne.n	8006f9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <osKernelInitialize+0x44>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	607b      	str	r3, [r7, #4]
 8006f9c:	e002      	b.n	8006fa4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fa4:	687b      	ldr	r3, [r7, #4]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	200002e0 	.word	0x200002e0

08006fb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fbe:	f3ef 8305 	mrs	r3, IPSR
 8006fc2:	603b      	str	r3, [r7, #0]
  return(result);
 8006fc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006fca:	f06f 0305 	mvn.w	r3, #5
 8006fce:	607b      	str	r3, [r7, #4]
 8006fd0:	e010      	b.n	8006ff4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <osKernelStart+0x48>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d109      	bne.n	8006fee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006fda:	f7ff ffbf 	bl	8006f5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006fde:	4b08      	ldr	r3, [pc, #32]	; (8007000 <osKernelStart+0x48>)
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006fe4:	f001 fa0e 	bl	8008404 <vTaskStartScheduler>
      stat = osOK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	607b      	str	r3, [r7, #4]
 8006fec:	e002      	b.n	8006ff4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006fee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ff4:	687b      	ldr	r3, [r7, #4]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	200002e0 	.word	0x200002e0

08007004 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b08e      	sub	sp, #56	; 0x38
 8007008:	af04      	add	r7, sp, #16
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007010:	2300      	movs	r3, #0
 8007012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007014:	f3ef 8305 	mrs	r3, IPSR
 8007018:	617b      	str	r3, [r7, #20]
  return(result);
 800701a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800701c:	2b00      	cmp	r3, #0
 800701e:	d17e      	bne.n	800711e <osThreadNew+0x11a>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d07b      	beq.n	800711e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007026:	2380      	movs	r3, #128	; 0x80
 8007028:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800702a:	2318      	movs	r3, #24
 800702c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007032:	f04f 33ff 	mov.w	r3, #4294967295
 8007036:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d045      	beq.n	80070ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <osThreadNew+0x48>
        name = attr->name;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d008      	beq.n	8007072 <osThreadNew+0x6e>
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	2b38      	cmp	r3, #56	; 0x38
 8007064:	d805      	bhi.n	8007072 <osThreadNew+0x6e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <osThreadNew+0x72>
        return (NULL);
 8007072:	2300      	movs	r3, #0
 8007074:	e054      	b.n	8007120 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	089b      	lsrs	r3, r3, #2
 8007084:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00e      	beq.n	80070ac <osThreadNew+0xa8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	2b5b      	cmp	r3, #91	; 0x5b
 8007094:	d90a      	bls.n	80070ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800709a:	2b00      	cmp	r3, #0
 800709c:	d006      	beq.n	80070ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <osThreadNew+0xa8>
        mem = 1;
 80070a6:	2301      	movs	r3, #1
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	e010      	b.n	80070ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10c      	bne.n	80070ce <osThreadNew+0xca>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d108      	bne.n	80070ce <osThreadNew+0xca>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <osThreadNew+0xca>
          mem = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	e001      	b.n	80070ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d110      	bne.n	80070f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070dc:	9202      	str	r2, [sp, #8]
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6a3a      	ldr	r2, [r7, #32]
 80070e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 ffc4 	bl	8008078 <xTaskCreateStatic>
 80070f0:	4603      	mov	r3, r0
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	e013      	b.n	800711e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d110      	bne.n	800711e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	b29a      	uxth	r2, r3
 8007100:	f107 0310 	add.w	r3, r7, #16
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f001 f80f 	bl	8008132 <xTaskCreate>
 8007114:	4603      	mov	r3, r0
 8007116:	2b01      	cmp	r3, #1
 8007118:	d001      	beq.n	800711e <osThreadNew+0x11a>
            hTask = NULL;
 800711a:	2300      	movs	r3, #0
 800711c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800711e:	693b      	ldr	r3, [r7, #16]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3728      	adds	r7, #40	; 0x28
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007130:	f3ef 8305 	mrs	r3, IPSR
 8007134:	60bb      	str	r3, [r7, #8]
  return(result);
 8007136:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <osDelay+0x1c>
    stat = osErrorISR;
 800713c:	f06f 0305 	mvn.w	r3, #5
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	e007      	b.n	8007154 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <osDelay+0x2c>
      vTaskDelay(ticks);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 f924 	bl	800839c <vTaskDelay>
    }
  }

  return (stat);
 8007154:	68fb      	ldr	r3, [r7, #12]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800715e:	b580      	push	{r7, lr}
 8007160:	b08a      	sub	sp, #40	; 0x28
 8007162:	af02      	add	r7, sp, #8
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800716e:	f3ef 8305 	mrs	r3, IPSR
 8007172:	613b      	str	r3, [r7, #16]
  return(result);
 8007174:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007176:	2b00      	cmp	r3, #0
 8007178:	d15f      	bne.n	800723a <osMessageQueueNew+0xdc>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d05c      	beq.n	800723a <osMessageQueueNew+0xdc>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d059      	beq.n	800723a <osMessageQueueNew+0xdc>
    mem = -1;
 8007186:	f04f 33ff 	mov.w	r3, #4294967295
 800718a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d029      	beq.n	80071e6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d012      	beq.n	80071c0 <osMessageQueueNew+0x62>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2b4f      	cmp	r3, #79	; 0x4f
 80071a0:	d90e      	bls.n	80071c0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	695a      	ldr	r2, [r3, #20]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d302      	bcc.n	80071c0 <osMessageQueueNew+0x62>
        mem = 1;
 80071ba:	2301      	movs	r3, #1
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	e014      	b.n	80071ea <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d110      	bne.n	80071ea <osMessageQueueNew+0x8c>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10c      	bne.n	80071ea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d108      	bne.n	80071ea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <osMessageQueueNew+0x8c>
          mem = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	e001      	b.n	80071ea <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10b      	bne.n	8007208 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	2100      	movs	r1, #0
 80071fa:	9100      	str	r1, [sp, #0]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 fa21 	bl	8007646 <xQueueGenericCreateStatic>
 8007204:	61f8      	str	r0, [r7, #28]
 8007206:	e008      	b.n	800721a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800720e:	2200      	movs	r2, #0
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fa8f 	bl	8007736 <xQueueGenericCreate>
 8007218:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00c      	beq.n	800723a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <osMessageQueueNew+0xd0>
        name = attr->name;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	e001      	b.n	8007232 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007232:	6979      	ldr	r1, [r7, #20]
 8007234:	69f8      	ldr	r0, [r7, #28]
 8007236:	f000 fec1 	bl	8007fbc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800723a:	69fb      	ldr	r3, [r7, #28]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3720      	adds	r7, #32
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	4613      	mov	r3, r2
 8007252:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007258:	2300      	movs	r3, #0
 800725a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800725c:	f3ef 8305 	mrs	r3, IPSR
 8007260:	617b      	str	r3, [r7, #20]
  return(result);
 8007262:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007264:	2b00      	cmp	r3, #0
 8007266:	d028      	beq.n	80072ba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <osMessageQueuePut+0x36>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <osMessageQueuePut+0x36>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800727a:	f06f 0303 	mvn.w	r3, #3
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	e038      	b.n	80072f4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007282:	2300      	movs	r3, #0
 8007284:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007286:	f107 0210 	add.w	r2, r7, #16
 800728a:	2300      	movs	r3, #0
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	69b8      	ldr	r0, [r7, #24]
 8007290:	f000 fb94 	bl	80079bc <xQueueGenericSendFromISR>
 8007294:	4603      	mov	r3, r0
 8007296:	2b01      	cmp	r3, #1
 8007298:	d003      	beq.n	80072a2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800729a:	f06f 0302 	mvn.w	r3, #2
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	e028      	b.n	80072f4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d025      	beq.n	80072f4 <osMessageQueuePut+0xb0>
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <osMessageQueuePut+0xbc>)
 80072aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	e01c      	b.n	80072f4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <osMessageQueuePut+0x82>
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d103      	bne.n	80072ce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80072c6:	f06f 0303 	mvn.w	r3, #3
 80072ca:	61fb      	str	r3, [r7, #28]
 80072cc:	e012      	b.n	80072f4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80072ce:	2300      	movs	r3, #0
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	69b8      	ldr	r0, [r7, #24]
 80072d6:	f000 fa8b 	bl	80077f0 <xQueueGenericSend>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d009      	beq.n	80072f4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80072e6:	f06f 0301 	mvn.w	r3, #1
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	e002      	b.n	80072f4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80072ee:	f06f 0302 	mvn.w	r3, #2
 80072f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80072f4:	69fb      	ldr	r3, [r7, #28]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	e000ed04 	.word	0xe000ed04

08007304 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800731a:	f3ef 8305 	mrs	r3, IPSR
 800731e:	617b      	str	r3, [r7, #20]
  return(result);
 8007320:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007322:	2b00      	cmp	r3, #0
 8007324:	d028      	beq.n	8007378 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <osMessageQueueGet+0x34>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <osMessageQueueGet+0x34>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007338:	f06f 0303 	mvn.w	r3, #3
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	e037      	b.n	80073b0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007344:	f107 0310 	add.w	r3, r7, #16
 8007348:	461a      	mov	r2, r3
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	69b8      	ldr	r0, [r7, #24]
 800734e:	f000 fca5 	bl	8007c9c <xQueueReceiveFromISR>
 8007352:	4603      	mov	r3, r0
 8007354:	2b01      	cmp	r3, #1
 8007356:	d003      	beq.n	8007360 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007358:	f06f 0302 	mvn.w	r3, #2
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	e027      	b.n	80073b0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d024      	beq.n	80073b0 <osMessageQueueGet+0xac>
 8007366:	4b15      	ldr	r3, [pc, #84]	; (80073bc <osMessageQueueGet+0xb8>)
 8007368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	e01b      	b.n	80073b0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <osMessageQueueGet+0x80>
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007384:	f06f 0303 	mvn.w	r3, #3
 8007388:	61fb      	str	r3, [r7, #28]
 800738a:	e011      	b.n	80073b0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	69b8      	ldr	r0, [r7, #24]
 8007392:	f000 fbaf 	bl	8007af4 <xQueueReceive>
 8007396:	4603      	mov	r3, r0
 8007398:	2b01      	cmp	r3, #1
 800739a:	d009      	beq.n	80073b0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80073a2:	f06f 0301 	mvn.w	r3, #1
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	e002      	b.n	80073b0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80073aa:	f06f 0302 	mvn.w	r3, #2
 80073ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80073b0:	69fb      	ldr	r3, [r7, #28]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3720      	adds	r7, #32
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	e000ed04 	.word	0xe000ed04

080073c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a07      	ldr	r2, [pc, #28]	; (80073ec <vApplicationGetIdleTaskMemory+0x2c>)
 80073d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4a06      	ldr	r2, [pc, #24]	; (80073f0 <vApplicationGetIdleTaskMemory+0x30>)
 80073d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2280      	movs	r2, #128	; 0x80
 80073dc:	601a      	str	r2, [r3, #0]
}
 80073de:	bf00      	nop
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	200002e4 	.word	0x200002e4
 80073f0:	20000340 	.word	0x20000340

080073f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4a07      	ldr	r2, [pc, #28]	; (8007420 <vApplicationGetTimerTaskMemory+0x2c>)
 8007404:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4a06      	ldr	r2, [pc, #24]	; (8007424 <vApplicationGetTimerTaskMemory+0x30>)
 800740a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	20000540 	.word	0x20000540
 8007424:	2000059c 	.word	0x2000059c

08007428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f103 0208 	add.w	r2, r3, #8
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f04f 32ff 	mov.w	r2, #4294967295
 8007440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f103 0208 	add.w	r2, r3, #8
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f103 0208 	add.w	r2, r3, #8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	601a      	str	r2, [r3, #0]
}
 80074be:	bf00      	nop
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d103      	bne.n	80074ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	e00c      	b.n	8007504 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3308      	adds	r3, #8
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e002      	b.n	80074f8 <vListInsert+0x2e>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	429a      	cmp	r2, r3
 8007502:	d2f6      	bcs.n	80074f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	601a      	str	r2, [r3, #0]
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6892      	ldr	r2, [r2, #8]
 8007552:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6852      	ldr	r2, [r2, #4]
 800755c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d103      	bne.n	8007570 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	1e5a      	subs	r2, r3, #1
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075b6:	bf00      	nop
 80075b8:	e7fe      	b.n	80075b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075ba:	f002 f88b 	bl	80096d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075ca:	fb01 f303 	mul.w	r3, r1, r3
 80075ce:	441a      	add	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ea:	3b01      	subs	r3, #1
 80075ec:	68f9      	ldr	r1, [r7, #12]
 80075ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	441a      	add	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	22ff      	movs	r2, #255	; 0xff
 80075fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	22ff      	movs	r2, #255	; 0xff
 8007606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d109      	bne.n	8007624 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00f      	beq.n	8007638 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3310      	adds	r3, #16
 800761c:	4618      	mov	r0, r3
 800761e:	f001 f949 	bl	80088b4 <xTaskRemoveFromEventList>
 8007622:	e009      	b.n	8007638 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3310      	adds	r3, #16
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fefd 	bl	8007428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3324      	adds	r3, #36	; 0x24
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff fef8 	bl	8007428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007638:	f002 f87c 	bl	8009734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800763c:	2301      	movs	r3, #1
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007646:	b580      	push	{r7, lr}
 8007648:	b08e      	sub	sp, #56	; 0x38
 800764a:	af02      	add	r7, sp, #8
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10a      	bne.n	800768c <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007688:	bf00      	nop
 800768a:	e7fe      	b.n	800768a <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <xQueueGenericCreateStatic+0x52>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <xQueueGenericCreateStatic+0x56>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <xQueueGenericCreateStatic+0x58>
 800769c:	2300      	movs	r3, #0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	623b      	str	r3, [r7, #32]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <xQueueGenericCreateStatic+0x7e>
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <xQueueGenericCreateStatic+0x82>
 80076c4:	2301      	movs	r3, #1
 80076c6:	e000      	b.n	80076ca <xQueueGenericCreateStatic+0x84>
 80076c8:	2300      	movs	r3, #0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	61fb      	str	r3, [r7, #28]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076e4:	2350      	movs	r3, #80	; 0x50
 80076e6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2b50      	cmp	r3, #80	; 0x50
 80076ec:	d00a      	beq.n	8007704 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	61bb      	str	r3, [r7, #24]
}
 8007700:	bf00      	nop
 8007702:	e7fe      	b.n	8007702 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007704:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00d      	beq.n	800772c <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007718:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	4613      	mov	r3, r2
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	68b9      	ldr	r1, [r7, #8]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f83f 	bl	80077aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800772e:	4618      	mov	r0, r3
 8007730:	3730      	adds	r7, #48	; 0x30
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007736:	b580      	push	{r7, lr}
 8007738:	b08a      	sub	sp, #40	; 0x28
 800773a:	af02      	add	r7, sp, #8
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	4613      	mov	r3, r2
 8007742:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <xQueueGenericCreate+0x2a>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	613b      	str	r3, [r7, #16]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	3350      	adds	r3, #80	; 0x50
 800776e:	4618      	mov	r0, r3
 8007770:	f002 f8d2 	bl	8009918 <pvPortMalloc>
 8007774:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d011      	beq.n	80077a0 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	3350      	adds	r3, #80	; 0x50
 8007784:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800778e:	79fa      	ldrb	r2, [r7, #7]
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	4613      	mov	r3, r2
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	68b9      	ldr	r1, [r7, #8]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f805 	bl	80077aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077a0:	69bb      	ldr	r3, [r7, #24]
	}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3720      	adds	r7, #32
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d103      	bne.n	80077c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e002      	b.n	80077cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077d8:	2101      	movs	r1, #1
 80077da:	69b8      	ldr	r0, [r7, #24]
 80077dc:	f7ff fed8 	bl	8007590 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08e      	sub	sp, #56	; 0x38
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077fe:	2300      	movs	r3, #0
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xQueueGenericSend+0x32>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <xQueueGenericSend+0x40>
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <xQueueGenericSend+0x44>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <xQueueGenericSend+0x46>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <xQueueGenericSend+0x60>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d103      	bne.n	800785e <xQueueGenericSend+0x6e>
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785a:	2b01      	cmp	r3, #1
 800785c:	d101      	bne.n	8007862 <xQueueGenericSend+0x72>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <xQueueGenericSend+0x74>
 8007862:	2300      	movs	r3, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <xQueueGenericSend+0x8e>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	623b      	str	r3, [r7, #32]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800787e:	f001 f9d1 	bl	8008c24 <xTaskGetSchedulerState>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <xQueueGenericSend+0x9e>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <xQueueGenericSend+0xa2>
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <xQueueGenericSend+0xa4>
 8007892:	2300      	movs	r3, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <xQueueGenericSend+0xbe>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	61fb      	str	r3, [r7, #28]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078ae:	f001 ff11 	bl	80096d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d302      	bcc.n	80078c4 <xQueueGenericSend+0xd4>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d112      	bne.n	80078ea <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	68b9      	ldr	r1, [r7, #8]
 80078c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ca:	f000 fa67 	bl	8007d9c <prvCopyDataToQueue>
 80078ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	3324      	adds	r3, #36	; 0x24
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 ffe9 	bl	80088b4 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078e2:	f001 ff27 	bl	8009734 <vPortExitCritical>
				return pdPASS;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e062      	b.n	80079b0 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d103      	bne.n	80078f8 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078f0:	f001 ff20 	bl	8009734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e05b      	b.n	80079b0 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078fe:	f107 0314 	add.w	r3, r7, #20
 8007902:	4618      	mov	r0, r3
 8007904:	f001 f83a 	bl	800897c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007908:	2301      	movs	r3, #1
 800790a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800790c:	f001 ff12 	bl	8009734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007910:	f000 fdde 	bl	80084d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007914:	f001 fede 	bl	80096d4 <vPortEnterCritical>
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800791e:	b25b      	sxtb	r3, r3
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007924:	d103      	bne.n	800792e <xQueueGenericSend+0x13e>
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007934:	b25b      	sxtb	r3, r3
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d103      	bne.n	8007944 <xQueueGenericSend+0x154>
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007944:	f001 fef6 	bl	8009734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007948:	1d3a      	adds	r2, r7, #4
 800794a:	f107 0314 	add.w	r3, r7, #20
 800794e:	4611      	mov	r1, r2
 8007950:	4618      	mov	r0, r3
 8007952:	f001 f829 	bl	80089a8 <xTaskCheckForTimeOut>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d123      	bne.n	80079a4 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800795c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800795e:	f000 fb15 	bl	8007f8c <prvIsQueueFull>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d017      	beq.n	8007998 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	3310      	adds	r3, #16
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f000 ff4f 	bl	8008814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007978:	f000 faa0 	bl	8007ebc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800797c:	f000 fdb6 	bl	80084ec <xTaskResumeAll>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d193      	bne.n	80078ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007986:	4b0c      	ldr	r3, [pc, #48]	; (80079b8 <xQueueGenericSend+0x1c8>)
 8007988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	e78a      	b.n	80078ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800799a:	f000 fa8f 	bl	8007ebc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800799e:	f000 fda5 	bl	80084ec <xTaskResumeAll>
 80079a2:	e784      	b.n	80078ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079a6:	f000 fa89 	bl	8007ebc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079aa:	f000 fd9f 	bl	80084ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3738      	adds	r7, #56	; 0x38
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b090      	sub	sp, #64	; 0x40
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d103      	bne.n	80079f8 <xQueueGenericSendFromISR+0x3c>
 80079f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <xQueueGenericSendFromISR+0x40>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e000      	b.n	80079fe <xQueueGenericSendFromISR+0x42>
 80079fc:	2300      	movs	r3, #0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10a      	bne.n	8007a18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a14:	bf00      	nop
 8007a16:	e7fe      	b.n	8007a16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d103      	bne.n	8007a26 <xQueueGenericSendFromISR+0x6a>
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d101      	bne.n	8007a2a <xQueueGenericSendFromISR+0x6e>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <xQueueGenericSendFromISR+0x70>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10a      	bne.n	8007a46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	623b      	str	r3, [r7, #32]
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a46:	f001 ff27 	bl	8009898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	61fa      	str	r2, [r7, #28]
 8007a60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d302      	bcc.n	8007a78 <xQueueGenericSendFromISR+0xbc>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d12f      	bne.n	8007ad8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a8e:	f000 f985 	bl	8007d9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9a:	d112      	bne.n	8007ac2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d016      	beq.n	8007ad2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	3324      	adds	r3, #36	; 0x24
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 ff03 	bl	80088b4 <xTaskRemoveFromEventList>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00e      	beq.n	8007ad2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	e007      	b.n	8007ad2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ac2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	b25a      	sxtb	r2, r3
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007ad6:	e001      	b.n	8007adc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ade:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ae6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3740      	adds	r7, #64	; 0x40
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08c      	sub	sp, #48	; 0x30
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b00:	2300      	movs	r3, #0
 8007b02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <xQueueReceive+0x30>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	623b      	str	r3, [r7, #32]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d103      	bne.n	8007b32 <xQueueReceive+0x3e>
 8007b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <xQueueReceive+0x42>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e000      	b.n	8007b38 <xQueueReceive+0x44>
 8007b36:	2300      	movs	r3, #0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <xQueueReceive+0x5e>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	61fb      	str	r3, [r7, #28]
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b52:	f001 f867 	bl	8008c24 <xTaskGetSchedulerState>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d102      	bne.n	8007b62 <xQueueReceive+0x6e>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <xQueueReceive+0x72>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e000      	b.n	8007b68 <xQueueReceive+0x74>
 8007b66:	2300      	movs	r3, #0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <xQueueReceive+0x8e>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	61bb      	str	r3, [r7, #24]
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b82:	f001 fda7 	bl	80096d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d014      	beq.n	8007bbc <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b92:	68b9      	ldr	r1, [r7, #8]
 8007b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b96:	f000 f96b 	bl	8007e70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	1e5a      	subs	r2, r3, #1
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d004      	beq.n	8007bb4 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	3310      	adds	r3, #16
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fe80 	bl	80088b4 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bb4:	f001 fdbe 	bl	8009734 <vPortExitCritical>
				return pdPASS;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e069      	b.n	8007c90 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d103      	bne.n	8007bca <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bc2:	f001 fdb7 	bl	8009734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	e062      	b.n	8007c90 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d106      	bne.n	8007bde <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bd0:	f107 0310 	add.w	r3, r7, #16
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fed1 	bl	800897c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bde:	f001 fda9 	bl	8009734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007be2:	f000 fc75 	bl	80084d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007be6:	f001 fd75 	bl	80096d4 <vPortEnterCritical>
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bf0:	b25b      	sxtb	r3, r3
 8007bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf6:	d103      	bne.n	8007c00 <xQueueReceive+0x10c>
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c06:	b25b      	sxtb	r3, r3
 8007c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0c:	d103      	bne.n	8007c16 <xQueueReceive+0x122>
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c16:	f001 fd8d 	bl	8009734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c1a:	1d3a      	adds	r2, r7, #4
 8007c1c:	f107 0310 	add.w	r3, r7, #16
 8007c20:	4611      	mov	r1, r2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fec0 	bl	80089a8 <xTaskCheckForTimeOut>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d123      	bne.n	8007c76 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c30:	f000 f996 	bl	8007f60 <prvIsQueueEmpty>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d017      	beq.n	8007c6a <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3c:	3324      	adds	r3, #36	; 0x24
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	4611      	mov	r1, r2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fde6 	bl	8008814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c4a:	f000 f937 	bl	8007ebc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c4e:	f000 fc4d 	bl	80084ec <xTaskResumeAll>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d194      	bne.n	8007b82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007c58:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <xQueueReceive+0x1a4>)
 8007c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	e78b      	b.n	8007b82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c6c:	f000 f926 	bl	8007ebc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c70:	f000 fc3c 	bl	80084ec <xTaskResumeAll>
 8007c74:	e785      	b.n	8007b82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c78:	f000 f920 	bl	8007ebc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c7c:	f000 fc36 	bl	80084ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c82:	f000 f96d 	bl	8007f60 <prvIsQueueEmpty>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f43f af7a 	beq.w	8007b82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3730      	adds	r7, #48	; 0x30
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	e000ed04 	.word	0xe000ed04

08007c9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b08e      	sub	sp, #56	; 0x38
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	623b      	str	r3, [r7, #32]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <xQueueReceiveFromISR+0x3a>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <xQueueReceiveFromISR+0x3e>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <xQueueReceiveFromISR+0x40>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	61fb      	str	r3, [r7, #28]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cf6:	f001 fdcf 	bl	8009898 <vPortValidateInterruptPriority>
	__asm volatile
 8007cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	61ba      	str	r2, [r7, #24]
 8007d10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d02f      	beq.n	8007d82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d2c:	68b9      	ldr	r1, [r7, #8]
 8007d2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d30:	f000 f89e 	bl	8007e70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	1e5a      	subs	r2, r3, #1
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007d3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d44:	d112      	bne.n	8007d6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d016      	beq.n	8007d7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	3310      	adds	r3, #16
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fdae 	bl	80088b4 <xTaskRemoveFromEventList>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00e      	beq.n	8007d7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e007      	b.n	8007d7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d70:	3301      	adds	r3, #1
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	b25a      	sxtb	r2, r3
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d80:	e001      	b.n	8007d86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f383 8811 	msr	BASEPRI, r3
}
 8007d90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3738      	adds	r7, #56	; 0x38
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007da8:	2300      	movs	r3, #0
 8007daa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10d      	bne.n	8007dd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d14d      	bne.n	8007e5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 ff4a 	bl	8008c60 <xTaskPriorityDisinherit>
 8007dcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	609a      	str	r2, [r3, #8]
 8007dd4:	e043      	b.n	8007e5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d119      	bne.n	8007e10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6858      	ldr	r0, [r3, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de4:	461a      	mov	r2, r3
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	f001 ffae 	bl	8009d48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df4:	441a      	add	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d32b      	bcc.n	8007e5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	605a      	str	r2, [r3, #4]
 8007e0e:	e026      	b.n	8007e5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	68d8      	ldr	r0, [r3, #12]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	461a      	mov	r2, r3
 8007e1a:	68b9      	ldr	r1, [r7, #8]
 8007e1c:	f001 ff94 	bl	8009d48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e28:	425b      	negs	r3, r3
 8007e2a:	441a      	add	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d207      	bcs.n	8007e4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e44:	425b      	negs	r3, r3
 8007e46:	441a      	add	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d105      	bne.n	8007e5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e66:	697b      	ldr	r3, [r7, #20]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d018      	beq.n	8007eb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	441a      	add	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68da      	ldr	r2, [r3, #12]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d303      	bcc.n	8007ea4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68d9      	ldr	r1, [r3, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eac:	461a      	mov	r2, r3
 8007eae:	6838      	ldr	r0, [r7, #0]
 8007eb0:	f001 ff4a 	bl	8009d48 <memcpy>
	}
}
 8007eb4:	bf00      	nop
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ec4:	f001 fc06 	bl	80096d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ece:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ed0:	e011      	b.n	8007ef6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d012      	beq.n	8007f00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3324      	adds	r3, #36	; 0x24
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fce8 	bl	80088b4 <xTaskRemoveFromEventList>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007eea:	f000 fdbf 	bl	8008a6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	dce9      	bgt.n	8007ed2 <prvUnlockQueue+0x16>
 8007efe:	e000      	b.n	8007f02 <prvUnlockQueue+0x46>
					break;
 8007f00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	22ff      	movs	r2, #255	; 0xff
 8007f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f0a:	f001 fc13 	bl	8009734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f0e:	f001 fbe1 	bl	80096d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f1a:	e011      	b.n	8007f40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d012      	beq.n	8007f4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3310      	adds	r3, #16
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fcc3 	bl	80088b4 <xTaskRemoveFromEventList>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f34:	f000 fd9a 	bl	8008a6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dce9      	bgt.n	8007f1c <prvUnlockQueue+0x60>
 8007f48:	e000      	b.n	8007f4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	22ff      	movs	r2, #255	; 0xff
 8007f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f54:	f001 fbee 	bl	8009734 <vPortExitCritical>
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f68:	f001 fbb4 	bl	80096d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f74:	2301      	movs	r3, #1
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e001      	b.n	8007f7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f7e:	f001 fbd9 	bl	8009734 <vPortExitCritical>

	return xReturn;
 8007f82:	68fb      	ldr	r3, [r7, #12]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f94:	f001 fb9e 	bl	80096d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d102      	bne.n	8007faa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	e001      	b.n	8007fae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fae:	f001 fbc1 	bl	8009734 <vPortExitCritical>

	return xReturn;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	e014      	b.n	8007ff6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007fcc:	4a0f      	ldr	r2, [pc, #60]	; (800800c <vQueueAddToRegistry+0x50>)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10b      	bne.n	8007ff0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007fd8:	490c      	ldr	r1, [pc, #48]	; (800800c <vQueueAddToRegistry+0x50>)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007fe2:	4a0a      	ldr	r2, [pc, #40]	; (800800c <vQueueAddToRegistry+0x50>)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	4413      	add	r3, r2
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007fee:	e006      	b.n	8007ffe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b07      	cmp	r3, #7
 8007ffa:	d9e7      	bls.n	8007fcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	2000099c 	.word	0x2000099c

08008010 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008020:	f001 fb58 	bl	80096d4 <vPortEnterCritical>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800802a:	b25b      	sxtb	r3, r3
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d103      	bne.n	800803a <vQueueWaitForMessageRestricted+0x2a>
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008040:	b25b      	sxtb	r3, r3
 8008042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008046:	d103      	bne.n	8008050 <vQueueWaitForMessageRestricted+0x40>
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008050:	f001 fb70 	bl	8009734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	2b00      	cmp	r3, #0
 800805a:	d106      	bne.n	800806a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	3324      	adds	r3, #36	; 0x24
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	68b9      	ldr	r1, [r7, #8]
 8008064:	4618      	mov	r0, r3
 8008066:	f000 fbf9 	bl	800885c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800806a:	6978      	ldr	r0, [r7, #20]
 800806c:	f7ff ff26 	bl	8007ebc <prvUnlockQueue>
	}
 8008070:	bf00      	nop
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008078:	b580      	push	{r7, lr}
 800807a:	b08e      	sub	sp, #56	; 0x38
 800807c:	af04      	add	r7, sp, #16
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10a      	bne.n	80080a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	623b      	str	r3, [r7, #32]
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <xTaskCreateStatic+0x46>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	61fb      	str	r3, [r7, #28]
}
 80080ba:	bf00      	nop
 80080bc:	e7fe      	b.n	80080bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080be:	235c      	movs	r3, #92	; 0x5c
 80080c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b5c      	cmp	r3, #92	; 0x5c
 80080c6:	d00a      	beq.n	80080de <xTaskCreateStatic+0x66>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	61bb      	str	r3, [r7, #24]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d01e      	beq.n	8008124 <xTaskCreateStatic+0xac>
 80080e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01b      	beq.n	8008124 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	2202      	movs	r2, #2
 80080fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080fe:	2300      	movs	r3, #0
 8008100:	9303      	str	r3, [sp, #12]
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	9302      	str	r3, [sp, #8]
 8008106:	f107 0314 	add.w	r3, r7, #20
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	68b9      	ldr	r1, [r7, #8]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f850 	bl	80081bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800811c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800811e:	f000 f8dd 	bl	80082dc <prvAddNewTaskToReadyList>
 8008122:	e001      	b.n	8008128 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008124:	2300      	movs	r3, #0
 8008126:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008128:	697b      	ldr	r3, [r7, #20]
	}
 800812a:	4618      	mov	r0, r3
 800812c:	3728      	adds	r7, #40	; 0x28
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008132:	b580      	push	{r7, lr}
 8008134:	b08c      	sub	sp, #48	; 0x30
 8008136:	af04      	add	r7, sp, #16
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	603b      	str	r3, [r7, #0]
 800813e:	4613      	mov	r3, r2
 8008140:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4618      	mov	r0, r3
 8008148:	f001 fbe6 	bl	8009918 <pvPortMalloc>
 800814c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00e      	beq.n	8008172 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008154:	205c      	movs	r0, #92	; 0x5c
 8008156:	f001 fbdf 	bl	8009918 <pvPortMalloc>
 800815a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	631a      	str	r2, [r3, #48]	; 0x30
 8008168:	e005      	b.n	8008176 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800816a:	6978      	ldr	r0, [r7, #20]
 800816c:	f001 fca0 	bl	8009ab0 <vPortFree>
 8008170:	e001      	b.n	8008176 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d017      	beq.n	80081ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008184:	88fa      	ldrh	r2, [r7, #6]
 8008186:	2300      	movs	r3, #0
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	9302      	str	r3, [sp, #8]
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 f80e 	bl	80081bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081a0:	69f8      	ldr	r0, [r7, #28]
 80081a2:	f000 f89b 	bl	80082dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081a6:	2301      	movs	r3, #1
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	e002      	b.n	80081b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081ac:	f04f 33ff 	mov.w	r3, #4294967295
 80081b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081b2:	69bb      	ldr	r3, [r7, #24]
	}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3720      	adds	r7, #32
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	461a      	mov	r2, r3
 80081d4:	21a5      	movs	r1, #165	; 0xa5
 80081d6:	f001 fdc5 	bl	8009d64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081e4:	3b01      	subs	r3, #1
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f023 0307 	bic.w	r3, r3, #7
 80081f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <prvInitialiseNewTask+0x58>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	617b      	str	r3, [r7, #20]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01f      	beq.n	800825a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800821a:	2300      	movs	r3, #0
 800821c:	61fb      	str	r3, [r7, #28]
 800821e:	e012      	b.n	8008246 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	7819      	ldrb	r1, [r3, #0]
 8008228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	4413      	add	r3, r2
 800822e:	3334      	adds	r3, #52	; 0x34
 8008230:	460a      	mov	r2, r1
 8008232:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d006      	beq.n	800824e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	3301      	adds	r3, #1
 8008244:	61fb      	str	r3, [r7, #28]
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	2b0f      	cmp	r3, #15
 800824a:	d9e9      	bls.n	8008220 <prvInitialiseNewTask+0x64>
 800824c:	e000      	b.n	8008250 <prvInitialiseNewTask+0x94>
			{
				break;
 800824e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008258:	e003      	b.n	8008262 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	2b37      	cmp	r3, #55	; 0x37
 8008266:	d901      	bls.n	800826c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008268:	2337      	movs	r3, #55	; 0x37
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008270:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008276:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	2200      	movs	r2, #0
 800827c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	3304      	adds	r3, #4
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff f8f0 	bl	8007468 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	3318      	adds	r3, #24
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff f8eb 	bl	8007468 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008296:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	2200      	movs	r2, #0
 80082ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	68f9      	ldr	r1, [r7, #12]
 80082ba:	69b8      	ldr	r0, [r7, #24]
 80082bc:	f001 f8e0 	bl	8009480 <pxPortInitialiseStack>
 80082c0:	4602      	mov	r2, r0
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082d2:	bf00      	nop
 80082d4:	3720      	adds	r7, #32
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082e4:	f001 f9f6 	bl	80096d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082e8:	4b26      	ldr	r3, [pc, #152]	; (8008384 <prvAddNewTaskToReadyList+0xa8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	4a25      	ldr	r2, [pc, #148]	; (8008384 <prvAddNewTaskToReadyList+0xa8>)
 80082f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082f2:	4b25      	ldr	r3, [pc, #148]	; (8008388 <prvAddNewTaskToReadyList+0xac>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d109      	bne.n	800830e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082fa:	4a23      	ldr	r2, [pc, #140]	; (8008388 <prvAddNewTaskToReadyList+0xac>)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008300:	4b20      	ldr	r3, [pc, #128]	; (8008384 <prvAddNewTaskToReadyList+0xa8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d110      	bne.n	800832a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008308:	f000 fbce 	bl	8008aa8 <prvInitialiseTaskLists>
 800830c:	e00d      	b.n	800832a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800830e:	4b1f      	ldr	r3, [pc, #124]	; (800838c <prvAddNewTaskToReadyList+0xb0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008316:	4b1c      	ldr	r3, [pc, #112]	; (8008388 <prvAddNewTaskToReadyList+0xac>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	429a      	cmp	r2, r3
 8008322:	d802      	bhi.n	800832a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008324:	4a18      	ldr	r2, [pc, #96]	; (8008388 <prvAddNewTaskToReadyList+0xac>)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800832a:	4b19      	ldr	r3, [pc, #100]	; (8008390 <prvAddNewTaskToReadyList+0xb4>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3301      	adds	r3, #1
 8008330:	4a17      	ldr	r2, [pc, #92]	; (8008390 <prvAddNewTaskToReadyList+0xb4>)
 8008332:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008334:	4b16      	ldr	r3, [pc, #88]	; (8008390 <prvAddNewTaskToReadyList+0xb4>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008340:	4b14      	ldr	r3, [pc, #80]	; (8008394 <prvAddNewTaskToReadyList+0xb8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	429a      	cmp	r2, r3
 8008346:	d903      	bls.n	8008350 <prvAddNewTaskToReadyList+0x74>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	4a11      	ldr	r2, [pc, #68]	; (8008394 <prvAddNewTaskToReadyList+0xb8>)
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4a0e      	ldr	r2, [pc, #56]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 800835e:	441a      	add	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3304      	adds	r3, #4
 8008364:	4619      	mov	r1, r3
 8008366:	4610      	mov	r0, r2
 8008368:	f7ff f88b 	bl	8007482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800836c:	f001 f9e2 	bl	8009734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008370:	4b06      	ldr	r3, [pc, #24]	; (800838c <prvAddNewTaskToReadyList+0xb0>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008378:	4b03      	ldr	r3, [pc, #12]	; (8008388 <prvAddNewTaskToReadyList+0xac>)
 800837a:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800837c:	bf00      	nop
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20000eb0 	.word	0x20000eb0
 8008388:	200009dc 	.word	0x200009dc
 800838c:	20000ebc 	.word	0x20000ebc
 8008390:	20000ecc 	.word	0x20000ecc
 8008394:	20000eb8 	.word	0x20000eb8
 8008398:	200009e0 	.word	0x200009e0

0800839c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d017      	beq.n	80083de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <vTaskDelay+0x60>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <vTaskDelay+0x30>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	60bb      	str	r3, [r7, #8]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80083cc:	f000 f880 	bl	80084d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083d0:	2100      	movs	r1, #0
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fcb2 	bl	8008d3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083d8:	f000 f888 	bl	80084ec <xTaskResumeAll>
 80083dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d107      	bne.n	80083f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80083e4:	4b06      	ldr	r3, [pc, #24]	; (8008400 <vTaskDelay+0x64>)
 80083e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083f4:	bf00      	nop
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000ed8 	.word	0x20000ed8
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08a      	sub	sp, #40	; 0x28
 8008408:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800840e:	2300      	movs	r3, #0
 8008410:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008412:	463a      	mov	r2, r7
 8008414:	1d39      	adds	r1, r7, #4
 8008416:	f107 0308 	add.w	r3, r7, #8
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe ffd0 	bl	80073c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	9202      	str	r2, [sp, #8]
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	2300      	movs	r3, #0
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	2300      	movs	r3, #0
 8008430:	460a      	mov	r2, r1
 8008432:	4921      	ldr	r1, [pc, #132]	; (80084b8 <vTaskStartScheduler+0xb4>)
 8008434:	4821      	ldr	r0, [pc, #132]	; (80084bc <vTaskStartScheduler+0xb8>)
 8008436:	f7ff fe1f 	bl	8008078 <xTaskCreateStatic>
 800843a:	4603      	mov	r3, r0
 800843c:	4a20      	ldr	r2, [pc, #128]	; (80084c0 <vTaskStartScheduler+0xbc>)
 800843e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008440:	4b1f      	ldr	r3, [pc, #124]	; (80084c0 <vTaskStartScheduler+0xbc>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008448:	2301      	movs	r3, #1
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	e001      	b.n	8008452 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d102      	bne.n	800845e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008458:	f000 fcc4 	bl	8008de4 <xTimerCreateTimerTask>
 800845c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d116      	bne.n	8008492 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	613b      	str	r3, [r7, #16]
}
 8008476:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008478:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <vTaskStartScheduler+0xc0>)
 800847a:	f04f 32ff 	mov.w	r2, #4294967295
 800847e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008480:	4b11      	ldr	r3, [pc, #68]	; (80084c8 <vTaskStartScheduler+0xc4>)
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008486:	4b11      	ldr	r3, [pc, #68]	; (80084cc <vTaskStartScheduler+0xc8>)
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800848c:	f001 f880 	bl	8009590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008490:	e00e      	b.n	80084b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008498:	d10a      	bne.n	80084b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	60fb      	str	r3, [r7, #12]
}
 80084ac:	bf00      	nop
 80084ae:	e7fe      	b.n	80084ae <vTaskStartScheduler+0xaa>
}
 80084b0:	bf00      	nop
 80084b2:	3718      	adds	r7, #24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	08009f1c 	.word	0x08009f1c
 80084bc:	08008a85 	.word	0x08008a85
 80084c0:	20000ed4 	.word	0x20000ed4
 80084c4:	20000ed0 	.word	0x20000ed0
 80084c8:	20000ebc 	.word	0x20000ebc
 80084cc:	20000eb4 	.word	0x20000eb4

080084d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <vTaskSuspendAll+0x18>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3301      	adds	r3, #1
 80084da:	4a03      	ldr	r2, [pc, #12]	; (80084e8 <vTaskSuspendAll+0x18>)
 80084dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80084de:	bf00      	nop
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	20000ed8 	.word	0x20000ed8

080084ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084fa:	4b3c      	ldr	r3, [pc, #240]	; (80085ec <xTaskResumeAll+0x100>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10a      	bne.n	8008518 <xTaskResumeAll+0x2c>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	603b      	str	r3, [r7, #0]
}
 8008514:	bf00      	nop
 8008516:	e7fe      	b.n	8008516 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008518:	f001 f8dc 	bl	80096d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800851c:	4b33      	ldr	r3, [pc, #204]	; (80085ec <xTaskResumeAll+0x100>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3b01      	subs	r3, #1
 8008522:	4a32      	ldr	r2, [pc, #200]	; (80085ec <xTaskResumeAll+0x100>)
 8008524:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008526:	4b31      	ldr	r3, [pc, #196]	; (80085ec <xTaskResumeAll+0x100>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d156      	bne.n	80085dc <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800852e:	4b30      	ldr	r3, [pc, #192]	; (80085f0 <xTaskResumeAll+0x104>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d052      	beq.n	80085dc <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008536:	e02f      	b.n	8008598 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008538:	4b2e      	ldr	r3, [pc, #184]	; (80085f4 <xTaskResumeAll+0x108>)
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3318      	adds	r3, #24
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe fff9 	bl	800753c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fff4 	bl	800753c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008558:	4b27      	ldr	r3, [pc, #156]	; (80085f8 <xTaskResumeAll+0x10c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d903      	bls.n	8008568 <xTaskResumeAll+0x7c>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	4a24      	ldr	r2, [pc, #144]	; (80085f8 <xTaskResumeAll+0x10c>)
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4a21      	ldr	r2, [pc, #132]	; (80085fc <xTaskResumeAll+0x110>)
 8008576:	441a      	add	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f7fe ff7f 	bl	8007482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008588:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <xTaskResumeAll+0x114>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	429a      	cmp	r2, r3
 8008590:	d302      	bcc.n	8008598 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008592:	4b1c      	ldr	r3, [pc, #112]	; (8008604 <xTaskResumeAll+0x118>)
 8008594:	2201      	movs	r2, #1
 8008596:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008598:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <xTaskResumeAll+0x108>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1cb      	bne.n	8008538 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085a6:	f000 fb1d 	bl	8008be4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085aa:	4b17      	ldr	r3, [pc, #92]	; (8008608 <xTaskResumeAll+0x11c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d010      	beq.n	80085d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085b6:	f000 f839 	bl	800862c <xTaskIncrementTick>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80085c0:	4b10      	ldr	r3, [pc, #64]	; (8008604 <xTaskResumeAll+0x118>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f1      	bne.n	80085b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80085d2:	4b0d      	ldr	r3, [pc, #52]	; (8008608 <xTaskResumeAll+0x11c>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085d8:	4b0a      	ldr	r3, [pc, #40]	; (8008604 <xTaskResumeAll+0x118>)
 80085da:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085dc:	f001 f8aa 	bl	8009734 <vPortExitCritical>

	return xAlreadyYielded;
 80085e0:	687b      	ldr	r3, [r7, #4]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20000ed8 	.word	0x20000ed8
 80085f0:	20000eb0 	.word	0x20000eb0
 80085f4:	20000e70 	.word	0x20000e70
 80085f8:	20000eb8 	.word	0x20000eb8
 80085fc:	200009e0 	.word	0x200009e0
 8008600:	200009dc 	.word	0x200009dc
 8008604:	20000ec4 	.word	0x20000ec4
 8008608:	20000ec0 	.word	0x20000ec0

0800860c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008612:	4b05      	ldr	r3, [pc, #20]	; (8008628 <xTaskGetTickCount+0x1c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008618:	687b      	ldr	r3, [r7, #4]
}
 800861a:	4618      	mov	r0, r3
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	20000eb4 	.word	0x20000eb4

0800862c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008636:	4b3f      	ldr	r3, [pc, #252]	; (8008734 <xTaskIncrementTick+0x108>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d170      	bne.n	8008720 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800863e:	4b3e      	ldr	r3, [pc, #248]	; (8008738 <xTaskIncrementTick+0x10c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3301      	adds	r3, #1
 8008644:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008646:	4a3c      	ldr	r2, [pc, #240]	; (8008738 <xTaskIncrementTick+0x10c>)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d120      	bne.n	8008694 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008652:	4b3a      	ldr	r3, [pc, #232]	; (800873c <xTaskIncrementTick+0x110>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <xTaskIncrementTick+0x46>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	603b      	str	r3, [r7, #0]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <xTaskIncrementTick+0x44>
 8008672:	4b32      	ldr	r3, [pc, #200]	; (800873c <xTaskIncrementTick+0x110>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	4b31      	ldr	r3, [pc, #196]	; (8008740 <xTaskIncrementTick+0x114>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a2f      	ldr	r2, [pc, #188]	; (800873c <xTaskIncrementTick+0x110>)
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	4a2f      	ldr	r2, [pc, #188]	; (8008740 <xTaskIncrementTick+0x114>)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	4b2f      	ldr	r3, [pc, #188]	; (8008744 <xTaskIncrementTick+0x118>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	4a2d      	ldr	r2, [pc, #180]	; (8008744 <xTaskIncrementTick+0x118>)
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	f000 faa8 	bl	8008be4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008694:	4b2c      	ldr	r3, [pc, #176]	; (8008748 <xTaskIncrementTick+0x11c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	429a      	cmp	r2, r3
 800869c:	d345      	bcc.n	800872a <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800869e:	4b27      	ldr	r3, [pc, #156]	; (800873c <xTaskIncrementTick+0x110>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d104      	bne.n	80086b2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a8:	4b27      	ldr	r3, [pc, #156]	; (8008748 <xTaskIncrementTick+0x11c>)
 80086aa:	f04f 32ff 	mov.w	r2, #4294967295
 80086ae:	601a      	str	r2, [r3, #0]
					break;
 80086b0:	e03b      	b.n	800872a <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b2:	4b22      	ldr	r3, [pc, #136]	; (800873c <xTaskIncrementTick+0x110>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d203      	bcs.n	80086d2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086ca:	4a1f      	ldr	r2, [pc, #124]	; (8008748 <xTaskIncrementTick+0x11c>)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086d0:	e02b      	b.n	800872a <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3304      	adds	r3, #4
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe ff30 	bl	800753c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	3318      	adds	r3, #24
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe ff27 	bl	800753c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f2:	4b16      	ldr	r3, [pc, #88]	; (800874c <xTaskIncrementTick+0x120>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d903      	bls.n	8008702 <xTaskIncrementTick+0xd6>
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	4a13      	ldr	r2, [pc, #76]	; (800874c <xTaskIncrementTick+0x120>)
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a10      	ldr	r2, [pc, #64]	; (8008750 <xTaskIncrementTick+0x124>)
 8008710:	441a      	add	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	3304      	adds	r3, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f7fe feb2 	bl	8007482 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800871e:	e7be      	b.n	800869e <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008720:	4b0c      	ldr	r3, [pc, #48]	; (8008754 <xTaskIncrementTick+0x128>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3301      	adds	r3, #1
 8008726:	4a0b      	ldr	r2, [pc, #44]	; (8008754 <xTaskIncrementTick+0x128>)
 8008728:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800872a:	697b      	ldr	r3, [r7, #20]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000ed8 	.word	0x20000ed8
 8008738:	20000eb4 	.word	0x20000eb4
 800873c:	20000e68 	.word	0x20000e68
 8008740:	20000e6c 	.word	0x20000e6c
 8008744:	20000ec8 	.word	0x20000ec8
 8008748:	20000ed0 	.word	0x20000ed0
 800874c:	20000eb8 	.word	0x20000eb8
 8008750:	200009e0 	.word	0x200009e0
 8008754:	20000ec0 	.word	0x20000ec0

08008758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800875e:	4b28      	ldr	r3, [pc, #160]	; (8008800 <vTaskSwitchContext+0xa8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008766:	4b27      	ldr	r3, [pc, #156]	; (8008804 <vTaskSwitchContext+0xac>)
 8008768:	2201      	movs	r2, #1
 800876a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800876c:	e041      	b.n	80087f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800876e:	4b25      	ldr	r3, [pc, #148]	; (8008804 <vTaskSwitchContext+0xac>)
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008774:	4b24      	ldr	r3, [pc, #144]	; (8008808 <vTaskSwitchContext+0xb0>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	e010      	b.n	800879e <vTaskSwitchContext+0x46>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10a      	bne.n	8008798 <vTaskSwitchContext+0x40>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	607b      	str	r3, [r7, #4]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <vTaskSwitchContext+0x3e>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3b01      	subs	r3, #1
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	491b      	ldr	r1, [pc, #108]	; (800880c <vTaskSwitchContext+0xb4>)
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0e4      	beq.n	800877c <vTaskSwitchContext+0x24>
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4613      	mov	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4a13      	ldr	r2, [pc, #76]	; (800880c <vTaskSwitchContext+0xb4>)
 80087be:	4413      	add	r3, r2
 80087c0:	60bb      	str	r3, [r7, #8]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	605a      	str	r2, [r3, #4]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	3308      	adds	r3, #8
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d104      	bne.n	80087e2 <vTaskSwitchContext+0x8a>
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	605a      	str	r2, [r3, #4]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	4a09      	ldr	r2, [pc, #36]	; (8008810 <vTaskSwitchContext+0xb8>)
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	4a06      	ldr	r2, [pc, #24]	; (8008808 <vTaskSwitchContext+0xb0>)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6013      	str	r3, [r2, #0]
}
 80087f2:	bf00      	nop
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	20000ed8 	.word	0x20000ed8
 8008804:	20000ec4 	.word	0x20000ec4
 8008808:	20000eb8 	.word	0x20000eb8
 800880c:	200009e0 	.word	0x200009e0
 8008810:	200009dc 	.word	0x200009dc

08008814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	60fb      	str	r3, [r7, #12]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <vTaskPlaceOnEventList+0x44>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3318      	adds	r3, #24
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fe fe41 	bl	80074ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008848:	2101      	movs	r1, #1
 800884a:	6838      	ldr	r0, [r7, #0]
 800884c:	f000 fa76 	bl	8008d3c <prvAddCurrentTaskToDelayedList>
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	200009dc 	.word	0x200009dc

0800885c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	617b      	str	r3, [r7, #20]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008884:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3318      	adds	r3, #24
 800888a:	4619      	mov	r1, r3
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7fe fdf8 	bl	8007482 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008898:	f04f 33ff 	mov.w	r3, #4294967295
 800889c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f000 fa4b 	bl	8008d3c <prvAddCurrentTaskToDelayedList>
	}
 80088a6:	bf00      	nop
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	200009dc 	.word	0x200009dc

080088b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	60fb      	str	r3, [r7, #12]
}
 80088dc:	bf00      	nop
 80088de:	e7fe      	b.n	80088de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	3318      	adds	r3, #24
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fe29 	bl	800753c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ea:	4b1e      	ldr	r3, [pc, #120]	; (8008964 <xTaskRemoveFromEventList+0xb0>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d11d      	bne.n	800892e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	3304      	adds	r3, #4
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fe20 	bl	800753c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008900:	4b19      	ldr	r3, [pc, #100]	; (8008968 <xTaskRemoveFromEventList+0xb4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d903      	bls.n	8008910 <xTaskRemoveFromEventList+0x5c>
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	4a16      	ldr	r2, [pc, #88]	; (8008968 <xTaskRemoveFromEventList+0xb4>)
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4a13      	ldr	r2, [pc, #76]	; (800896c <xTaskRemoveFromEventList+0xb8>)
 800891e:	441a      	add	r2, r3
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	3304      	adds	r3, #4
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f7fe fdab 	bl	8007482 <vListInsertEnd>
 800892c:	e005      	b.n	800893a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	3318      	adds	r3, #24
 8008932:	4619      	mov	r1, r3
 8008934:	480e      	ldr	r0, [pc, #56]	; (8008970 <xTaskRemoveFromEventList+0xbc>)
 8008936:	f7fe fda4 	bl	8007482 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893e:	4b0d      	ldr	r3, [pc, #52]	; (8008974 <xTaskRemoveFromEventList+0xc0>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	429a      	cmp	r2, r3
 8008946:	d905      	bls.n	8008954 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008948:	2301      	movs	r3, #1
 800894a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800894c:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <xTaskRemoveFromEventList+0xc4>)
 800894e:	2201      	movs	r2, #1
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	e001      	b.n	8008958 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008958:	697b      	ldr	r3, [r7, #20]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000ed8 	.word	0x20000ed8
 8008968:	20000eb8 	.word	0x20000eb8
 800896c:	200009e0 	.word	0x200009e0
 8008970:	20000e70 	.word	0x20000e70
 8008974:	200009dc 	.word	0x200009dc
 8008978:	20000ec4 	.word	0x20000ec4

0800897c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008984:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <vTaskInternalSetTimeOutState+0x24>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800898c:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <vTaskInternalSetTimeOutState+0x28>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	605a      	str	r2, [r3, #4]
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	20000ec8 	.word	0x20000ec8
 80089a4:	20000eb4 	.word	0x20000eb4

080089a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b088      	sub	sp, #32
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	613b      	str	r3, [r7, #16]
}
 80089ca:	bf00      	nop
 80089cc:	e7fe      	b.n	80089cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	60fb      	str	r3, [r7, #12]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80089ea:	f000 fe73 	bl	80096d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089ee:	4b1d      	ldr	r3, [pc, #116]	; (8008a64 <xTaskCheckForTimeOut+0xbc>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	d102      	bne.n	8008a0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	61fb      	str	r3, [r7, #28]
 8008a0c:	e023      	b.n	8008a56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <xTaskCheckForTimeOut+0xc0>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d007      	beq.n	8008a2a <xTaskCheckForTimeOut+0x82>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d302      	bcc.n	8008a2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	e015      	b.n	8008a56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d20b      	bcs.n	8008a4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	1ad2      	subs	r2, r2, r3
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff ff9b 	bl	800897c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	e004      	b.n	8008a56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a52:	2301      	movs	r3, #1
 8008a54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a56:	f000 fe6d 	bl	8009734 <vPortExitCritical>

	return xReturn;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3720      	adds	r7, #32
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20000eb4 	.word	0x20000eb4
 8008a68:	20000ec8 	.word	0x20000ec8

08008a6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a70:	4b03      	ldr	r3, [pc, #12]	; (8008a80 <vTaskMissedYield+0x14>)
 8008a72:	2201      	movs	r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
}
 8008a76:	bf00      	nop
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	20000ec4 	.word	0x20000ec4

08008a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a8c:	f000 f84c 	bl	8008b28 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8008a90:	4b04      	ldr	r3, [pc, #16]	; (8008aa4 <prvIdleTask+0x20>)
 8008a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008aa0:	e7f4      	b.n	8008a8c <prvIdleTask+0x8>
 8008aa2:	bf00      	nop
 8008aa4:	e000ed04 	.word	0xe000ed04

08008aa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aae:	2300      	movs	r3, #0
 8008ab0:	607b      	str	r3, [r7, #4]
 8008ab2:	e00c      	b.n	8008ace <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4a12      	ldr	r2, [pc, #72]	; (8008b08 <prvInitialiseTaskLists+0x60>)
 8008ac0:	4413      	add	r3, r2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fcb0 	bl	8007428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3301      	adds	r3, #1
 8008acc:	607b      	str	r3, [r7, #4]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b37      	cmp	r3, #55	; 0x37
 8008ad2:	d9ef      	bls.n	8008ab4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ad4:	480d      	ldr	r0, [pc, #52]	; (8008b0c <prvInitialiseTaskLists+0x64>)
 8008ad6:	f7fe fca7 	bl	8007428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ada:	480d      	ldr	r0, [pc, #52]	; (8008b10 <prvInitialiseTaskLists+0x68>)
 8008adc:	f7fe fca4 	bl	8007428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ae0:	480c      	ldr	r0, [pc, #48]	; (8008b14 <prvInitialiseTaskLists+0x6c>)
 8008ae2:	f7fe fca1 	bl	8007428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ae6:	480c      	ldr	r0, [pc, #48]	; (8008b18 <prvInitialiseTaskLists+0x70>)
 8008ae8:	f7fe fc9e 	bl	8007428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008aec:	480b      	ldr	r0, [pc, #44]	; (8008b1c <prvInitialiseTaskLists+0x74>)
 8008aee:	f7fe fc9b 	bl	8007428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008af2:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <prvInitialiseTaskLists+0x78>)
 8008af4:	4a05      	ldr	r2, [pc, #20]	; (8008b0c <prvInitialiseTaskLists+0x64>)
 8008af6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008af8:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <prvInitialiseTaskLists+0x7c>)
 8008afa:	4a05      	ldr	r2, [pc, #20]	; (8008b10 <prvInitialiseTaskLists+0x68>)
 8008afc:	601a      	str	r2, [r3, #0]
}
 8008afe:	bf00      	nop
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	200009e0 	.word	0x200009e0
 8008b0c:	20000e40 	.word	0x20000e40
 8008b10:	20000e54 	.word	0x20000e54
 8008b14:	20000e70 	.word	0x20000e70
 8008b18:	20000e84 	.word	0x20000e84
 8008b1c:	20000e9c 	.word	0x20000e9c
 8008b20:	20000e68 	.word	0x20000e68
 8008b24:	20000e6c 	.word	0x20000e6c

08008b28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b2e:	e019      	b.n	8008b64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b30:	f000 fdd0 	bl	80096d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b34:	4b10      	ldr	r3, [pc, #64]	; (8008b78 <prvCheckTasksWaitingTermination+0x50>)
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fcfb 	bl	800753c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b46:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <prvCheckTasksWaitingTermination+0x54>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	4a0b      	ldr	r2, [pc, #44]	; (8008b7c <prvCheckTasksWaitingTermination+0x54>)
 8008b4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b50:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <prvCheckTasksWaitingTermination+0x58>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	4a0a      	ldr	r2, [pc, #40]	; (8008b80 <prvCheckTasksWaitingTermination+0x58>)
 8008b58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b5a:	f000 fdeb 	bl	8009734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f810 	bl	8008b84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b64:	4b06      	ldr	r3, [pc, #24]	; (8008b80 <prvCheckTasksWaitingTermination+0x58>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e1      	bne.n	8008b30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000e84 	.word	0x20000e84
 8008b7c:	20000eb0 	.word	0x20000eb0
 8008b80:	20000e98 	.word	0x20000e98

08008b84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d108      	bne.n	8008ba8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 ff88 	bl	8009ab0 <vPortFree>
				vPortFree( pxTCB );
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 ff85 	bl	8009ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ba6:	e018      	b.n	8008bda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d103      	bne.n	8008bba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 ff7c 	bl	8009ab0 <vPortFree>
	}
 8008bb8:	e00f      	b.n	8008bda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d00a      	beq.n	8008bda <prvDeleteTCB+0x56>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	60fb      	str	r3, [r7, #12]
}
 8008bd6:	bf00      	nop
 8008bd8:	e7fe      	b.n	8008bd8 <prvDeleteTCB+0x54>
	}
 8008bda:	bf00      	nop
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bea:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <prvResetNextTaskUnblockTime+0x38>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d104      	bne.n	8008bfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bf4:	4b0a      	ldr	r3, [pc, #40]	; (8008c20 <prvResetNextTaskUnblockTime+0x3c>)
 8008bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bfc:	e008      	b.n	8008c10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bfe:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <prvResetNextTaskUnblockTime+0x38>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	4a04      	ldr	r2, [pc, #16]	; (8008c20 <prvResetNextTaskUnblockTime+0x3c>)
 8008c0e:	6013      	str	r3, [r2, #0]
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	20000e68 	.word	0x20000e68
 8008c20:	20000ed0 	.word	0x20000ed0

08008c24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c2a:	4b0b      	ldr	r3, [pc, #44]	; (8008c58 <xTaskGetSchedulerState+0x34>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c32:	2301      	movs	r3, #1
 8008c34:	607b      	str	r3, [r7, #4]
 8008c36:	e008      	b.n	8008c4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c38:	4b08      	ldr	r3, [pc, #32]	; (8008c5c <xTaskGetSchedulerState+0x38>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d102      	bne.n	8008c46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c40:	2302      	movs	r3, #2
 8008c42:	607b      	str	r3, [r7, #4]
 8008c44:	e001      	b.n	8008c4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c46:	2300      	movs	r3, #0
 8008c48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c4a:	687b      	ldr	r3, [r7, #4]
	}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	20000ebc 	.word	0x20000ebc
 8008c5c:	20000ed8 	.word	0x20000ed8

08008c60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d056      	beq.n	8008d24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c76:	4b2e      	ldr	r3, [pc, #184]	; (8008d30 <xTaskPriorityDisinherit+0xd0>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d00a      	beq.n	8008c96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	60fb      	str	r3, [r7, #12]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10a      	bne.n	8008cb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	60bb      	str	r3, [r7, #8]
}
 8008cb0:	bf00      	nop
 8008cb2:	e7fe      	b.n	8008cb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb8:	1e5a      	subs	r2, r3, #1
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d02c      	beq.n	8008d24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d128      	bne.n	8008d24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fc30 	bl	800753c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <xTaskPriorityDisinherit+0xd4>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d903      	bls.n	8008d04 <xTaskPriorityDisinherit+0xa4>
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	4a0c      	ldr	r2, [pc, #48]	; (8008d34 <xTaskPriorityDisinherit+0xd4>)
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4a09      	ldr	r2, [pc, #36]	; (8008d38 <xTaskPriorityDisinherit+0xd8>)
 8008d12:	441a      	add	r2, r3
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f7fe fbb1 	bl	8007482 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d20:	2301      	movs	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d24:	697b      	ldr	r3, [r7, #20]
	}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	200009dc 	.word	0x200009dc
 8008d34:	20000eb8 	.word	0x20000eb8
 8008d38:	200009e0 	.word	0x200009e0

08008d3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d46:	4b21      	ldr	r3, [pc, #132]	; (8008dcc <prvAddCurrentTaskToDelayedList+0x90>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d4c:	4b20      	ldr	r3, [pc, #128]	; (8008dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fbf2 	bl	800753c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5e:	d10a      	bne.n	8008d76 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d66:	4b1a      	ldr	r3, [pc, #104]	; (8008dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4819      	ldr	r0, [pc, #100]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d70:	f7fe fb87 	bl	8007482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d74:	e026      	b.n	8008dc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d7e:	4b14      	ldr	r3, [pc, #80]	; (8008dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d209      	bcs.n	8008da2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d8e:	4b12      	ldr	r3, [pc, #72]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	4b0f      	ldr	r3, [pc, #60]	; (8008dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3304      	adds	r3, #4
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f7fe fb95 	bl	80074ca <vListInsert>
}
 8008da0:	e010      	b.n	8008dc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da2:	4b0e      	ldr	r3, [pc, #56]	; (8008ddc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	4b0a      	ldr	r3, [pc, #40]	; (8008dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3304      	adds	r3, #4
 8008dac:	4619      	mov	r1, r3
 8008dae:	4610      	mov	r0, r2
 8008db0:	f7fe fb8b 	bl	80074ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008db4:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d202      	bcs.n	8008dc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008dbe:	4a08      	ldr	r2, [pc, #32]	; (8008de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	6013      	str	r3, [r2, #0]
}
 8008dc4:	bf00      	nop
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20000eb4 	.word	0x20000eb4
 8008dd0:	200009dc 	.word	0x200009dc
 8008dd4:	20000e9c 	.word	0x20000e9c
 8008dd8:	20000e6c 	.word	0x20000e6c
 8008ddc:	20000e68 	.word	0x20000e68
 8008de0:	20000ed0 	.word	0x20000ed0

08008de4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	; 0x28
 8008de8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dee:	f000 fb07 	bl	8009400 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008df2:	4b1c      	ldr	r3, [pc, #112]	; (8008e64 <xTimerCreateTimerTask+0x80>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d021      	beq.n	8008e3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e02:	1d3a      	adds	r2, r7, #4
 8008e04:	f107 0108 	add.w	r1, r7, #8
 8008e08:	f107 030c 	add.w	r3, r7, #12
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fe faf1 	bl	80073f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	9202      	str	r2, [sp, #8]
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	2300      	movs	r3, #0
 8008e22:	460a      	mov	r2, r1
 8008e24:	4910      	ldr	r1, [pc, #64]	; (8008e68 <xTimerCreateTimerTask+0x84>)
 8008e26:	4811      	ldr	r0, [pc, #68]	; (8008e6c <xTimerCreateTimerTask+0x88>)
 8008e28:	f7ff f926 	bl	8008078 <xTaskCreateStatic>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	4a10      	ldr	r2, [pc, #64]	; (8008e70 <xTimerCreateTimerTask+0x8c>)
 8008e30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e32:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <xTimerCreateTimerTask+0x8c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	613b      	str	r3, [r7, #16]
}
 8008e56:	bf00      	nop
 8008e58:	e7fe      	b.n	8008e58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e5a:	697b      	ldr	r3, [r7, #20]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20000f0c 	.word	0x20000f0c
 8008e68:	08009f24 	.word	0x08009f24
 8008e6c:	08008fa9 	.word	0x08008fa9
 8008e70:	20000f10 	.word	0x20000f10

08008e74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08a      	sub	sp, #40	; 0x28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10a      	bne.n	8008ea2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	623b      	str	r3, [r7, #32]
}
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ea2:	4b1a      	ldr	r3, [pc, #104]	; (8008f0c <xTimerGenericCommand+0x98>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d02a      	beq.n	8008f00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b05      	cmp	r3, #5
 8008eba:	dc18      	bgt.n	8008eee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ebc:	f7ff feb2 	bl	8008c24 <xTaskGetSchedulerState>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d109      	bne.n	8008eda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ec6:	4b11      	ldr	r3, [pc, #68]	; (8008f0c <xTimerGenericCommand+0x98>)
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	f107 0110 	add.w	r1, r7, #16
 8008ece:	2300      	movs	r3, #0
 8008ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed2:	f7fe fc8d 	bl	80077f0 <xQueueGenericSend>
 8008ed6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ed8:	e012      	b.n	8008f00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008eda:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <xTimerGenericCommand+0x98>)
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	f107 0110 	add.w	r1, r7, #16
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f7fe fc83 	bl	80077f0 <xQueueGenericSend>
 8008eea:	6278      	str	r0, [r7, #36]	; 0x24
 8008eec:	e008      	b.n	8008f00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008eee:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <xTimerGenericCommand+0x98>)
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	f107 0110 	add.w	r1, r7, #16
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	f7fe fd5f 	bl	80079bc <xQueueGenericSendFromISR>
 8008efe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3728      	adds	r7, #40	; 0x28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000f0c 	.word	0x20000f0c

08008f10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b088      	sub	sp, #32
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f1a:	4b22      	ldr	r3, [pc, #136]	; (8008fa4 <prvProcessExpiredTimer+0x94>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	3304      	adds	r3, #4
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fe fb07 	bl	800753c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d022      	beq.n	8008f82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	699a      	ldr	r2, [r3, #24]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	18d1      	adds	r1, r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	6978      	ldr	r0, [r7, #20]
 8008f4a:	f000 f8d1 	bl	80090f0 <prvInsertTimerInActiveList>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d01f      	beq.n	8008f94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f54:	2300      	movs	r3, #0
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	6978      	ldr	r0, [r7, #20]
 8008f60:	f7ff ff88 	bl	8008e74 <xTimerGenericCommand>
 8008f64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d113      	bne.n	8008f94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	60fb      	str	r3, [r7, #12]
}
 8008f7e:	bf00      	nop
 8008f80:	e7fe      	b.n	8008f80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f88:	f023 0301 	bic.w	r3, r3, #1
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	6978      	ldr	r0, [r7, #20]
 8008f9a:	4798      	blx	r3
}
 8008f9c:	bf00      	nop
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20000f04 	.word	0x20000f04

08008fa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fb0:	f107 0308 	add.w	r3, r7, #8
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 f857 	bl	8009068 <prvGetNextExpireTime>
 8008fba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 f803 	bl	8008fcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fc6:	f000 f8d5 	bl	8009174 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fca:	e7f1      	b.n	8008fb0 <prvTimerTask+0x8>

08008fcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fd6:	f7ff fa7b 	bl	80084d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fda:	f107 0308 	add.w	r3, r7, #8
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f866 	bl	80090b0 <prvSampleTimeNow>
 8008fe4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d130      	bne.n	800904e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10a      	bne.n	8009008 <prvProcessTimerOrBlockTask+0x3c>
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d806      	bhi.n	8009008 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ffa:	f7ff fa77 	bl	80084ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff ff85 	bl	8008f10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009006:	e024      	b.n	8009052 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d008      	beq.n	8009020 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800900e:	4b13      	ldr	r3, [pc, #76]	; (800905c <prvProcessTimerOrBlockTask+0x90>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <prvProcessTimerOrBlockTask+0x50>
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <prvProcessTimerOrBlockTask+0x52>
 800901c:	2300      	movs	r3, #0
 800901e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009020:	4b0f      	ldr	r3, [pc, #60]	; (8009060 <prvProcessTimerOrBlockTask+0x94>)
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	4619      	mov	r1, r3
 800902e:	f7fe ffef 	bl	8008010 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009032:	f7ff fa5b 	bl	80084ec <xTaskResumeAll>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800903c:	4b09      	ldr	r3, [pc, #36]	; (8009064 <prvProcessTimerOrBlockTask+0x98>)
 800903e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	f3bf 8f6f 	isb	sy
}
 800904c:	e001      	b.n	8009052 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800904e:	f7ff fa4d 	bl	80084ec <xTaskResumeAll>
}
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20000f08 	.word	0x20000f08
 8009060:	20000f0c 	.word	0x20000f0c
 8009064:	e000ed04 	.word	0xe000ed04

08009068 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009070:	4b0e      	ldr	r3, [pc, #56]	; (80090ac <prvGetNextExpireTime+0x44>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <prvGetNextExpireTime+0x16>
 800907a:	2201      	movs	r2, #1
 800907c:	e000      	b.n	8009080 <prvGetNextExpireTime+0x18>
 800907e:	2200      	movs	r2, #0
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d105      	bne.n	8009098 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800908c:	4b07      	ldr	r3, [pc, #28]	; (80090ac <prvGetNextExpireTime+0x44>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	e001      	b.n	800909c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800909c:	68fb      	ldr	r3, [r7, #12]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	20000f04 	.word	0x20000f04

080090b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090b8:	f7ff faa8 	bl	800860c <xTaskGetTickCount>
 80090bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090be:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <prvSampleTimeNow+0x3c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d205      	bcs.n	80090d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090c8:	f000 f936 	bl	8009338 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	e002      	b.n	80090da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090da:	4a04      	ldr	r2, [pc, #16]	; (80090ec <prvSampleTimeNow+0x3c>)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090e0:	68fb      	ldr	r3, [r7, #12]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20000f14 	.word	0x20000f14

080090f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090fe:	2300      	movs	r3, #0
 8009100:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	429a      	cmp	r2, r3
 8009114:	d812      	bhi.n	800913c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	1ad2      	subs	r2, r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	429a      	cmp	r2, r3
 8009122:	d302      	bcc.n	800912a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e01b      	b.n	8009162 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800912a:	4b10      	ldr	r3, [pc, #64]	; (800916c <prvInsertTimerInActiveList+0x7c>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3304      	adds	r3, #4
 8009132:	4619      	mov	r1, r3
 8009134:	4610      	mov	r0, r2
 8009136:	f7fe f9c8 	bl	80074ca <vListInsert>
 800913a:	e012      	b.n	8009162 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	429a      	cmp	r2, r3
 8009142:	d206      	bcs.n	8009152 <prvInsertTimerInActiveList+0x62>
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d302      	bcc.n	8009152 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800914c:	2301      	movs	r3, #1
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	e007      	b.n	8009162 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009152:	4b07      	ldr	r3, [pc, #28]	; (8009170 <prvInsertTimerInActiveList+0x80>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3304      	adds	r3, #4
 800915a:	4619      	mov	r1, r3
 800915c:	4610      	mov	r0, r2
 800915e:	f7fe f9b4 	bl	80074ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009162:	697b      	ldr	r3, [r7, #20]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20000f08 	.word	0x20000f08
 8009170:	20000f04 	.word	0x20000f04

08009174 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08e      	sub	sp, #56	; 0x38
 8009178:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800917a:	e0ca      	b.n	8009312 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	da18      	bge.n	80091b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009182:	1d3b      	adds	r3, r7, #4
 8009184:	3304      	adds	r3, #4
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10a      	bne.n	80091a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	61fb      	str	r3, [r7, #28]
}
 80091a0:	bf00      	nop
 80091a2:	e7fe      	b.n	80091a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091aa:	6850      	ldr	r0, [r2, #4]
 80091ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ae:	6892      	ldr	r2, [r2, #8]
 80091b0:	4611      	mov	r1, r2
 80091b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f2c0 80aa 	blt.w	8009310 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d004      	beq.n	80091d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	3304      	adds	r3, #4
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fe f9b5 	bl	800753c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091d2:	463b      	mov	r3, r7
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7ff ff6b 	bl	80090b0 <prvSampleTimeNow>
 80091da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b09      	cmp	r3, #9
 80091e0:	f200 8097 	bhi.w	8009312 <prvProcessReceivedCommands+0x19e>
 80091e4:	a201      	add	r2, pc, #4	; (adr r2, 80091ec <prvProcessReceivedCommands+0x78>)
 80091e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ea:	bf00      	nop
 80091ec:	08009215 	.word	0x08009215
 80091f0:	08009215 	.word	0x08009215
 80091f4:	08009215 	.word	0x08009215
 80091f8:	08009289 	.word	0x08009289
 80091fc:	0800929d 	.word	0x0800929d
 8009200:	080092e7 	.word	0x080092e7
 8009204:	08009215 	.word	0x08009215
 8009208:	08009215 	.word	0x08009215
 800920c:	08009289 	.word	0x08009289
 8009210:	0800929d 	.word	0x0800929d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800921a:	f043 0301 	orr.w	r3, r3, #1
 800921e:	b2da      	uxtb	r2, r3
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	18d1      	adds	r1, r2, r3
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009234:	f7ff ff5c 	bl	80090f0 <prvInsertTimerInActiveList>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d069      	beq.n	8009312 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009244:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b00      	cmp	r3, #0
 8009252:	d05e      	beq.n	8009312 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	441a      	add	r2, r3
 800925c:	2300      	movs	r3, #0
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	2300      	movs	r3, #0
 8009262:	2100      	movs	r1, #0
 8009264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009266:	f7ff fe05 	bl	8008e74 <xTimerGenericCommand>
 800926a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d14f      	bne.n	8009312 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	61bb      	str	r3, [r7, #24]
}
 8009284:	bf00      	nop
 8009286:	e7fe      	b.n	8009286 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800928e:	f023 0301 	bic.w	r3, r3, #1
 8009292:	b2da      	uxtb	r2, r3
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800929a:	e03a      	b.n	8009312 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092a2:	f043 0301 	orr.w	r3, r3, #1
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	617b      	str	r3, [r7, #20]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d4:	699a      	ldr	r2, [r3, #24]
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	18d1      	adds	r1, r2, r3
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e0:	f7ff ff06 	bl	80090f0 <prvInsertTimerInActiveList>
					break;
 80092e4:	e015      	b.n	8009312 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d103      	bne.n	80092fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80092f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092f6:	f000 fbdb 	bl	8009ab0 <vPortFree>
 80092fa:	e00a      	b.n	8009312 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009302:	f023 0301 	bic.w	r3, r3, #1
 8009306:	b2da      	uxtb	r2, r3
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800930e:	e000      	b.n	8009312 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009310:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009312:	4b08      	ldr	r3, [pc, #32]	; (8009334 <prvProcessReceivedCommands+0x1c0>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	1d39      	adds	r1, r7, #4
 8009318:	2200      	movs	r2, #0
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fbea 	bl	8007af4 <xQueueReceive>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	f47f af2a 	bne.w	800917c <prvProcessReceivedCommands+0x8>
	}
}
 8009328:	bf00      	nop
 800932a:	bf00      	nop
 800932c:	3730      	adds	r7, #48	; 0x30
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000f0c 	.word	0x20000f0c

08009338 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b088      	sub	sp, #32
 800933c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800933e:	e048      	b.n	80093d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009340:	4b2d      	ldr	r3, [pc, #180]	; (80093f8 <prvSwitchTimerLists+0xc0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800934a:	4b2b      	ldr	r3, [pc, #172]	; (80093f8 <prvSwitchTimerLists+0xc0>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3304      	adds	r3, #4
 8009358:	4618      	mov	r0, r3
 800935a:	f7fe f8ef 	bl	800753c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	2b00      	cmp	r3, #0
 8009372:	d02e      	beq.n	80093d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	4413      	add	r3, r2
 800937c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	429a      	cmp	r2, r3
 8009384:	d90e      	bls.n	80093a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009392:	4b19      	ldr	r3, [pc, #100]	; (80093f8 <prvSwitchTimerLists+0xc0>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7fe f894 	bl	80074ca <vListInsert>
 80093a2:	e016      	b.n	80093d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093a4:	2300      	movs	r3, #0
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	2300      	movs	r3, #0
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	2100      	movs	r1, #0
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f7ff fd60 	bl	8008e74 <xTimerGenericCommand>
 80093b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	603b      	str	r3, [r7, #0]
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093d2:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <prvSwitchTimerLists+0xc0>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1b1      	bne.n	8009340 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093dc:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <prvSwitchTimerLists+0xc0>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093e2:	4b06      	ldr	r3, [pc, #24]	; (80093fc <prvSwitchTimerLists+0xc4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a04      	ldr	r2, [pc, #16]	; (80093f8 <prvSwitchTimerLists+0xc0>)
 80093e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093ea:	4a04      	ldr	r2, [pc, #16]	; (80093fc <prvSwitchTimerLists+0xc4>)
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	6013      	str	r3, [r2, #0]
}
 80093f0:	bf00      	nop
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000f04 	.word	0x20000f04
 80093fc:	20000f08 	.word	0x20000f08

08009400 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009406:	f000 f965 	bl	80096d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800940a:	4b15      	ldr	r3, [pc, #84]	; (8009460 <prvCheckForValidListAndQueue+0x60>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d120      	bne.n	8009454 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009412:	4814      	ldr	r0, [pc, #80]	; (8009464 <prvCheckForValidListAndQueue+0x64>)
 8009414:	f7fe f808 	bl	8007428 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009418:	4813      	ldr	r0, [pc, #76]	; (8009468 <prvCheckForValidListAndQueue+0x68>)
 800941a:	f7fe f805 	bl	8007428 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800941e:	4b13      	ldr	r3, [pc, #76]	; (800946c <prvCheckForValidListAndQueue+0x6c>)
 8009420:	4a10      	ldr	r2, [pc, #64]	; (8009464 <prvCheckForValidListAndQueue+0x64>)
 8009422:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009424:	4b12      	ldr	r3, [pc, #72]	; (8009470 <prvCheckForValidListAndQueue+0x70>)
 8009426:	4a10      	ldr	r2, [pc, #64]	; (8009468 <prvCheckForValidListAndQueue+0x68>)
 8009428:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800942a:	2300      	movs	r3, #0
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	4b11      	ldr	r3, [pc, #68]	; (8009474 <prvCheckForValidListAndQueue+0x74>)
 8009430:	4a11      	ldr	r2, [pc, #68]	; (8009478 <prvCheckForValidListAndQueue+0x78>)
 8009432:	2110      	movs	r1, #16
 8009434:	200a      	movs	r0, #10
 8009436:	f7fe f906 	bl	8007646 <xQueueGenericCreateStatic>
 800943a:	4603      	mov	r3, r0
 800943c:	4a08      	ldr	r2, [pc, #32]	; (8009460 <prvCheckForValidListAndQueue+0x60>)
 800943e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009440:	4b07      	ldr	r3, [pc, #28]	; (8009460 <prvCheckForValidListAndQueue+0x60>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <prvCheckForValidListAndQueue+0x60>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	490b      	ldr	r1, [pc, #44]	; (800947c <prvCheckForValidListAndQueue+0x7c>)
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fdb4 	bl	8007fbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009454:	f000 f96e 	bl	8009734 <vPortExitCritical>
}
 8009458:	bf00      	nop
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20000f0c 	.word	0x20000f0c
 8009464:	20000edc 	.word	0x20000edc
 8009468:	20000ef0 	.word	0x20000ef0
 800946c:	20000f04 	.word	0x20000f04
 8009470:	20000f08 	.word	0x20000f08
 8009474:	20000fb8 	.word	0x20000fb8
 8009478:	20000f18 	.word	0x20000f18
 800947c:	08009f2c 	.word	0x08009f2c

08009480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3b04      	subs	r3, #4
 8009490:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3b04      	subs	r3, #4
 800949e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f023 0201 	bic.w	r2, r3, #1
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3b04      	subs	r3, #4
 80094ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094b0:	4a0c      	ldr	r2, [pc, #48]	; (80094e4 <pxPortInitialiseStack+0x64>)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3b14      	subs	r3, #20
 80094ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3b04      	subs	r3, #4
 80094c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f06f 0202 	mvn.w	r2, #2
 80094ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3b20      	subs	r3, #32
 80094d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094d6:	68fb      	ldr	r3, [r7, #12]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	080094e9 	.word	0x080094e9

080094e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094f2:	4b12      	ldr	r3, [pc, #72]	; (800953c <prvTaskExitError+0x54>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fa:	d00a      	beq.n	8009512 <prvTaskExitError+0x2a>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	60fb      	str	r3, [r7, #12]
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <prvTaskExitError+0x28>
	__asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	60bb      	str	r3, [r7, #8]
}
 8009524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009526:	bf00      	nop
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0fc      	beq.n	8009528 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800952e:	bf00      	nop
 8009530:	bf00      	nop
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	20000020 	.word	0x20000020

08009540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <pxCurrentTCBConst2>)
 8009542:	6819      	ldr	r1, [r3, #0]
 8009544:	6808      	ldr	r0, [r1, #0]
 8009546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954a:	f380 8809 	msr	PSP, r0
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f04f 0000 	mov.w	r0, #0
 8009556:	f380 8811 	msr	BASEPRI, r0
 800955a:	4770      	bx	lr
 800955c:	f3af 8000 	nop.w

08009560 <pxCurrentTCBConst2>:
 8009560:	200009dc 	.word	0x200009dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop

08009568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009568:	4808      	ldr	r0, [pc, #32]	; (800958c <prvPortStartFirstTask+0x24>)
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	6800      	ldr	r0, [r0, #0]
 800956e:	f380 8808 	msr	MSP, r0
 8009572:	f04f 0000 	mov.w	r0, #0
 8009576:	f380 8814 	msr	CONTROL, r0
 800957a:	b662      	cpsie	i
 800957c:	b661      	cpsie	f
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	df00      	svc	0
 8009588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800958a:	bf00      	nop
 800958c:	e000ed08 	.word	0xe000ed08

08009590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009596:	4b46      	ldr	r3, [pc, #280]	; (80096b0 <xPortStartScheduler+0x120>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a46      	ldr	r2, [pc, #280]	; (80096b4 <xPortStartScheduler+0x124>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d10a      	bne.n	80095b6 <xPortStartScheduler+0x26>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	613b      	str	r3, [r7, #16]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095b6:	4b3e      	ldr	r3, [pc, #248]	; (80096b0 <xPortStartScheduler+0x120>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a3f      	ldr	r2, [pc, #252]	; (80096b8 <xPortStartScheduler+0x128>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d10a      	bne.n	80095d6 <xPortStartScheduler+0x46>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	60fb      	str	r3, [r7, #12]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095d6:	4b39      	ldr	r3, [pc, #228]	; (80096bc <xPortStartScheduler+0x12c>)
 80095d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	22ff      	movs	r2, #255	; 0xff
 80095e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	4b31      	ldr	r3, [pc, #196]	; (80096c0 <xPortStartScheduler+0x130>)
 80095fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095fe:	4b31      	ldr	r3, [pc, #196]	; (80096c4 <xPortStartScheduler+0x134>)
 8009600:	2207      	movs	r2, #7
 8009602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009604:	e009      	b.n	800961a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009606:	4b2f      	ldr	r3, [pc, #188]	; (80096c4 <xPortStartScheduler+0x134>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3b01      	subs	r3, #1
 800960c:	4a2d      	ldr	r2, [pc, #180]	; (80096c4 <xPortStartScheduler+0x134>)
 800960e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	b2db      	uxtb	r3, r3
 8009618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800961a:	78fb      	ldrb	r3, [r7, #3]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009622:	2b80      	cmp	r3, #128	; 0x80
 8009624:	d0ef      	beq.n	8009606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009626:	4b27      	ldr	r3, [pc, #156]	; (80096c4 <xPortStartScheduler+0x134>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f1c3 0307 	rsb	r3, r3, #7
 800962e:	2b04      	cmp	r3, #4
 8009630:	d00a      	beq.n	8009648 <xPortStartScheduler+0xb8>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	60bb      	str	r3, [r7, #8]
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009648:	4b1e      	ldr	r3, [pc, #120]	; (80096c4 <xPortStartScheduler+0x134>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	4a1d      	ldr	r2, [pc, #116]	; (80096c4 <xPortStartScheduler+0x134>)
 8009650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009652:	4b1c      	ldr	r3, [pc, #112]	; (80096c4 <xPortStartScheduler+0x134>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800965a:	4a1a      	ldr	r2, [pc, #104]	; (80096c4 <xPortStartScheduler+0x134>)
 800965c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	b2da      	uxtb	r2, r3
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009666:	4b18      	ldr	r3, [pc, #96]	; (80096c8 <xPortStartScheduler+0x138>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a17      	ldr	r2, [pc, #92]	; (80096c8 <xPortStartScheduler+0x138>)
 800966c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009672:	4b15      	ldr	r3, [pc, #84]	; (80096c8 <xPortStartScheduler+0x138>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a14      	ldr	r2, [pc, #80]	; (80096c8 <xPortStartScheduler+0x138>)
 8009678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800967c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800967e:	f000 f8dd 	bl	800983c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009682:	4b12      	ldr	r3, [pc, #72]	; (80096cc <xPortStartScheduler+0x13c>)
 8009684:	2200      	movs	r2, #0
 8009686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009688:	f000 f8fc 	bl	8009884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800968c:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <xPortStartScheduler+0x140>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a0f      	ldr	r2, [pc, #60]	; (80096d0 <xPortStartScheduler+0x140>)
 8009692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009698:	f7ff ff66 	bl	8009568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800969c:	f7ff f85c 	bl	8008758 <vTaskSwitchContext>
	prvTaskExitError();
 80096a0:	f7ff ff22 	bl	80094e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	e000ed00 	.word	0xe000ed00
 80096b4:	410fc271 	.word	0x410fc271
 80096b8:	410fc270 	.word	0x410fc270
 80096bc:	e000e400 	.word	0xe000e400
 80096c0:	20001008 	.word	0x20001008
 80096c4:	2000100c 	.word	0x2000100c
 80096c8:	e000ed20 	.word	0xe000ed20
 80096cc:	20000020 	.word	0x20000020
 80096d0:	e000ef34 	.word	0xe000ef34

080096d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	607b      	str	r3, [r7, #4]
}
 80096ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096ee:	4b0f      	ldr	r3, [pc, #60]	; (800972c <vPortEnterCritical+0x58>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3301      	adds	r3, #1
 80096f4:	4a0d      	ldr	r2, [pc, #52]	; (800972c <vPortEnterCritical+0x58>)
 80096f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096f8:	4b0c      	ldr	r3, [pc, #48]	; (800972c <vPortEnterCritical+0x58>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d10f      	bne.n	8009720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009700:	4b0b      	ldr	r3, [pc, #44]	; (8009730 <vPortEnterCritical+0x5c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <vPortEnterCritical+0x4c>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	603b      	str	r3, [r7, #0]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <vPortEnterCritical+0x4a>
	}
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	20000020 	.word	0x20000020
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <vPortExitCritical+0x50>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10a      	bne.n	8009758 <vPortExitCritical+0x24>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	607b      	str	r3, [r7, #4]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <vPortExitCritical+0x50>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3b01      	subs	r3, #1
 800975e:	4a09      	ldr	r2, [pc, #36]	; (8009784 <vPortExitCritical+0x50>)
 8009760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009762:	4b08      	ldr	r3, [pc, #32]	; (8009784 <vPortExitCritical+0x50>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d105      	bne.n	8009776 <vPortExitCritical+0x42>
 800976a:	2300      	movs	r3, #0
 800976c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	f383 8811 	msr	BASEPRI, r3
}
 8009774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20000020 	.word	0x20000020
	...

08009790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009790:	f3ef 8009 	mrs	r0, PSP
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <pxCurrentTCBConst>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	f01e 0f10 	tst.w	lr, #16
 80097a0:	bf08      	it	eq
 80097a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097aa:	6010      	str	r0, [r2, #0]
 80097ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097b4:	f380 8811 	msr	BASEPRI, r0
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f7fe ffca 	bl	8008758 <vTaskSwitchContext>
 80097c4:	f04f 0000 	mov.w	r0, #0
 80097c8:	f380 8811 	msr	BASEPRI, r0
 80097cc:	bc09      	pop	{r0, r3}
 80097ce:	6819      	ldr	r1, [r3, #0]
 80097d0:	6808      	ldr	r0, [r1, #0]
 80097d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d6:	f01e 0f10 	tst.w	lr, #16
 80097da:	bf08      	it	eq
 80097dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097e0:	f380 8809 	msr	PSP, r0
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	f3af 8000 	nop.w

080097f0 <pxCurrentTCBConst>:
 80097f0:	200009dc 	.word	0x200009dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop

080097f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	607b      	str	r3, [r7, #4]
}
 8009810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009812:	f7fe ff0b 	bl	800862c <xTaskIncrementTick>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <xPortSysTickHandler+0x40>)
 800981e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	2300      	movs	r3, #0
 8009826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	f383 8811 	msr	BASEPRI, r3
}
 800982e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	e000ed04 	.word	0xe000ed04

0800983c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009840:	4b0b      	ldr	r3, [pc, #44]	; (8009870 <vPortSetupTimerInterrupt+0x34>)
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009846:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <vPortSetupTimerInterrupt+0x38>)
 8009848:	2200      	movs	r2, #0
 800984a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <vPortSetupTimerInterrupt+0x3c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a0a      	ldr	r2, [pc, #40]	; (800987c <vPortSetupTimerInterrupt+0x40>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	099b      	lsrs	r3, r3, #6
 8009858:	4a09      	ldr	r2, [pc, #36]	; (8009880 <vPortSetupTimerInterrupt+0x44>)
 800985a:	3b01      	subs	r3, #1
 800985c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800985e:	4b04      	ldr	r3, [pc, #16]	; (8009870 <vPortSetupTimerInterrupt+0x34>)
 8009860:	2207      	movs	r2, #7
 8009862:	601a      	str	r2, [r3, #0]
}
 8009864:	bf00      	nop
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	e000e010 	.word	0xe000e010
 8009874:	e000e018 	.word	0xe000e018
 8009878:	20000014 	.word	0x20000014
 800987c:	10624dd3 	.word	0x10624dd3
 8009880:	e000e014 	.word	0xe000e014

08009884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009894 <vPortEnableVFP+0x10>
 8009888:	6801      	ldr	r1, [r0, #0]
 800988a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800988e:	6001      	str	r1, [r0, #0]
 8009890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009892:	bf00      	nop
 8009894:	e000ed88 	.word	0xe000ed88

08009898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800989e:	f3ef 8305 	mrs	r3, IPSR
 80098a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b0f      	cmp	r3, #15
 80098a8:	d914      	bls.n	80098d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098aa:	4a17      	ldr	r2, [pc, #92]	; (8009908 <vPortValidateInterruptPriority+0x70>)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	4413      	add	r3, r2
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098b4:	4b15      	ldr	r3, [pc, #84]	; (800990c <vPortValidateInterruptPriority+0x74>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	7afa      	ldrb	r2, [r7, #11]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d20a      	bcs.n	80098d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	607b      	str	r3, [r7, #4]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098d4:	4b0e      	ldr	r3, [pc, #56]	; (8009910 <vPortValidateInterruptPriority+0x78>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098dc:	4b0d      	ldr	r3, [pc, #52]	; (8009914 <vPortValidateInterruptPriority+0x7c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d90a      	bls.n	80098fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	603b      	str	r3, [r7, #0]
}
 80098f6:	bf00      	nop
 80098f8:	e7fe      	b.n	80098f8 <vPortValidateInterruptPriority+0x60>
	}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	e000e3f0 	.word	0xe000e3f0
 800990c:	20001008 	.word	0x20001008
 8009910:	e000ed0c 	.word	0xe000ed0c
 8009914:	2000100c 	.word	0x2000100c

08009918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08a      	sub	sp, #40	; 0x28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009920:	2300      	movs	r3, #0
 8009922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009924:	f7fe fdd4 	bl	80084d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009928:	4b5b      	ldr	r3, [pc, #364]	; (8009a98 <pvPortMalloc+0x180>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009930:	f000 f920 	bl	8009b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009934:	4b59      	ldr	r3, [pc, #356]	; (8009a9c <pvPortMalloc+0x184>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4013      	ands	r3, r2
 800993c:	2b00      	cmp	r3, #0
 800993e:	f040 8093 	bne.w	8009a68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01d      	beq.n	8009984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009948:	2208      	movs	r2, #8
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	2b00      	cmp	r3, #0
 8009958:	d014      	beq.n	8009984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f023 0307 	bic.w	r3, r3, #7
 8009960:	3308      	adds	r3, #8
 8009962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <pvPortMalloc+0x6c>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	617b      	str	r3, [r7, #20]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d06e      	beq.n	8009a68 <pvPortMalloc+0x150>
 800998a:	4b45      	ldr	r3, [pc, #276]	; (8009aa0 <pvPortMalloc+0x188>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	429a      	cmp	r2, r3
 8009992:	d869      	bhi.n	8009a68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009994:	4b43      	ldr	r3, [pc, #268]	; (8009aa4 <pvPortMalloc+0x18c>)
 8009996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009998:	4b42      	ldr	r3, [pc, #264]	; (8009aa4 <pvPortMalloc+0x18c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800999e:	e004      	b.n	80099aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d903      	bls.n	80099bc <pvPortMalloc+0xa4>
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1f1      	bne.n	80099a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099bc:	4b36      	ldr	r3, [pc, #216]	; (8009a98 <pvPortMalloc+0x180>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d050      	beq.n	8009a68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2208      	movs	r2, #8
 80099cc:	4413      	add	r3, r2
 80099ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	2308      	movs	r3, #8
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d91f      	bls.n	8009a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4413      	add	r3, r2
 80099ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <pvPortMalloc+0xf8>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	613b      	str	r3, [r7, #16]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	685a      	ldr	r2, [r3, #4]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	1ad2      	subs	r2, r2, r3
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a22:	69b8      	ldr	r0, [r7, #24]
 8009a24:	f000 f908 	bl	8009c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a28:	4b1d      	ldr	r3, [pc, #116]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	4a1b      	ldr	r2, [pc, #108]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a36:	4b1a      	ldr	r3, [pc, #104]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	4b1b      	ldr	r3, [pc, #108]	; (8009aa8 <pvPortMalloc+0x190>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d203      	bcs.n	8009a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a42:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <pvPortMalloc+0x188>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a18      	ldr	r2, [pc, #96]	; (8009aa8 <pvPortMalloc+0x190>)
 8009a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <pvPortMalloc+0x184>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	431a      	orrs	r2, r3
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <pvPortMalloc+0x194>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3301      	adds	r3, #1
 8009a64:	4a11      	ldr	r2, [pc, #68]	; (8009aac <pvPortMalloc+0x194>)
 8009a66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a68:	f7fe fd40 	bl	80084ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	f003 0307 	and.w	r3, r3, #7
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00a      	beq.n	8009a8c <pvPortMalloc+0x174>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	60fb      	str	r3, [r7, #12]
}
 8009a88:	bf00      	nop
 8009a8a:	e7fe      	b.n	8009a8a <pvPortMalloc+0x172>
	return pvReturn;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3728      	adds	r7, #40	; 0x28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	20004c18 	.word	0x20004c18
 8009a9c:	20004c2c 	.word	0x20004c2c
 8009aa0:	20004c1c 	.word	0x20004c1c
 8009aa4:	20004c10 	.word	0x20004c10
 8009aa8:	20004c20 	.word	0x20004c20
 8009aac:	20004c24 	.word	0x20004c24

08009ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d04d      	beq.n	8009b5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ac2:	2308      	movs	r3, #8
 8009ac4:	425b      	negs	r3, r3
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	4413      	add	r3, r2
 8009aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	4b24      	ldr	r3, [pc, #144]	; (8009b68 <vPortFree+0xb8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <vPortFree+0x44>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	60fb      	str	r3, [r7, #12]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00a      	beq.n	8009b12 <vPortFree+0x62>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	60bb      	str	r3, [r7, #8]
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	4b14      	ldr	r3, [pc, #80]	; (8009b68 <vPortFree+0xb8>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d01e      	beq.n	8009b5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d11a      	bne.n	8009b5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <vPortFree+0xb8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	43db      	mvns	r3, r3
 8009b32:	401a      	ands	r2, r3
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b38:	f7fe fcca 	bl	80084d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	4b0a      	ldr	r3, [pc, #40]	; (8009b6c <vPortFree+0xbc>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4413      	add	r3, r2
 8009b46:	4a09      	ldr	r2, [pc, #36]	; (8009b6c <vPortFree+0xbc>)
 8009b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b4a:	6938      	ldr	r0, [r7, #16]
 8009b4c:	f000 f874 	bl	8009c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b50:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <vPortFree+0xc0>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	4a06      	ldr	r2, [pc, #24]	; (8009b70 <vPortFree+0xc0>)
 8009b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b5a:	f7fe fcc7 	bl	80084ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b5e:	bf00      	nop
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20004c2c 	.word	0x20004c2c
 8009b6c:	20004c1c 	.word	0x20004c1c
 8009b70:	20004c28 	.word	0x20004c28

08009b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b80:	4b27      	ldr	r3, [pc, #156]	; (8009c20 <prvHeapInit+0xac>)
 8009b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00c      	beq.n	8009ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3307      	adds	r3, #7
 8009b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0307 	bic.w	r3, r3, #7
 8009b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	4a1f      	ldr	r2, [pc, #124]	; (8009c20 <prvHeapInit+0xac>)
 8009ba4:	4413      	add	r3, r2
 8009ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bac:	4a1d      	ldr	r2, [pc, #116]	; (8009c24 <prvHeapInit+0xb0>)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <prvHeapInit+0xb0>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 0307 	bic.w	r3, r3, #7
 8009bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <prvHeapInit+0xb4>)
 8009bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bd6:	4b14      	ldr	r3, [pc, #80]	; (8009c28 <prvHeapInit+0xb4>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bde:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <prvHeapInit+0xb4>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <prvHeapInit+0xb4>)
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	4a0a      	ldr	r2, [pc, #40]	; (8009c2c <prvHeapInit+0xb8>)
 8009c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	4a09      	ldr	r2, [pc, #36]	; (8009c30 <prvHeapInit+0xbc>)
 8009c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c0c:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <prvHeapInit+0xc0>)
 8009c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c12:	601a      	str	r2, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	20001010 	.word	0x20001010
 8009c24:	20004c10 	.word	0x20004c10
 8009c28:	20004c18 	.word	0x20004c18
 8009c2c:	20004c20 	.word	0x20004c20
 8009c30:	20004c1c 	.word	0x20004c1c
 8009c34:	20004c2c 	.word	0x20004c2c

08009c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c40:	4b28      	ldr	r3, [pc, #160]	; (8009ce4 <prvInsertBlockIntoFreeList+0xac>)
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e002      	b.n	8009c4c <prvInsertBlockIntoFreeList+0x14>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d8f7      	bhi.n	8009c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	4413      	add	r3, r2
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d108      	bne.n	8009c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	441a      	add	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	441a      	add	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d118      	bne.n	8009cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	4b15      	ldr	r3, [pc, #84]	; (8009ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d00d      	beq.n	8009cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	441a      	add	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	e008      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	e003      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d002      	beq.n	8009cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20004c10 	.word	0x20004c10
 8009ce8:	20004c18 	.word	0x20004c18

08009cec <atoi>:
 8009cec:	220a      	movs	r2, #10
 8009cee:	2100      	movs	r1, #0
 8009cf0:	f000 b8c2 	b.w	8009e78 <strtol>

08009cf4 <__errno>:
 8009cf4:	4b01      	ldr	r3, [pc, #4]	; (8009cfc <__errno+0x8>)
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	20000024 	.word	0x20000024

08009d00 <__libc_init_array>:
 8009d00:	b570      	push	{r4, r5, r6, lr}
 8009d02:	4d0d      	ldr	r5, [pc, #52]	; (8009d38 <__libc_init_array+0x38>)
 8009d04:	4c0d      	ldr	r4, [pc, #52]	; (8009d3c <__libc_init_array+0x3c>)
 8009d06:	1b64      	subs	r4, r4, r5
 8009d08:	10a4      	asrs	r4, r4, #2
 8009d0a:	2600      	movs	r6, #0
 8009d0c:	42a6      	cmp	r6, r4
 8009d0e:	d109      	bne.n	8009d24 <__libc_init_array+0x24>
 8009d10:	4d0b      	ldr	r5, [pc, #44]	; (8009d40 <__libc_init_array+0x40>)
 8009d12:	4c0c      	ldr	r4, [pc, #48]	; (8009d44 <__libc_init_array+0x44>)
 8009d14:	f000 f8ba 	bl	8009e8c <_init>
 8009d18:	1b64      	subs	r4, r4, r5
 8009d1a:	10a4      	asrs	r4, r4, #2
 8009d1c:	2600      	movs	r6, #0
 8009d1e:	42a6      	cmp	r6, r4
 8009d20:	d105      	bne.n	8009d2e <__libc_init_array+0x2e>
 8009d22:	bd70      	pop	{r4, r5, r6, pc}
 8009d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d28:	4798      	blx	r3
 8009d2a:	3601      	adds	r6, #1
 8009d2c:	e7ee      	b.n	8009d0c <__libc_init_array+0xc>
 8009d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d32:	4798      	blx	r3
 8009d34:	3601      	adds	r6, #1
 8009d36:	e7f2      	b.n	8009d1e <__libc_init_array+0x1e>
 8009d38:	0800a1e4 	.word	0x0800a1e4
 8009d3c:	0800a1e4 	.word	0x0800a1e4
 8009d40:	0800a1e4 	.word	0x0800a1e4
 8009d44:	0800a1e8 	.word	0x0800a1e8

08009d48 <memcpy>:
 8009d48:	440a      	add	r2, r1
 8009d4a:	4291      	cmp	r1, r2
 8009d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d50:	d100      	bne.n	8009d54 <memcpy+0xc>
 8009d52:	4770      	bx	lr
 8009d54:	b510      	push	{r4, lr}
 8009d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d5e:	4291      	cmp	r1, r2
 8009d60:	d1f9      	bne.n	8009d56 <memcpy+0xe>
 8009d62:	bd10      	pop	{r4, pc}

08009d64 <memset>:
 8009d64:	4402      	add	r2, r0
 8009d66:	4603      	mov	r3, r0
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d100      	bne.n	8009d6e <memset+0xa>
 8009d6c:	4770      	bx	lr
 8009d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d72:	e7f9      	b.n	8009d68 <memset+0x4>

08009d74 <_strtol_l.constprop.0>:
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d7a:	d001      	beq.n	8009d80 <_strtol_l.constprop.0+0xc>
 8009d7c:	2b24      	cmp	r3, #36	; 0x24
 8009d7e:	d906      	bls.n	8009d8e <_strtol_l.constprop.0+0x1a>
 8009d80:	f7ff ffb8 	bl	8009cf4 <__errno>
 8009d84:	2316      	movs	r3, #22
 8009d86:	6003      	str	r3, [r0, #0]
 8009d88:	2000      	movs	r0, #0
 8009d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009e74 <_strtol_l.constprop.0+0x100>
 8009d92:	460d      	mov	r5, r1
 8009d94:	462e      	mov	r6, r5
 8009d96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d9a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009d9e:	f017 0708 	ands.w	r7, r7, #8
 8009da2:	d1f7      	bne.n	8009d94 <_strtol_l.constprop.0+0x20>
 8009da4:	2c2d      	cmp	r4, #45	; 0x2d
 8009da6:	d132      	bne.n	8009e0e <_strtol_l.constprop.0+0x9a>
 8009da8:	782c      	ldrb	r4, [r5, #0]
 8009daa:	2701      	movs	r7, #1
 8009dac:	1cb5      	adds	r5, r6, #2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d05b      	beq.n	8009e6a <_strtol_l.constprop.0+0xf6>
 8009db2:	2b10      	cmp	r3, #16
 8009db4:	d109      	bne.n	8009dca <_strtol_l.constprop.0+0x56>
 8009db6:	2c30      	cmp	r4, #48	; 0x30
 8009db8:	d107      	bne.n	8009dca <_strtol_l.constprop.0+0x56>
 8009dba:	782c      	ldrb	r4, [r5, #0]
 8009dbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009dc0:	2c58      	cmp	r4, #88	; 0x58
 8009dc2:	d14d      	bne.n	8009e60 <_strtol_l.constprop.0+0xec>
 8009dc4:	786c      	ldrb	r4, [r5, #1]
 8009dc6:	2310      	movs	r3, #16
 8009dc8:	3502      	adds	r5, #2
 8009dca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009dce:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dd2:	f04f 0c00 	mov.w	ip, #0
 8009dd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8009dda:	4666      	mov	r6, ip
 8009ddc:	fb03 8a19 	mls	sl, r3, r9, r8
 8009de0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009de4:	f1be 0f09 	cmp.w	lr, #9
 8009de8:	d816      	bhi.n	8009e18 <_strtol_l.constprop.0+0xa4>
 8009dea:	4674      	mov	r4, lr
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	dd24      	ble.n	8009e3a <_strtol_l.constprop.0+0xc6>
 8009df0:	f1bc 0f00 	cmp.w	ip, #0
 8009df4:	db1e      	blt.n	8009e34 <_strtol_l.constprop.0+0xc0>
 8009df6:	45b1      	cmp	r9, r6
 8009df8:	d31c      	bcc.n	8009e34 <_strtol_l.constprop.0+0xc0>
 8009dfa:	d101      	bne.n	8009e00 <_strtol_l.constprop.0+0x8c>
 8009dfc:	45a2      	cmp	sl, r4
 8009dfe:	db19      	blt.n	8009e34 <_strtol_l.constprop.0+0xc0>
 8009e00:	fb06 4603 	mla	r6, r6, r3, r4
 8009e04:	f04f 0c01 	mov.w	ip, #1
 8009e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e0c:	e7e8      	b.n	8009de0 <_strtol_l.constprop.0+0x6c>
 8009e0e:	2c2b      	cmp	r4, #43	; 0x2b
 8009e10:	bf04      	itt	eq
 8009e12:	782c      	ldrbeq	r4, [r5, #0]
 8009e14:	1cb5      	addeq	r5, r6, #2
 8009e16:	e7ca      	b.n	8009dae <_strtol_l.constprop.0+0x3a>
 8009e18:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009e1c:	f1be 0f19 	cmp.w	lr, #25
 8009e20:	d801      	bhi.n	8009e26 <_strtol_l.constprop.0+0xb2>
 8009e22:	3c37      	subs	r4, #55	; 0x37
 8009e24:	e7e2      	b.n	8009dec <_strtol_l.constprop.0+0x78>
 8009e26:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009e2a:	f1be 0f19 	cmp.w	lr, #25
 8009e2e:	d804      	bhi.n	8009e3a <_strtol_l.constprop.0+0xc6>
 8009e30:	3c57      	subs	r4, #87	; 0x57
 8009e32:	e7db      	b.n	8009dec <_strtol_l.constprop.0+0x78>
 8009e34:	f04f 3cff 	mov.w	ip, #4294967295
 8009e38:	e7e6      	b.n	8009e08 <_strtol_l.constprop.0+0x94>
 8009e3a:	f1bc 0f00 	cmp.w	ip, #0
 8009e3e:	da05      	bge.n	8009e4c <_strtol_l.constprop.0+0xd8>
 8009e40:	2322      	movs	r3, #34	; 0x22
 8009e42:	6003      	str	r3, [r0, #0]
 8009e44:	4646      	mov	r6, r8
 8009e46:	b942      	cbnz	r2, 8009e5a <_strtol_l.constprop.0+0xe6>
 8009e48:	4630      	mov	r0, r6
 8009e4a:	e79e      	b.n	8009d8a <_strtol_l.constprop.0+0x16>
 8009e4c:	b107      	cbz	r7, 8009e50 <_strtol_l.constprop.0+0xdc>
 8009e4e:	4276      	negs	r6, r6
 8009e50:	2a00      	cmp	r2, #0
 8009e52:	d0f9      	beq.n	8009e48 <_strtol_l.constprop.0+0xd4>
 8009e54:	f1bc 0f00 	cmp.w	ip, #0
 8009e58:	d000      	beq.n	8009e5c <_strtol_l.constprop.0+0xe8>
 8009e5a:	1e69      	subs	r1, r5, #1
 8009e5c:	6011      	str	r1, [r2, #0]
 8009e5e:	e7f3      	b.n	8009e48 <_strtol_l.constprop.0+0xd4>
 8009e60:	2430      	movs	r4, #48	; 0x30
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1b1      	bne.n	8009dca <_strtol_l.constprop.0+0x56>
 8009e66:	2308      	movs	r3, #8
 8009e68:	e7af      	b.n	8009dca <_strtol_l.constprop.0+0x56>
 8009e6a:	2c30      	cmp	r4, #48	; 0x30
 8009e6c:	d0a5      	beq.n	8009dba <_strtol_l.constprop.0+0x46>
 8009e6e:	230a      	movs	r3, #10
 8009e70:	e7ab      	b.n	8009dca <_strtol_l.constprop.0+0x56>
 8009e72:	bf00      	nop
 8009e74:	0800a0d9 	.word	0x0800a0d9

08009e78 <strtol>:
 8009e78:	4613      	mov	r3, r2
 8009e7a:	460a      	mov	r2, r1
 8009e7c:	4601      	mov	r1, r0
 8009e7e:	4802      	ldr	r0, [pc, #8]	; (8009e88 <strtol+0x10>)
 8009e80:	6800      	ldr	r0, [r0, #0]
 8009e82:	f7ff bf77 	b.w	8009d74 <_strtol_l.constprop.0>
 8009e86:	bf00      	nop
 8009e88:	20000024 	.word	0x20000024

08009e8c <_init>:
 8009e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8e:	bf00      	nop
 8009e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e92:	bc08      	pop	{r3}
 8009e94:	469e      	mov	lr, r3
 8009e96:	4770      	bx	lr

08009e98 <_fini>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	bf00      	nop
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr
