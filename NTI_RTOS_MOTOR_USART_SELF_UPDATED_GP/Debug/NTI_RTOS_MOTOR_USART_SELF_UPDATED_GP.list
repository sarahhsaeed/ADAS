
NTI_RTOS_MOTOR_USART_SELF_UPDATED_GP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a124  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800a2c4  0800a2c4  0001a2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a674  0800a674  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a674  0800a674  0001a674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a67c  0800a67c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a67c  0800a67c  0001a67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a680  0800a680  0001a680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bdc  20000088  0800a70c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004c64  0800a70c  00024c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d723  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000425a  00000000  00000000  0003d7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00041a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  000430e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019853  00000000  00000000  000445d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b398  00000000  00000000  0005de23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d56  00000000  00000000  000791bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110f11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f84  00000000  00000000  00110f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2ac 	.word	0x0800a2ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800a2ac 	.word	0x0800a2ac

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b974 	b.w	8000e6c <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468e      	mov	lr, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14d      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4694      	mov	ip, r2
 8000bae:	d969      	bls.n	8000c84 <__udivmoddi4+0xe8>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b152      	cbz	r2, 8000bcc <__udivmoddi4+0x30>
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	f1c2 0120 	rsb	r1, r2, #32
 8000bbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000bc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bca:	4094      	lsls	r4, r2
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	0c21      	lsrs	r1, r4, #16
 8000bd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bd6:	fa1f f78c 	uxth.w	r7, ip
 8000bda:	fb08 e316 	mls	r3, r8, r6, lr
 8000bde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be2:	fb06 f107 	mul.w	r1, r6, r7
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bf2:	f080 811f 	bcs.w	8000e34 <__udivmoddi4+0x298>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 811c 	bls.w	8000e34 <__udivmoddi4+0x298>
 8000bfc:	3e02      	subs	r6, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c08:	fb08 3310 	mls	r3, r8, r0, r3
 8000c0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c10:	fb00 f707 	mul.w	r7, r0, r7
 8000c14:	42a7      	cmp	r7, r4
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x92>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c20:	f080 810a 	bcs.w	8000e38 <__udivmoddi4+0x29c>
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	f240 8107 	bls.w	8000e38 <__udivmoddi4+0x29c>
 8000c2a:	4464      	add	r4, ip
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c32:	1be4      	subs	r4, r4, r7
 8000c34:	2600      	movs	r6, #0
 8000c36:	b11d      	cbz	r5, 8000c40 <__udivmoddi4+0xa4>
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0xc2>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	f000 80ef 	beq.w	8000e2e <__udivmoddi4+0x292>
 8000c50:	2600      	movs	r6, #0
 8000c52:	e9c5 0100 	strd	r0, r1, [r5]
 8000c56:	4630      	mov	r0, r6
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fab3 f683 	clz	r6, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d14a      	bne.n	8000cfc <__udivmoddi4+0x160>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xd4>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 80f9 	bhi.w	8000e62 <__udivmoddi4+0x2c6>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb61 0303 	sbc.w	r3, r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	469e      	mov	lr, r3
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0e0      	beq.n	8000c40 <__udivmoddi4+0xa4>
 8000c7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c82:	e7dd      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000c84:	b902      	cbnz	r2, 8000c88 <__udivmoddi4+0xec>
 8000c86:	deff      	udf	#255	; 0xff
 8000c88:	fab2 f282 	clz	r2, r2
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	f040 8092 	bne.w	8000db6 <__udivmoddi4+0x21a>
 8000c92:	eba1 010c 	sub.w	r1, r1, ip
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2601      	movs	r6, #1
 8000ca0:	0c20      	lsrs	r0, r4, #16
 8000ca2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ca6:	fb07 1113 	mls	r1, r7, r3, r1
 8000caa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cae:	fb0e f003 	mul.w	r0, lr, r3
 8000cb2:	4288      	cmp	r0, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x12c>
 8000cb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x12a>
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2c0>
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	1a09      	subs	r1, r1, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x156>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x154>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2ca>
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	e79c      	b.n	8000c36 <__udivmoddi4+0x9a>
 8000cfc:	f1c6 0720 	rsb	r7, r6, #32
 8000d00:	40b3      	lsls	r3, r6
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d12:	431c      	orrs	r4, r3
 8000d14:	40f9      	lsrs	r1, r7
 8000d16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d22:	0c20      	lsrs	r0, r4, #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fb09 1118 	mls	r1, r9, r8, r1
 8000d2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d30:	fb08 f00e 	mul.w	r0, r8, lr
 8000d34:	4288      	cmp	r0, r1
 8000d36:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b8>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2bc>
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2bc>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d68:	458e      	cmp	lr, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1e2>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2b4>
 8000d76:	458e      	cmp	lr, r1
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2b4>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d82:	fba0 9402 	umull	r9, r4, r0, r2
 8000d86:	eba1 010e 	sub.w	r1, r1, lr
 8000d8a:	42a1      	cmp	r1, r4
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46a6      	mov	lr, r4
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x2a4>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x2a0>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x212>
 8000d96:	ebb3 0208 	subs.w	r2, r3, r8
 8000d9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000da2:	fa22 f306 	lsr.w	r3, r2, r6
 8000da6:	40f1      	lsrs	r1, r6
 8000da8:	431f      	orrs	r7, r3
 8000daa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	f1c2 0320 	rsb	r3, r2, #32
 8000dba:	40d8      	lsrs	r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	4301      	orrs	r1, r0
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd8:	0c0b      	lsrs	r3, r1, #16
 8000dda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dde:	fb00 f60e 	mul.w	r6, r0, lr
 8000de2:	429e      	cmp	r6, r3
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x260>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b8>
 8000df4:	429e      	cmp	r6, r3
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b8>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1b9b      	subs	r3, r3, r6
 8000dfe:	b289      	uxth	r1, r1
 8000e00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e04:	fb07 3316 	mls	r3, r7, r6, r3
 8000e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x28a>
 8000e14:	eb1c 0101 	adds.w	r1, ip, r1
 8000e18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000e22:	3e02      	subs	r6, #2
 8000e24:	4461      	add	r1, ip
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0x104>
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e705      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e3      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6f8      	b.n	8000c2e <__udivmoddi4+0x92>
 8000e3c:	454b      	cmp	r3, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f8>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f8>
 8000e4c:	4646      	mov	r6, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x28a>
 8000e50:	4620      	mov	r0, r4
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1e2>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b8>
 8000e5c:	3b02      	subs	r3, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x12c>
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xde>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x156>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <blindspot_isObjectDetected>:

#include "main.h"
#include "blindspot_assist.h"
#include "../HCSR04/HCSR04.h"

uint8_t blindspot_isObjectDetected(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

	// Read distance from the ultrasonic sensor
    double distance = HCSR04_Read(HCSR04_SENSOR2);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 fefe 	bl	8001c78 <HCSR04_Read>
 8000e7c:	ee10 3a10 	vmov	r3, s0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb11 	bl	80004a8 <__aeabi_f2d>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	e9c7 2300 	strd	r2, r3, [r7]


    // Check if an object is within the blind spot range
    if (distance <= BLIND_SPOT_RANGE_CM)
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <blindspot_isObjectDetected+0x40>)
 8000e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e98:	f7ff fdda 	bl	8000a50 <__aeabi_dcmple>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <blindspot_isObjectDetected+0x36>
	{
        return 1;  // Object detected
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <blindspot_isObjectDetected+0x38>
    }

	else
	{
        // No object in the blind spot
        return 0;  // No object detected
 8000ea6:	2300      	movs	r3, #0
    }
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	402e0000 	.word	0x402e0000

08000eb4 <DCMotor_stop>:
#include "tim.h"

extern osMessageQueueId_t motorQueueHandle;

void DCMotor_stop(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
	motorControl_t payload = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0; i < 2; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	e01d      	b.n	8000f04 <DCMotor_stop+0x50>
	{
	  payload.motors[i].modify = MOTOR_MODIFY_ALL;
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	443b      	add	r3, r7
 8000ed4:	3b08      	subs	r3, #8
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].speed = 0;
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	443b      	add	r3, r7
 8000ee6:	3b07      	subs	r3, #7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].control = MOTOR_OFF;
 8000eec:	79fa      	ldrb	r2, [r7, #7]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3308      	adds	r3, #8
 8000ef6:	443b      	add	r3, r7
 8000ef8:	3b06      	subs	r3, #6
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++)
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	3301      	adds	r3, #1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d9de      	bls.n	8000ec8 <DCMotor_stop+0x14>
	}
	osMessageQueuePut(motorQueueHandle, &payload, 0, 0);
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <DCMotor_stop+0x6c>)
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	4639      	mov	r1, r7
 8000f10:	2300      	movs	r3, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	f006 fba2 	bl	800765c <osMessageQueuePut>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000012c 	.word	0x2000012c

08000f24 <DCMotor_moveForward>:

void DCMotor_moveForward(uint8_t speed)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	motorControl_t payload = {0};
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0; i < 2; i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e023      	b.n	8000f86 <DCMotor_moveForward+0x62>
	{
	  payload.motors[i].modify = speed > 100 ? MOTOR_MODIFY_DIR : MOTOR_MODIFY_ALL;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b64      	cmp	r3, #100	; 0x64
 8000f42:	d901      	bls.n	8000f48 <DCMotor_moveForward+0x24>
 8000f44:	2101      	movs	r1, #1
 8000f46:	e000      	b.n	8000f4a <DCMotor_moveForward+0x26>
 8000f48:	2103      	movs	r1, #3
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	3310      	adds	r3, #16
 8000f54:	443b      	add	r3, r7
 8000f56:	3b08      	subs	r3, #8
 8000f58:	460a      	mov	r2, r1
 8000f5a:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].speed = speed;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	3310      	adds	r3, #16
 8000f66:	443b      	add	r3, r7
 8000f68:	3b07      	subs	r3, #7
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].control = MOTOR_FWD;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	3310      	adds	r3, #16
 8000f78:	443b      	add	r3, r7
 8000f7a:	3b06      	subs	r3, #6
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++)
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	3301      	adds	r3, #1
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d9d8      	bls.n	8000f3e <DCMotor_moveForward+0x1a>
	}
	osMessageQueuePut(motorQueueHandle, &payload, 0, 0);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <DCMotor_moveForward+0x80>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f107 0108 	add.w	r1, r7, #8
 8000f94:	2300      	movs	r3, #0
 8000f96:	2200      	movs	r2, #0
 8000f98:	f006 fb60 	bl	800765c <osMessageQueuePut>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000012c 	.word	0x2000012c

08000fa8 <DCMotor_moveBackward>:

void DCMotor_moveBackward(uint8_t speed)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	motorControl_t payload = {0};
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0; i < 2; i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e023      	b.n	800100a <DCMotor_moveBackward+0x62>
	{
	  payload.motors[i].modify = speed > 100 ? MOTOR_MODIFY_DIR : MOTOR_MODIFY_ALL;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b64      	cmp	r3, #100	; 0x64
 8000fc6:	d901      	bls.n	8000fcc <DCMotor_moveBackward+0x24>
 8000fc8:	2101      	movs	r1, #1
 8000fca:	e000      	b.n	8000fce <DCMotor_moveBackward+0x26>
 8000fcc:	2103      	movs	r1, #3
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3310      	adds	r3, #16
 8000fd8:	443b      	add	r3, r7
 8000fda:	3b08      	subs	r3, #8
 8000fdc:	460a      	mov	r2, r1
 8000fde:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].speed = speed;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3310      	adds	r3, #16
 8000fea:	443b      	add	r3, r7
 8000fec:	3b07      	subs	r3, #7
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].control = MOTOR_REV;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3310      	adds	r3, #16
 8000ffc:	443b      	add	r3, r7
 8000ffe:	3b06      	subs	r3, #6
 8001000:	2204      	movs	r2, #4
 8001002:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3301      	adds	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d9d8      	bls.n	8000fc2 <DCMotor_moveBackward+0x1a>
	}
	osMessageQueuePut(motorQueueHandle, &payload, 0, 0);
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <DCMotor_moveBackward+0x80>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	f107 0108 	add.w	r1, r7, #8
 8001018:	2300      	movs	r3, #0
 800101a:	2200      	movs	r2, #0
 800101c:	f006 fb1e 	bl	800765c <osMessageQueuePut>
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000012c 	.word	0x2000012c

0800102c <DCMotor_moveLeft>:

void DCMotor_moveLeft(uint8_t speed)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	motorControl_t payload = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	809a      	strh	r2, [r3, #4]

	payload.motors[0].modify = speed > 100 ? MOTOR_MODIFY_DIR : MOTOR_MODIFY_ALL;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b64      	cmp	r3, #100	; 0x64
 8001044:	d901      	bls.n	800104a <DCMotor_moveLeft+0x1e>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <DCMotor_moveLeft+0x20>
 800104a:	2303      	movs	r3, #3
 800104c:	723b      	strb	r3, [r7, #8]
	payload.motors[0].speed = speed;
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	727b      	strb	r3, [r7, #9]
	payload.motors[0].control = MOTOR_FWD;
 8001052:	2302      	movs	r3, #2
 8001054:	72bb      	strb	r3, [r7, #10]

	payload.motors[1].modify = speed > 100 ? MOTOR_MODIFY_DIR : MOTOR_MODIFY_ALL;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b64      	cmp	r3, #100	; 0x64
 800105a:	d901      	bls.n	8001060 <DCMotor_moveLeft+0x34>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <DCMotor_moveLeft+0x36>
 8001060:	2303      	movs	r3, #3
 8001062:	72fb      	strb	r3, [r7, #11]
	payload.motors[1].speed = speed;
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	733b      	strb	r3, [r7, #12]
	payload.motors[1].control = MOTOR_REV;
 8001068:	2304      	movs	r3, #4
 800106a:	737b      	strb	r3, [r7, #13]
	osMessageQueuePut(motorQueueHandle, &payload, 0, 0);
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <DCMotor_moveLeft+0x58>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	f107 0108 	add.w	r1, r7, #8
 8001074:	2300      	movs	r3, #0
 8001076:	2200      	movs	r2, #0
 8001078:	f006 faf0 	bl	800765c <osMessageQueuePut>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000012c 	.word	0x2000012c

08001088 <DCMotor_moveRight>:

void DCMotor_moveRight(uint8_t speed)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	motorControl_t payload = {0};
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	809a      	strh	r2, [r3, #4]

	payload.motors[0].modify = speed > 100 ? MOTOR_MODIFY_DIR : MOTOR_MODIFY_ALL;
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d901      	bls.n	80010a6 <DCMotor_moveRight+0x1e>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <DCMotor_moveRight+0x20>
 80010a6:	2303      	movs	r3, #3
 80010a8:	723b      	strb	r3, [r7, #8]
	payload.motors[0].speed = speed;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	727b      	strb	r3, [r7, #9]
	//payload.motors[0].modify = MOTOR_MODIFY_ALL;
	//payload.motors[0].speed = MOTOR_TURN_SPEED;
	payload.motors[0].control = MOTOR_REV;
 80010ae:	2304      	movs	r3, #4
 80010b0:	72bb      	strb	r3, [r7, #10]

	payload.motors[1].modify = speed > 100 ? MOTOR_MODIFY_DIR : MOTOR_MODIFY_ALL;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d901      	bls.n	80010bc <DCMotor_moveRight+0x34>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <DCMotor_moveRight+0x36>
 80010bc:	2303      	movs	r3, #3
 80010be:	72fb      	strb	r3, [r7, #11]
	payload.motors[1].speed = speed;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	733b      	strb	r3, [r7, #12]
	//payload.motors[1].modify = MOTOR_MODIFY_ALL;
	//payload.motors[1].speed = MOTOR_TURN_SPEED;
	payload.motors[1].control = MOTOR_FWD;
 80010c4:	2302      	movs	r3, #2
 80010c6:	737b      	strb	r3, [r7, #13]
	osMessageQueuePut(motorQueueHandle, &payload, 0, 0);
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <DCMotor_moveRight+0x58>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	f107 0108 	add.w	r1, r7, #8
 80010d0:	2300      	movs	r3, #0
 80010d2:	2200      	movs	r2, #0
 80010d4:	f006 fac2 	bl	800765c <osMessageQueuePut>
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000012c 	.word	0x2000012c

080010e4 <DCMotor_changeSpeed>:

void DCMotor_changeSpeed(uint8_t speed)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	motorControl_t payload = {0};
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0; i < 2; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e01a      	b.n	8001134 <DCMotor_changeSpeed+0x50>
	{
	  payload.motors[i].modify = speed > 100 ? MOTOR_MODIFY_NONE : MOTOR_MODIFY_SPEED;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b64      	cmp	r3, #100	; 0x64
 8001102:	d901      	bls.n	8001108 <DCMotor_changeSpeed+0x24>
 8001104:	2100      	movs	r1, #0
 8001106:	e000      	b.n	800110a <DCMotor_changeSpeed+0x26>
 8001108:	2102      	movs	r1, #2
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	3310      	adds	r3, #16
 8001114:	443b      	add	r3, r7
 8001116:	3b08      	subs	r3, #8
 8001118:	460a      	mov	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]
	  payload.motors[i].speed = speed;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	3310      	adds	r3, #16
 8001126:	443b      	add	r3, r7
 8001128:	3b07      	subs	r3, #7
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++)
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d9e1      	bls.n	80010fe <DCMotor_changeSpeed+0x1a>
	}
	osMessageQueuePut(motorQueueHandle, &payload, 0, 0);
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <DCMotor_changeSpeed+0x70>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f107 0108 	add.w	r1, r7, #8
 8001142:	2300      	movs	r3, #0
 8001144:	2200      	movs	r2, #0
 8001146:	f006 fa89 	bl	800765c <osMessageQueuePut>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000012c 	.word	0x2000012c

08001158 <DCMotor_handleRequest>:

void DCMotor_handleRequest(motorControl_t* motorRequest)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 2; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	75fb      	strb	r3, [r7, #23]
 8001164:	e0a2      	b.n	80012ac <DCMotor_handleRequest+0x154>
	{
	  uint16_t INx1_pin, INx2_pin;
	  GPIO_TypeDef *INx1_port, *INx2_port;
	  if(motorRequest->motors[i].modify == 0) continue;
 8001166:	7dfa      	ldrb	r2, [r7, #23]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	440b      	add	r3, r1
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 8093 	beq.w	80012a0 <DCMotor_handleRequest+0x148>
	  if(i == 0){
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d124      	bne.n	80011ca <DCMotor_handleRequest+0x72>
		  if(motorRequest->motors[i].modify & MOTOR_MODIFY_SPEED)
 8001180:	7dfa      	ldrb	r2, [r7, #23]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	440b      	add	r3, r1
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d010      	beq.n	80011b8 <DCMotor_handleRequest+0x60>
			  Motor1_SetSpeed(motorRequest->motors[i].speed);
 8001196:	7dfa      	ldrb	r2, [r7, #23]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	3301      	adds	r3, #1
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f95c 	bl	8000464 <__aeabi_ui2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	ec43 2b10 	vmov	d0, r2, r3
 80011b4:	f002 fb90 	bl	80038d8 <Motor1_SetSpeed>
		  INx1_port = MOTOR_IN1_GPIO_Port;
 80011b8:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <DCMotor_handleRequest+0x168>)
 80011ba:	60fb      	str	r3, [r7, #12]
		  INx2_port = MOTOR_IN2_GPIO_Port;
 80011bc:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <DCMotor_handleRequest+0x168>)
 80011be:	60bb      	str	r3, [r7, #8]
		  INx1_pin = MOTOR_IN1_Pin;
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	82bb      	strh	r3, [r7, #20]
		  INx2_pin = MOTOR_IN2_Pin;
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	827b      	strh	r3, [r7, #18]
 80011c8:	e027      	b.n	800121a <DCMotor_handleRequest+0xc2>
	  }
	  else if(i == 1){
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d124      	bne.n	800121a <DCMotor_handleRequest+0xc2>
		  if(motorRequest->motors[i].modify & MOTOR_MODIFY_SPEED)
 80011d0:	7dfa      	ldrb	r2, [r7, #23]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	440b      	add	r3, r1
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d010      	beq.n	8001208 <DCMotor_handleRequest+0xb0>
			  Motor2_SetSpeed(motorRequest->motors[i].speed);
 80011e6:	7dfa      	ldrb	r2, [r7, #23]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	3301      	adds	r3, #1
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f934 	bl	8000464 <__aeabi_ui2d>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	ec43 2b10 	vmov	d0, r2, r3
 8001204:	f002 fb94 	bl	8003930 <Motor2_SetSpeed>
		  INx1_port = MOTOR_IN3_GPIO_Port;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <DCMotor_handleRequest+0x168>)
 800120a:	60fb      	str	r3, [r7, #12]
		  INx2_port = MOTOR_IN4_GPIO_Port;
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <DCMotor_handleRequest+0x16c>)
 800120e:	60bb      	str	r3, [r7, #8]
		  INx1_pin = MOTOR_IN3_Pin;
 8001210:	2320      	movs	r3, #32
 8001212:	82bb      	strh	r3, [r7, #20]
		  INx2_pin = MOTOR_IN4_Pin;
 8001214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001218:	827b      	strh	r3, [r7, #18]
	  }
	if((motorRequest->motors[i].modify & MOTOR_MODIFY_DIR) == 0) continue;
 800121a:	7dfa      	ldrb	r2, [r7, #23]
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	440b      	add	r3, r1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d039      	beq.n	80012a4 <DCMotor_handleRequest+0x14c>
	switch(motorRequest->motors[i].control)
 8001230:	7dfa      	ldrb	r2, [r7, #23]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	440b      	add	r3, r1
 800123c:	3302      	adds	r3, #2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b04      	cmp	r3, #4
 8001242:	d020      	beq.n	8001286 <DCMotor_handleRequest+0x12e>
 8001244:	2b04      	cmp	r3, #4
 8001246:	dc2e      	bgt.n	80012a6 <DCMotor_handleRequest+0x14e>
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <DCMotor_handleRequest+0xfa>
 800124c:	2b02      	cmp	r3, #2
 800124e:	d00d      	beq.n	800126c <DCMotor_handleRequest+0x114>
 8001250:	e029      	b.n	80012a6 <DCMotor_handleRequest+0x14e>
	{
	case MOTOR_OFF:
	  HAL_GPIO_WritePin(INx1_port, INx1_pin, 0);
 8001252:	8abb      	ldrh	r3, [r7, #20]
 8001254:	2200      	movs	r2, #0
 8001256:	4619      	mov	r1, r3
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f002 ffc1 	bl	80041e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(INx2_port, INx2_pin, 0);
 800125e:	8a7b      	ldrh	r3, [r7, #18]
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	68b8      	ldr	r0, [r7, #8]
 8001266:	f002 ffbb 	bl	80041e0 <HAL_GPIO_WritePin>
	  break;
 800126a:	e01c      	b.n	80012a6 <DCMotor_handleRequest+0x14e>
	case MOTOR_FWD:
	  HAL_GPIO_WritePin(INx1_port, INx1_pin, 1);
 800126c:	8abb      	ldrh	r3, [r7, #20]
 800126e:	2201      	movs	r2, #1
 8001270:	4619      	mov	r1, r3
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f002 ffb4 	bl	80041e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(INx2_port, INx2_pin, 0);
 8001278:	8a7b      	ldrh	r3, [r7, #18]
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f002 ffae 	bl	80041e0 <HAL_GPIO_WritePin>
	  break;
 8001284:	e00f      	b.n	80012a6 <DCMotor_handleRequest+0x14e>
	case MOTOR_REV:
	  HAL_GPIO_WritePin(INx1_port, INx1_pin, 0);
 8001286:	8abb      	ldrh	r3, [r7, #20]
 8001288:	2200      	movs	r2, #0
 800128a:	4619      	mov	r1, r3
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f002 ffa7 	bl	80041e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(INx2_port, INx2_pin, 1);
 8001292:	8a7b      	ldrh	r3, [r7, #18]
 8001294:	2201      	movs	r2, #1
 8001296:	4619      	mov	r1, r3
 8001298:	68b8      	ldr	r0, [r7, #8]
 800129a:	f002 ffa1 	bl	80041e0 <HAL_GPIO_WritePin>
	  break;
 800129e:	e002      	b.n	80012a6 <DCMotor_handleRequest+0x14e>
	  if(motorRequest->motors[i].modify == 0) continue;
 80012a0:	bf00      	nop
 80012a2:	e000      	b.n	80012a6 <DCMotor_handleRequest+0x14e>
	if((motorRequest->motors[i].modify & MOTOR_MODIFY_DIR) == 0) continue;
 80012a4:	bf00      	nop
	for(uint8_t i = 0; i < 2; i++)
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	3301      	adds	r3, #1
 80012aa:	75fb      	strb	r3, [r7, #23]
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	f67f af59 	bls.w	8001166 <DCMotor_handleRequest+0xe>
	}
	}
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020000 	.word	0x40020000

080012c8 <DWT_Delay_Init>:


#include "stm32f4xx_hal.h"
//uint32_t DWT_Delay_Init(void);
__STATIC_INLINE uint32_t DWT_Delay_Init(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <DWT_Delay_Init+0x58>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <DWT_Delay_Init+0x58>)
 80012d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012d6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <DWT_Delay_Init+0x58>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4a10      	ldr	r2, [pc, #64]	; (8001320 <DWT_Delay_Init+0x58>)
 80012de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012e2:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <DWT_Delay_Init+0x5c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <DWT_Delay_Init+0x5c>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <DWT_Delay_Init+0x5c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <DWT_Delay_Init+0x5c>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <DWT_Delay_Init+0x5c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001302:	bf00      	nop
    __ASM volatile ("NOP");
 8001304:	bf00      	nop
    __ASM volatile ("NOP");
 8001306:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <DWT_Delay_Init+0x5c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001310:	2300      	movs	r3, #0
 8001312:	e000      	b.n	8001316 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001314:	2301      	movs	r3, #1
    }
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000edf0 	.word	0xe000edf0
 8001324:	e0001000 	.word	0xe0001000

08001328 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <DWT_Delay_us+0x40>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001336:	f003 fbc3 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 800133a:	4603      	mov	r3, r0
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <DWT_Delay_us+0x44>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0c9b      	lsrs	r3, r3, #18
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800134c:	bf00      	nop
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <DWT_Delay_us+0x40>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad2      	subs	r2, r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	d3f8      	bcc.n	800134e <DWT_Delay_us+0x26>
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e0001000 	.word	0xe0001000
 800136c:	431bde83 	.word	0x431bde83

08001370 <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b096      	sub	sp, #88	; 0x58
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 800137c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]

    DWT_Delay_Init();
 80013b2:	f7ff ff89 	bl	80012c8 <DWT_Delay_Init>

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 80013b6:	79fa      	ldrb	r2, [r7, #7]
 80013b8:	49a2      	ldr	r1, [pc, #648]	; (8001644 <HCSR04_Init+0x2d4>)
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4aa0      	ldr	r2, [pc, #640]	; (8001648 <HCSR04_Init+0x2d8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d10e      	bne.n	80013ea <HCSR04_Init+0x7a>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	4b9e      	ldr	r3, [pc, #632]	; (800164c <HCSR04_Init+0x2dc>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a9d      	ldr	r2, [pc, #628]	; (800164c <HCSR04_Init+0x2dc>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b9b      	ldr	r3, [pc, #620]	; (800164c <HCSR04_Init+0x2dc>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	e066      	b.n	80014b8 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	4995      	ldr	r1, [pc, #596]	; (8001644 <HCSR04_Init+0x2d4>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a95      	ldr	r2, [pc, #596]	; (8001650 <HCSR04_Init+0x2e0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d10e      	bne.n	800141e <HCSR04_Init+0xae>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	4b91      	ldr	r3, [pc, #580]	; (800164c <HCSR04_Init+0x2dc>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4a90      	ldr	r2, [pc, #576]	; (800164c <HCSR04_Init+0x2dc>)
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
 8001410:	4b8e      	ldr	r3, [pc, #568]	; (800164c <HCSR04_Init+0x2dc>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	e04c      	b.n	80014b8 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	4988      	ldr	r1, [pc, #544]	; (8001644 <HCSR04_Init+0x2d4>)
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a89      	ldr	r2, [pc, #548]	; (8001654 <HCSR04_Init+0x2e4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d10e      	bne.n	8001452 <HCSR04_Init+0xe2>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	4b84      	ldr	r3, [pc, #528]	; (800164c <HCSR04_Init+0x2dc>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	4a83      	ldr	r2, [pc, #524]	; (800164c <HCSR04_Init+0x2dc>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6313      	str	r3, [r2, #48]	; 0x30
 8001444:	4b81      	ldr	r3, [pc, #516]	; (800164c <HCSR04_Init+0x2dc>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	e032      	b.n	80014b8 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	497b      	ldr	r1, [pc, #492]	; (8001644 <HCSR04_Init+0x2d4>)
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7d      	ldr	r2, [pc, #500]	; (8001658 <HCSR04_Init+0x2e8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d10e      	bne.n	8001486 <HCSR04_Init+0x116>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4b77      	ldr	r3, [pc, #476]	; (800164c <HCSR04_Init+0x2dc>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a76      	ldr	r2, [pc, #472]	; (800164c <HCSR04_Init+0x2dc>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
 8001478:	4b74      	ldr	r3, [pc, #464]	; (800164c <HCSR04_Init+0x2dc>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	e018      	b.n	80014b8 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	496e      	ldr	r1, [pc, #440]	; (8001644 <HCSR04_Init+0x2d4>)
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a71      	ldr	r2, [pc, #452]	; (800165c <HCSR04_Init+0x2ec>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d10d      	bne.n	80014b8 <HCSR04_Init+0x148>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HCSR04_Init+0x2dc>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a69      	ldr	r2, [pc, #420]	; (800164c <HCSR04_Init+0x2dc>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b67      	ldr	r3, [pc, #412]	; (800164c <HCSR04_Init+0x2dc>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
    }
    HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, GPIO_PIN_RESET);
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	4962      	ldr	r1, [pc, #392]	; (8001644 <HCSR04_Init+0x2d4>)
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	495e      	ldr	r1, [pc, #376]	; (8001644 <HCSR04_Init+0x2d4>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3304      	adds	r3, #4
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	4619      	mov	r1, r3
 80014de:	f002 fe7f 	bl	80041e0 <HAL_GPIO_WritePin>
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4957      	ldr	r1, [pc, #348]	; (8001644 <HCSR04_Init+0x2d4>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	3304      	adds	r3, #4
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8001502:	79fa      	ldrb	r2, [r7, #7]
 8001504:	494f      	ldr	r1, [pc, #316]	; (8001644 <HCSR04_Init+0x2d4>)
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fcc5 	bl	8003ea8 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 800151e:	79fa      	ldrb	r2, [r7, #7]
 8001520:	4948      	ldr	r1, [pc, #288]	; (8001644 <HCSR04_Init+0x2d4>)
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	3308      	adds	r3, #8
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001534:	484a      	ldr	r0, [pc, #296]	; (8001660 <HCSR04_Init+0x2f0>)
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4403      	add	r3, r0
 8001540:	3304      	adds	r3, #4
 8001542:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 8001544:	79fa      	ldrb	r2, [r7, #7]
 8001546:	493f      	ldr	r1, [pc, #252]	; (8001644 <HCSR04_Init+0x2d4>)
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	3308      	adds	r3, #8
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	79fa      	ldrb	r2, [r7, #7]
 8001558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155a:	4841      	ldr	r0, [pc, #260]	; (8001660 <HCSR04_Init+0x2f0>)
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4403      	add	r3, r0
 8001566:	3308      	adds	r3, #8
 8001568:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	493c      	ldr	r1, [pc, #240]	; (8001660 <HCSR04_Init+0x2f0>)
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	3302      	adds	r3, #2
 800157a:	2200      	movs	r2, #0
 800157c:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	4937      	ldr	r1, [pc, #220]	; (8001660 <HCSR04_Init+0x2f0>)
 8001582:	4613      	mov	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	331c      	adds	r3, #28
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 8001592:	79fa      	ldrb	r2, [r7, #7]
 8001594:	4932      	ldr	r1, [pc, #200]	; (8001660 <HCSR04_Init+0x2f0>)
 8001596:	4613      	mov	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	3308      	adds	r3, #8
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10a      	bne.n	80015be <HCSR04_Init+0x24e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	492d      	ldr	r1, [pc, #180]	; (8001660 <HCSR04_Init+0x2f0>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3308      	adds	r3, #8
 80015b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015bc:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 80015be:	79fa      	ldrb	r2, [r7, #7]
 80015c0:	4920      	ldr	r1, [pc, #128]	; (8001644 <HCSR04_Init+0x2d4>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	330c      	adds	r3, #12
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10a      	bne.n	80015ea <HCSR04_Init+0x27a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 80015d4:	79fa      	ldrb	r2, [r7, #7]
 80015d6:	4922      	ldr	r1, [pc, #136]	; (8001660 <HCSR04_Init+0x2f0>)
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	3320      	adds	r3, #32
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	e051      	b.n	800168e <HCSR04_Init+0x31e>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 80015ea:	79fa      	ldrb	r2, [r7, #7]
 80015ec:	4915      	ldr	r1, [pc, #84]	; (8001644 <HCSR04_Init+0x2d4>)
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	330c      	adds	r3, #12
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d10a      	bne.n	8001616 <HCSR04_Init+0x2a6>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	4917      	ldr	r1, [pc, #92]	; (8001660 <HCSR04_Init+0x2f0>)
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	3320      	adds	r3, #32
 8001610:	2202      	movs	r2, #2
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	e03b      	b.n	800168e <HCSR04_Init+0x31e>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 8001616:	79fa      	ldrb	r2, [r7, #7]
 8001618:	490a      	ldr	r1, [pc, #40]	; (8001644 <HCSR04_Init+0x2d4>)
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	330c      	adds	r3, #12
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d11b      	bne.n	8001664 <HCSR04_Init+0x2f4>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	490c      	ldr	r1, [pc, #48]	; (8001660 <HCSR04_Init+0x2f0>)
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	3320      	adds	r3, #32
 800163c:	2204      	movs	r2, #4
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	e025      	b.n	800168e <HCSR04_Init+0x31e>
 8001642:	bf00      	nop
 8001644:	0800a370 	.word	0x0800a370
 8001648:	40020000 	.word	0x40020000
 800164c:	40023800 	.word	0x40023800
 8001650:	40020400 	.word	0x40020400
 8001654:	40020800 	.word	0x40020800
 8001658:	40020c00 	.word	0x40020c00
 800165c:	40021000 	.word	0x40021000
 8001660:	200000a4 	.word	0x200000a4
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	4936      	ldr	r1, [pc, #216]	; (8001740 <HCSR04_Init+0x3d0>)
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	330c      	adds	r3, #12
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b0c      	cmp	r3, #12
 8001678:	d109      	bne.n	800168e <HCSR04_Init+0x31e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	4931      	ldr	r1, [pc, #196]	; (8001744 <HCSR04_Init+0x3d4>)
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3320      	adds	r3, #32
 800168a:	2208      	movs	r2, #8
 800168c:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	492b      	ldr	r1, [pc, #172]	; (8001740 <HCSR04_Init+0x3d0>)
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3308      	adds	r3, #8
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	4927      	ldr	r1, [pc, #156]	; (8001744 <HCSR04_Init+0x3d4>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	3304      	adds	r3, #4
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 80016c0:	79fa      	ldrb	r2, [r7, #7]
 80016c2:	4920      	ldr	r1, [pc, #128]	; (8001744 <HCSR04_Init+0x3d4>)
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	3308      	adds	r3, #8
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
	//TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
	//HAL_TIM_Base_Init(TMR_Handle);
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
	//HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
	//HAL_TIM_IC_Init(TMR_Handle);
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
	//HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016f4:	2301      	movs	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigIC.ICFilter = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8001700:	79fa      	ldrb	r2, [r7, #7]
 8001702:	490f      	ldr	r1, [pc, #60]	; (8001740 <HCSR04_Init+0x3d0>)
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	330c      	adds	r3, #12
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f003 fe65 	bl	80053e8 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	//HAL_TIM_Base_Start_IT(TMR_Handle);
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 800171e:	79fa      	ldrb	r2, [r7, #7]
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <HCSR04_Init+0x3d0>)
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	330c      	adds	r3, #12
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	6838      	ldr	r0, [r7, #0]
 8001734:	f003 fc36 	bl	8004fa4 <HAL_TIM_IC_Start_IT>
}
 8001738:	bf00      	nop
 800173a:	3758      	adds	r7, #88	; 0x58
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	0800a370 	.word	0x0800a370
 8001744:	200000a4 	.word	0x200000a4

08001748 <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	e023      	b.n	80017a2 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	4815      	ldr	r0, [pc, #84]	; (80017b8 <HCSR04_TMR_OVF_ISR+0x70>)
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4403      	add	r3, r0
 800176c:	3308      	adds	r3, #8
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4299      	cmp	r1, r3
 8001772:	d113      	bne.n	800179c <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	4911      	ldr	r1, [pc, #68]	; (80017bc <HCSR04_TMR_OVF_ISR+0x74>)
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	3302      	adds	r3, #2
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	b298      	uxth	r0, r3
 800178a:	490c      	ldr	r1, [pc, #48]	; (80017bc <HCSR04_TMR_OVF_ISR+0x74>)
 800178c:	4613      	mov	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4413      	add	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	3302      	adds	r3, #2
 8001798:	4602      	mov	r2, r0
 800179a:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	3301      	adds	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d9d8      	bls.n	800175a <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	0800a370 	.word	0x0800a370
 80017bc:	200000a4 	.word	0x200000a4

080017c0 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e23e      	b.n	8001c54 <HCSR04_TMR_IC_ISR+0x494>
	{
		//if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance)/* && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH)*/)
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6819      	ldr	r1, [r3, #0]
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	48a3      	ldr	r0, [pc, #652]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4403      	add	r3, r0
 80017e8:	3308      	adds	r3, #8
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4299      	cmp	r1, r3
 80017ee:	f040 822e 	bne.w	8001c4e <HCSR04_TMR_IC_ISR+0x48e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7f19      	ldrb	r1, [r3, #28]
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	489d      	ldr	r0, [pc, #628]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4403      	add	r3, r0
 8001804:	3320      	adds	r3, #32
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4299      	cmp	r1, r3
 800180a:	f040 8220 	bne.w	8001c4e <HCSR04_TMR_IC_ISR+0x48e>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	4997      	ldr	r1, [pc, #604]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 80b3 	bne.w	800198a <HCSR04_TMR_IC_ISR+0x1ca>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	4991      	ldr	r1, [pc, #580]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	330c      	adds	r3, #12
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	7bfc      	ldrb	r4, [r7, #15]
 8001838:	4619      	mov	r1, r3
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f003 fffa 	bl	8005834 <HAL_TIM_ReadCapturedValue>
 8001840:	4602      	mov	r2, r0
 8001842:	498b      	ldr	r1, [pc, #556]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 8001844:	4623      	mov	r3, r4
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4423      	add	r3, r4
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	330c      	adds	r3, #12
 8001850:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	4986      	ldr	r1, [pc, #536]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
				//gs_HCSR04_info[i].T1 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	4981      	ldr	r1, [pc, #516]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	330c      	adds	r3, #12
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HCSR04_TMR_IC_ISR+0xcc>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6a1a      	ldr	r2, [r3, #32]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 020a 	bic.w	r2, r2, #10
 8001888:	621a      	str	r2, [r3, #32]
 800188a:	e02f      	b.n	80018ec <HCSR04_TMR_IC_ISR+0x12c>
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	4977      	ldr	r1, [pc, #476]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	330c      	adds	r3, #12
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d108      	bne.n	80018b4 <HCSR04_TMR_IC_ISR+0xf4>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	e01b      	b.n	80018ec <HCSR04_TMR_IC_ISR+0x12c>
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	496d      	ldr	r1, [pc, #436]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	330c      	adds	r3, #12
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d108      	bne.n	80018dc <HCSR04_TMR_IC_ISR+0x11c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80018d8:	6213      	str	r3, [r2, #32]
 80018da:	e007      	b.n	80018ec <HCSR04_TMR_IC_ISR+0x12c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	495f      	ldr	r1, [pc, #380]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	330c      	adds	r3, #12
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d108      	bne.n	8001914 <HCSR04_TMR_IC_ISR+0x154>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6a1a      	ldr	r2, [r3, #32]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0202 	orr.w	r2, r2, #2
 8001910:	621a      	str	r2, [r3, #32]
 8001912:	e02f      	b.n	8001974 <HCSR04_TMR_IC_ISR+0x1b4>
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	4955      	ldr	r1, [pc, #340]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	330c      	adds	r3, #12
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b04      	cmp	r3, #4
 8001928:	d108      	bne.n	800193c <HCSR04_TMR_IC_ISR+0x17c>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	f043 0320 	orr.w	r3, r3, #32
 8001938:	6213      	str	r3, [r2, #32]
 800193a:	e01b      	b.n	8001974 <HCSR04_TMR_IC_ISR+0x1b4>
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	494b      	ldr	r1, [pc, #300]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	330c      	adds	r3, #12
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b08      	cmp	r3, #8
 8001950:	d108      	bne.n	8001964 <HCSR04_TMR_IC_ISR+0x1a4>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001960:	6213      	str	r3, [r2, #32]
 8001962:	e007      	b.n	8001974 <HCSR04_TMR_IC_ISR+0x1b4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001972:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	493e      	ldr	r1, [pc, #248]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3302      	adds	r3, #2
 8001984:	2200      	movs	r2, #0
 8001986:	801a      	strh	r2, [r3, #0]
 8001988:	e161      	b.n	8001c4e <HCSR04_TMR_IC_ISR+0x48e>
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	4938      	ldr	r1, [pc, #224]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	f040 8157 	bne.w	8001c4e <HCSR04_TMR_IC_ISR+0x48e>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	4932      	ldr	r1, [pc, #200]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	3308      	adds	r3, #8
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	492c      	ldr	r1, [pc, #176]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3308      	adds	r3, #8
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019cc:	4828      	ldr	r0, [pc, #160]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4403      	add	r3, r0
 80019d8:	3308      	adds	r3, #8
 80019da:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	4923      	ldr	r1, [pc, #140]	; (8001a6c <HCSR04_TMR_IC_ISR+0x2ac>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	330c      	adds	r3, #12
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	7bfc      	ldrb	r4, [r7, #15]
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f003 ff1e 	bl	8005834 <HAL_TIM_ReadCapturedValue>
 80019f8:	4602      	mov	r2, r0
 80019fa:	491d      	ldr	r1, [pc, #116]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 80019fc:	4623      	mov	r3, r4
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4423      	add	r3, r4
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3310      	adds	r3, #16
 8001a08:	601a      	str	r2, [r3, #0]
				//gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
				//gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
				if(gs_HCSR04_info[i].T2 > gs_HCSR04_info[i].T1)
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	4918      	ldr	r1, [pc, #96]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	3310      	adds	r3, #16
 8001a1a:	6819      	ldr	r1, [r3, #0]
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	4814      	ldr	r0, [pc, #80]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4403      	add	r3, r0
 8001a2a:	330c      	adds	r3, #12
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4299      	cmp	r1, r3
 8001a30:	d920      	bls.n	8001a74 <HCSR04_TMR_IC_ISR+0x2b4>
				{
					gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	490e      	ldr	r1, [pc, #56]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	3310      	adds	r3, #16
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	480a      	ldr	r0, [pc, #40]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4403      	add	r3, r0
 8001a52:	330c      	adds	r3, #12
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	1ac9      	subs	r1, r1, r3
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <HCSR04_TMR_IC_ISR+0x2b0>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4403      	add	r3, r0
 8001a66:	3314      	adds	r3, #20
 8001a68:	6019      	str	r1, [r3, #0]
 8001a6a:	e022      	b.n	8001ab2 <HCSR04_TMR_IC_ISR+0x2f2>
 8001a6c:	0800a370 	.word	0x0800a370
 8001a70:	200000a4 	.word	0x200000a4
				}
				else
				{
					gs_HCSR04_info[i].DIFF = (0xffff-gs_HCSR04_info[i].T1) + gs_HCSR04_info[i].T2;
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	497e      	ldr	r1, [pc, #504]	; (8001c70 <HCSR04_TMR_IC_ISR+0x4b0>)
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	3310      	adds	r3, #16
 8001a84:	6819      	ldr	r1, [r3, #0]
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	4879      	ldr	r0, [pc, #484]	; (8001c70 <HCSR04_TMR_IC_ISR+0x4b0>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4403      	add	r3, r0
 8001a94:	330c      	adds	r3, #12
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1acb      	subs	r3, r1, r3
 8001a9a:	7bf9      	ldrb	r1, [r7, #15]
 8001a9c:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
 8001aa0:	32ff      	adds	r2, #255	; 0xff
 8001aa2:	4873      	ldr	r0, [pc, #460]	; (8001c70 <HCSR04_TMR_IC_ISR+0x4b0>)
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4403      	add	r3, r0
 8001aae:	3314      	adds	r3, #20
 8001ab0:	601a      	str	r2, [r3, #0]
				}
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	496e      	ldr	r1, [pc, #440]	; (8001c70 <HCSR04_TMR_IC_ISR+0x4b0>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	3314      	adds	r3, #20
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fccd 	bl	8000464 <__aeabi_ui2d>
 8001aca:	a367      	add	r3, pc, #412	; (adr r3, 8001c68 <HCSR04_TMR_IC_ISR+0x4a8>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe fd42 	bl	8000558 <__aeabi_dmul>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4614      	mov	r4, r2
 8001ada:	461d      	mov	r5, r3
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	4965      	ldr	r1, [pc, #404]	; (8001c74 <HCSR04_TMR_IC_ISR+0x4b4>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3310      	adds	r3, #16
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3301      	adds	r3, #1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fcb4 	bl	8000464 <__aeabi_ui2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fe52 	bl	80007ac <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	7bfc      	ldrb	r4, [r7, #15]
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7fe ffdb 	bl	8000acc <__aeabi_d2f>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4955      	ldr	r1, [pc, #340]	; (8001c70 <HCSR04_TMR_IC_ISR+0x4b0>)
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4423      	add	r3, r4
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	3318      	adds	r3, #24
 8001b26:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	4951      	ldr	r1, [pc, #324]	; (8001c70 <HCSR04_TMR_IC_ISR+0x4b0>)
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	494c      	ldr	r1, [pc, #304]	; (8001c70 <HCSR04_TMR_IC_ISR+0x4b0>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3302      	adds	r3, #2
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	4948      	ldr	r1, [pc, #288]	; (8001c74 <HCSR04_TMR_IC_ISR+0x4b4>)
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	330c      	adds	r3, #12
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d108      	bne.n	8001b76 <HCSR04_TMR_IC_ISR+0x3b6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6a1a      	ldr	r2, [r3, #32]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020a 	bic.w	r2, r2, #10
 8001b72:	621a      	str	r2, [r3, #32]
 8001b74:	e02f      	b.n	8001bd6 <HCSR04_TMR_IC_ISR+0x416>
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	493e      	ldr	r1, [pc, #248]	; (8001c74 <HCSR04_TMR_IC_ISR+0x4b4>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	330c      	adds	r3, #12
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d108      	bne.n	8001b9e <HCSR04_TMR_IC_ISR+0x3de>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e01b      	b.n	8001bd6 <HCSR04_TMR_IC_ISR+0x416>
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	4934      	ldr	r1, [pc, #208]	; (8001c74 <HCSR04_TMR_IC_ISR+0x4b4>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	330c      	adds	r3, #12
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d108      	bne.n	8001bc6 <HCSR04_TMR_IC_ISR+0x406>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e007      	b.n	8001bd6 <HCSR04_TMR_IC_ISR+0x416>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	4926      	ldr	r1, [pc, #152]	; (8001c74 <HCSR04_TMR_IC_ISR+0x4b4>)
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	330c      	adds	r3, #12
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d106      	bne.n	8001bfa <HCSR04_TMR_IC_ISR+0x43a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6a12      	ldr	r2, [r2, #32]
 8001bf6:	621a      	str	r2, [r3, #32]
 8001bf8:	e029      	b.n	8001c4e <HCSR04_TMR_IC_ISR+0x48e>
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	491d      	ldr	r1, [pc, #116]	; (8001c74 <HCSR04_TMR_IC_ISR+0x4b4>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	330c      	adds	r3, #12
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d106      	bne.n	8001c1e <HCSR04_TMR_IC_ISR+0x45e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	6213      	str	r3, [r2, #32]
 8001c1c:	e017      	b.n	8001c4e <HCSR04_TMR_IC_ISR+0x48e>
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	4914      	ldr	r1, [pc, #80]	; (8001c74 <HCSR04_TMR_IC_ISR+0x4b4>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	330c      	adds	r3, #12
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d106      	bne.n	8001c42 <HCSR04_TMR_IC_ISR+0x482>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	e005      	b.n	8001c4e <HCSR04_TMR_IC_ISR+0x48e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	3301      	adds	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f67f adbd 	bls.w	80017d6 <HCSR04_TMR_IC_ISR+0x16>
				//HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
				//HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
			}
		}
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bdb0      	pop	{r4, r5, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	b020c49c 	.word	0xb020c49c
 8001c6c:	3f916872 	.word	0x3f916872
 8001c70:	200000a4 	.word	0x200000a4
 8001c74:	0800a370 	.word	0x0800a370

08001c78 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 8001c82:	79fa      	ldrb	r2, [r7, #7]
 8001c84:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <HCSR04_Read+0x30>)
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	3318      	adds	r3, #24
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	ee07 3a90 	vmov	s15, r3
}
 8001c98:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	200000a4 	.word	0x200000a4

08001cac <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	//__HAL_TIM_SET_COUNTER(gs_HCSR04_info[au8_HCSR04_Instance].HTIM, 0);
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 8001cb6:	79fa      	ldrb	r2, [r7, #7]
 8001cb8:	4917      	ldr	r1, [pc, #92]	; (8001d18 <HCSR04_Trigger+0x6c>)
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	79fa      	ldrb	r2, [r7, #7]
 8001cc8:	4913      	ldr	r1, [pc, #76]	; (8001d18 <HCSR04_Trigger+0x6c>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f002 fa80 	bl	80041e0 <HAL_GPIO_WritePin>
	//HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
	//HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
	//DWT_Delay_us(2);
	DWT_Delay_us(10);
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f7ff fb21 	bl	8001328 <DWT_Delay_us>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	490b      	ldr	r1, [pc, #44]	; (8001d18 <HCSR04_Trigger+0x6c>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	79fa      	ldrb	r2, [r7, #7]
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <HCSR04_Trigger+0x6c>)
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	3304      	adds	r3, #4
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f002 fa68 	bl	80041e0 <HAL_GPIO_WritePin>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	0800a370 	.word	0x0800a370

08001d1c <DWT_Delay_Init>:


#include "stm32f4xx_hal.h"
//uint32_t DWT_Delay_Init(void);
__STATIC_INLINE uint32_t DWT_Delay_Init(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <DWT_Delay_Init+0x58>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <DWT_Delay_Init+0x58>)
 8001d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <DWT_Delay_Init+0x58>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <DWT_Delay_Init+0x58>)
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <DWT_Delay_Init+0x5c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <DWT_Delay_Init+0x5c>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <DWT_Delay_Init+0x5c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <DWT_Delay_Init+0x5c>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <DWT_Delay_Init+0x5c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001d56:	bf00      	nop
    __ASM volatile ("NOP");
 8001d58:	bf00      	nop
    __ASM volatile ("NOP");
 8001d5a:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <DWT_Delay_Init+0x5c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001d68:	2301      	movs	r3, #1
    }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000edf0 	.word	0xe000edf0
 8001d78:	e0001000 	.word	0xe0001000

08001d7c <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8001d7c:	b5b0      	push	{r4, r5, r7, lr}
 8001d7e:	b0b2      	sub	sp, #200	; 0xc8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001dae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t ARR_Value = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    DWT_Delay_Init();
 8001dce:	f7ff ffa5 	bl	8001d1c <DWT_Delay_Init>

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOA)
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	4a95      	ldr	r2, [pc, #596]	; (800202c <SERVO_Init+0x2b0>)
 8001dd6:	015b      	lsls	r3, r3, #5
 8001dd8:	4413      	add	r3, r2
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a94      	ldr	r2, [pc, #592]	; (8002030 <SERVO_Init+0x2b4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d10e      	bne.n	8001e00 <SERVO_Init+0x84>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de6:	4b93      	ldr	r3, [pc, #588]	; (8002034 <SERVO_Init+0x2b8>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a92      	ldr	r2, [pc, #584]	; (8002034 <SERVO_Init+0x2b8>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b90      	ldr	r3, [pc, #576]	; (8002034 <SERVO_Init+0x2b8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfe:	e05a      	b.n	8001eb6 <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOB)
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	4a8a      	ldr	r2, [pc, #552]	; (800202c <SERVO_Init+0x2b0>)
 8001e04:	015b      	lsls	r3, r3, #5
 8001e06:	4413      	add	r3, r2
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a8b      	ldr	r2, [pc, #556]	; (8002038 <SERVO_Init+0x2bc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d10e      	bne.n	8001e2e <SERVO_Init+0xb2>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e14:	4b87      	ldr	r3, [pc, #540]	; (8002034 <SERVO_Init+0x2b8>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4a86      	ldr	r2, [pc, #536]	; (8002034 <SERVO_Init+0x2b8>)
 8001e1a:	f043 0302 	orr.w	r3, r3, #2
 8001e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e20:	4b84      	ldr	r3, [pc, #528]	; (8002034 <SERVO_Init+0x2b8>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	e043      	b.n	8001eb6 <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOC)
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	4a7e      	ldr	r2, [pc, #504]	; (800202c <SERVO_Init+0x2b0>)
 8001e32:	015b      	lsls	r3, r3, #5
 8001e34:	4413      	add	r3, r2
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a80      	ldr	r2, [pc, #512]	; (800203c <SERVO_Init+0x2c0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10e      	bne.n	8001e5c <SERVO_Init+0xe0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <SERVO_Init+0x2b8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a7b      	ldr	r2, [pc, #492]	; (8002034 <SERVO_Init+0x2b8>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b79      	ldr	r3, [pc, #484]	; (8002034 <SERVO_Init+0x2b8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	e02c      	b.n	8001eb6 <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOD)
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	4a73      	ldr	r2, [pc, #460]	; (800202c <SERVO_Init+0x2b0>)
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	4413      	add	r3, r2
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a76      	ldr	r2, [pc, #472]	; (8002040 <SERVO_Init+0x2c4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d10e      	bne.n	8001e8a <SERVO_Init+0x10e>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	4b70      	ldr	r3, [pc, #448]	; (8002034 <SERVO_Init+0x2b8>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4a6f      	ldr	r2, [pc, #444]	; (8002034 <SERVO_Init+0x2b8>)
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7c:	4b6d      	ldr	r3, [pc, #436]	; (8002034 <SERVO_Init+0x2b8>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	623b      	str	r3, [r7, #32]
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	e015      	b.n	8001eb6 <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOE)
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	4a67      	ldr	r2, [pc, #412]	; (800202c <SERVO_Init+0x2b0>)
 8001e8e:	015b      	lsls	r3, r3, #5
 8001e90:	4413      	add	r3, r2
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6b      	ldr	r2, [pc, #428]	; (8002044 <SERVO_Init+0x2c8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10d      	bne.n	8001eb6 <SERVO_Init+0x13a>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	4b65      	ldr	r3, [pc, #404]	; (8002034 <SERVO_Init+0x2b8>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a64      	ldr	r2, [pc, #400]	; (8002034 <SERVO_Init+0x2b8>)
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b62      	ldr	r3, [pc, #392]	; (8002034 <SERVO_Init+0x2b8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam[au16_SERVO_Instance].SERVO_PIN;
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	4a5c      	ldr	r2, [pc, #368]	; (800202c <SERVO_Init+0x2b0>)
 8001eba:	015b      	lsls	r3, r3, #5
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	//HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <SERVO_Init+0x2b0>)
 8001ed6:	015b      	lsls	r3, r3, #5
 8001ed8:	4413      	add	r3, r2
 8001eda:	3314      	adds	r3, #20
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fac0 	bl	8000464 <__aeabi_ui2d>
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b57      	ldr	r3, [pc, #348]	; (8002048 <SERVO_Init+0x2cc>)
 8001eea:	f7fe fc5f 	bl	80007ac <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fdc9 	bl	8000a8c <__aeabi_d2uiz>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	4a4a      	ldr	r2, [pc, #296]	; (800202c <SERVO_Init+0x2b0>)
 8001f04:	015b      	lsls	r3, r3, #5
 8001f06:	4413      	add	r3, r2
 8001f08:	3314      	adds	r3, #20
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe faa9 	bl	8000464 <__aeabi_ui2d>
 8001f12:	4604      	mov	r4, r0
 8001f14:	460d      	mov	r5, r1
 8001f16:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001f1a:	f7fe faa3 	bl	8000464 <__aeabi_ui2d>
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	4b4a      	ldr	r3, [pc, #296]	; (800204c <SERVO_Init+0x2d0>)
 8001f24:	f7fe f962 	bl	80001ec <__adddf3>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b46      	ldr	r3, [pc, #280]	; (8002050 <SERVO_Init+0x2d4>)
 8001f36:	f7fe fb0f 	bl	8000558 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4620      	mov	r0, r4
 8001f40:	4629      	mov	r1, r5
 8001f42:	f7fe fc33 	bl	80007ac <__aeabi_ddiv>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <SERVO_Init+0x2d0>)
 8001f54:	f7fe f948 	bl	80001e8 <__aeabi_dsub>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fd94 	bl	8000a8c <__aeabi_d2uiz>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	4a2f      	ldr	r2, [pc, #188]	; (800202c <SERVO_Init+0x2b0>)
 8001f6e:	015b      	lsls	r3, r3, #5
 8001f70:	4413      	add	r3, r2
 8001f72:	3308      	adds	r3, #8
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a37      	ldr	r2, [pc, #220]	; (8002054 <SERVO_Init+0x2d8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10e      	bne.n	8001f9a <SERVO_Init+0x21e>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <SERVO_Init+0x2b8>)
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	4a2b      	ldr	r2, [pc, #172]	; (8002034 <SERVO_Init+0x2b8>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <SERVO_Init+0x2b8>)
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	e079      	b.n	800208e <SERVO_Init+0x312>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	; (800202c <SERVO_Init+0x2b0>)
 8001f9e:	015b      	lsls	r3, r3, #5
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3308      	adds	r3, #8
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d10e      	bne.n	8001fca <SERVO_Init+0x24e>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <SERVO_Init+0x2b8>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <SERVO_Init+0x2b8>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <SERVO_Init+0x2b8>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	e061      	b.n	800208e <SERVO_Init+0x312>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	4a17      	ldr	r2, [pc, #92]	; (800202c <SERVO_Init+0x2b0>)
 8001fce:	015b      	lsls	r3, r3, #5
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a20      	ldr	r2, [pc, #128]	; (8002058 <SERVO_Init+0x2dc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d10e      	bne.n	8001ffa <SERVO_Init+0x27e>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <SERVO_Init+0x2b8>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	4a13      	ldr	r2, [pc, #76]	; (8002034 <SERVO_Init+0x2b8>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	6413      	str	r3, [r2, #64]	; 0x40
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <SERVO_Init+0x2b8>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	e049      	b.n	800208e <SERVO_Init+0x312>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	; (800202c <SERVO_Init+0x2b0>)
 8001ffe:	015b      	lsls	r3, r3, #5
 8002000:	4413      	add	r3, r2
 8002002:	3308      	adds	r3, #8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a15      	ldr	r2, [pc, #84]	; (800205c <SERVO_Init+0x2e0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d129      	bne.n	8002060 <SERVO_Init+0x2e4>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <SERVO_Init+0x2b8>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <SERVO_Init+0x2b8>)
 8002016:	f043 0304 	orr.w	r3, r3, #4
 800201a:	6413      	str	r3, [r2, #64]	; 0x40
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <SERVO_Init+0x2b8>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	e031      	b.n	800208e <SERVO_Init+0x312>
 800202a:	bf00      	nop
 800202c:	0800a398 	.word	0x0800a398
 8002030:	40020000 	.word	0x40020000
 8002034:	40023800 	.word	0x40023800
 8002038:	40020400 	.word	0x40020400
 800203c:	40020800 	.word	0x40020800
 8002040:	40020c00 	.word	0x40020c00
 8002044:	40021000 	.word	0x40021000
 8002048:	41490000 	.word	0x41490000
 800204c:	3ff00000 	.word	0x3ff00000
 8002050:	40490000 	.word	0x40490000
 8002054:	40010000 	.word	0x40010000
 8002058:	40000400 	.word	0x40000400
 800205c:	40000800 	.word	0x40000800
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM11)
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	4a64      	ldr	r2, [pc, #400]	; (80021f4 <SERVO_Init+0x478>)
 8002064:	015b      	lsls	r3, r3, #5
 8002066:	4413      	add	r3, r2
 8002068:	3308      	adds	r3, #8
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a62      	ldr	r2, [pc, #392]	; (80021f8 <SERVO_Init+0x47c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10d      	bne.n	800208e <SERVO_Init+0x312>
	{
		__HAL_RCC_TIM11_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	4b61      	ldr	r3, [pc, #388]	; (80021fc <SERVO_Init+0x480>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a60      	ldr	r2, [pc, #384]	; (80021fc <SERVO_Init+0x480>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b5e      	ldr	r3, [pc, #376]	; (80021fc <SERVO_Init+0x480>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <SERVO_Init+0x478>)
 8002092:	015b      	lsls	r3, r3, #5
 8002094:	4413      	add	r3, r2
 8002096:	3308      	adds	r3, #8
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.Prescaler = PSC_Value;
 800209c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.Period = ARR_Value;
 80020a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_TIM_Base_Init(&htim);
 80020b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fd67 	bl	8004b8c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 80020c6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80020ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 fae7 	bl	80056a4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 80020d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020da:	4618      	mov	r0, r3
 80020dc:	f002 fe08 	bl	8004cf0 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 80020ec:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80020f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 ffe8 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fc:	2360      	movs	r3, #96	; 0x60
 80020fe:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.Pulse = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	4a38      	ldr	r2, [pc, #224]	; (80021f4 <SERVO_Init+0x478>)
 8002114:	015b      	lsls	r3, r3, #5
 8002116:	4413      	add	r3, r2
 8002118:	3310      	adds	r3, #16
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002120:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002124:	4618      	mov	r0, r3
 8002126:	f003 f9fb 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 800212a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800212e:	f7fe f999 	bl	8000464 <__aeabi_ui2d>
 8002132:	4604      	mov	r4, r0
 8002134:	460d      	mov	r5, r1
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <SERVO_Init+0x478>)
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	4413      	add	r3, r2
 800213e:	3318      	adds	r3, #24
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f9b0 	bl	80004a8 <__aeabi_f2d>
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <SERVO_Init+0x484>)
 800214e:	f7fe fb2d 	bl	80007ac <__aeabi_ddiv>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4620      	mov	r0, r4
 8002158:	4629      	mov	r1, r5
 800215a:	f7fe f9fd 	bl	8000558 <__aeabi_dmul>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	88fc      	ldrh	r4, [r7, #6]
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fc90 	bl	8000a8c <__aeabi_d2uiz>
 800216c:	4603      	mov	r3, r0
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <SERVO_Init+0x488>)
 8002172:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 8002176:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800217a:	f7fe f973 	bl	8000464 <__aeabi_ui2d>
 800217e:	4604      	mov	r4, r0
 8002180:	460d      	mov	r5, r1
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <SERVO_Init+0x478>)
 8002186:	015b      	lsls	r3, r3, #5
 8002188:	4413      	add	r3, r2
 800218a:	331c      	adds	r3, #28
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f98a 	bl	80004a8 <__aeabi_f2d>
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <SERVO_Init+0x484>)
 800219a:	f7fe fb07 	bl	80007ac <__aeabi_ddiv>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4620      	mov	r0, r4
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe f9d7 	bl	8000558 <__aeabi_dmul>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	88fc      	ldrh	r4, [r7, #6]
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fc6a 	bl	8000a8c <__aeabi_d2uiz>
 80021b8:	4603      	mov	r3, r0
 80021ba:	b299      	uxth	r1, r3
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <SERVO_Init+0x488>)
 80021be:	00a3      	lsls	r3, r4, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	460a      	mov	r2, r1
 80021c4:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <SERVO_Init+0x478>)
 80021ca:	015b      	lsls	r3, r3, #5
 80021cc:	4413      	add	r3, r2
 80021ce:	3310      	adds	r3, #16
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fdd9 	bl	8004d90 <HAL_TIM_PWM_Start>

	SERVO_MoveTo(au16_SERVO_Instance, SERVO_ANGLE_CENTER);
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002208 <SERVO_Init+0x48c>
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 f811 	bl	800220c <SERVO_MoveTo>
}
 80021ea:	bf00      	nop
 80021ec:	37c8      	adds	r7, #200	; 0xc8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bdb0      	pop	{r4, r5, r7, pc}
 80021f2:	bf00      	nop
 80021f4:	0800a398 	.word	0x0800a398
 80021f8:	40014800 	.word	0x40014800
 80021fc:	40023800 	.word	0x40023800
 8002200:	40340000 	.word	0x40340000
 8002204:	200000ec 	.word	0x200000ec
 8002208:	42c80000 	.word	0x42c80000

0800220c <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 800220c:	b5b0      	push	{r4, r5, r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	ed87 0a00 	vstr	s0, [r7]
 8002218:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <SERVO_MoveTo+0x94>)
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	885b      	ldrh	r3, [r3, #2]
 8002228:	4619      	mov	r1, r3
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <SERVO_MoveTo+0x94>)
 800222e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002232:	1acb      	subs	r3, r1, r3
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800223c:	edd7 7a00 	vldr	s15, [r7]
 8002240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002244:	ee17 0a90 	vmov	r0, s15
 8002248:	f7fe f92e 	bl	80004a8 <__aeabi_f2d>
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <SERVO_MoveTo+0x98>)
 8002252:	f7fe faab 	bl	80007ac <__aeabi_ddiv>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4614      	mov	r4, r2
 800225c:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <SERVO_MoveTo+0x94>)
 8002262:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f90c 	bl	8000484 <__aeabi_i2d>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4620      	mov	r0, r4
 8002272:	4629      	mov	r1, r5
 8002274:	f7fd ffba 	bl	80001ec <__adddf3>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fc04 	bl	8000a8c <__aeabi_d2uiz>
 8002284:	4603      	mov	r3, r0
 8002286:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <SERVO_MoveTo+0x9c>)
 800228c:	015b      	lsls	r3, r3, #5
 800228e:	4413      	add	r3, r2
 8002290:	330c      	adds	r3, #12
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	89fa      	ldrh	r2, [r7, #14]
 8002296:	601a      	str	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bdb0      	pop	{r4, r5, r7, pc}
 80022a0:	200000ec 	.word	0x200000ec
 80022a4:	40668000 	.word	0x40668000
 80022a8:	0800a398 	.word	0x0800a398

080022ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of motorQueue */
  motorQueueHandle = osMessageQueueNew (16, sizeof(motorControl_t), &motorQueue_attributes);
 80022b0:	4a2c      	ldr	r2, [pc, #176]	; (8002364 <MX_FREERTOS_Init+0xb8>)
 80022b2:	2106      	movs	r1, #6
 80022b4:	2010      	movs	r0, #16
 80022b6:	f005 f95e 	bl	8007576 <osMessageQueueNew>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4a2a      	ldr	r2, [pc, #168]	; (8002368 <MX_FREERTOS_Init+0xbc>)
 80022be:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartmotorTask, NULL, &motorTask_attributes);
 80022c0:	4a2a      	ldr	r2, [pc, #168]	; (800236c <MX_FREERTOS_Init+0xc0>)
 80022c2:	2100      	movs	r1, #0
 80022c4:	482a      	ldr	r0, [pc, #168]	; (8002370 <MX_FREERTOS_Init+0xc4>)
 80022c6:	f005 f889 	bl	80073dc <osThreadNew>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a29      	ldr	r2, [pc, #164]	; (8002374 <MX_FREERTOS_Init+0xc8>)
 80022ce:	6013      	str	r3, [r2, #0]

  /* creation of ACCTask */
  ACCTaskHandle = osThreadNew(StartACCTask, NULL, &ACCTask_attributes);
 80022d0:	4a29      	ldr	r2, [pc, #164]	; (8002378 <MX_FREERTOS_Init+0xcc>)
 80022d2:	2100      	movs	r1, #0
 80022d4:	4829      	ldr	r0, [pc, #164]	; (800237c <MX_FREERTOS_Init+0xd0>)
 80022d6:	f005 f881 	bl	80073dc <osThreadNew>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a28      	ldr	r2, [pc, #160]	; (8002380 <MX_FREERTOS_Init+0xd4>)
 80022de:	6013      	str	r3, [r2, #0]

  /* creation of NormalModeTask */
  NormalModeTaskHandle = osThreadNew(StartNormalMode, NULL, &NormalModeTask_attributes);
 80022e0:	4a28      	ldr	r2, [pc, #160]	; (8002384 <MX_FREERTOS_Init+0xd8>)
 80022e2:	2100      	movs	r1, #0
 80022e4:	4828      	ldr	r0, [pc, #160]	; (8002388 <MX_FREERTOS_Init+0xdc>)
 80022e6:	f005 f879 	bl	80073dc <osThreadNew>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a27      	ldr	r2, [pc, #156]	; (800238c <MX_FREERTOS_Init+0xe0>)
 80022ee:	6013      	str	r3, [r2, #0]

  /* creation of GUI_UpdateTask */
  GUI_UpdateTaskHandle = osThreadNew(StartGUI_UpdateTask, NULL, &GUI_UpdateTask_attributes);
 80022f0:	4a27      	ldr	r2, [pc, #156]	; (8002390 <MX_FREERTOS_Init+0xe4>)
 80022f2:	2100      	movs	r1, #0
 80022f4:	4827      	ldr	r0, [pc, #156]	; (8002394 <MX_FREERTOS_Init+0xe8>)
 80022f6:	f005 f871 	bl	80073dc <osThreadNew>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <MX_FREERTOS_Init+0xec>)
 80022fe:	6013      	str	r3, [r2, #0]

  /* creation of SelfDrivingTask */
  SelfDrivingTaskHandle = osThreadNew(StartSelfDrivingTask, NULL, &SelfDrivingTask_attributes);
 8002300:	4a26      	ldr	r2, [pc, #152]	; (800239c <MX_FREERTOS_Init+0xf0>)
 8002302:	2100      	movs	r1, #0
 8002304:	4826      	ldr	r0, [pc, #152]	; (80023a0 <MX_FREERTOS_Init+0xf4>)
 8002306:	f005 f869 	bl	80073dc <osThreadNew>
 800230a:	4603      	mov	r3, r0
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <MX_FREERTOS_Init+0xf8>)
 800230e:	6013      	str	r3, [r2, #0]

  /* creation of LDW_TASK */
  LDW_TASKHandle = osThreadNew(LaneDepartureWarning, NULL, &LDW_TASK_attributes);
 8002310:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <MX_FREERTOS_Init+0xfc>)
 8002312:	2100      	movs	r1, #0
 8002314:	4825      	ldr	r0, [pc, #148]	; (80023ac <MX_FREERTOS_Init+0x100>)
 8002316:	f005 f861 	bl	80073dc <osThreadNew>
 800231a:	4603      	mov	r3, r0
 800231c:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <MX_FREERTOS_Init+0x104>)
 800231e:	6013      	str	r3, [r2, #0]

  /* creation of RainDetect_TASK */
  RainDetect_TASKHandle = osThreadNew(RainDetection, NULL, &RainDetect_TASK_attributes);
 8002320:	4a24      	ldr	r2, [pc, #144]	; (80023b4 <MX_FREERTOS_Init+0x108>)
 8002322:	2100      	movs	r1, #0
 8002324:	4824      	ldr	r0, [pc, #144]	; (80023b8 <MX_FREERTOS_Init+0x10c>)
 8002326:	f005 f859 	bl	80073dc <osThreadNew>
 800232a:	4603      	mov	r3, r0
 800232c:	4a23      	ldr	r2, [pc, #140]	; (80023bc <MX_FREERTOS_Init+0x110>)
 800232e:	6013      	str	r3, [r2, #0]

  /* creation of LKA_TASK */
  LKA_TASKHandle = osThreadNew(LaneKeepAssist, NULL, &LKA_TASK_attributes);
 8002330:	4a23      	ldr	r2, [pc, #140]	; (80023c0 <MX_FREERTOS_Init+0x114>)
 8002332:	2100      	movs	r1, #0
 8002334:	4823      	ldr	r0, [pc, #140]	; (80023c4 <MX_FREERTOS_Init+0x118>)
 8002336:	f005 f851 	bl	80073dc <osThreadNew>
 800233a:	4603      	mov	r3, r0
 800233c:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <MX_FREERTOS_Init+0x11c>)
 800233e:	6013      	str	r3, [r2, #0]

  /* creation of Blindspot */
  BlindspotHandle = osThreadNew(StartBlindspot, NULL, &Blindspot_attributes);
 8002340:	4a22      	ldr	r2, [pc, #136]	; (80023cc <MX_FREERTOS_Init+0x120>)
 8002342:	2100      	movs	r1, #0
 8002344:	4822      	ldr	r0, [pc, #136]	; (80023d0 <MX_FREERTOS_Init+0x124>)
 8002346:	f005 f849 	bl	80073dc <osThreadNew>
 800234a:	4603      	mov	r3, r0
 800234c:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <MX_FREERTOS_Init+0x128>)
 800234e:	6013      	str	r3, [r2, #0]

  /* creation of RearLightsTask */
  RearLightsTaskHandle = osThreadNew(StartRearLightsTask, NULL, &RearLightsTask_attributes);
 8002350:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <MX_FREERTOS_Init+0x12c>)
 8002352:	2100      	movs	r1, #0
 8002354:	4821      	ldr	r0, [pc, #132]	; (80023dc <MX_FREERTOS_Init+0x130>)
 8002356:	f005 f841 	bl	80073dc <osThreadNew>
 800235a:	4603      	mov	r3, r0
 800235c:	4a20      	ldr	r2, [pc, #128]	; (80023e0 <MX_FREERTOS_Init+0x134>)
 800235e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	0800a540 	.word	0x0800a540
 8002368:	2000012c 	.word	0x2000012c
 800236c:	0800a3d8 	.word	0x0800a3d8
 8002370:	080023e5 	.word	0x080023e5
 8002374:	20000104 	.word	0x20000104
 8002378:	0800a3fc 	.word	0x0800a3fc
 800237c:	08002545 	.word	0x08002545
 8002380:	20000108 	.word	0x20000108
 8002384:	0800a420 	.word	0x0800a420
 8002388:	080026f9 	.word	0x080026f9
 800238c:	2000010c 	.word	0x2000010c
 8002390:	0800a444 	.word	0x0800a444
 8002394:	080027b5 	.word	0x080027b5
 8002398:	20000110 	.word	0x20000110
 800239c:	0800a468 	.word	0x0800a468
 80023a0:	080028a5 	.word	0x080028a5
 80023a4:	20000114 	.word	0x20000114
 80023a8:	0800a48c 	.word	0x0800a48c
 80023ac:	08002a69 	.word	0x08002a69
 80023b0:	20000118 	.word	0x20000118
 80023b4:	0800a4b0 	.word	0x0800a4b0
 80023b8:	08002a7d 	.word	0x08002a7d
 80023bc:	2000011c 	.word	0x2000011c
 80023c0:	0800a4d4 	.word	0x0800a4d4
 80023c4:	08002ae9 	.word	0x08002ae9
 80023c8:	20000120 	.word	0x20000120
 80023cc:	0800a4f8 	.word	0x0800a4f8
 80023d0:	08002ba9 	.word	0x08002ba9
 80023d4:	20000124 	.word	0x20000124
 80023d8:	0800a51c 	.word	0x0800a51c
 80023dc:	08002c49 	.word	0x08002c49
 80023e0:	20000128 	.word	0x20000128

080023e4 <StartmotorTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartmotorTask */
void StartmotorTask(void *argument)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		motorControl_t motortask;
		uint8_t motortask_prio;
		if(osMessageQueueGet(motorQueueHandle, &motortask, &motortask_prio, 10) == osOK)
 80023ec:	4b51      	ldr	r3, [pc, #324]	; (8002534 <StartmotorTask+0x150>)
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	f107 021f 	add.w	r2, r7, #31
 80023f4:	f107 0120 	add.w	r1, r7, #32
 80023f8:	230a      	movs	r3, #10
 80023fa:	f005 f98f 	bl	800771c <osMessageQueueGet>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 8092 	bne.w	800252a <StartmotorTask+0x146>
			  Motor1_SetSpeed(70);
			  Motor2_SetSpeed(70);
			  HAL_Delay(5);
		  }*/
			double prev_speeds[2];
			Motors_GetSpeeds(&prev_speeds[0], &prev_speeds[1]);
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	f103 0208 	add.w	r2, r3, #8
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f001 fab7 	bl	8003988 <Motors_GetSpeeds>
			uint8_t flag = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(uint8_t i = 0; i < 2; i++)
 8002420:	2300      	movs	r3, #0
 8002422:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002426:	e048      	b.n	80024ba <StartmotorTask+0xd6>
			{
				if(motortask.motors[i].control == MOTOR_OFF)
 8002428:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	3328      	adds	r3, #40	; 0x28
 8002434:	443b      	add	r3, r7
 8002436:	3b06      	subs	r3, #6
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <StartmotorTask+0x62>
				{
					flag = 1;
 800243e:	2301      	movs	r3, #1
 8002440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002444:	e03d      	b.n	80024c2 <StartmotorTask+0xde>
				}
				if((motortask.motors[i].modify & MOTOR_MODIFY_SPEED))
 8002446:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	3328      	adds	r3, #40	; 0x28
 8002452:	443b      	add	r3, r7
 8002454:	3b08      	subs	r3, #8
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d027      	beq.n	80024b0 <StartmotorTask+0xcc>
				{
					if(motortask.motors[i].speed < prev_speeds[i] || motortask.motors[i].speed == 0)
 8002460:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	3328      	adds	r3, #40	; 0x28
 800246c:	443b      	add	r3, r7
 800246e:	3b07      	subs	r3, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f806 	bl	8000484 <__aeabi_i2d>
 8002478:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	3328      	adds	r3, #40	; 0x28
 8002480:	443b      	add	r3, r7
 8002482:	3b20      	subs	r3, #32
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fe fad8 	bl	8000a3c <__aeabi_dcmplt>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <StartmotorTask+0xc4>
 8002492:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	3328      	adds	r3, #40	; 0x28
 800249e:	443b      	add	r3, r7
 80024a0:	3b07      	subs	r3, #7
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <StartmotorTask+0xcc>
					{
						flag = 1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 80024ae:	e008      	b.n	80024c2 <StartmotorTask+0xde>
			for(uint8_t i = 0; i < 2; i++)
 80024b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024b4:	3301      	adds	r3, #1
 80024b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80024ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d9b2      	bls.n	8002428 <StartmotorTask+0x44>
					}
				}
			}
			if(flag)
 80024c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <StartmotorTask+0xee>
			{
				Red_Light_Flag = 1;
 80024ca:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <StartmotorTask+0x154>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	e002      	b.n	80024d8 <StartmotorTask+0xf4>
			}
			else
			{
				Red_Light_Flag = 0;
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <StartmotorTask+0x154>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
			}
			// LEFT
			if(motortask.motors[0].control == MOTOR_FWD && motortask.motors[1].control == MOTOR_REV)
 80024d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d10a      	bne.n	80024f6 <StartmotorTask+0x112>
 80024e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d106      	bne.n	80024f6 <StartmotorTask+0x112>
			{
				Left_Light_Flag = 1;
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <StartmotorTask+0x158>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
				Right_Light_Flag = 0;
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <StartmotorTask+0x15c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e014      	b.n	8002520 <StartmotorTask+0x13c>
			}
			else
			// RIGHT
			if(motortask.motors[0].control == MOTOR_REV && motortask.motors[1].control == MOTOR_FWD)
 80024f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d10a      	bne.n	8002514 <StartmotorTask+0x130>
 80024fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002502:	2b02      	cmp	r3, #2
 8002504:	d106      	bne.n	8002514 <StartmotorTask+0x130>
			{
				Left_Light_Flag = 0;
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <StartmotorTask+0x158>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
				Right_Light_Flag = 1;
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <StartmotorTask+0x15c>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e005      	b.n	8002520 <StartmotorTask+0x13c>
			}
			else // NEITHER
			{
				Left_Light_Flag = 0;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <StartmotorTask+0x158>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
				Right_Light_Flag = 0;
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <StartmotorTask+0x15c>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
			}
			DCMotor_handleRequest(&motortask);
 8002520:	f107 0320 	add.w	r3, r7, #32
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fe17 	bl	8001158 <DCMotor_handleRequest>
		}
		osDelay(10);
 800252a:	200a      	movs	r0, #10
 800252c:	f005 f808 	bl	8007540 <osDelay>
	{
 8002530:	e75c      	b.n	80023ec <StartmotorTask+0x8>
 8002532:	bf00      	nop
 8002534:	2000012c 	.word	0x2000012c
 8002538:	20000100 	.word	0x20000100
 800253c:	20000101 	.word	0x20000101
 8002540:	20000102 	.word	0x20000102

08002544 <StartACCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartACCTask */
void StartACCTask(void *argument)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	static double prev_distance;
	static double prev_distances[2];
	/* Infinite loop */
	for(;;)
	{
		if(Car_Current_Mode == ACC_MODE)
 800254c:	4b60      	ldr	r3, [pc, #384]	; (80026d0 <StartACCTask+0x18c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b09      	cmp	r3, #9
 8002552:	f040 80b7 	bne.w	80026c4 <StartACCTask+0x180>
		{
			Distance = HCSR04_Read(HCSR04_SENSOR1);
 8002556:	2000      	movs	r0, #0
 8002558:	f7ff fb8e 	bl	8001c78 <HCSR04_Read>
 800255c:	eef0 7a40 	vmov.f32	s15, s0
 8002560:	4b5c      	ldr	r3, [pc, #368]	; (80026d4 <StartACCTask+0x190>)
 8002562:	edc3 7a00 	vstr	s15, [r3]
			/*if(Distance == prev_distances[0] && Distance == prev_distances[1])
	  {
		  Distance = 9999.0;
	  }*/
			TRIG_Ticks++;
 8002566:	4b5c      	ldr	r3, [pc, #368]	; (80026d8 <StartACCTask+0x194>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b5a      	ldr	r3, [pc, #360]	; (80026d8 <StartACCTask+0x194>)
 8002570:	701a      	strb	r2, [r3, #0]
			if(TRIG_Ticks >= 5)
 8002572:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <StartACCTask+0x194>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b04      	cmp	r3, #4
 8002578:	d905      	bls.n	8002586 <StartACCTask+0x42>
			{
				HCSR04_Trigger(HCSR04_SENSOR1);
 800257a:	2000      	movs	r0, #0
 800257c:	f7ff fb96 	bl	8001cac <HCSR04_Trigger>
				TRIG_Ticks = 0;
 8002580:	4b55      	ldr	r3, [pc, #340]	; (80026d8 <StartACCTask+0x194>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
				break;
			}
			}
#endif
#if 1
			if(Distance == 9999.0) continue;
 8002586:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <StartACCTask+0x190>)
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80026dc <StartACCTask+0x198>
 8002590:	eef4 7a47 	vcmp.f32	s15, s14
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	f000 8098 	beq.w	80026cc <StartACCTask+0x188>
			if(Distance > DISTANCE_1)
 800259c:	4b4d      	ldr	r3, [pc, #308]	; (80026d4 <StartACCTask+0x190>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80026e0 <StartACCTask+0x19c>
 80025a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	dd03      	ble.n	80025b8 <StartACCTask+0x74>
			{
				DCMotor_moveForward(SPEED_1);
 80025b0:	2064      	movs	r0, #100	; 0x64
 80025b2:	f7fe fcb7 	bl	8000f24 <DCMotor_moveForward>
 80025b6:	e06b      	b.n	8002690 <StartACCTask+0x14c>
			}
			else if(Distance < DISTANCE_1 && Distance > DISTANCE_2)
 80025b8:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <StartACCTask+0x190>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80026e0 <StartACCTask+0x19c>
 80025c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ca:	d50d      	bpl.n	80025e8 <StartACCTask+0xa4>
 80025cc:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <StartACCTask+0x190>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80026e4 <StartACCTask+0x1a0>
 80025d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025de:	dd03      	ble.n	80025e8 <StartACCTask+0xa4>
			{
				DCMotor_moveForward(SPEED_2);
 80025e0:	2050      	movs	r0, #80	; 0x50
 80025e2:	f7fe fc9f 	bl	8000f24 <DCMotor_moveForward>
 80025e6:	e053      	b.n	8002690 <StartACCTask+0x14c>
			}
			else if(Distance < DISTANCE_2 && Distance > DISTANCE_3)
 80025e8:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <StartACCTask+0x190>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80026e4 <StartACCTask+0x1a0>
 80025f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fa:	d50d      	bpl.n	8002618 <StartACCTask+0xd4>
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <StartACCTask+0x190>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80026e8 <StartACCTask+0x1a4>
 8002606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	dd03      	ble.n	8002618 <StartACCTask+0xd4>
			{
				DCMotor_moveForward(SPEED_3);
 8002610:	203c      	movs	r0, #60	; 0x3c
 8002612:	f7fe fc87 	bl	8000f24 <DCMotor_moveForward>
 8002616:	e03b      	b.n	8002690 <StartACCTask+0x14c>
			}
			else if(Distance < DISTANCE_3 && Distance > DISTANCE_4)
 8002618:	4b2e      	ldr	r3, [pc, #184]	; (80026d4 <StartACCTask+0x190>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80026e8 <StartACCTask+0x1a4>
 8002622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	d50d      	bpl.n	8002648 <StartACCTask+0x104>
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <StartACCTask+0x190>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80026ec <StartACCTask+0x1a8>
 8002636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	dd03      	ble.n	8002648 <StartACCTask+0x104>
			{
				DCMotor_moveForward(SPEED_4);
 8002640:	2028      	movs	r0, #40	; 0x28
 8002642:	f7fe fc6f 	bl	8000f24 <DCMotor_moveForward>
 8002646:	e023      	b.n	8002690 <StartACCTask+0x14c>
			}
			else if(Distance < DISTANCE_4 && Distance > DISTANCE_5)
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <StartACCTask+0x190>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80026ec <StartACCTask+0x1a8>
 8002652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265a:	d50d      	bpl.n	8002678 <StartACCTask+0x134>
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <StartACCTask+0x190>)
 800265e:	edd3 7a00 	vldr	s15, [r3]
 8002662:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	dd03      	ble.n	8002678 <StartACCTask+0x134>
			{
				DCMotor_moveForward(SPEED_5);
 8002670:	2014      	movs	r0, #20
 8002672:	f7fe fc57 	bl	8000f24 <DCMotor_moveForward>
 8002676:	e00b      	b.n	8002690 <StartACCTask+0x14c>
			}
			else if(Distance < DISTANCE_5)
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <StartACCTask+0x190>)
 800267a:	edd3 7a00 	vldr	s15, [r3]
 800267e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268a:	d501      	bpl.n	8002690 <StartACCTask+0x14c>
			{
				DCMotor_stop();
 800268c:	f7fe fc12 	bl	8000eb4 <DCMotor_stop>
			}
#endif
			prev_distance = Distance;
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <StartACCTask+0x190>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd ff07 	bl	80004a8 <__aeabi_f2d>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4914      	ldr	r1, [pc, #80]	; (80026f0 <StartACCTask+0x1ac>)
 80026a0:	e9c1 2300 	strd	r2, r3, [r1]
			prev_distances[1] = prev_distances[0];
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <StartACCTask+0x1b0>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	4912      	ldr	r1, [pc, #72]	; (80026f4 <StartACCTask+0x1b0>)
 80026ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
			prev_distances[0] = Distance;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <StartACCTask+0x190>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd fef7 	bl	80004a8 <__aeabi_f2d>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	490d      	ldr	r1, [pc, #52]	; (80026f4 <StartACCTask+0x1b0>)
 80026c0:	e9c1 2300 	strd	r2, r3, [r1]
			// ACC END
#endif
		}
		osDelay(50);
 80026c4:	2032      	movs	r0, #50	; 0x32
 80026c6:	f004 ff3b 	bl	8007540 <osDelay>
 80026ca:	e73f      	b.n	800254c <StartACCTask+0x8>
			if(Distance == 9999.0) continue;
 80026cc:	bf00      	nop
		if(Car_Current_Mode == ACC_MODE)
 80026ce:	e73d      	b.n	800254c <StartACCTask+0x8>
 80026d0:	2000015c 	.word	0x2000015c
 80026d4:	200000f4 	.word	0x200000f4
 80026d8:	20000130 	.word	0x20000130
 80026dc:	461c3c00 	.word	0x461c3c00
 80026e0:	42a00000 	.word	0x42a00000
 80026e4:	42820000 	.word	0x42820000
 80026e8:	42480000 	.word	0x42480000
 80026ec:	420c0000 	.word	0x420c0000
 80026f0:	20000138 	.word	0x20000138
 80026f4:	20000140 	.word	0x20000140

080026f8 <StartNormalMode>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartNormalMode */
void StartNormalMode(void *argument)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNormalMode */
	/* Infinite loop */
	for(;;)
	{
		if(Car_Current_Mode == NORMAL_MODE)
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <StartNormalMode+0xac>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b06      	cmp	r3, #6
 8002706:	d149      	bne.n	800279c <StartNormalMode+0xa4>
		{
			if(Car_Current_Status == CAR_RUNNING)
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <StartNormalMode+0xb0>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d13d      	bne.n	800278c <StartNormalMode+0x94>
			{
				switch (Car_Current_Direction)
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <StartNormalMode+0xb4>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	3b01      	subs	r3, #1
 8002716:	2b03      	cmp	r3, #3
 8002718:	d83f      	bhi.n	800279a <StartNormalMode+0xa2>
 800271a:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <StartNormalMode+0x28>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	0800276b 	.word	0x0800276b
 8002724:	08002731 	.word	0x08002731
 8002728:	08002749 	.word	0x08002749
 800272c:	0800273d 	.word	0x0800273d
				{
				case MOVE_FORWARD:
					DCMotor_moveForward(Car_Current_Speed);
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <StartNormalMode+0xb8>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fbf5 	bl	8000f24 <DCMotor_moveForward>
					break;
 800273a:	e02f      	b.n	800279c <StartNormalMode+0xa4>

				case MOVE_BACKWORD:
					DCMotor_moveBackward(Car_Current_Speed);
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <StartNormalMode+0xb8>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fc31 	bl	8000fa8 <DCMotor_moveBackward>
					break;
 8002746:	e029      	b.n	800279c <StartNormalMode+0xa4>
				case MOVE_RIGHT:
					DCMotor_moveRight(Car_Current_Speed);
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <StartNormalMode+0xb8>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fc9b 	bl	8001088 <DCMotor_moveRight>
					osDelay(100);         // TODO :: TEST
 8002752:	2064      	movs	r0, #100	; 0x64
 8002754:	f004 fef4 	bl	8007540 <osDelay>
					DCMotor_moveForward(Car_Current_Speed);
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <StartNormalMode+0xb8>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fbe1 	bl	8000f24 <DCMotor_moveForward>
					Car_Current_Direction = MOVE_FORWARD;
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <StartNormalMode+0xb4>)
 8002764:	2202      	movs	r2, #2
 8002766:	701a      	strb	r2, [r3, #0]
					break;
 8002768:	e018      	b.n	800279c <StartNormalMode+0xa4>
				case MOVE_LEFT:
					DCMotor_moveLeft(Car_Current_Speed);
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <StartNormalMode+0xb8>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fc5c 	bl	800102c <DCMotor_moveLeft>
					osDelay(100);        // TODO :: TEST
 8002774:	2064      	movs	r0, #100	; 0x64
 8002776:	f004 fee3 	bl	8007540 <osDelay>
					DCMotor_moveForward(Car_Current_Speed);
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <StartNormalMode+0xb8>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fbd0 	bl	8000f24 <DCMotor_moveForward>
					Car_Current_Direction = MOVE_FORWARD;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <StartNormalMode+0xb4>)
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
					break;
 800278a:	e007      	b.n	800279c <StartNormalMode+0xa4>
				default:
					break;
				}
			}
			else if (Car_Current_Status == CAR_STOP)
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <StartNormalMode+0xb0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <StartNormalMode+0xa4>
			{
				DCMotor_stop();
 8002794:	f7fe fb8e 	bl	8000eb4 <DCMotor_stop>
 8002798:	e000      	b.n	800279c <StartNormalMode+0xa4>
					break;
 800279a:	bf00      	nop
			else
			{
				// RETURN ERROR //
			}
		}
		osDelay(10);
 800279c:	200a      	movs	r0, #10
 800279e:	f004 fecf 	bl	8007540 <osDelay>
		if(Car_Current_Mode == NORMAL_MODE)
 80027a2:	e7ad      	b.n	8002700 <StartNormalMode+0x8>
 80027a4:	2000015c 	.word	0x2000015c
 80027a8:	20000000 	.word	0x20000000
 80027ac:	2000015d 	.word	0x2000015d
 80027b0:	20000001 	.word	0x20000001

080027b4 <StartGUI_UpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGUI_UpdateTask */
void StartGUI_UpdateTask(void *argument)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGUI_UpdateTask */
	/* Infinite loop */
	for(;;)
	{
		switch(Car_Current_Mode)
 80027bc:	4b32      	ldr	r3, [pc, #200]	; (8002888 <StartGUI_UpdateTask+0xd4>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	d00d      	beq.n	80027e0 <StartGUI_UpdateTask+0x2c>
 80027c4:	2b09      	cmp	r3, #9
 80027c6:	dc19      	bgt.n	80027fc <StartGUI_UpdateTask+0x48>
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d002      	beq.n	80027d2 <StartGUI_UpdateTask+0x1e>
 80027cc:	2b07      	cmp	r3, #7
 80027ce:	d00e      	beq.n	80027ee <StartGUI_UpdateTask+0x3a>
 80027d0:	e014      	b.n	80027fc <StartGUI_UpdateTask+0x48>
		{
		case NORMAL_MODE:
			Buffer_GUI[MODE_DIG_1_IDx] = CHARACTER_ZERO;
 80027d2:	4b2e      	ldr	r3, [pc, #184]	; (800288c <StartGUI_UpdateTask+0xd8>)
 80027d4:	2230      	movs	r2, #48	; 0x30
 80027d6:	701a      	strb	r2, [r3, #0]
			Buffer_GUI[MODE_DIG_2_IDx] = CHARACTER_ZERO;
 80027d8:	4b2c      	ldr	r3, [pc, #176]	; (800288c <StartGUI_UpdateTask+0xd8>)
 80027da:	2230      	movs	r2, #48	; 0x30
 80027dc:	705a      	strb	r2, [r3, #1]
			break;
 80027de:	e00d      	b.n	80027fc <StartGUI_UpdateTask+0x48>
		case ACC_MODE:
			Buffer_GUI[MODE_DIG_1_IDx] = CHARACTER_ZERO;
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <StartGUI_UpdateTask+0xd8>)
 80027e2:	2230      	movs	r2, #48	; 0x30
 80027e4:	701a      	strb	r2, [r3, #0]
			Buffer_GUI[MODE_DIG_2_IDx] = CHARACTER_ONE;
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <StartGUI_UpdateTask+0xd8>)
 80027e8:	2231      	movs	r2, #49	; 0x31
 80027ea:	705a      	strb	r2, [r3, #1]
			break;
 80027ec:	e006      	b.n	80027fc <StartGUI_UpdateTask+0x48>
		case SELF_DRIVING_MODE:
			Buffer_GUI[MODE_DIG_1_IDx] = CHARACTER_ONE;
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <StartGUI_UpdateTask+0xd8>)
 80027f0:	2231      	movs	r2, #49	; 0x31
 80027f2:	701a      	strb	r2, [r3, #0]
			Buffer_GUI[MODE_DIG_2_IDx] = CHARACTER_ZERO;
 80027f4:	4b25      	ldr	r3, [pc, #148]	; (800288c <StartGUI_UpdateTask+0xd8>)
 80027f6:	2230      	movs	r2, #48	; 0x30
 80027f8:	705a      	strb	r2, [r3, #1]
			break;
 80027fa:	bf00      	nop
		}

		Buffer_GUI[SPEED_DIG_1_IDx] = ((Car_Current_Speed  * 2) / 100) + CHARACTER_ZERO;
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <StartGUI_UpdateTask+0xdc>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4a24      	ldr	r2, [pc, #144]	; (8002894 <StartGUI_UpdateTask+0xe0>)
 8002802:	fb82 1203 	smull	r1, r2, r2, r3
 8002806:	1112      	asrs	r2, r2, #4
 8002808:	17db      	asrs	r3, r3, #31
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	3330      	adds	r3, #48	; 0x30
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <StartGUI_UpdateTask+0xd8>)
 8002814:	715a      	strb	r2, [r3, #5]
		Buffer_GUI[SPEED_DIG_2_IDx] = (((Car_Current_Speed * 2) / 10) % 10) + CHARACTER_ZERO;
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <StartGUI_UpdateTask+0xdc>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <StartGUI_UpdateTask+0xe4>)
 800281c:	fb82 1203 	smull	r1, r2, r2, r3
 8002820:	1052      	asrs	r2, r2, #1
 8002822:	17db      	asrs	r3, r3, #31
 8002824:	1ad2      	subs	r2, r2, r3
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <StartGUI_UpdateTask+0xe4>)
 8002828:	fb83 1302 	smull	r1, r3, r3, r2
 800282c:	1099      	asrs	r1, r3, #2
 800282e:	17d3      	asrs	r3, r2, #31
 8002830:	1ac9      	subs	r1, r1, r3
 8002832:	460b      	mov	r3, r1
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	1ad1      	subs	r1, r2, r3
 800283c:	b2cb      	uxtb	r3, r1
 800283e:	3330      	adds	r3, #48	; 0x30
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <StartGUI_UpdateTask+0xd8>)
 8002844:	719a      	strb	r2, [r3, #6]
		Buffer_GUI[SPEED_DIG_3_IDx] = ((Car_Current_Speed  * 2) % 10) + CHARACTER_ZERO;
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <StartGUI_UpdateTask+0xdc>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	005a      	lsls	r2, r3, #1
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <StartGUI_UpdateTask+0xe4>)
 800284e:	fb83 1302 	smull	r1, r3, r3, r2
 8002852:	1099      	asrs	r1, r3, #2
 8002854:	17d3      	asrs	r3, r2, #31
 8002856:	1ac9      	subs	r1, r1, r3
 8002858:	460b      	mov	r3, r1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	1ad1      	subs	r1, r2, r3
 8002862:	b2cb      	uxtb	r3, r1
 8002864:	3330      	adds	r3, #48	; 0x30
 8002866:	b2da      	uxtb	r2, r3
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <StartGUI_UpdateTask+0xd8>)
 800286a:	71da      	strb	r2, [r3, #7]
		//if(GUI_TRANSMIT_INSTANT == 1 )
		{
			HAL_UART_Transmit(&huart2, Buffer_GUI, 14, 20);
 800286c:	2314      	movs	r3, #20
 800286e:	220e      	movs	r2, #14
 8002870:	4906      	ldr	r1, [pc, #24]	; (800288c <StartGUI_UpdateTask+0xd8>)
 8002872:	480a      	ldr	r0, [pc, #40]	; (800289c <StartGUI_UpdateTask+0xe8>)
 8002874:	f003 fcf9 	bl	800626a <HAL_UART_Transmit>
			/********* To Protect Global Variable "GUI_TRANSMIT_INSTANT" *********/
			//		HAL_NVIC_DisableIRQ(USART2_IRQn);
			GUI_TRANSMIT_INSTANT = 0 ;   //TODO:: Disable/Enable EXTI - IR
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <StartGUI_UpdateTask+0xec>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
			//		HAL_NVIC_EnableIRQ(USART2_IRQn);
		}
		osDelay(100);
 800287e:	2064      	movs	r0, #100	; 0x64
 8002880:	f004 fe5e 	bl	8007540 <osDelay>
		switch(Car_Current_Mode)
 8002884:	e79a      	b.n	80027bc <StartGUI_UpdateTask+0x8>
 8002886:	bf00      	nop
 8002888:	2000015c 	.word	0x2000015c
 800288c:	20000004 	.word	0x20000004
 8002890:	20000001 	.word	0x20000001
 8002894:	51eb851f 	.word	0x51eb851f
 8002898:	66666667 	.word	0x66666667
 800289c:	200002cc 	.word	0x200002cc
 80028a0:	2000015e 	.word	0x2000015e

080028a4 <StartSelfDrivingTask>:
 * @param argument: Not used
 * @\ None
 */
/* USER CODE END Header_StartSelfDrivingTask */
void StartSelfDrivingTask(void *argument)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSelfDrivingTask */

	static uint8_t TRIG_Ticks = 0;
	//static uint8_t mode_first_called = 0;
	//	Car_Current_Speed = 55;
	SERVO_MoveTo(SERVO_MOTOR1,100);
 80028ac:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8002a48 <StartSelfDrivingTask+0x1a4>
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7ff fcab 	bl	800220c <SERVO_MoveTo>
	/* Infinite loop */
	for(;;)
	{
		if(Car_Current_Mode == SELF_DRIVING_MODE)
 80028b6:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <StartSelfDrivingTask+0x1a8>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b07      	cmp	r3, #7
 80028bc:	f040 80bf 	bne.w	8002a3e <StartSelfDrivingTask+0x19a>
		{
			// Distance = HCSR04_Read(HCSR04_SENSOR1);
			HCSR04_Trigger(HCSR04_SENSOR1);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7ff f9f3 	bl	8001cac <HCSR04_Trigger>
			osDelay(100);
 80028c6:	2064      	movs	r0, #100	; 0x64
 80028c8:	f004 fe3a 	bl	8007540 <osDelay>
			Distance = HCSR04_Read(HCSR04_SENSOR1);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7ff f9d3 	bl	8001c78 <HCSR04_Read>
 80028d2:	eef0 7a40 	vmov.f32	s15, s0
 80028d6:	4b5e      	ldr	r3, [pc, #376]	; (8002a50 <StartSelfDrivingTask+0x1ac>)
 80028d8:	edc3 7a00 	vstr	s15, [r3]

			if (Distance <= SELF_DRIVING_CRITICAL_RANGE)
 80028dc:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <StartSelfDrivingTask+0x1ac>)
 80028de:	edd3 7a00 	vldr	s15, [r3]
 80028e2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80028e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ee:	f200 80a1 	bhi.w	8002a34 <StartSelfDrivingTask+0x190>
			{

				DCMotor_stop();
 80028f2:	f7fe fadf 	bl	8000eb4 <DCMotor_stop>
				osDelay(500);
 80028f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028fa:	f004 fe21 	bl	8007540 <osDelay>
				DCMotor_moveBackward(Car_self_Speed);
 80028fe:	205a      	movs	r0, #90	; 0x5a
 8002900:	f7fe fb52 	bl	8000fa8 <DCMotor_moveBackward>
				osDelay(500); /* 500 */
 8002904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002908:	f004 fe1a 	bl	8007540 <osDelay>
				DCMotor_stop();
 800290c:	f7fe fad2 	bl	8000eb4 <DCMotor_stop>
				osDelay(500); /* 15 */
 8002910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002914:	f004 fe14 	bl	8007540 <osDelay>
				/* Servo turn to Right (120) then read distance*/
				SERVO_MoveTo(SERVO_MOTOR1,45);
 8002918:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8002a54 <StartSelfDrivingTask+0x1b0>
 800291c:	2000      	movs	r0, #0
 800291e:	f7ff fc75 	bl	800220c <SERVO_MoveTo>
				osDelay(500);
 8002922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002926:	f004 fe0b 	bl	8007540 <osDelay>
				HCSR04_Trigger(HCSR04_SENSOR1);
 800292a:	2000      	movs	r0, #0
 800292c:	f7ff f9be 	bl	8001cac <HCSR04_Trigger>
				osDelay(500);
 8002930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002934:	f004 fe04 	bl	8007540 <osDelay>
				Distance_Right = HCSR04_Read(HCSR04_SENSOR1);
 8002938:	2000      	movs	r0, #0
 800293a:	f7ff f99d 	bl	8001c78 <HCSR04_Read>
 800293e:	eef0 7a40 	vmov.f32	s15, s0
 8002942:	4b45      	ldr	r3, [pc, #276]	; (8002a58 <StartSelfDrivingTask+0x1b4>)
 8002944:	edc3 7a00 	vstr	s15, [r3]
				SERVO_MoveTo(SERVO_MOTOR1,100);
 8002948:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8002a48 <StartSelfDrivingTask+0x1a4>
 800294c:	2000      	movs	r0, #0
 800294e:	f7ff fc5d 	bl	800220c <SERVO_MoveTo>
				osDelay(500);
 8002952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002956:	f004 fdf3 	bl	8007540 <osDelay>
				/* Servo turn to Left (60) then read distance*/
				SERVO_MoveTo(SERVO_MOTOR1,155);
 800295a:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8002a5c <StartSelfDrivingTask+0x1b8>
 800295e:	2000      	movs	r0, #0
 8002960:	f7ff fc54 	bl	800220c <SERVO_MoveTo>
				osDelay(500);
 8002964:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002968:	f004 fdea 	bl	8007540 <osDelay>
				HCSR04_Trigger(HCSR04_SENSOR1);
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff f99d 	bl	8001cac <HCSR04_Trigger>
				osDelay(500);
 8002972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002976:	f004 fde3 	bl	8007540 <osDelay>
				Distance_Left = HCSR04_Read(HCSR04_SENSOR1);
 800297a:	2000      	movs	r0, #0
 800297c:	f7ff f97c 	bl	8001c78 <HCSR04_Read>
 8002980:	eef0 7a40 	vmov.f32	s15, s0
 8002984:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <StartSelfDrivingTask+0x1bc>)
 8002986:	edc3 7a00 	vstr	s15, [r3]
				/* Servo turn to origin (115) then read distance*/
				SERVO_MoveTo(SERVO_MOTOR1,100);
 800298a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8002a48 <StartSelfDrivingTask+0x1a4>
 800298e:	2000      	movs	r0, #0
 8002990:	f7ff fc3c 	bl	800220c <SERVO_MoveTo>
						osDelay(5);
					}
				}
				else
				{
					DCMotor_moveRight(Car_self_Speed);
 8002994:	205a      	movs	r0, #90	; 0x5a
 8002996:	f7fe fb77 	bl	8001088 <DCMotor_moveRight>
					osDelay(600);
 800299a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800299e:	f004 fdcf 	bl	8007540 <osDelay>
					DCMotor_stop();
 80029a2:	f7fe fa87 	bl	8000eb4 <DCMotor_stop>
					osDelay(1400);
 80029a6:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80029aa:	f004 fdc9 	bl	8007540 <osDelay>
					DCMotor_moveForward(Car_self_Speed);
 80029ae:	205a      	movs	r0, #90	; 0x5a
 80029b0:	f7fe fab8 	bl	8000f24 <DCMotor_moveForward>
					osDelay(700);
 80029b4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80029b8:	f004 fdc2 	bl	8007540 <osDelay>
					DCMotor_stop();
 80029bc:	f7fe fa7a 	bl	8000eb4 <DCMotor_stop>
					osDelay(1200);
 80029c0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80029c4:	f004 fdbc 	bl	8007540 <osDelay>
					DCMotor_moveLeft(Car_self_Speed);
 80029c8:	205a      	movs	r0, #90	; 0x5a
 80029ca:	f7fe fb2f 	bl	800102c <DCMotor_moveLeft>
					osDelay(600);
 80029ce:	f44f 7016 	mov.w	r0, #600	; 0x258
 80029d2:	f004 fdb5 	bl	8007540 <osDelay>
					DCMotor_stop();
 80029d6:	f7fe fa6d 	bl	8000eb4 <DCMotor_stop>
					osDelay(1200);
 80029da:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80029de:	f004 fdaf 	bl	8007540 <osDelay>
					DCMotor_moveForward(Car_self_Speed); // parralle  to origin
 80029e2:	205a      	movs	r0, #90	; 0x5a
 80029e4:	f7fe fa9e 	bl	8000f24 <DCMotor_moveForward>

					osDelay(1000);
 80029e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ec:	f004 fda8 	bl	8007540 <osDelay>
					DCMotor_moveLeft(Car_self_Speed);
 80029f0:	205a      	movs	r0, #90	; 0x5a
 80029f2:	f7fe fb1b 	bl	800102c <DCMotor_moveLeft>
					osDelay(600);
 80029f6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80029fa:	f004 fda1 	bl	8007540 <osDelay>
					DCMotor_moveForward(Car_self_Speed);
 80029fe:	205a      	movs	r0, #90	; 0x5a
 8002a00:	f7fe fa90 	bl	8000f24 <DCMotor_moveForward>
					osDelay(600);
 8002a04:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002a08:	f004 fd9a 	bl	8007540 <osDelay>
					DCMotor_stop();
 8002a0c:	f7fe fa52 	bl	8000eb4 <DCMotor_stop>
					osDelay(2000);
 8002a10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a14:	f004 fd94 	bl	8007540 <osDelay>
					DCMotor_moveRight(Car_self_Speed);
 8002a18:	205a      	movs	r0, #90	; 0x5a
 8002a1a:	f7fe fb35 	bl	8001088 <DCMotor_moveRight>
					osDelay(600);
 8002a1e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002a22:	f004 fd8d 	bl	8007540 <osDelay>
					DCMotor_stop();
 8002a26:	f7fe fa45 	bl	8000eb4 <DCMotor_stop>
					osDelay(2000);
 8002a2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a2e:	f004 fd87 	bl	8007540 <osDelay>
 8002a32:	e004      	b.n	8002a3e <StartSelfDrivingTask+0x19a>

			}

			else
			{
				DCMotor_moveForward(Car_Current_Speed);  // Just keeping forward if there is no obstacles in front of the car
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <StartSelfDrivingTask+0x1c0>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fa73 	bl	8000f24 <DCMotor_moveForward>
			}
		}
		osDelay(100);
 8002a3e:	2064      	movs	r0, #100	; 0x64
 8002a40:	f004 fd7e 	bl	8007540 <osDelay>
		if(Car_Current_Mode == SELF_DRIVING_MODE)
 8002a44:	e737      	b.n	80028b6 <StartSelfDrivingTask+0x12>
 8002a46:	bf00      	nop
 8002a48:	42c80000 	.word	0x42c80000
 8002a4c:	2000015c 	.word	0x2000015c
 8002a50:	200000f4 	.word	0x200000f4
 8002a54:	42340000 	.word	0x42340000
 8002a58:	200000f8 	.word	0x200000f8
 8002a5c:	431b0000 	.word	0x431b0000
 8002a60:	200000fc 	.word	0x200000fc
 8002a64:	20000001 	.word	0x20000001

08002a68 <LaneDepartureWarning>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LaneDepartureWarning */
void LaneDepartureWarning(void *argument)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LaneDepartureWarning */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);continue; // temp disable
 8002a70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a74:	f004 fd64 	bl	8007540 <osDelay>
 8002a78:	e7fa      	b.n	8002a70 <LaneDepartureWarning+0x8>
	...

08002a7c <RainDetection>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_RainDetection */
void RainDetection(void *argument)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RainDetection */
	/* Infinite loop */
	/* Infinite loop */
	uint8_t RainDetectFlag = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		if(HAL_GPIO_ReadPin(RAIN_SENSOR_GPIO_Port, RAIN_SENSOR_Pin)==1)
 8002a88:	2104      	movs	r1, #4
 8002a8a:	4813      	ldr	r0, [pc, #76]	; (8002ad8 <RainDetection+0x5c>)
 8002a8c:	f001 fb90 	bl	80041b0 <HAL_GPIO_ReadPin>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d118      	bne.n	8002ac8 <RainDetection+0x4c>
		{
			//HAL_GPIO_WritePin(RAIN_LED_GPIO_Port, RAIN_LED_Pin, 1);
			Buffer_GUI[RAIN_DIG_1_IDx] = 1;
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <RainDetection+0x60>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	721a      	strb	r2, [r3, #8]
			if(RainDetectFlag==0)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <RainDetection+0x36>
			{
				//__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 100);
				SERVO_MoveTo(SERVO_MOTOR2,SERVO_ANGLE_FULL_LEFT);
 8002aa2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002ae0 <RainDetection+0x64>
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7ff fbb0 	bl	800220c <SERVO_MoveTo>
				RainDetectFlag=1;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e00d      	b.n	8002ace <RainDetection+0x52>
			}
			else if(RainDetectFlag==1)
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10a      	bne.n	8002ace <RainDetection+0x52>
			{
				//__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 2000);
				SERVO_MoveTo(SERVO_MOTOR2,SERVO_ANGLE_FULL_RIGHT);
 8002ab8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002ae4 <RainDetection+0x68>
 8002abc:	2001      	movs	r0, #1
 8002abe:	f7ff fba5 	bl	800220c <SERVO_MoveTo>
				RainDetectFlag=0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e002      	b.n	8002ace <RainDetection+0x52>
			}
		}
		else
		{
			//HAL_GPIO_WritePin(RAIN_LED_GPIO_Port, RAIN_LED_Pin, 0);
			Buffer_GUI[RAIN_DIG_1_IDx] = 0;
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <RainDetection+0x60>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	721a      	strb	r2, [r3, #8]
		}
		osDelay(500);
 8002ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ad2:	f004 fd35 	bl	8007540 <osDelay>
		if(HAL_GPIO_ReadPin(RAIN_SENSOR_GPIO_Port, RAIN_SENSOR_Pin)==1)
 8002ad6:	e7d7      	b.n	8002a88 <RainDetection+0xc>
 8002ad8:	40020400 	.word	0x40020400
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	43340000 	.word	0x43340000
 8002ae4:	00000000 	.word	0x00000000

08002ae8 <LaneKeepAssist>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LaneKeepAssist */
void LaneKeepAssist(void *argument)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		//		osDelay(1000);continue; // temp disable
		if(!Car_LaneAssist_Enable) {
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <LaneKeepAssist+0xac>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <LaneKeepAssist+0x16>
			//osDelay(1000);
			osThreadYield();
 8002af8:	f004 fd02 	bl	8007500 <osThreadYield>
			continue;
 8002afc:	e049      	b.n	8002b92 <LaneKeepAssist+0xaa>
		}
		if(LeftIrCounter>0)
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <LaneKeepAssist+0xb0>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d022      	beq.n	8002b4e <LaneKeepAssist+0x66>
		{
			for(uint8_t i=0;i<5;i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	e016      	b.n	8002b3c <LaneKeepAssist+0x54>
			{
				DCMotor_moveRight(70);
 8002b0e:	2046      	movs	r0, #70	; 0x46
 8002b10:	f7fe faba 	bl	8001088 <DCMotor_moveRight>
				osDelay(100);
 8002b14:	2064      	movs	r0, #100	; 0x64
 8002b16:	f004 fd13 	bl	8007540 <osDelay>
				DCMotor_moveForward(Car_Current_Speed);
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <LaneKeepAssist+0xb4>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fa00 	bl	8000f24 <DCMotor_moveForward>
				osDelay(100);
 8002b24:	2064      	movs	r0, #100	; 0x64
 8002b26:	f004 fd0b 	bl	8007540 <osDelay>
				DCMotor_stop();
 8002b2a:	f7fe f9c3 	bl	8000eb4 <DCMotor_stop>
				osDelay(1000);
 8002b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b32:	f004 fd05 	bl	8007540 <osDelay>
			for(uint8_t i=0;i<5;i++)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d9e5      	bls.n	8002b0e <LaneKeepAssist+0x26>

			}
			laneKeepFlag=1;
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <LaneKeepAssist+0xb8>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
			LeftIrCounter=0;
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <LaneKeepAssist+0xb0>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]

		}

		if(laneKeepFlag==1 && LeftIrCounter==0 && RightIrCounter==0 )
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <LaneKeepAssist+0xb8>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d11a      	bne.n	8002b8c <LaneKeepAssist+0xa4>
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <LaneKeepAssist+0xb0>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d115      	bne.n	8002b8c <LaneKeepAssist+0xa4>
 8002b60:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <LaneKeepAssist+0xbc>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d110      	bne.n	8002b8c <LaneKeepAssist+0xa4>
		{
			laneKeepFlag=0;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <LaneKeepAssist+0xb8>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
			DCMotor_moveLeft(70);
 8002b70:	2046      	movs	r0, #70	; 0x46
 8002b72:	f7fe fa5b 	bl	800102c <DCMotor_moveLeft>
			osDelay(100);
 8002b76:	2064      	movs	r0, #100	; 0x64
 8002b78:	f004 fce2 	bl	8007540 <osDelay>
			DCMotor_moveForward(Car_Current_Speed);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <LaneKeepAssist+0xb4>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe f9cf 	bl	8000f24 <DCMotor_moveForward>
			osDelay(100);
 8002b86:	2064      	movs	r0, #100	; 0x64
 8002b88:	f004 fcda 	bl	8007540 <osDelay>
		//			DCMotor_moveLeft(70);
		//			osDelay(100);
		//			DCMotor_moveForward(70);
		//			osDelay(100);
		//		}
		osDelay(100);
 8002b8c:	2064      	movs	r0, #100	; 0x64
 8002b8e:	f004 fcd7 	bl	8007540 <osDelay>
		if(!Car_LaneAssist_Enable) {
 8002b92:	e7ad      	b.n	8002af0 <LaneKeepAssist+0x8>
 8002b94:	2000015f 	.word	0x2000015f
 8002b98:	20000152 	.word	0x20000152
 8002b9c:	20000001 	.word	0x20000001
 8002ba0:	20000150 	.word	0x20000150
 8002ba4:	20000153 	.word	0x20000153

08002ba8 <StartBlindspot>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlindspot */
void StartBlindspot(void *argument)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlindspot */
	/* Infinite loop */
	for(;;)
	{
		static uint8_t TRIG_Ticks = 0;
		if(!Car_BlindSpot_Enable) {
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <StartBlindspot+0x90>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <StartBlindspot+0x16>
					//osDelay(1000);
					osThreadYield();
 8002bb8:	f004 fca2 	bl	8007500 <osThreadYield>
					continue;
 8002bbc:	e03b      	b.n	8002c36 <StartBlindspot+0x8e>
		}
		TRIG_Ticks++;
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <StartBlindspot+0x94>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <StartBlindspot+0x94>)
 8002bc8:	701a      	strb	r2, [r3, #0]
		if(TRIG_Ticks >= 1)
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <StartBlindspot+0x94>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <StartBlindspot+0x3c>
		{
			HCSR04_Trigger(HCSR04_SENSOR2);
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f7ff f86a 	bl	8001cac <HCSR04_Trigger>
			TRIG_Ticks = 0;
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <StartBlindspot+0x94>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
			osDelay(50);
 8002bde:	2032      	movs	r0, #50	; 0x32
 8002be0:	f004 fcae 	bl	8007540 <osDelay>
		}
		uint8_t blind_check = blindspot_isObjectDetected();
 8002be4:	f7fe f944 	bl	8000e70 <blindspot_isObjectDetected>
 8002be8:	4603      	mov	r3, r0
 8002bea:	73fb      	strb	r3, [r7, #15]
		if(blind_check == 1)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d111      	bne.n	8002c16 <StartBlindspot+0x6e>
		{
			// Toggle warning LED
			HAL_GPIO_WritePin(BLIND_LED_GPIO_Port, BLIND_LED_Pin, 1);
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf8:	4811      	ldr	r0, [pc, #68]	; (8002c40 <StartBlindspot+0x98>)
 8002bfa:	f001 faf1 	bl	80041e0 <HAL_GPIO_WritePin>
			Buffer_GUI[B_SPOT_DIG1_IDx] = Buffer_GUI[B_SPOT_DIG2_IDx] = 1;
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <StartBlindspot+0x9c>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	731a      	strb	r2, [r3, #12]
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <StartBlindspot+0x9c>)
 8002c06:	7b1a      	ldrb	r2, [r3, #12]
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <StartBlindspot+0x9c>)
 8002c0a:	72da      	strb	r2, [r3, #11]
			osDelay(1000);
 8002c0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c10:	f004 fc96 	bl	8007540 <osDelay>
 8002c14:	e7cc      	b.n	8002bb0 <StartBlindspot+0x8>
		}
		else
		{
			HAL_GPIO_WritePin(BLIND_LED_GPIO_Port, BLIND_LED_Pin, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c1c:	4808      	ldr	r0, [pc, #32]	; (8002c40 <StartBlindspot+0x98>)
 8002c1e:	f001 fadf 	bl	80041e0 <HAL_GPIO_WritePin>
			Buffer_GUI[B_SPOT_DIG1_IDx] = Buffer_GUI[B_SPOT_DIG2_IDx] = 0;
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <StartBlindspot+0x9c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	731a      	strb	r2, [r3, #12]
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <StartBlindspot+0x9c>)
 8002c2a:	7b1a      	ldrb	r2, [r3, #12]
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <StartBlindspot+0x9c>)
 8002c2e:	72da      	strb	r2, [r3, #11]
			osDelay(100);
 8002c30:	2064      	movs	r0, #100	; 0x64
 8002c32:	f004 fc85 	bl	8007540 <osDelay>
	{
 8002c36:	e7bb      	b.n	8002bb0 <StartBlindspot+0x8>
 8002c38:	20000160 	.word	0x20000160
 8002c3c:	20000151 	.word	0x20000151
 8002c40:	40020000 	.word	0x40020000
 8002c44:	20000004 	.word	0x20000004

08002c48 <StartRearLightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRearLightsTask */
void StartRearLightsTask(void *argument)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRearLightsTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(RED_LIGHT_GPIO_Port, RED_LIGHT_Pin, Red_Light_Flag);
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <StartRearLightsTask+0x90>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c5a:	4820      	ldr	r0, [pc, #128]	; (8002cdc <StartRearLightsTask+0x94>)
 8002c5c:	f001 fac0 	bl	80041e0 <HAL_GPIO_WritePin>
	  if(Left_Light_Flag)
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <StartRearLightsTask+0x98>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <StartRearLightsTask+0x42>
	  {
		  for(uint8_t t = 0; t < 16; t++) {
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	e00a      	b.n	8002c84 <StartRearLightsTask+0x3c>
		  HAL_GPIO_TogglePin(TURN_LEFT_LIGHT_GPIO_Port, TURN_LEFT_LIGHT_Pin);
 8002c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c72:	481a      	ldr	r0, [pc, #104]	; (8002cdc <StartRearLightsTask+0x94>)
 8002c74:	f001 facd 	bl	8004212 <HAL_GPIO_TogglePin>
		  osDelay(100);
 8002c78:	2064      	movs	r0, #100	; 0x64
 8002c7a:	f004 fc61 	bl	8007540 <osDelay>
		  for(uint8_t t = 0; t < 16; t++) {
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	3301      	adds	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	d9f1      	bls.n	8002c6e <StartRearLightsTask+0x26>
		  }
	  }
	  if(Right_Light_Flag)
 8002c8a:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <StartRearLightsTask+0x9c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d011      	beq.n	8002cb6 <StartRearLightsTask+0x6e>
	  {
		  for(uint8_t t = 0; t < 16; t++) {
 8002c92:	2300      	movs	r3, #0
 8002c94:	73bb      	strb	r3, [r7, #14]
 8002c96:	e00a      	b.n	8002cae <StartRearLightsTask+0x66>
		  HAL_GPIO_TogglePin(TURN_RIGHT_LIGHT_GPIO_Port, TURN_RIGHT_LIGHT_Pin);
 8002c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c9c:	480f      	ldr	r0, [pc, #60]	; (8002cdc <StartRearLightsTask+0x94>)
 8002c9e:	f001 fab8 	bl	8004212 <HAL_GPIO_TogglePin>
		  osDelay(100);
 8002ca2:	2064      	movs	r0, #100	; 0x64
 8002ca4:	f004 fc4c 	bl	8007540 <osDelay>
		  for(uint8_t t = 0; t < 16; t++) {
 8002ca8:	7bbb      	ldrb	r3, [r7, #14]
 8002caa:	3301      	adds	r3, #1
 8002cac:	73bb      	strb	r3, [r7, #14]
 8002cae:	7bbb      	ldrb	r3, [r7, #14]
 8002cb0:	2b0f      	cmp	r3, #15
 8002cb2:	d9f1      	bls.n	8002c98 <StartRearLightsTask+0x50>
 8002cb4:	e00b      	b.n	8002cce <StartRearLightsTask+0x86>
		  }
	  }
	  else
	  {
		  HAL_GPIO_WritePin(TURN_LEFT_LIGHT_GPIO_Port, TURN_LEFT_LIGHT_Pin, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cbc:	4807      	ldr	r0, [pc, #28]	; (8002cdc <StartRearLightsTask+0x94>)
 8002cbe:	f001 fa8f 	bl	80041e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TURN_RIGHT_LIGHT_GPIO_Port, TURN_RIGHT_LIGHT_Pin, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cc8:	4804      	ldr	r0, [pc, #16]	; (8002cdc <StartRearLightsTask+0x94>)
 8002cca:	f001 fa89 	bl	80041e0 <HAL_GPIO_WritePin>
	  }
    osDelay(100);
 8002cce:	2064      	movs	r0, #100	; 0x64
 8002cd0:	f004 fc36 	bl	8007540 <osDelay>
	  HAL_GPIO_WritePin(RED_LIGHT_GPIO_Port, RED_LIGHT_Pin, Red_Light_Flag);
 8002cd4:	e7bc      	b.n	8002c50 <StartRearLightsTask+0x8>
 8002cd6:	bf00      	nop
 8002cd8:	20000100 	.word	0x20000100
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	20000101 	.word	0x20000101
 8002ce4:	20000102 	.word	0x20000102

08002ce8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
 8002cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <MX_GPIO_Init+0x144>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a49      	ldr	r2, [pc, #292]	; (8002e2c <MX_GPIO_Init+0x144>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <MX_GPIO_Init+0x144>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <MX_GPIO_Init+0x144>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a42      	ldr	r2, [pc, #264]	; (8002e2c <MX_GPIO_Init+0x144>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <MX_GPIO_Init+0x144>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	4b3c      	ldr	r3, [pc, #240]	; (8002e2c <MX_GPIO_Init+0x144>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a3b      	ldr	r2, [pc, #236]	; (8002e2c <MX_GPIO_Init+0x144>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <MX_GPIO_Init+0x144>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TURN_LEFT_LIGHT_Pin|TURN_RIGHT_LIGHT_Pin|RED_LIGHT_Pin, GPIO_PIN_RESET);
 8002d52:	2200      	movs	r2, #0
 8002d54:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002d58:	4835      	ldr	r0, [pc, #212]	; (8002e30 <MX_GPIO_Init+0x148>)
 8002d5a:	f001 fa41 	bl	80041e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEFT_IR_LED_Pin|RIGHT_IR_LED_Pin|BLIND_LED_Pin|MOTOR_IN4_Pin, GPIO_PIN_RESET);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8002d64:	4833      	ldr	r0, [pc, #204]	; (8002e34 <MX_GPIO_Init+0x14c>)
 8002d66:	f001 fa3b 	bl	80041e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|MOTOR_IN3_Pin|MOTOR_IN2_Pin
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f246 01e0 	movw	r1, #24800	; 0x60e0
 8002d70:	4831      	ldr	r0, [pc, #196]	; (8002e38 <MX_GPIO_Init+0x150>)
 8002d72:	f001 fa35 	bl	80041e0 <HAL_GPIO_WritePin>
                          |MOTOR_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = TURN_LEFT_LIGHT_Pin|TURN_RIGHT_LIGHT_Pin|RED_LIGHT_Pin;
 8002d76:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4828      	ldr	r0, [pc, #160]	; (8002e30 <MX_GPIO_Init+0x148>)
 8002d90:	f001 f88a 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LEFT_IR_LED_Pin|RIGHT_IR_LED_Pin|BLIND_LED_Pin|MOTOR_IN4_Pin;
 8002d94:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8002d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	4619      	mov	r1, r3
 8002dac:	4821      	ldr	r0, [pc, #132]	; (8002e34 <MX_GPIO_Init+0x14c>)
 8002dae:	f001 f87b 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_IR_Pin|RIGHT_IR_Pin;
 8002db2:	2303      	movs	r3, #3
 8002db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002db6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc0:	f107 030c 	add.w	r3, r7, #12
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	481c      	ldr	r0, [pc, #112]	; (8002e38 <MX_GPIO_Init+0x150>)
 8002dc8:	f001 f86e 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RAIN_SENSOR_Pin;
 8002dcc:	2304      	movs	r3, #4
 8002dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RAIN_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8002dd8:	f107 030c 	add.w	r3, r7, #12
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4816      	ldr	r0, [pc, #88]	; (8002e38 <MX_GPIO_Init+0x150>)
 8002de0:	f001 f862 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|MOTOR_IN3_Pin|MOTOR_IN2_Pin
 8002de4:	f246 03e0 	movw	r3, #24800	; 0x60e0
 8002de8:	60fb      	str	r3, [r7, #12]
                          |MOTOR_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dea:	2301      	movs	r3, #1
 8002dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	f107 030c 	add.w	r3, r7, #12
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	480e      	ldr	r0, [pc, #56]	; (8002e38 <MX_GPIO_Init+0x150>)
 8002dfe:	f001 f853 	bl	8003ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2105      	movs	r1, #5
 8002e06:	2006      	movs	r0, #6
 8002e08:	f000 ff92 	bl	8003d30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e0c:	2006      	movs	r0, #6
 8002e0e:	f000 ffab 	bl	8003d68 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2105      	movs	r1, #5
 8002e16:	2007      	movs	r0, #7
 8002e18:	f000 ff8a 	bl	8003d30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002e1c:	2007      	movs	r0, #7
 8002e1e:	f000 ffa3 	bl	8003d68 <HAL_NVIC_EnableIRQ>

}
 8002e22:	bf00      	nop
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020800 	.word	0x40020800
 8002e34:	40020000 	.word	0x40020000
 8002e38:	40020400 	.word	0x40020400

08002e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e40:	f000 fe7c 	bl	8003b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e44:	f000 f83c 	bl	8002ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e48:	f7ff ff4e 	bl	8002ce8 <MX_GPIO_Init>
  MX_TIM5_Init();
 8002e4c:	f000 fb4e 	bl	80034ec <MX_TIM5_Init>
  MX_TIM2_Init();
 8002e50:	f000 fa5c 	bl	800330c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002e54:	f000 fdce 	bl	80039f4 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8002e58:	f000 fbac 	bl	80035b4 <MX_TIM11_Init>
  MX_TIM3_Init();
 8002e5c:	f000 fad0 	bl	8003400 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HCSR04_Init(HCSR04_SENSOR1, &htim2);
 8002e60:	4912      	ldr	r1, [pc, #72]	; (8002eac <main+0x70>)
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7fe fa84 	bl	8001370 <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR2, &htim2);
 8002e68:	4910      	ldr	r1, [pc, #64]	; (8002eac <main+0x70>)
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f7fe fa80 	bl	8001370 <HCSR04_Init>
  SERVO_Init(SERVO_MOTOR1);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fe ff83 	bl	8001d7c <SERVO_Init>
  SERVO_Init(SERVO_MOTOR2);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7fe ff80 	bl	8001d7c <SERVO_Init>

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	480c      	ldr	r0, [pc, #48]	; (8002eb0 <main+0x74>)
 8002e80:	f001 ff86 	bl	8004d90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002e84:	2104      	movs	r1, #4
 8002e86:	480a      	ldr	r0, [pc, #40]	; (8002eb0 <main+0x74>)
 8002e88:	f001 ff82 	bl	8004d90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4809      	ldr	r0, [pc, #36]	; (8002eb4 <main+0x78>)
 8002e90:	f001 ff7e 	bl	8004d90 <HAL_TIM_PWM_Start>


  /* UART Receive */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Buffer, 4);
 8002e94:	2204      	movs	r2, #4
 8002e96:	4908      	ldr	r1, [pc, #32]	; (8002eb8 <main+0x7c>)
 8002e98:	4808      	ldr	r0, [pc, #32]	; (8002ebc <main+0x80>)
 8002e9a:	f003 fa78 	bl	800638e <HAL_UART_Receive_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002e9e:	f004 fa53 	bl	8007348 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002ea2:	f7ff fa03 	bl	80022ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002ea6:	f004 fa73 	bl	8007390 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002eaa:	e7fe      	b.n	8002eaa <main+0x6e>
 8002eac:	200001ac 	.word	0x200001ac
 8002eb0:	2000023c 	.word	0x2000023c
 8002eb4:	200001f4 	.word	0x200001f4
 8002eb8:	20000158 	.word	0x20000158
 8002ebc:	200002cc 	.word	0x200002cc

08002ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b094      	sub	sp, #80	; 0x50
 8002ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ec6:	f107 0320 	add.w	r3, r7, #32
 8002eca:	2230      	movs	r2, #48	; 0x30
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f007 f958 	bl	800a184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <SystemClock_Config+0xb8>)
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <SystemClock_Config+0xb8>)
 8002eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <SystemClock_Config+0xb8>)
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f00:	2300      	movs	r3, #0
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <SystemClock_Config+0xbc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f0c:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <SystemClock_Config+0xbc>)
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <SystemClock_Config+0xbc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f20:	2302      	movs	r3, #2
 8002f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f24:	2301      	movs	r3, #1
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f28:	2310      	movs	r3, #16
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f30:	f107 0320 	add.w	r3, r7, #32
 8002f34:	4618      	mov	r0, r3
 8002f36:	f001 f99f 	bl	8004278 <HAL_RCC_OscConfig>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002f40:	f000 f8e6 	bl	8003110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f44:	230f      	movs	r3, #15
 8002f46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 fc02 	bl	8004768 <HAL_RCC_ClockConfig>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002f6a:	f000 f8d1 	bl	8003110 <Error_Handler>
  }
}
 8002f6e:	bf00      	nop
 8002f70:	3750      	adds	r7, #80	; 0x50
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40007000 	.word	0x40007000

08002f80 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_IC_ISR(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fe fc19 	bl	80017c0 <HCSR04_TMR_IC_ISR>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, Buffer_GUI, 14, 20);
	Buffer_ASCII_TO_INT = atoi((char*)Buffer);
 8002fa0:	4840      	ldr	r0, [pc, #256]	; (80030a4 <HAL_UART_RxCpltCallback+0x10c>)
 8002fa2:	f007 f8b3 	bl	800a10c <atoi>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8002fac:	801a      	strh	r2, [r3, #0]
	if((Buffer_ASCII_TO_INT == NORMAL_MODE)||(Buffer_ASCII_TO_INT == ACC_MODE) || (Buffer_ASCII_TO_INT == SELF_DRIVING_MODE))
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d007      	beq.n	8002fc6 <HAL_UART_RxCpltCallback+0x2e>
 8002fb6:	4b3c      	ldr	r3, [pc, #240]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	2b09      	cmp	r3, #9
 8002fbc:	d003      	beq.n	8002fc6 <HAL_UART_RxCpltCallback+0x2e>
 8002fbe:	4b3a      	ldr	r3, [pc, #232]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	2b07      	cmp	r3, #7
 8002fc4:	d108      	bne.n	8002fd8 <HAL_UART_RxCpltCallback+0x40>
	{
		Car_Current_Mode = Buffer_ASCII_TO_INT;
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_UART_RxCpltCallback+0x114>)
 8002fce:	701a      	strb	r2, [r3, #0]
		Car_Current_Status = CAR_RUNNING ;
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_UART_RxCpltCallback+0x118>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e05e      	b.n	8003096 <HAL_UART_RxCpltCallback+0xfe>

	}
	else if((Buffer_ASCII_TO_INT == MOVE_FORWARD)||(Buffer_ASCII_TO_INT == MOVE_BACKWORD)||(Buffer_ASCII_TO_INT == MOVE_RIGHT)||(Buffer_ASCII_TO_INT == MOVE_LEFT))
 8002fd8:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d00b      	beq.n	8002ff8 <HAL_UART_RxCpltCallback+0x60>
 8002fe0:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d007      	beq.n	8002ff8 <HAL_UART_RxCpltCallback+0x60>
 8002fe8:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d003      	beq.n	8002ff8 <HAL_UART_RxCpltCallback+0x60>
 8002ff0:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_UART_RxCpltCallback+0x6c>
	{
		Car_Current_Direction = Buffer_ASCII_TO_INT;
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <HAL_UART_RxCpltCallback+0x11c>)
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e048      	b.n	8003096 <HAL_UART_RxCpltCallback+0xfe>
	}
	else if (Buffer_ASCII_TO_INT == STOP_MOTOR)
 8003004:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	2b05      	cmp	r3, #5
 800300a:	d106      	bne.n	800301a <HAL_UART_RxCpltCallback+0x82>
	{
		Car_Current_Speed  = CAR_STOP ;
 800300c:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_UART_RxCpltCallback+0x120>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
		Car_Current_Status = CAR_STOP ;
 8003012:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <HAL_UART_RxCpltCallback+0x118>)
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e03d      	b.n	8003096 <HAL_UART_RxCpltCallback+0xfe>
	}
	else if (Buffer_ASCII_TO_INT == LANEASSIST_ON || Buffer_ASCII_TO_INT == LANEASSIST_OFF)
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	2b0a      	cmp	r3, #10
 8003020:	d003      	beq.n	800302a <HAL_UART_RxCpltCallback+0x92>
 8003022:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	2b0b      	cmp	r3, #11
 8003028:	d10a      	bne.n	8003040 <HAL_UART_RxCpltCallback+0xa8>
	{
		Car_LaneAssist_Enable = Buffer_ASCII_TO_INT == LANEASSIST_ON;
 800302a:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	2b0a      	cmp	r3, #10
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_UART_RxCpltCallback+0x124>)
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e02a      	b.n	8003096 <HAL_UART_RxCpltCallback+0xfe>
	}
	else if (Buffer_ASCII_TO_INT == BLINDSPOT_ON || Buffer_ASCII_TO_INT == BLINDSPOT_OFF)
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	2b0c      	cmp	r3, #12
 8003046:	d003      	beq.n	8003050 <HAL_UART_RxCpltCallback+0xb8>
 8003048:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	2b0d      	cmp	r3, #13
 800304e:	d10a      	bne.n	8003066 <HAL_UART_RxCpltCallback+0xce>
	{
		Car_LaneAssist_Enable = Buffer_ASCII_TO_INT == BLINDSPOT_ON;
 8003050:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	4b16      	ldr	r3, [pc, #88]	; (80030bc <HAL_UART_RxCpltCallback+0x124>)
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e017      	b.n	8003096 <HAL_UART_RxCpltCallback+0xfe>
	}
	else
	{
		if(Car_Current_Speed != (Buffer_ASCII_TO_INT - CAR_SPEED_OFFSET))
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <HAL_UART_RxCpltCallback+0x120>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003074:	429a      	cmp	r2, r3
 8003076:	d00b      	beq.n	8003090 <HAL_UART_RxCpltCallback+0xf8>
		{
			Car_Current_Speed = Buffer_ASCII_TO_INT - CAR_SPEED_OFFSET ;
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_UART_RxCpltCallback+0x110>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	3318      	adds	r3, #24
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_UART_RxCpltCallback+0x120>)
 8003084:	701a      	strb	r2, [r3, #0]
			DCMotor_changeSpeed(Car_Current_Speed);
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_UART_RxCpltCallback+0x120>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe f82a 	bl	80010e4 <DCMotor_changeSpeed>
		}
		Car_Current_Status = CAR_RUNNING ;
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <HAL_UART_RxCpltCallback+0x118>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]

	}
	GUI_TRANSMIT_INSTANT = 1 ;
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <HAL_UART_RxCpltCallback+0x128>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000158 	.word	0x20000158
 80030a8:	20000154 	.word	0x20000154
 80030ac:	2000015c 	.word	0x2000015c
 80030b0:	20000000 	.word	0x20000000
 80030b4:	2000015d 	.word	0x2000015d
 80030b8:	20000001 	.word	0x20000001
 80030bc:	2000015f 	.word	0x2000015f
 80030c0:	2000015e 	.word	0x2000015e

080030c4 <HAL_GPIO_EXTI_Callback>:
/* EXTI interrupt callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <HAL_GPIO_EXTI_Callback+0x14>
 80030d4:	2b02      	cmp	r3, #2
	case LEFT_IR_Pin:
		//LeftIrCounter++;
		break;
	case RIGHT_IR_Pin:
		//RightIrCounter++;
		break;
 80030d6:	e000      	b.n	80030da <HAL_GPIO_EXTI_Callback+0x16>
		break;
 80030d8:	bf00      	nop
	}
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a05      	ldr	r2, [pc, #20]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030fa:	f000 fd41 	bl	8003b80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HCSR04_TMR_OVF_ISR(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe fb22 	bl	8001748 <HCSR04_TMR_OVF_ISR>
  /* USER CODE END Callback 1 */
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40014400 	.word	0x40014400

08003110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003114:	b672      	cpsid	i
}
 8003116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003118:	e7fe      	b.n	8003118 <Error_Handler+0x8>
	...

0800311c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_MspInit+0x54>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a11      	ldr	r2, [pc, #68]	; (8003170 <HAL_MspInit+0x54>)
 800312c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <HAL_MspInit+0x54>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_MspInit+0x54>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <HAL_MspInit+0x54>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_MspInit+0x54>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	210f      	movs	r1, #15
 800315e:	f06f 0001 	mvn.w	r0, #1
 8003162:	f000 fde5 	bl	8003d30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800

08003174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <HAL_InitTick+0xd0>)
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	4a2d      	ldr	r2, [pc, #180]	; (8003244 <HAL_InitTick+0xd0>)
 800318e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003192:	6453      	str	r3, [r2, #68]	; 0x44
 8003194:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <HAL_InitTick+0xd0>)
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031a0:	f107 020c 	add.w	r2, r7, #12
 80031a4:	f107 0310 	add.w	r3, r7, #16
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 fcbc 	bl	8004b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80031b0:	f001 fca6 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 80031b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	4a23      	ldr	r2, [pc, #140]	; (8003248 <HAL_InitTick+0xd4>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0c9b      	lsrs	r3, r3, #18
 80031c0:	3b01      	subs	r3, #1
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_InitTick+0xd8>)
 80031c6:	4a22      	ldr	r2, [pc, #136]	; (8003250 <HAL_InitTick+0xdc>)
 80031c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_InitTick+0xd8>)
 80031cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031d0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80031d2:	4a1e      	ldr	r2, [pc, #120]	; (800324c <HAL_InitTick+0xd8>)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80031d8:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_InitTick+0xd8>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_InitTick+0xd8>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_InitTick+0xd8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80031ea:	4818      	ldr	r0, [pc, #96]	; (800324c <HAL_InitTick+0xd8>)
 80031ec:	f001 fcce 	bl	8004b8c <HAL_TIM_Base_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80031f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11b      	bne.n	8003236 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80031fe:	4813      	ldr	r0, [pc, #76]	; (800324c <HAL_InitTick+0xd8>)
 8003200:	f001 fd14 	bl	8004c2c <HAL_TIM_Base_Start_IT>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800320a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800320e:	2b00      	cmp	r3, #0
 8003210:	d111      	bne.n	8003236 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003212:	2019      	movs	r0, #25
 8003214:	f000 fda8 	bl	8003d68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b0f      	cmp	r3, #15
 800321c:	d808      	bhi.n	8003230 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800321e:	2200      	movs	r2, #0
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	2019      	movs	r0, #25
 8003224:	f000 fd84 	bl	8003d30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003228:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_InitTick+0xe0>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e002      	b.n	8003236 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800323a:	4618      	mov	r0, r3
 800323c:	3730      	adds	r7, #48	; 0x30
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	431bde83 	.word	0x431bde83
 800324c:	20000164 	.word	0x20000164
 8003250:	40014400 	.word	0x40014400
 8003254:	20000018 	.word	0x20000018

08003258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800325c:	e7fe      	b.n	800325c <NMI_Handler+0x4>

0800325e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003262:	e7fe      	b.n	8003262 <HardFault_Handler+0x4>

08003264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003268:	e7fe      	b.n	8003268 <MemManage_Handler+0x4>

0800326a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800326e:	e7fe      	b.n	800326e <BusFault_Handler+0x4>

08003270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003274:	e7fe      	b.n	8003274 <UsageFault_Handler+0x4>

08003276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_IR_Pin);
 8003288:	2001      	movs	r0, #1
 800328a:	f000 ffdd 	bl	8004248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}

08003292 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_IR_Pin);
 8003296:	2002      	movs	r0, #2
 8003298:	f000 ffd6 	bl	8004248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}

080032a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HCSR04_TMR_OVF_ISR(&htim1);
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80032a4:	4802      	ldr	r0, [pc, #8]	; (80032b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80032a6:	f001 ff97 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000164 	.word	0x20000164

080032b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <TIM2_IRQHandler+0x10>)
 80032ba:	f001 ff8d 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200001ac 	.word	0x200001ac

080032c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032cc:	4804      	ldr	r0, [pc, #16]	; (80032e0 <USART2_IRQHandler+0x18>)
 80032ce:	f003 f88f 	bl	80063f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Buffer, 4);
 80032d2:	2204      	movs	r2, #4
 80032d4:	4903      	ldr	r1, [pc, #12]	; (80032e4 <USART2_IRQHandler+0x1c>)
 80032d6:	4802      	ldr	r0, [pc, #8]	; (80032e0 <USART2_IRQHandler+0x18>)
 80032d8:	f003 f859 	bl	800638e <HAL_UART_Receive_IT>

  /* USER CODE END USART2_IRQn 1 */
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200002cc 	.word	0x200002cc
 80032e4:	20000158 	.word	0x20000158

080032e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <SystemInit+0x20>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	4a05      	ldr	r2, [pc, #20]	; (8003308 <SystemInit+0x20>)
 80032f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003312:	f107 0318 	add.w	r3, r7, #24
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800332a:	463b      	mov	r3, r7
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003336:	4b31      	ldr	r3, [pc, #196]	; (80033fc <MX_TIM2_Init+0xf0>)
 8003338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800333c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 800333e:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <MX_TIM2_Init+0xf0>)
 8003340:	220f      	movs	r2, #15
 8003342:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003344:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <MX_TIM2_Init+0xf0>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <MX_TIM2_Init+0xf0>)
 800334c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003350:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003352:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <MX_TIM2_Init+0xf0>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003358:	4b28      	ldr	r3, [pc, #160]	; (80033fc <MX_TIM2_Init+0xf0>)
 800335a:	2200      	movs	r2, #0
 800335c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800335e:	4827      	ldr	r0, [pc, #156]	; (80033fc <MX_TIM2_Init+0xf0>)
 8003360:	f001 fc14 	bl	8004b8c <HAL_TIM_Base_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800336a:	f7ff fed1 	bl	8003110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800336e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003372:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003374:	f107 0318 	add.w	r3, r7, #24
 8003378:	4619      	mov	r1, r3
 800337a:	4820      	ldr	r0, [pc, #128]	; (80033fc <MX_TIM2_Init+0xf0>)
 800337c:	f002 f992 	bl	80056a4 <HAL_TIM_ConfigClockSource>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003386:	f7ff fec3 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800338a:	481c      	ldr	r0, [pc, #112]	; (80033fc <MX_TIM2_Init+0xf0>)
 800338c:	f001 fdb0 	bl	8004ef0 <HAL_TIM_IC_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003396:	f7ff febb 	bl	8003110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033a2:	f107 0310 	add.w	r3, r7, #16
 80033a6:	4619      	mov	r1, r3
 80033a8:	4814      	ldr	r0, [pc, #80]	; (80033fc <MX_TIM2_Init+0xf0>)
 80033aa:	f002 fe8f 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80033b4:	f7ff feac 	bl	8003110 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80033b8:	2300      	movs	r3, #0
 80033ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80033bc:	2301      	movs	r3, #1
 80033be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80033c8:	463b      	mov	r3, r7
 80033ca:	2200      	movs	r2, #0
 80033cc:	4619      	mov	r1, r3
 80033ce:	480b      	ldr	r0, [pc, #44]	; (80033fc <MX_TIM2_Init+0xf0>)
 80033d0:	f002 f80a 	bl	80053e8 <HAL_TIM_IC_ConfigChannel>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80033da:	f7ff fe99 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80033de:	463b      	mov	r3, r7
 80033e0:	2208      	movs	r2, #8
 80033e2:	4619      	mov	r1, r3
 80033e4:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_TIM2_Init+0xf0>)
 80033e6:	f001 ffff 	bl	80053e8 <HAL_TIM_IC_ConfigChannel>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80033f0:	f7ff fe8e 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033f4:	bf00      	nop
 80033f6:	3728      	adds	r7, #40	; 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200001ac 	.word	0x200001ac

08003400 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08e      	sub	sp, #56	; 0x38
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003414:	f107 0320 	add.w	r3, r7, #32
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
 800342c:	615a      	str	r2, [r3, #20]
 800342e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003430:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <MX_TIM3_Init+0xe4>)
 8003432:	4a2d      	ldr	r2, [pc, #180]	; (80034e8 <MX_TIM3_Init+0xe8>)
 8003434:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8003436:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <MX_TIM3_Init+0xe4>)
 8003438:	220f      	movs	r2, #15
 800343a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800343c:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <MX_TIM3_Init+0xe4>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003442:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <MX_TIM3_Init+0xe4>)
 8003444:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003448:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344a:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <MX_TIM3_Init+0xe4>)
 800344c:	2200      	movs	r2, #0
 800344e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003450:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <MX_TIM3_Init+0xe4>)
 8003452:	2200      	movs	r2, #0
 8003454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003456:	4823      	ldr	r0, [pc, #140]	; (80034e4 <MX_TIM3_Init+0xe4>)
 8003458:	f001 fb98 	bl	8004b8c <HAL_TIM_Base_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003462:	f7ff fe55 	bl	8003110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800346c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003470:	4619      	mov	r1, r3
 8003472:	481c      	ldr	r0, [pc, #112]	; (80034e4 <MX_TIM3_Init+0xe4>)
 8003474:	f002 f916 	bl	80056a4 <HAL_TIM_ConfigClockSource>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800347e:	f7ff fe47 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003482:	4818      	ldr	r0, [pc, #96]	; (80034e4 <MX_TIM3_Init+0xe4>)
 8003484:	f001 fc34 	bl	8004cf0 <HAL_TIM_PWM_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800348e:	f7ff fe3f 	bl	8003110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800349a:	f107 0320 	add.w	r3, r7, #32
 800349e:	4619      	mov	r1, r3
 80034a0:	4810      	ldr	r0, [pc, #64]	; (80034e4 <MX_TIM3_Init+0xe4>)
 80034a2:	f002 fe13 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80034ac:	f7ff fe30 	bl	8003110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b0:	2360      	movs	r3, #96	; 0x60
 80034b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034c0:	1d3b      	adds	r3, r7, #4
 80034c2:	2200      	movs	r2, #0
 80034c4:	4619      	mov	r1, r3
 80034c6:	4807      	ldr	r0, [pc, #28]	; (80034e4 <MX_TIM3_Init+0xe4>)
 80034c8:	f002 f82a 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80034d2:	f7ff fe1d 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80034d6:	4803      	ldr	r0, [pc, #12]	; (80034e4 <MX_TIM3_Init+0xe4>)
 80034d8:	f000 f976 	bl	80037c8 <HAL_TIM_MspPostInit>

}
 80034dc:	bf00      	nop
 80034de:	3738      	adds	r7, #56	; 0x38
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200001f4 	.word	0x200001f4
 80034e8:	40000400 	.word	0x40000400

080034ec <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	; 0x28
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f2:	f107 0320 	add.w	r3, r7, #32
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	60da      	str	r2, [r3, #12]
 8003508:	611a      	str	r2, [r3, #16]
 800350a:	615a      	str	r2, [r3, #20]
 800350c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800350e:	4b27      	ldr	r3, [pc, #156]	; (80035ac <MX_TIM5_Init+0xc0>)
 8003510:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <MX_TIM5_Init+0xc4>)
 8003512:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <MX_TIM5_Init+0xc0>)
 8003516:	220f      	movs	r2, #15
 8003518:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <MX_TIM5_Init+0xc0>)
 800351c:	2200      	movs	r2, #0
 800351e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8003520:	4b22      	ldr	r3, [pc, #136]	; (80035ac <MX_TIM5_Init+0xc0>)
 8003522:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003526:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <MX_TIM5_Init+0xc0>)
 800352a:	2200      	movs	r2, #0
 800352c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800352e:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <MX_TIM5_Init+0xc0>)
 8003530:	2200      	movs	r2, #0
 8003532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003534:	481d      	ldr	r0, [pc, #116]	; (80035ac <MX_TIM5_Init+0xc0>)
 8003536:	f001 fbdb 	bl	8004cf0 <HAL_TIM_PWM_Init>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8003540:	f7ff fde6 	bl	8003110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003544:	2300      	movs	r3, #0
 8003546:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800354c:	f107 0320 	add.w	r3, r7, #32
 8003550:	4619      	mov	r1, r3
 8003552:	4816      	ldr	r0, [pc, #88]	; (80035ac <MX_TIM5_Init+0xc0>)
 8003554:	f002 fdba 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800355e:	f7ff fdd7 	bl	8003110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003562:	2360      	movs	r3, #96	; 0x60
 8003564:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2200      	movs	r2, #0
 8003576:	4619      	mov	r1, r3
 8003578:	480c      	ldr	r0, [pc, #48]	; (80035ac <MX_TIM5_Init+0xc0>)
 800357a:	f001 ffd1 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003584:	f7ff fdc4 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	2204      	movs	r2, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4807      	ldr	r0, [pc, #28]	; (80035ac <MX_TIM5_Init+0xc0>)
 8003590:	f001 ffc6 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800359a:	f7ff fdb9 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800359e:	4803      	ldr	r0, [pc, #12]	; (80035ac <MX_TIM5_Init+0xc0>)
 80035a0:	f000 f912 	bl	80037c8 <HAL_TIM_MspPostInit>

}
 80035a4:	bf00      	nop
 80035a6:	3728      	adds	r7, #40	; 0x28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	2000023c 	.word	0x2000023c
 80035b0:	40000c00 	.word	0x40000c00

080035b4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
 80035c8:	615a      	str	r2, [r3, #20]
 80035ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80035cc:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <MX_TIM11_Init+0x94>)
 80035ce:	4a1f      	ldr	r2, [pc, #124]	; (800364c <MX_TIM11_Init+0x98>)
 80035d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16-1;
 80035d2:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <MX_TIM11_Init+0x94>)
 80035d4:	220f      	movs	r2, #15
 80035d6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <MX_TIM11_Init+0x94>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 20000-1;
 80035de:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <MX_TIM11_Init+0x94>)
 80035e0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80035e4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <MX_TIM11_Init+0x94>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ec:	4b16      	ldr	r3, [pc, #88]	; (8003648 <MX_TIM11_Init+0x94>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80035f2:	4815      	ldr	r0, [pc, #84]	; (8003648 <MX_TIM11_Init+0x94>)
 80035f4:	f001 faca 	bl	8004b8c <HAL_TIM_Base_Init>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80035fe:	f7ff fd87 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003602:	4811      	ldr	r0, [pc, #68]	; (8003648 <MX_TIM11_Init+0x94>)
 8003604:	f001 fb74 	bl	8004cf0 <HAL_TIM_PWM_Init>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800360e:	f7ff fd7f 	bl	8003110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003612:	2360      	movs	r3, #96	; 0x60
 8003614:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	2200      	movs	r2, #0
 8003626:	4619      	mov	r1, r3
 8003628:	4807      	ldr	r0, [pc, #28]	; (8003648 <MX_TIM11_Init+0x94>)
 800362a:	f001 ff79 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003634:	f7ff fd6c 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8003638:	4803      	ldr	r0, [pc, #12]	; (8003648 <MX_TIM11_Init+0x94>)
 800363a:	f000 f8c5 	bl	80037c8 <HAL_TIM_MspPostInit>

}
 800363e:	bf00      	nop
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000284 	.word	0x20000284
 800364c:	40014800 	.word	0x40014800

08003650 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08c      	sub	sp, #48	; 0x30
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	f107 031c 	add.w	r3, r7, #28
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d153      	bne.n	800371a <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	4a3d      	ldr	r2, [pc, #244]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6413      	str	r3, [r2, #64]	; 0x40
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	4a36      	ldr	r2, [pc, #216]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6313      	str	r3, [r2, #48]	; 0x30
 800369e:	4b34      	ldr	r3, [pc, #208]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	4b30      	ldr	r3, [pc, #192]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	4a2f      	ldr	r2, [pc, #188]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ba:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80036c6:	2320      	movs	r3, #32
 80036c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d2:	2300      	movs	r3, #0
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036d6:	2301      	movs	r3, #1
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 031c 	add.w	r3, r7, #28
 80036de:	4619      	mov	r1, r3
 80036e0:	4824      	ldr	r0, [pc, #144]	; (8003774 <HAL_TIM_Base_MspInit+0x124>)
 80036e2:	f000 fbe1 	bl	8003ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036f8:	2301      	movs	r3, #1
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fc:	f107 031c 	add.w	r3, r7, #28
 8003700:	4619      	mov	r1, r3
 8003702:	481d      	ldr	r0, [pc, #116]	; (8003778 <HAL_TIM_Base_MspInit+0x128>)
 8003704:	f000 fbd0 	bl	8003ea8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003708:	2200      	movs	r2, #0
 800370a:	2105      	movs	r1, #5
 800370c:	201c      	movs	r0, #28
 800370e:	f000 fb0f 	bl	8003d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003712:	201c      	movs	r0, #28
 8003714:	f000 fb28 	bl	8003d68 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003718:	e026      	b.n	8003768 <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM3)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a17      	ldr	r2, [pc, #92]	; (800377c <HAL_TIM_Base_MspInit+0x12c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d10e      	bne.n	8003742 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	4a10      	ldr	r2, [pc, #64]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 800372e:	f043 0302 	orr.w	r3, r3, #2
 8003732:	6413      	str	r3, [r2, #64]	; 0x40
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
}
 8003740:	e012      	b.n	8003768 <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM11)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a0e      	ldr	r2, [pc, #56]	; (8003780 <HAL_TIM_Base_MspInit+0x130>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d10d      	bne.n	8003768 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800374c:	2300      	movs	r3, #0
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	4b07      	ldr	r3, [pc, #28]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	4a06      	ldr	r2, [pc, #24]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 8003756:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800375a:	6453      	str	r3, [r2, #68]	; 0x44
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <HAL_TIM_Base_MspInit+0x120>)
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
}
 8003768:	bf00      	nop
 800376a:	3730      	adds	r7, #48	; 0x30
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	40020000 	.word	0x40020000
 8003778:	40020400 	.word	0x40020400
 800377c:	40000400 	.word	0x40000400
 8003780:	40014800 	.word	0x40014800

08003784 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10d      	bne.n	80037b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_TIM_PWM_MspInit+0x40>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4a09      	ldr	r2, [pc, #36]	; (80037c4 <HAL_TIM_PWM_MspInit+0x40>)
 80037a0:	f043 0308 	orr.w	r3, r3, #8
 80037a4:	6413      	str	r3, [r2, #64]	; 0x40
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_TIM_PWM_MspInit+0x40>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40000c00 	.word	0x40000c00
 80037c4:	40023800 	.word	0x40023800

080037c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a36      	ldr	r2, [pc, #216]	; (80038c0 <HAL_TIM_MspPostInit+0xf8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d11e      	bne.n	8003828 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	4b35      	ldr	r3, [pc, #212]	; (80038c4 <HAL_TIM_MspPostInit+0xfc>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a34      	ldr	r2, [pc, #208]	; (80038c4 <HAL_TIM_MspPostInit+0xfc>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6313      	str	r3, [r2, #48]	; 0x30
 80037fa:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <HAL_TIM_MspPostInit+0xfc>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003806:	2340      	movs	r3, #64	; 0x40
 8003808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380a:	2302      	movs	r3, #2
 800380c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003812:	2300      	movs	r3, #0
 8003814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003816:	2302      	movs	r3, #2
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381a:	f107 0314 	add.w	r3, r7, #20
 800381e:	4619      	mov	r1, r3
 8003820:	4829      	ldr	r0, [pc, #164]	; (80038c8 <HAL_TIM_MspPostInit+0x100>)
 8003822:	f000 fb41 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003826:	e047      	b.n	80038b8 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a27      	ldr	r2, [pc, #156]	; (80038cc <HAL_TIM_MspPostInit+0x104>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d11e      	bne.n	8003870 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <HAL_TIM_MspPostInit+0xfc>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <HAL_TIM_MspPostInit+0xfc>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_TIM_MspPostInit+0xfc>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_EN1_Pin|MOTOR_EN2_Pin;
 800384e:	2303      	movs	r3, #3
 8003850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800385e:	2302      	movs	r3, #2
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	4817      	ldr	r0, [pc, #92]	; (80038c8 <HAL_TIM_MspPostInit+0x100>)
 800386a:	f000 fb1d 	bl	8003ea8 <HAL_GPIO_Init>
}
 800386e:	e023      	b.n	80038b8 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM11)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <HAL_TIM_MspPostInit+0x108>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d11e      	bne.n	80038b8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_TIM_MspPostInit+0xfc>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <HAL_TIM_MspPostInit+0xfc>)
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	6313      	str	r3, [r2, #48]	; 0x30
 800388a:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <HAL_TIM_MspPostInit+0xfc>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 8003896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800389a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a4:	2300      	movs	r3, #0
 80038a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80038a8:	2303      	movs	r3, #3
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4619      	mov	r1, r3
 80038b2:	4808      	ldr	r0, [pc, #32]	; (80038d4 <HAL_TIM_MspPostInit+0x10c>)
 80038b4:	f000 faf8 	bl	8003ea8 <HAL_GPIO_Init>
}
 80038b8:	bf00      	nop
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40000c00 	.word	0x40000c00
 80038d0:	40014800 	.word	0x40014800
 80038d4:	40020400 	.word	0x40020400

080038d8 <Motor1_SetSpeed>:
  }
}

/* USER CODE BEGIN 1 */
void Motor1_SetSpeed(double speed)
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	ed87 0b00 	vstr	d0, [r7]
	    Error_Handler();
	  }
	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
	  */
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ((speed/100.0) * (20000-1)));
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <Motor1_SetSpeed+0x50>)
 80038e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038ec:	f7fc ff5e 	bl	80007ac <__aeabi_ddiv>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	a309      	add	r3, pc, #36	; (adr r3, 8003920 <Motor1_SetSpeed+0x48>)
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f7fc fe2b 	bl	8000558 <__aeabi_dmul>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4909      	ldr	r1, [pc, #36]	; (800392c <Motor1_SetSpeed+0x54>)
 8003908:	680c      	ldr	r4, [r1, #0]
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	f7fd f8bd 	bl	8000a8c <__aeabi_d2uiz>
 8003912:	4603      	mov	r3, r0
 8003914:	6363      	str	r3, [r4, #52]	; 0x34
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bd90      	pop	{r4, r7, pc}
 800391e:	bf00      	nop
 8003920:	00000000 	.word	0x00000000
 8003924:	40d387c0 	.word	0x40d387c0
 8003928:	40590000 	.word	0x40590000
 800392c:	2000023c 	.word	0x2000023c

08003930 <Motor2_SetSpeed>:

void Motor2_SetSpeed(double speed)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	ed87 0b00 	vstr	d0, [r7]
	    Error_Handler();
	  }
	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
	  */
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, ((speed/100.0) * (20000-1)));
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <Motor2_SetSpeed+0x50>)
 8003940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003944:	f7fc ff32 	bl	80007ac <__aeabi_ddiv>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	a309      	add	r3, pc, #36	; (adr r3, 8003978 <Motor2_SetSpeed+0x48>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc fdff 	bl	8000558 <__aeabi_dmul>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4909      	ldr	r1, [pc, #36]	; (8003984 <Motor2_SetSpeed+0x54>)
 8003960:	680c      	ldr	r4, [r1, #0]
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	f7fd f891 	bl	8000a8c <__aeabi_d2uiz>
 800396a:	4603      	mov	r3, r0
 800396c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bd90      	pop	{r4, r7, pc}
 8003976:	bf00      	nop
 8003978:	00000000 	.word	0x00000000
 800397c:	40d387c0 	.word	0x40d387c0
 8003980:	40590000 	.word	0x40590000
 8003984:	2000023c 	.word	0x2000023c

08003988 <Motors_GetSpeeds>:

void Motors_GetSpeeds(double *m1_speed, double *m2_speed)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	*m1_speed = TIM5->CCR1/(20000-1)*100.0;
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <Motors_GetSpeeds+0x60>)
 8003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003996:	4a15      	ldr	r2, [pc, #84]	; (80039ec <Motors_GetSpeeds+0x64>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	0b1b      	lsrs	r3, r3, #12
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fc fd60 	bl	8000464 <__aeabi_ui2d>
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <Motors_GetSpeeds+0x68>)
 80039aa:	f7fc fdd5 	bl	8000558 <__aeabi_dmul>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	e9c1 2300 	strd	r2, r3, [r1]
	*m2_speed = TIM5->CCR2/(20000-1)*100.0;
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <Motors_GetSpeeds+0x60>)
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <Motors_GetSpeeds+0x64>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	0b1b      	lsrs	r3, r3, #12
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fc fd4d 	bl	8000464 <__aeabi_ui2d>
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <Motors_GetSpeeds+0x68>)
 80039d0:	f7fc fdc2 	bl	8000558 <__aeabi_dmul>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	6839      	ldr	r1, [r7, #0]
 80039da:	e9c1 2300 	strd	r2, r3, [r1]
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	346e71a5 	.word	0x346e71a5
 80039f0:	40590000 	.word	0x40590000

080039f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <MX_USART2_UART_Init+0x4c>)
 80039fa:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <MX_USART2_UART_Init+0x50>)
 80039fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <MX_USART2_UART_Init+0x4c>)
 8003a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a06:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <MX_USART2_UART_Init+0x4c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <MX_USART2_UART_Init+0x4c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <MX_USART2_UART_Init+0x4c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <MX_USART2_UART_Init+0x4c>)
 8003a1a:	220c      	movs	r2, #12
 8003a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <MX_USART2_UART_Init+0x4c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <MX_USART2_UART_Init+0x4c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a2a:	4805      	ldr	r0, [pc, #20]	; (8003a40 <MX_USART2_UART_Init+0x4c>)
 8003a2c:	f002 fbd0 	bl	80061d0 <HAL_UART_Init>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a36:	f7ff fb6b 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200002cc 	.word	0x200002cc
 8003a44:	40004400 	.word	0x40004400

08003a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1d      	ldr	r2, [pc, #116]	; (8003adc <HAL_UART_MspInit+0x94>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d133      	bne.n	8003ad2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <HAL_UART_MspInit+0x98>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <HAL_UART_MspInit+0x98>)
 8003a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_UART_MspInit+0x98>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <HAL_UART_MspInit+0x98>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <HAL_UART_MspInit+0x98>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6313      	str	r3, [r2, #48]	; 0x30
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_UART_MspInit+0x98>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003aa2:	230c      	movs	r3, #12
 8003aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ab2:	2307      	movs	r3, #7
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab6:	f107 0314 	add.w	r3, r7, #20
 8003aba:	4619      	mov	r1, r3
 8003abc:	4809      	ldr	r0, [pc, #36]	; (8003ae4 <HAL_UART_MspInit+0x9c>)
 8003abe:	f000 f9f3 	bl	8003ea8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2105      	movs	r1, #5
 8003ac6:	2026      	movs	r0, #38	; 0x26
 8003ac8:	f000 f932 	bl	8003d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003acc:	2026      	movs	r0, #38	; 0x26
 8003ace:	f000 f94b 	bl	8003d68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3728      	adds	r7, #40	; 0x28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40004400 	.word	0x40004400
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40020000 	.word	0x40020000

08003ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8003ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003aec:	480d      	ldr	r0, [pc, #52]	; (8003b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003aee:	490e      	ldr	r1, [pc, #56]	; (8003b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003af0:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003af4:	e002      	b.n	8003afc <LoopCopyDataInit>

08003af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003afa:	3304      	adds	r3, #4

08003afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b00:	d3f9      	bcc.n	8003af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b02:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b04:	4c0b      	ldr	r4, [pc, #44]	; (8003b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b08:	e001      	b.n	8003b0e <LoopFillZerobss>

08003b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b0c:	3204      	adds	r2, #4

08003b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b10:	d3fb      	bcc.n	8003b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b12:	f7ff fbe9 	bl	80032e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b16:	f006 fb03 	bl	800a120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b1a:	f7ff f98f 	bl	8002e3c <main>
  bx  lr    
 8003b1e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8003b20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b28:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003b2c:	0800a684 	.word	0x0800a684
  ldr r2, =_sbss
 8003b30:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003b34:	20004c64 	.word	0x20004c64

08003b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b38:	e7fe      	b.n	8003b38 <ADC_IRQHandler>
	...

08003b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <HAL_Init+0x40>)
 8003b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_Init+0x40>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_Init+0x40>)
 8003b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_Init+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <HAL_Init+0x40>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b64:	2003      	movs	r0, #3
 8003b66:	f000 f8d8 	bl	8003d1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b6a:	2005      	movs	r0, #5
 8003b6c:	f7ff fb02 	bl	8003174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b70:	f7ff fad4 	bl	800311c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00

08003b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_IncTick+0x20>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_IncTick+0x24>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_IncTick+0x24>)
 8003b92:	6013      	str	r3, [r2, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	2000001c 	.word	0x2000001c
 8003ba4:	20000310 	.word	0x20000310

08003ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return uwTick;
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <HAL_GetTick+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000310 	.word	0x20000310

08003bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	60d3      	str	r3, [r2, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <__NVIC_GetPriorityGrouping+0x18>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 0307 	and.w	r3, r3, #7
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	db0b      	blt.n	8003c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	4907      	ldr	r1, [pc, #28]	; (8003c5c <__NVIC_EnableIRQ+0x38>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2001      	movs	r0, #1
 8003c46:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	e000e100 	.word	0xe000e100

08003c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	db0a      	blt.n	8003c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	490c      	ldr	r1, [pc, #48]	; (8003cac <__NVIC_SetPriority+0x4c>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	0112      	lsls	r2, r2, #4
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	440b      	add	r3, r1
 8003c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c88:	e00a      	b.n	8003ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <__NVIC_SetPriority+0x50>)
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	3b04      	subs	r3, #4
 8003c98:	0112      	lsls	r2, r2, #4
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	761a      	strb	r2, [r3, #24]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000e100 	.word	0xe000e100
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f1c3 0307 	rsb	r3, r3, #7
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	bf28      	it	cs
 8003cd2:	2304      	movcs	r3, #4
 8003cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d902      	bls.n	8003ce4 <NVIC_EncodePriority+0x30>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3b03      	subs	r3, #3
 8003ce2:	e000      	b.n	8003ce6 <NVIC_EncodePriority+0x32>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	43d9      	mvns	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d0c:	4313      	orrs	r3, r2
         );
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ff4c 	bl	8003bc0 <__NVIC_SetPriorityGrouping>
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d42:	f7ff ff61 	bl	8003c08 <__NVIC_GetPriorityGrouping>
 8003d46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	6978      	ldr	r0, [r7, #20]
 8003d4e:	f7ff ffb1 	bl	8003cb4 <NVIC_EncodePriority>
 8003d52:	4602      	mov	r2, r0
 8003d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff ff80 	bl	8003c60 <__NVIC_SetPriority>
}
 8003d60:	bf00      	nop
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ff54 	bl	8003c24 <__NVIC_EnableIRQ>
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d92:	f7ff ff09 	bl	8003ba8 <HAL_GetTick>
 8003d96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d008      	beq.n	8003db6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2280      	movs	r2, #128	; 0x80
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e052      	b.n	8003e5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0216 	bic.w	r2, r2, #22
 8003dc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <HAL_DMA_Abort+0x62>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0208 	bic.w	r2, r2, #8
 8003df4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e06:	e013      	b.n	8003e30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e08:	f7ff fece 	bl	8003ba8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d90c      	bls.n	8003e30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2203      	movs	r2, #3
 8003e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e015      	b.n	8003e5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e4      	bne.n	8003e08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	223f      	movs	r2, #63	; 0x3f
 8003e44:	409a      	lsls	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d004      	beq.n	8003e82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2280      	movs	r2, #128	; 0x80
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e00c      	b.n	8003e9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2205      	movs	r2, #5
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b089      	sub	sp, #36	; 0x24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e159      	b.n	8004178 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	f040 8148 	bne.w	8004172 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d005      	beq.n	8003efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d130      	bne.n	8003f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	2203      	movs	r2, #3
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f30:	2201      	movs	r2, #1
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 0201 	and.w	r2, r3, #1
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d017      	beq.n	8003f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	2203      	movs	r2, #3
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d123      	bne.n	8003fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	08da      	lsrs	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3208      	adds	r2, #8
 8003fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	220f      	movs	r2, #15
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	08da      	lsrs	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3208      	adds	r2, #8
 8003fe6:	69b9      	ldr	r1, [r7, #24]
 8003fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0203 	and.w	r2, r3, #3
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a2 	beq.w	8004172 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	4b57      	ldr	r3, [pc, #348]	; (8004190 <HAL_GPIO_Init+0x2e8>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	4a56      	ldr	r2, [pc, #344]	; (8004190 <HAL_GPIO_Init+0x2e8>)
 8004038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800403c:	6453      	str	r3, [r2, #68]	; 0x44
 800403e:	4b54      	ldr	r3, [pc, #336]	; (8004190 <HAL_GPIO_Init+0x2e8>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800404a:	4a52      	ldr	r2, [pc, #328]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	3302      	adds	r3, #2
 8004052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	220f      	movs	r2, #15
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a49      	ldr	r2, [pc, #292]	; (8004198 <HAL_GPIO_Init+0x2f0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d019      	beq.n	80040aa <HAL_GPIO_Init+0x202>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a48      	ldr	r2, [pc, #288]	; (800419c <HAL_GPIO_Init+0x2f4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_GPIO_Init+0x1fe>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a47      	ldr	r2, [pc, #284]	; (80041a0 <HAL_GPIO_Init+0x2f8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00d      	beq.n	80040a2 <HAL_GPIO_Init+0x1fa>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a46      	ldr	r2, [pc, #280]	; (80041a4 <HAL_GPIO_Init+0x2fc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <HAL_GPIO_Init+0x1f6>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a45      	ldr	r2, [pc, #276]	; (80041a8 <HAL_GPIO_Init+0x300>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <HAL_GPIO_Init+0x1f2>
 8004096:	2304      	movs	r3, #4
 8004098:	e008      	b.n	80040ac <HAL_GPIO_Init+0x204>
 800409a:	2307      	movs	r3, #7
 800409c:	e006      	b.n	80040ac <HAL_GPIO_Init+0x204>
 800409e:	2303      	movs	r3, #3
 80040a0:	e004      	b.n	80040ac <HAL_GPIO_Init+0x204>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e002      	b.n	80040ac <HAL_GPIO_Init+0x204>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_GPIO_Init+0x204>
 80040aa:	2300      	movs	r3, #0
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	f002 0203 	and.w	r2, r2, #3
 80040b2:	0092      	lsls	r2, r2, #2
 80040b4:	4093      	lsls	r3, r2
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040bc:	4935      	ldr	r1, [pc, #212]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ca:	4b38      	ldr	r3, [pc, #224]	; (80041ac <HAL_GPIO_Init+0x304>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ee:	4a2f      	ldr	r2, [pc, #188]	; (80041ac <HAL_GPIO_Init+0x304>)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f4:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <HAL_GPIO_Init+0x304>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4013      	ands	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004118:	4a24      	ldr	r2, [pc, #144]	; (80041ac <HAL_GPIO_Init+0x304>)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800411e:	4b23      	ldr	r3, [pc, #140]	; (80041ac <HAL_GPIO_Init+0x304>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004142:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <HAL_GPIO_Init+0x304>)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004148:	4b18      	ldr	r3, [pc, #96]	; (80041ac <HAL_GPIO_Init+0x304>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800416c:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <HAL_GPIO_Init+0x304>)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3301      	adds	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	f67f aea2 	bls.w	8003ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3724      	adds	r7, #36	; 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	40013800 	.word	0x40013800
 8004198:	40020000 	.word	0x40020000
 800419c:	40020400 	.word	0x40020400
 80041a0:	40020800 	.word	0x40020800
 80041a4:	40020c00 	.word	0x40020c00
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40013c00 	.word	0x40013c00

080041b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	e001      	b.n	80041d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
 80041ec:	4613      	mov	r3, r2
 80041ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f0:	787b      	ldrb	r3, [r7, #1]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041f6:	887a      	ldrh	r2, [r7, #2]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041fc:	e003      	b.n	8004206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041fe:	887b      	ldrh	r3, [r7, #2]
 8004200:	041a      	lsls	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	619a      	str	r2, [r3, #24]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	460b      	mov	r3, r1
 800421c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004224:	887a      	ldrh	r2, [r7, #2]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4013      	ands	r3, r2
 800422a:	041a      	lsls	r2, r3, #16
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	43d9      	mvns	r1, r3
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	400b      	ands	r3, r1
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	619a      	str	r2, [r3, #24]
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d006      	beq.n	800426c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800425e:	4a05      	ldr	r2, [pc, #20]	; (8004274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe ff2c 	bl	80030c4 <HAL_GPIO_EXTI_Callback>
  }
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40013c00 	.word	0x40013c00

08004278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e267      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d075      	beq.n	8004382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004296:	4b88      	ldr	r3, [pc, #544]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d00c      	beq.n	80042bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a2:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d112      	bne.n	80042d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ae:	4b82      	ldr	r3, [pc, #520]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ba:	d10b      	bne.n	80042d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	4b7e      	ldr	r3, [pc, #504]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d05b      	beq.n	8004380 <HAL_RCC_OscConfig+0x108>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d157      	bne.n	8004380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e242      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042dc:	d106      	bne.n	80042ec <HAL_RCC_OscConfig+0x74>
 80042de:	4b76      	ldr	r3, [pc, #472]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a75      	ldr	r2, [pc, #468]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e01d      	b.n	8004328 <HAL_RCC_OscConfig+0xb0>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f4:	d10c      	bne.n	8004310 <HAL_RCC_OscConfig+0x98>
 80042f6:	4b70      	ldr	r3, [pc, #448]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a6f      	ldr	r2, [pc, #444]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80042fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	4b6d      	ldr	r3, [pc, #436]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a6c      	ldr	r2, [pc, #432]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e00b      	b.n	8004328 <HAL_RCC_OscConfig+0xb0>
 8004310:	4b69      	ldr	r3, [pc, #420]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a68      	ldr	r2, [pc, #416]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 8004316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a65      	ldr	r2, [pc, #404]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 8004322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d013      	beq.n	8004358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7ff fc3a 	bl	8003ba8 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004338:	f7ff fc36 	bl	8003ba8 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e207      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	4b5b      	ldr	r3, [pc, #364]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0xc0>
 8004356:	e014      	b.n	8004382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7ff fc26 	bl	8003ba8 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004360:	f7ff fc22 	bl	8003ba8 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	; 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e1f3      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004372:	4b51      	ldr	r3, [pc, #324]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0xe8>
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d063      	beq.n	8004456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800438e:	4b4a      	ldr	r3, [pc, #296]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d11c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a6:	4b44      	ldr	r3, [pc, #272]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d116      	bne.n	80043e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b2:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_RCC_OscConfig+0x152>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d001      	beq.n	80043ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e1c7      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ca:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4937      	ldr	r1, [pc, #220]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043de:	e03a      	b.n	8004456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d020      	beq.n	800442a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e8:	4b34      	ldr	r3, [pc, #208]	; (80044bc <HAL_RCC_OscConfig+0x244>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ee:	f7ff fbdb 	bl	8003ba8 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f6:	f7ff fbd7 	bl	8003ba8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e1a8      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004408:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004414:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4925      	ldr	r1, [pc, #148]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 8004424:	4313      	orrs	r3, r2
 8004426:	600b      	str	r3, [r1, #0]
 8004428:	e015      	b.n	8004456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCC_OscConfig+0x244>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7ff fbba 	bl	8003ba8 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004438:	f7ff fbb6 	bl	8003ba8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e187      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d036      	beq.n	80044d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d016      	beq.n	8004498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446a:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <HAL_RCC_OscConfig+0x248>)
 800446c:	2201      	movs	r2, #1
 800446e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004470:	f7ff fb9a 	bl	8003ba8 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004478:	f7ff fb96 	bl	8003ba8 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e167      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_OscConfig+0x240>)
 800448c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0x200>
 8004496:	e01b      	b.n	80044d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCC_OscConfig+0x248>)
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449e:	f7ff fb83 	bl	8003ba8 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	e00e      	b.n	80044c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a6:	f7ff fb7f 	bl	8003ba8 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d907      	bls.n	80044c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e150      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
 80044b8:	40023800 	.word	0x40023800
 80044bc:	42470000 	.word	0x42470000
 80044c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c4:	4b88      	ldr	r3, [pc, #544]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 80044c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ea      	bne.n	80044a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8097 	beq.w	800460c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e2:	4b81      	ldr	r3, [pc, #516]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10f      	bne.n	800450e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	4b7d      	ldr	r3, [pc, #500]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	4a7c      	ldr	r2, [pc, #496]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fc:	6413      	str	r3, [r2, #64]	; 0x40
 80044fe:	4b7a      	ldr	r3, [pc, #488]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450a:	2301      	movs	r3, #1
 800450c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450e:	4b77      	ldr	r3, [pc, #476]	; (80046ec <HAL_RCC_OscConfig+0x474>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d118      	bne.n	800454c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451a:	4b74      	ldr	r3, [pc, #464]	; (80046ec <HAL_RCC_OscConfig+0x474>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a73      	ldr	r2, [pc, #460]	; (80046ec <HAL_RCC_OscConfig+0x474>)
 8004520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004526:	f7ff fb3f 	bl	8003ba8 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452e:	f7ff fb3b 	bl	8003ba8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e10c      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	4b6a      	ldr	r3, [pc, #424]	; (80046ec <HAL_RCC_OscConfig+0x474>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d106      	bne.n	8004562 <HAL_RCC_OscConfig+0x2ea>
 8004554:	4b64      	ldr	r3, [pc, #400]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	4a63      	ldr	r2, [pc, #396]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6713      	str	r3, [r2, #112]	; 0x70
 8004560:	e01c      	b.n	800459c <HAL_RCC_OscConfig+0x324>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b05      	cmp	r3, #5
 8004568:	d10c      	bne.n	8004584 <HAL_RCC_OscConfig+0x30c>
 800456a:	4b5f      	ldr	r3, [pc, #380]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a5e      	ldr	r2, [pc, #376]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 8004570:	f043 0304 	orr.w	r3, r3, #4
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
 8004576:	4b5c      	ldr	r3, [pc, #368]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	4a5b      	ldr	r2, [pc, #364]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	6713      	str	r3, [r2, #112]	; 0x70
 8004582:	e00b      	b.n	800459c <HAL_RCC_OscConfig+0x324>
 8004584:	4b58      	ldr	r3, [pc, #352]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a57      	ldr	r2, [pc, #348]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	4b55      	ldr	r3, [pc, #340]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a54      	ldr	r2, [pc, #336]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 8004596:	f023 0304 	bic.w	r3, r3, #4
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d015      	beq.n	80045d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7ff fb00 	bl	8003ba8 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045aa:	e00a      	b.n	80045c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ac:	f7ff fafc 	bl	8003ba8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e0cb      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	4b49      	ldr	r3, [pc, #292]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0ee      	beq.n	80045ac <HAL_RCC_OscConfig+0x334>
 80045ce:	e014      	b.n	80045fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d0:	f7ff faea 	bl	8003ba8 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7ff fae6 	bl	8003ba8 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e0b5      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ee:	4b3e      	ldr	r3, [pc, #248]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ee      	bne.n	80045d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d105      	bne.n	800460c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004600:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	4a38      	ldr	r2, [pc, #224]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 8004606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a1 	beq.w	8004758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004616:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b08      	cmp	r3, #8
 8004620:	d05c      	beq.n	80046dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d141      	bne.n	80046ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462a:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <HAL_RCC_OscConfig+0x478>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7ff faba 	bl	8003ba8 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004638:	f7ff fab6 	bl	8003ba8 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e087      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69da      	ldr	r2, [r3, #28]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	019b      	lsls	r3, r3, #6
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	3b01      	subs	r3, #1
 8004670:	041b      	lsls	r3, r3, #16
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	061b      	lsls	r3, r3, #24
 800467a:	491b      	ldr	r1, [pc, #108]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 800467c:	4313      	orrs	r3, r2
 800467e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <HAL_RCC_OscConfig+0x478>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004686:	f7ff fa8f 	bl	8003ba8 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468e:	f7ff fa8b 	bl	8003ba8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e05c      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCC_OscConfig+0x416>
 80046ac:	e054      	b.n	8004758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <HAL_RCC_OscConfig+0x478>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b4:	f7ff fa78 	bl	8003ba8 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046bc:	f7ff fa74 	bl	8003ba8 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e045      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_RCC_OscConfig+0x470>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0x444>
 80046da:	e03d      	b.n	8004758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d107      	bne.n	80046f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e038      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40007000 	.word	0x40007000
 80046f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046f4:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <HAL_RCC_OscConfig+0x4ec>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d028      	beq.n	8004754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d121      	bne.n	8004754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d11a      	bne.n	8004754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004724:	4013      	ands	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800472a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800472c:	4293      	cmp	r3, r2
 800472e:	d111      	bne.n	8004754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	3b01      	subs	r3, #1
 800473e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d107      	bne.n	8004754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800

08004768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0cc      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b68      	ldr	r3, [pc, #416]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d90c      	bls.n	80047a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b65      	ldr	r3, [pc, #404]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004792:	4b63      	ldr	r3, [pc, #396]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0b8      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d020      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047bc:	4b59      	ldr	r3, [pc, #356]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4a58      	ldr	r2, [pc, #352]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d4:	4b53      	ldr	r3, [pc, #332]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4a52      	ldr	r2, [pc, #328]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e0:	4b50      	ldr	r3, [pc, #320]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	494d      	ldr	r1, [pc, #308]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d044      	beq.n	8004888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d107      	bne.n	8004816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004806:	4b47      	ldr	r3, [pc, #284]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d119      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e07f      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d003      	beq.n	8004826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004822:	2b03      	cmp	r3, #3
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004826:	4b3f      	ldr	r3, [pc, #252]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e06f      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004836:	4b3b      	ldr	r3, [pc, #236]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e067      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004846:	4b37      	ldr	r3, [pc, #220]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4934      	ldr	r1, [pc, #208]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	4313      	orrs	r3, r2
 8004856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004858:	f7ff f9a6 	bl	8003ba8 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	e00a      	b.n	8004876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004860:	f7ff f9a2 	bl	8003ba8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	; 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e04f      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	4b2b      	ldr	r3, [pc, #172]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 020c 	and.w	r2, r3, #12
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	429a      	cmp	r2, r3
 8004886:	d1eb      	bne.n	8004860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004888:	4b25      	ldr	r3, [pc, #148]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d20c      	bcs.n	80048b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b22      	ldr	r3, [pc, #136]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b20      	ldr	r3, [pc, #128]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e032      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048bc:	4b19      	ldr	r3, [pc, #100]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4916      	ldr	r1, [pc, #88]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048da:	4b12      	ldr	r3, [pc, #72]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	490e      	ldr	r1, [pc, #56]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048ee:	f000 f821 	bl	8004934 <HAL_RCC_GetSysClockFreq>
 80048f2:	4602      	mov	r2, r0
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	490a      	ldr	r1, [pc, #40]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 8004900:	5ccb      	ldrb	r3, [r1, r3]
 8004902:	fa22 f303 	lsr.w	r3, r2, r3
 8004906:	4a09      	ldr	r2, [pc, #36]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800490a:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCC_ClockConfig+0x1c8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe fc30 	bl	8003174 <HAL_InitTick>

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40023c00 	.word	0x40023c00
 8004924:	40023800 	.word	0x40023800
 8004928:	0800a558 	.word	0x0800a558
 800492c:	20000014 	.word	0x20000014
 8004930:	20000018 	.word	0x20000018

08004934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004938:	b090      	sub	sp, #64	; 0x40
 800493a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	637b      	str	r3, [r7, #52]	; 0x34
 8004940:	2300      	movs	r3, #0
 8004942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004944:	2300      	movs	r3, #0
 8004946:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800494c:	4b59      	ldr	r3, [pc, #356]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 030c 	and.w	r3, r3, #12
 8004954:	2b08      	cmp	r3, #8
 8004956:	d00d      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x40>
 8004958:	2b08      	cmp	r3, #8
 800495a:	f200 80a1 	bhi.w	8004aa0 <HAL_RCC_GetSysClockFreq+0x16c>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0x34>
 8004962:	2b04      	cmp	r3, #4
 8004964:	d003      	beq.n	800496e <HAL_RCC_GetSysClockFreq+0x3a>
 8004966:	e09b      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004968:	4b53      	ldr	r3, [pc, #332]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 800496a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800496c:	e09b      	b.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800496e:	4b53      	ldr	r3, [pc, #332]	; (8004abc <HAL_RCC_GetSysClockFreq+0x188>)
 8004970:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004972:	e098      	b.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004974:	4b4f      	ldr	r3, [pc, #316]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800497c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800497e:	4b4d      	ldr	r3, [pc, #308]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d028      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800498a:	4b4a      	ldr	r3, [pc, #296]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	099b      	lsrs	r3, r3, #6
 8004990:	2200      	movs	r2, #0
 8004992:	623b      	str	r3, [r7, #32]
 8004994:	627a      	str	r2, [r7, #36]	; 0x24
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800499c:	2100      	movs	r1, #0
 800499e:	4b47      	ldr	r3, [pc, #284]	; (8004abc <HAL_RCC_GetSysClockFreq+0x188>)
 80049a0:	fb03 f201 	mul.w	r2, r3, r1
 80049a4:	2300      	movs	r3, #0
 80049a6:	fb00 f303 	mul.w	r3, r0, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	4a43      	ldr	r2, [pc, #268]	; (8004abc <HAL_RCC_GetSysClockFreq+0x188>)
 80049ae:	fba0 1202 	umull	r1, r2, r0, r2
 80049b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b4:	460a      	mov	r2, r1
 80049b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80049b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ba:	4413      	add	r3, r2
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c0:	2200      	movs	r2, #0
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	61fa      	str	r2, [r7, #28]
 80049c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049ce:	f7fc f8cd 	bl	8000b6c <__aeabi_uldivmod>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4613      	mov	r3, r2
 80049d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049da:	e053      	b.n	8004a84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049dc:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	099b      	lsrs	r3, r3, #6
 80049e2:	2200      	movs	r2, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	617a      	str	r2, [r7, #20]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049ee:	f04f 0b00 	mov.w	fp, #0
 80049f2:	4652      	mov	r2, sl
 80049f4:	465b      	mov	r3, fp
 80049f6:	f04f 0000 	mov.w	r0, #0
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	0159      	lsls	r1, r3, #5
 8004a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a04:	0150      	lsls	r0, r2, #5
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	ebb2 080a 	subs.w	r8, r2, sl
 8004a0e:	eb63 090b 	sbc.w	r9, r3, fp
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a26:	ebb2 0408 	subs.w	r4, r2, r8
 8004a2a:	eb63 0509 	sbc.w	r5, r3, r9
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	00eb      	lsls	r3, r5, #3
 8004a38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a3c:	00e2      	lsls	r2, r4, #3
 8004a3e:	4614      	mov	r4, r2
 8004a40:	461d      	mov	r5, r3
 8004a42:	eb14 030a 	adds.w	r3, r4, sl
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	eb45 030b 	adc.w	r3, r5, fp
 8004a4c:	607b      	str	r3, [r7, #4]
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	028b      	lsls	r3, r1, #10
 8004a5e:	4621      	mov	r1, r4
 8004a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a64:	4621      	mov	r1, r4
 8004a66:	028a      	lsls	r2, r1, #10
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6e:	2200      	movs	r2, #0
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	60fa      	str	r2, [r7, #12]
 8004a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a78:	f7fc f878 	bl	8000b6c <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4613      	mov	r3, r2
 8004a82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a9e:	e002      	b.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004aa2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3740      	adds	r7, #64	; 0x40
 8004aac:	46bd      	mov	sp, r7
 8004aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	00f42400 	.word	0x00f42400
 8004abc:	017d7840 	.word	0x017d7840

08004ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000014 	.word	0x20000014

08004ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004adc:	f7ff fff0 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	0a9b      	lsrs	r3, r3, #10
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4903      	ldr	r1, [pc, #12]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	0800a568 	.word	0x0800a568

08004b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b04:	f7ff ffdc 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	0b5b      	lsrs	r3, r3, #13
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	4903      	ldr	r1, [pc, #12]	; (8004b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40023800 	.word	0x40023800
 8004b24:	0800a568 	.word	0x0800a568

08004b28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	220f      	movs	r2, #15
 8004b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0203 	and.w	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b44:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_RCC_GetClockConfig+0x5c>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	08db      	lsrs	r3, r3, #3
 8004b62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <HAL_RCC_GetClockConfig+0x60>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0207 	and.w	r2, r3, #7
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40023c00 	.word	0x40023c00

08004b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e041      	b.n	8004c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fe fd4c 	bl	8003650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f000 fe94 	bl	80058f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d001      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e044      	b.n	8004cce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <HAL_TIM_Base_Start_IT+0xb0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x6c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6e:	d013      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x6c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1a      	ldr	r2, [pc, #104]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x6c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x6c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a17      	ldr	r2, [pc, #92]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x6c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a16      	ldr	r2, [pc, #88]	; (8004cec <HAL_TIM_Base_Start_IT+0xc0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d111      	bne.n	8004cbc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d010      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cba:	e007      	b.n	8004ccc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	40014000 	.word	0x40014000

08004cf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e041      	b.n	8004d86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fe fd34 	bl	8003784 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f000 fde2 	bl	80058f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <HAL_TIM_PWM_Start+0x24>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e022      	b.n	8004dfa <HAL_TIM_PWM_Start+0x6a>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d109      	bne.n	8004dce <HAL_TIM_PWM_Start+0x3e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	bf14      	ite	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2300      	moveq	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	e015      	b.n	8004dfa <HAL_TIM_PWM_Start+0x6a>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d109      	bne.n	8004de8 <HAL_TIM_PWM_Start+0x58>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e008      	b.n	8004dfa <HAL_TIM_PWM_Start+0x6a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e068      	b.n	8004ed4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start+0x82>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e10:	e013      	b.n	8004e3a <HAL_TIM_PWM_Start+0xaa>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0x92>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e20:	e00b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xaa>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0xa2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e30:	e003      	b.n	8004e3a <HAL_TIM_PWM_Start+0xaa>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 f91c 	bl	8006080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a23      	ldr	r2, [pc, #140]	; (8004edc <HAL_TIM_PWM_Start+0x14c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <HAL_TIM_PWM_Start+0x14c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d018      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x10e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e74:	d013      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x10e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <HAL_TIM_PWM_Start+0x150>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x10e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_TIM_PWM_Start+0x154>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x10e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <HAL_TIM_PWM_Start+0x158>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x10e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a14      	ldr	r2, [pc, #80]	; (8004eec <HAL_TIM_PWM_Start+0x15c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d111      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b06      	cmp	r3, #6
 8004eae:	d010      	beq.n	8004ed2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	e007      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40014000 	.word	0x40014000

08004ef0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e041      	b.n	8004f86 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f839 	bl	8004f8e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f000 fce2 	bl	80058f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d104      	bne.n	8004fc2 <HAL_TIM_IC_Start_IT+0x1e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	e013      	b.n	8004fea <HAL_TIM_IC_Start_IT+0x46>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d104      	bne.n	8004fd2 <HAL_TIM_IC_Start_IT+0x2e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	e00b      	b.n	8004fea <HAL_TIM_IC_Start_IT+0x46>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d104      	bne.n	8004fe2 <HAL_TIM_IC_Start_IT+0x3e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	e003      	b.n	8004fea <HAL_TIM_IC_Start_IT+0x46>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d104      	bne.n	8004ffc <HAL_TIM_IC_Start_IT+0x58>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	e013      	b.n	8005024 <HAL_TIM_IC_Start_IT+0x80>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d104      	bne.n	800500c <HAL_TIM_IC_Start_IT+0x68>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e00b      	b.n	8005024 <HAL_TIM_IC_Start_IT+0x80>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b08      	cmp	r3, #8
 8005010:	d104      	bne.n	800501c <HAL_TIM_IC_Start_IT+0x78>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005018:	b2db      	uxtb	r3, r3
 800501a:	e003      	b.n	8005024 <HAL_TIM_IC_Start_IT+0x80>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005022:	b2db      	uxtb	r3, r3
 8005024:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005026:	7bbb      	ldrb	r3, [r7, #14]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d102      	bne.n	8005032 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800502c:	7b7b      	ldrb	r3, [r7, #13]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d001      	beq.n	8005036 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0c2      	b.n	80051bc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <HAL_TIM_IC_Start_IT+0xa2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005044:	e013      	b.n	800506e <HAL_TIM_IC_Start_IT+0xca>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b04      	cmp	r3, #4
 800504a:	d104      	bne.n	8005056 <HAL_TIM_IC_Start_IT+0xb2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005054:	e00b      	b.n	800506e <HAL_TIM_IC_Start_IT+0xca>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d104      	bne.n	8005066 <HAL_TIM_IC_Start_IT+0xc2>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005064:	e003      	b.n	800506e <HAL_TIM_IC_Start_IT+0xca>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <HAL_TIM_IC_Start_IT+0xda>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800507c:	e013      	b.n	80050a6 <HAL_TIM_IC_Start_IT+0x102>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b04      	cmp	r3, #4
 8005082:	d104      	bne.n	800508e <HAL_TIM_IC_Start_IT+0xea>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800508c:	e00b      	b.n	80050a6 <HAL_TIM_IC_Start_IT+0x102>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d104      	bne.n	800509e <HAL_TIM_IC_Start_IT+0xfa>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800509c:	e003      	b.n	80050a6 <HAL_TIM_IC_Start_IT+0x102>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	d841      	bhi.n	8005130 <HAL_TIM_IC_Start_IT+0x18c>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <HAL_TIM_IC_Start_IT+0x110>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050e9 	.word	0x080050e9
 80050b8:	08005131 	.word	0x08005131
 80050bc:	08005131 	.word	0x08005131
 80050c0:	08005131 	.word	0x08005131
 80050c4:	080050fb 	.word	0x080050fb
 80050c8:	08005131 	.word	0x08005131
 80050cc:	08005131 	.word	0x08005131
 80050d0:	08005131 	.word	0x08005131
 80050d4:	0800510d 	.word	0x0800510d
 80050d8:	08005131 	.word	0x08005131
 80050dc:	08005131 	.word	0x08005131
 80050e0:	08005131 	.word	0x08005131
 80050e4:	0800511f 	.word	0x0800511f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0202 	orr.w	r2, r2, #2
 80050f6:	60da      	str	r2, [r3, #12]
      break;
 80050f8:	e01d      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0204 	orr.w	r2, r2, #4
 8005108:	60da      	str	r2, [r3, #12]
      break;
 800510a:	e014      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	60da      	str	r2, [r3, #12]
      break;
 800511c:	e00b      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0210 	orr.w	r2, r2, #16
 800512c:	60da      	str	r2, [r3, #12]
      break;
 800512e:	e002      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
      break;
 8005134:	bf00      	nop
  }

  if (status == HAL_OK)
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d13e      	bne.n	80051ba <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2201      	movs	r2, #1
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 ff9b 	bl	8006080 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <HAL_TIM_IC_Start_IT+0x220>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d018      	beq.n	8005186 <HAL_TIM_IC_Start_IT+0x1e2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515c:	d013      	beq.n	8005186 <HAL_TIM_IC_Start_IT+0x1e2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_TIM_IC_Start_IT+0x224>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <HAL_TIM_IC_Start_IT+0x1e2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a17      	ldr	r2, [pc, #92]	; (80051cc <HAL_TIM_IC_Start_IT+0x228>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d009      	beq.n	8005186 <HAL_TIM_IC_Start_IT+0x1e2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <HAL_TIM_IC_Start_IT+0x22c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_TIM_IC_Start_IT+0x1e2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <HAL_TIM_IC_Start_IT+0x230>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d111      	bne.n	80051aa <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b06      	cmp	r3, #6
 8005196:	d010      	beq.n	80051ba <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a8:	e007      	b.n	80051ba <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40014000 	.word	0x40014000

080051d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0202 	mvn.w	r2, #2
 8005204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fd feb0 	bl	8002f80 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fb4a 	bl	80058bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fb51 	bl	80058d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b04      	cmp	r3, #4
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0204 	mvn.w	r2, #4
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fd fe86 	bl	8002f80 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fb20 	bl	80058bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fb27 	bl	80058d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b08      	cmp	r3, #8
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0208 	mvn.w	r2, #8
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2204      	movs	r2, #4
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fd fe5c 	bl	8002f80 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 faf6 	bl	80058bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fafd 	bl	80058d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0210 	mvn.w	r2, #16
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fd fe32 	bl	8002f80 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 facc 	bl	80058bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fad3 	bl	80058d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0201 	mvn.w	r2, #1
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fd fec6 	bl	80030e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b80      	cmp	r3, #128	; 0x80
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005374:	2b80      	cmp	r3, #128	; 0x80
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 ff1a 	bl	80061bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d10e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa98 	bl	80058e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d10e      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d107      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0220 	mvn.w	r2, #32
 80053d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fee4 	bl	80061a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005402:	2302      	movs	r3, #2
 8005404:	e088      	b.n	8005518 <HAL_TIM_IC_ConfigChannel+0x130>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6819      	ldr	r1, [r3, #0]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f000 fc74 	bl	8005d10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 020c 	bic.w	r2, r2, #12
 8005436:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6999      	ldr	r1, [r3, #24]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	619a      	str	r2, [r3, #24]
 800544a:	e060      	b.n	800550e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b04      	cmp	r3, #4
 8005450:	d11c      	bne.n	800548c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6819      	ldr	r1, [r3, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f000 fcec 	bl	8005e3e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005474:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6999      	ldr	r1, [r3, #24]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	021a      	lsls	r2, r3, #8
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	619a      	str	r2, [r3, #24]
 800548a:	e040      	b.n	800550e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b08      	cmp	r3, #8
 8005490:	d11b      	bne.n	80054ca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	6819      	ldr	r1, [r3, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f000 fd39 	bl	8005f18 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 020c 	bic.w	r2, r2, #12
 80054b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69d9      	ldr	r1, [r3, #28]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	61da      	str	r2, [r3, #28]
 80054c8:	e021      	b.n	800550e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b0c      	cmp	r3, #12
 80054ce:	d11c      	bne.n	800550a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6819      	ldr	r1, [r3, #0]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f000 fd56 	bl	8005f90 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69da      	ldr	r2, [r3, #28]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69d9      	ldr	r1, [r3, #28]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	021a      	lsls	r2, r3, #8
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	61da      	str	r2, [r3, #28]
 8005508:	e001      	b.n	800550e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005516:	7dfb      	ldrb	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800553a:	2302      	movs	r3, #2
 800553c:	e0ae      	b.n	800569c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b0c      	cmp	r3, #12
 800554a:	f200 809f 	bhi.w	800568c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800554e:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	08005589 	.word	0x08005589
 8005558:	0800568d 	.word	0x0800568d
 800555c:	0800568d 	.word	0x0800568d
 8005560:	0800568d 	.word	0x0800568d
 8005564:	080055c9 	.word	0x080055c9
 8005568:	0800568d 	.word	0x0800568d
 800556c:	0800568d 	.word	0x0800568d
 8005570:	0800568d 	.word	0x0800568d
 8005574:	0800560b 	.word	0x0800560b
 8005578:	0800568d 	.word	0x0800568d
 800557c:	0800568d 	.word	0x0800568d
 8005580:	0800568d 	.word	0x0800568d
 8005584:	0800564b 	.word	0x0800564b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fa32 	bl	80059f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0208 	orr.w	r2, r2, #8
 80055a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0204 	bic.w	r2, r2, #4
 80055b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6999      	ldr	r1, [r3, #24]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	619a      	str	r2, [r3, #24]
      break;
 80055c6:	e064      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fa78 	bl	8005ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6999      	ldr	r1, [r3, #24]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	619a      	str	r2, [r3, #24]
      break;
 8005608:	e043      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fac3 	bl	8005b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0208 	orr.w	r2, r2, #8
 8005624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0204 	bic.w	r2, r2, #4
 8005634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69d9      	ldr	r1, [r3, #28]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	61da      	str	r2, [r3, #28]
      break;
 8005648:	e023      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fb0d 	bl	8005c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69d9      	ldr	r1, [r3, #28]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	021a      	lsls	r2, r3, #8
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	61da      	str	r2, [r3, #28]
      break;
 800568a:	e002      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	75fb      	strb	r3, [r7, #23]
      break;
 8005690:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_TIM_ConfigClockSource+0x1c>
 80056bc:	2302      	movs	r3, #2
 80056be:	e0b4      	b.n	800582a <HAL_TIM_ConfigClockSource+0x186>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f8:	d03e      	beq.n	8005778 <HAL_TIM_ConfigClockSource+0xd4>
 80056fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fe:	f200 8087 	bhi.w	8005810 <HAL_TIM_ConfigClockSource+0x16c>
 8005702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005706:	f000 8086 	beq.w	8005816 <HAL_TIM_ConfigClockSource+0x172>
 800570a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570e:	d87f      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x16c>
 8005710:	2b70      	cmp	r3, #112	; 0x70
 8005712:	d01a      	beq.n	800574a <HAL_TIM_ConfigClockSource+0xa6>
 8005714:	2b70      	cmp	r3, #112	; 0x70
 8005716:	d87b      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x16c>
 8005718:	2b60      	cmp	r3, #96	; 0x60
 800571a:	d050      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x11a>
 800571c:	2b60      	cmp	r3, #96	; 0x60
 800571e:	d877      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x16c>
 8005720:	2b50      	cmp	r3, #80	; 0x50
 8005722:	d03c      	beq.n	800579e <HAL_TIM_ConfigClockSource+0xfa>
 8005724:	2b50      	cmp	r3, #80	; 0x50
 8005726:	d873      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x16c>
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d058      	beq.n	80057de <HAL_TIM_ConfigClockSource+0x13a>
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d86f      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x16c>
 8005730:	2b30      	cmp	r3, #48	; 0x30
 8005732:	d064      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x15a>
 8005734:	2b30      	cmp	r3, #48	; 0x30
 8005736:	d86b      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b20      	cmp	r3, #32
 800573a:	d060      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x15a>
 800573c:	2b20      	cmp	r3, #32
 800573e:	d867      	bhi.n	8005810 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b00      	cmp	r3, #0
 8005742:	d05c      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x15a>
 8005744:	2b10      	cmp	r3, #16
 8005746:	d05a      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x15a>
 8005748:	e062      	b.n	8005810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6899      	ldr	r1, [r3, #8]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f000 fc71 	bl	8006040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800576c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	609a      	str	r2, [r3, #8]
      break;
 8005776:	e04f      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f000 fc5a 	bl	8006040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800579a:	609a      	str	r2, [r3, #8]
      break;
 800579c:	e03c      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6859      	ldr	r1, [r3, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f000 fb18 	bl	8005de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2150      	movs	r1, #80	; 0x50
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fc27 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 80057bc:	e02c      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	6859      	ldr	r1, [r3, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f000 fb74 	bl	8005eb8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2160      	movs	r1, #96	; 0x60
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fc17 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 80057dc:	e01c      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6859      	ldr	r1, [r3, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f000 faf8 	bl	8005de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2140      	movs	r1, #64	; 0x40
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fc07 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 80057fc:	e00c      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4619      	mov	r1, r3
 8005808:	4610      	mov	r0, r2
 800580a:	f000 fbfe 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 800580e:	e003      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	73fb      	strb	r3, [r7, #15]
      break;
 8005814:	e000      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b0c      	cmp	r3, #12
 8005846:	d831      	bhi.n	80058ac <HAL_TIM_ReadCapturedValue+0x78>
 8005848:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <HAL_TIM_ReadCapturedValue+0x1c>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005885 	.word	0x08005885
 8005854:	080058ad 	.word	0x080058ad
 8005858:	080058ad 	.word	0x080058ad
 800585c:	080058ad 	.word	0x080058ad
 8005860:	0800588f 	.word	0x0800588f
 8005864:	080058ad 	.word	0x080058ad
 8005868:	080058ad 	.word	0x080058ad
 800586c:	080058ad 	.word	0x080058ad
 8005870:	08005899 	.word	0x08005899
 8005874:	080058ad 	.word	0x080058ad
 8005878:	080058ad 	.word	0x080058ad
 800587c:	080058ad 	.word	0x080058ad
 8005880:	080058a3 	.word	0x080058a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	60fb      	str	r3, [r7, #12]

      break;
 800588c:	e00f      	b.n	80058ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	60fb      	str	r3, [r7, #12]

      break;
 8005896:	e00a      	b.n	80058ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	60fb      	str	r3, [r7, #12]

      break;
 80058a0:	e005      	b.n	80058ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	60fb      	str	r3, [r7, #12]

      break;
 80058aa:	e000      	b.n	80058ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80058ac:	bf00      	nop
  }

  return tmpreg;
 80058ae:	68fb      	ldr	r3, [r7, #12]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a34      	ldr	r2, [pc, #208]	; (80059dc <TIM_Base_SetConfig+0xe4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00f      	beq.n	8005930 <TIM_Base_SetConfig+0x38>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005916:	d00b      	beq.n	8005930 <TIM_Base_SetConfig+0x38>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a31      	ldr	r2, [pc, #196]	; (80059e0 <TIM_Base_SetConfig+0xe8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d007      	beq.n	8005930 <TIM_Base_SetConfig+0x38>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a30      	ldr	r2, [pc, #192]	; (80059e4 <TIM_Base_SetConfig+0xec>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_Base_SetConfig+0x38>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a2f      	ldr	r2, [pc, #188]	; (80059e8 <TIM_Base_SetConfig+0xf0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d108      	bne.n	8005942 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a25      	ldr	r2, [pc, #148]	; (80059dc <TIM_Base_SetConfig+0xe4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01b      	beq.n	8005982 <TIM_Base_SetConfig+0x8a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005950:	d017      	beq.n	8005982 <TIM_Base_SetConfig+0x8a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a22      	ldr	r2, [pc, #136]	; (80059e0 <TIM_Base_SetConfig+0xe8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <TIM_Base_SetConfig+0x8a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a21      	ldr	r2, [pc, #132]	; (80059e4 <TIM_Base_SetConfig+0xec>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00f      	beq.n	8005982 <TIM_Base_SetConfig+0x8a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <TIM_Base_SetConfig+0xf0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00b      	beq.n	8005982 <TIM_Base_SetConfig+0x8a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a1f      	ldr	r2, [pc, #124]	; (80059ec <TIM_Base_SetConfig+0xf4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <TIM_Base_SetConfig+0x8a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a1e      	ldr	r2, [pc, #120]	; (80059f0 <TIM_Base_SetConfig+0xf8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_Base_SetConfig+0x8a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <TIM_Base_SetConfig+0xfc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d108      	bne.n	8005994 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a08      	ldr	r2, [pc, #32]	; (80059dc <TIM_Base_SetConfig+0xe4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d103      	bne.n	80059c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	615a      	str	r2, [r3, #20]
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800

080059f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f023 0201 	bic.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 0302 	bic.w	r3, r3, #2
 8005a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a1c      	ldr	r2, [pc, #112]	; (8005ac0 <TIM_OC1_SetConfig+0xc8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d10c      	bne.n	8005a6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f023 0308 	bic.w	r3, r3, #8
 8005a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f023 0304 	bic.w	r3, r3, #4
 8005a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <TIM_OC1_SetConfig+0xc8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d111      	bne.n	8005a9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	40010000 	.word	0x40010000

08005ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f023 0210 	bic.w	r2, r3, #16
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f023 0320 	bic.w	r3, r3, #32
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <TIM_OC2_SetConfig+0xd4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d10d      	bne.n	8005b40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <TIM_OC2_SetConfig+0xd4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d113      	bne.n	8005b70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40010000 	.word	0x40010000

08005b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1d      	ldr	r2, [pc, #116]	; (8005c6c <TIM_OC3_SetConfig+0xd0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d10d      	bne.n	8005c16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a14      	ldr	r2, [pc, #80]	; (8005c6c <TIM_OC3_SetConfig+0xd0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d113      	bne.n	8005c46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	621a      	str	r2, [r3, #32]
}
 8005c60:	bf00      	nop
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	40010000 	.word	0x40010000

08005c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	031b      	lsls	r3, r3, #12
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a10      	ldr	r2, [pc, #64]	; (8005d0c <TIM_OC4_SetConfig+0x9c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d109      	bne.n	8005ce4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	019b      	lsls	r3, r3, #6
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	621a      	str	r2, [r3, #32]
}
 8005cfe:	bf00      	nop
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40010000 	.word	0x40010000

08005d10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4a24      	ldr	r2, [pc, #144]	; (8005dcc <TIM_TI1_SetConfig+0xbc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <TIM_TI1_SetConfig+0x56>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d44:	d00f      	beq.n	8005d66 <TIM_TI1_SetConfig+0x56>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4a21      	ldr	r2, [pc, #132]	; (8005dd0 <TIM_TI1_SetConfig+0xc0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <TIM_TI1_SetConfig+0x56>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4a20      	ldr	r2, [pc, #128]	; (8005dd4 <TIM_TI1_SetConfig+0xc4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_TI1_SetConfig+0x56>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <TIM_TI1_SetConfig+0xc8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_TI1_SetConfig+0x56>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <TIM_TI1_SetConfig+0xcc>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d101      	bne.n	8005d6a <TIM_TI1_SetConfig+0x5a>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <TIM_TI1_SetConfig+0x5c>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d008      	beq.n	8005d82 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e003      	b.n	8005d8a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f043 0301 	orr.w	r3, r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f023 030a 	bic.w	r3, r3, #10
 8005da4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f003 030a 	and.w	r3, r3, #10
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40014000 	.word	0x40014000

08005de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0201 	bic.w	r2, r3, #1
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 030a 	bic.w	r3, r3, #10
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b087      	sub	sp, #28
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
 8005e4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f023 0210 	bic.w	r2, r3, #16
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	031b      	lsls	r3, r3, #12
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	621a      	str	r2, [r3, #32]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f023 0210 	bic.w	r2, r3, #16
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ee2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	031b      	lsls	r3, r3, #12
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ef4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	621a      	str	r2, [r3, #32]
}
 8005f0c:	bf00      	nop
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f023 0303 	bic.w	r3, r3, #3
 8005f44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	031b      	lsls	r3, r3, #12
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005fe2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	031b      	lsls	r3, r3, #12
 8005fe8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	f043 0307 	orr.w	r3, r3, #7
 800602c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800605a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	021a      	lsls	r2, r3, #8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	431a      	orrs	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2201      	movs	r2, #1
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1a      	ldr	r2, [r3, #32]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	43db      	mvns	r3, r3
 80060a2:	401a      	ands	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a1a      	ldr	r2, [r3, #32]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	fa01 f303 	lsl.w	r3, r1, r3
 80060b8:	431a      	orrs	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e050      	b.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1c      	ldr	r2, [pc, #112]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d018      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006130:	d013      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a18      	ldr	r2, [pc, #96]	; (8006198 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00e      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a16      	ldr	r2, [pc, #88]	; (800619c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d009      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a15      	ldr	r2, [pc, #84]	; (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a13      	ldr	r2, [pc, #76]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d10c      	bne.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	4313      	orrs	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40010000 	.word	0x40010000
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40014000 	.word	0x40014000

080061a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e03f      	b.n	8006262 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fd fc26 	bl	8003a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2224      	movs	r2, #36	; 0x24
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fddf 	bl	8006dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695a      	ldr	r2, [r3, #20]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b08a      	sub	sp, #40	; 0x28
 800626e:	af02      	add	r7, sp, #8
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b20      	cmp	r3, #32
 8006288:	d17c      	bne.n	8006384 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <HAL_UART_Transmit+0x2c>
 8006290:	88fb      	ldrh	r3, [r7, #6]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e075      	b.n	8006386 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_UART_Transmit+0x3e>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e06e      	b.n	8006386 <HAL_UART_Transmit+0x11c>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2221      	movs	r2, #33	; 0x21
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062be:	f7fd fc73 	bl	8003ba8 <HAL_GetTick>
 80062c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	88fa      	ldrh	r2, [r7, #6]
 80062ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d8:	d108      	bne.n	80062ec <HAL_UART_Transmit+0x82>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	61bb      	str	r3, [r7, #24]
 80062ea:	e003      	b.n	80062f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80062fc:	e02a      	b.n	8006354 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2200      	movs	r2, #0
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fb1f 	bl	800694c <UART_WaitOnFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e036      	b.n	8006386 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10b      	bne.n	8006336 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800632c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	3302      	adds	r3, #2
 8006332:	61bb      	str	r3, [r7, #24]
 8006334:	e007      	b.n	8006346 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	3301      	adds	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1cf      	bne.n	80062fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2200      	movs	r2, #0
 8006366:	2140      	movs	r1, #64	; 0x40
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 faef 	bl	800694c <UART_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e006      	b.n	8006386 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e000      	b.n	8006386 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006384:	2302      	movs	r3, #2
  }
}
 8006386:	4618      	mov	r0, r3
 8006388:	3720      	adds	r7, #32
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	4613      	mov	r3, r2
 800639a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d11d      	bne.n	80063e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_UART_Receive_IT+0x26>
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e016      	b.n	80063e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Receive_IT+0x38>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e00f      	b.n	80063e6 <HAL_UART_Receive_IT+0x58>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	461a      	mov	r2, r3
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 fb24 	bl	8006a28 <UART_Start_Receive_IT>
 80063e0:	4603      	mov	r3, r0
 80063e2:	e000      	b.n	80063e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
  }
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b0ba      	sub	sp, #232	; 0xe8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006416:	2300      	movs	r3, #0
 8006418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800641c:	2300      	movs	r3, #0
 800641e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800642e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10f      	bne.n	8006456 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_UART_IRQHandler+0x66>
 8006442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fc07 	bl	8006c62 <UART_Receive_IT>
      return;
 8006454:	e256      	b.n	8006904 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80de 	beq.w	800661c <HAL_UART_IRQHandler+0x22c>
 8006460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800646c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006470:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80d1 	beq.w	800661c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00b      	beq.n	800649e <HAL_UART_IRQHandler+0xae>
 8006486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800648a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	f043 0201 	orr.w	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800649e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <HAL_UART_IRQHandler+0xd2>
 80064aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f043 0202 	orr.w	r2, r3, #2
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <HAL_UART_IRQHandler+0xf6>
 80064ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f043 0204 	orr.w	r2, r3, #4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d011      	beq.n	8006516 <HAL_UART_IRQHandler+0x126>
 80064f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	f043 0208 	orr.w	r2, r3, #8
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 81ed 	beq.w	80068fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <HAL_UART_IRQHandler+0x14e>
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fb92 	bl	8006c62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <HAL_UART_IRQHandler+0x17a>
 8006562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d04f      	beq.n	800660a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa9a 	bl	8006aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d141      	bne.n	8006602 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3314      	adds	r3, #20
 8006584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1d9      	bne.n	800657e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d013      	beq.n	80065fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	4a7d      	ldr	r2, [pc, #500]	; (80067cc <HAL_UART_IRQHandler+0x3dc>)
 80065d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fd fc40 	bl	8003e64 <HAL_DMA_Abort_IT>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d016      	beq.n	8006618 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065f4:	4610      	mov	r0, r2
 80065f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f8:	e00e      	b.n	8006618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f990 	bl	8006920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006600:	e00a      	b.n	8006618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f98c 	bl	8006920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	e006      	b.n	8006618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f988 	bl	8006920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006616:	e170      	b.n	80068fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006618:	bf00      	nop
    return;
 800661a:	e16e      	b.n	80068fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	2b01      	cmp	r3, #1
 8006622:	f040 814a 	bne.w	80068ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 8143 	beq.w	80068ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 813c 	beq.w	80068ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006642:	2300      	movs	r3, #0
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	f040 80b4 	bne.w	80067d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006674:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8140 	beq.w	80068fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006686:	429a      	cmp	r2, r3
 8006688:	f080 8139 	bcs.w	80068fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006692:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669e:	f000 8088 	beq.w	80067b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	330c      	adds	r3, #12
 80066a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	330c      	adds	r3, #12
 80066ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1d9      	bne.n	80066a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3314      	adds	r3, #20
 80066f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006700:	f023 0301 	bic.w	r3, r3, #1
 8006704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3314      	adds	r3, #20
 800670e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006712:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006716:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800671a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800671e:	e841 2300 	strex	r3, r2, [r1]
 8006722:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1e1      	bne.n	80066ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3314      	adds	r3, #20
 8006730:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800673a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800673c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3314      	adds	r3, #20
 800674a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800674e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006750:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006754:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800675c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e3      	bne.n	800672a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006782:	f023 0310 	bic.w	r3, r3, #16
 8006786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006794:	65ba      	str	r2, [r7, #88]	; 0x58
 8006796:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800679a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e3      	bne.n	8006770 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fd fae9 	bl	8003d84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	b29b      	uxth	r3, r3
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f8b6 	bl	8006934 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067c8:	e099      	b.n	80068fe <HAL_UART_IRQHandler+0x50e>
 80067ca:	bf00      	nop
 80067cc:	08006b6b 	.word	0x08006b6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d8:	b29b      	uxth	r3, r3
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 808b 	beq.w	8006902 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80067ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8086 	beq.w	8006902 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800680c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	330c      	adds	r3, #12
 8006816:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800681a:	647a      	str	r2, [r7, #68]	; 0x44
 800681c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e3      	bne.n	80067f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3314      	adds	r3, #20
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	623b      	str	r3, [r7, #32]
   return(result);
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	f023 0301 	bic.w	r3, r3, #1
 8006844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3314      	adds	r3, #20
 800684e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006852:	633a      	str	r2, [r7, #48]	; 0x30
 8006854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e3      	bne.n	800682e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	330c      	adds	r3, #12
 800687a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	60fb      	str	r3, [r7, #12]
   return(result);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0310 	bic.w	r3, r3, #16
 800688a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	330c      	adds	r3, #12
 8006894:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006898:	61fa      	str	r2, [r7, #28]
 800689a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	69b9      	ldr	r1, [r7, #24]
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	617b      	str	r3, [r7, #20]
   return(result);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e3      	bne.n	8006874 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f83e 	bl	8006934 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068b8:	e023      	b.n	8006902 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <HAL_UART_IRQHandler+0x4ea>
 80068c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f95d 	bl	8006b92 <UART_Transmit_IT>
    return;
 80068d8:	e014      	b.n	8006904 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00e      	beq.n	8006904 <HAL_UART_IRQHandler+0x514>
 80068e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f99d 	bl	8006c32 <UART_EndTransmit_IT>
    return;
 80068f8:	e004      	b.n	8006904 <HAL_UART_IRQHandler+0x514>
    return;
 80068fa:	bf00      	nop
 80068fc:	e002      	b.n	8006904 <HAL_UART_IRQHandler+0x514>
      return;
 80068fe:	bf00      	nop
 8006900:	e000      	b.n	8006904 <HAL_UART_IRQHandler+0x514>
      return;
 8006902:	bf00      	nop
  }
}
 8006904:	37e8      	adds	r7, #232	; 0xe8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop

0800690c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b090      	sub	sp, #64	; 0x40
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695c:	e050      	b.n	8006a00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d04c      	beq.n	8006a00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006968:	2b00      	cmp	r3, #0
 800696a:	d007      	beq.n	800697c <UART_WaitOnFlagUntilTimeout+0x30>
 800696c:	f7fd f91c 	bl	8003ba8 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006978:	429a      	cmp	r2, r3
 800697a:	d241      	bcs.n	8006a00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800699c:	637a      	str	r2, [r7, #52]	; 0x34
 800699e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e5      	bne.n	800697c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3314      	adds	r3, #20
 80069b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	613b      	str	r3, [r7, #16]
   return(result);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f023 0301 	bic.w	r3, r3, #1
 80069c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3314      	adds	r3, #20
 80069ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069d0:	623a      	str	r2, [r7, #32]
 80069d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	69f9      	ldr	r1, [r7, #28]
 80069d6:	6a3a      	ldr	r2, [r7, #32]
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e5      	bne.n	80069b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e00f      	b.n	8006a20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	bf0c      	ite	eq
 8006a10:	2301      	moveq	r3, #1
 8006a12:	2300      	movne	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d09f      	beq.n	800695e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3740      	adds	r7, #64	; 0x40
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4613      	mov	r3, r2
 8006a34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	88fa      	ldrh	r2, [r7, #6]
 8006a40:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	88fa      	ldrh	r2, [r7, #6]
 8006a46:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2222      	movs	r2, #34	; 0x22
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d007      	beq.n	8006a76 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	695a      	ldr	r2, [r3, #20]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0201 	orr.w	r2, r2, #1
 8006a84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0220 	orr.w	r2, r2, #32
 8006a94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b095      	sub	sp, #84	; 0x54
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006acc:	643a      	str	r2, [r7, #64]	; 0x40
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e5      	bne.n	8006aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3314      	adds	r3, #20
 8006ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e5      	bne.n	8006ae0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d119      	bne.n	8006b50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f023 0310 	bic.w	r3, r3, #16
 8006b32:	647b      	str	r3, [r7, #68]	; 0x44
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b3c:	61ba      	str	r2, [r7, #24]
 8006b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6979      	ldr	r1, [r7, #20]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e5      	bne.n	8006b1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b5e:	bf00      	nop
 8006b60:	3754      	adds	r7, #84	; 0x54
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7ff fecb 	bl	8006920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b21      	cmp	r3, #33	; 0x21
 8006ba4:	d13e      	bne.n	8006c24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bae:	d114      	bne.n	8006bda <UART_Transmit_IT+0x48>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d110      	bne.n	8006bda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	1c9a      	adds	r2, r3, #2
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	621a      	str	r2, [r3, #32]
 8006bd8:	e008      	b.n	8006bec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	1c59      	adds	r1, r3, #1
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6211      	str	r1, [r2, #32]
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10f      	bne.n	8006c20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	e000      	b.n	8006c26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c24:	2302      	movs	r3, #2
  }
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff fe5a 	bl	800690c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b08c      	sub	sp, #48	; 0x30
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b22      	cmp	r3, #34	; 0x22
 8006c74:	f040 80ab 	bne.w	8006dce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c80:	d117      	bne.n	8006cb2 <UART_Receive_IT+0x50>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d113      	bne.n	8006cb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	1c9a      	adds	r2, r3, #2
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	629a      	str	r2, [r3, #40]	; 0x28
 8006cb0:	e026      	b.n	8006d00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc4:	d007      	beq.n	8006cd6 <UART_Receive_IT+0x74>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <UART_Receive_IT+0x82>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	e008      	b.n	8006cf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d15a      	bne.n	8006dca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0220 	bic.w	r2, r2, #32
 8006d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695a      	ldr	r2, [r3, #20]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0201 	bic.w	r2, r2, #1
 8006d42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d135      	bne.n	8006dc0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	613b      	str	r3, [r7, #16]
   return(result);
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f023 0310 	bic.w	r3, r3, #16
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	330c      	adds	r3, #12
 8006d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7a:	623a      	str	r2, [r7, #32]
 8006d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	69f9      	ldr	r1, [r7, #28]
 8006d80:	6a3a      	ldr	r2, [r7, #32]
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e5      	bne.n	8006d5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d10a      	bne.n	8006db2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fdbb 	bl	8006934 <HAL_UARTEx_RxEventCallback>
 8006dbe:	e002      	b.n	8006dc6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fc f8e9 	bl	8002f98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e002      	b.n	8006dd0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e000      	b.n	8006dd0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006dce:	2302      	movs	r3, #2
  }
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3730      	adds	r7, #48	; 0x30
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ddc:	b0c0      	sub	sp, #256	; 0x100
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df4:	68d9      	ldr	r1, [r3, #12]
 8006df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	ea40 0301 	orr.w	r3, r0, r1
 8006e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	431a      	orrs	r2, r3
 8006e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e30:	f021 010c 	bic.w	r1, r1, #12
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e3e:	430b      	orrs	r3, r1
 8006e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e52:	6999      	ldr	r1, [r3, #24]
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	ea40 0301 	orr.w	r3, r0, r1
 8006e5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b8f      	ldr	r3, [pc, #572]	; (80070a4 <UART_SetConfig+0x2cc>)
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d005      	beq.n	8006e78 <UART_SetConfig+0xa0>
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b8d      	ldr	r3, [pc, #564]	; (80070a8 <UART_SetConfig+0x2d0>)
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d104      	bne.n	8006e82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e78:	f7fd fe42 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8006e7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e80:	e003      	b.n	8006e8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e82:	f7fd fe29 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8006e86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e94:	f040 810c 	bne.w	80070b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ea2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ea6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006eaa:	4622      	mov	r2, r4
 8006eac:	462b      	mov	r3, r5
 8006eae:	1891      	adds	r1, r2, r2
 8006eb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006eb2:	415b      	adcs	r3, r3
 8006eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006eba:	4621      	mov	r1, r4
 8006ebc:	eb12 0801 	adds.w	r8, r2, r1
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	eb43 0901 	adc.w	r9, r3, r1
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eda:	4690      	mov	r8, r2
 8006edc:	4699      	mov	r9, r3
 8006ede:	4623      	mov	r3, r4
 8006ee0:	eb18 0303 	adds.w	r3, r8, r3
 8006ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ee8:	462b      	mov	r3, r5
 8006eea:	eb49 0303 	adc.w	r3, r9, r3
 8006eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006efe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f06:	460b      	mov	r3, r1
 8006f08:	18db      	adds	r3, r3, r3
 8006f0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	eb42 0303 	adc.w	r3, r2, r3
 8006f12:	657b      	str	r3, [r7, #84]	; 0x54
 8006f14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f1c:	f7f9 fe26 	bl	8000b6c <__aeabi_uldivmod>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4b61      	ldr	r3, [pc, #388]	; (80070ac <UART_SetConfig+0x2d4>)
 8006f26:	fba3 2302 	umull	r2, r3, r3, r2
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	011c      	lsls	r4, r3, #4
 8006f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f40:	4642      	mov	r2, r8
 8006f42:	464b      	mov	r3, r9
 8006f44:	1891      	adds	r1, r2, r2
 8006f46:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f48:	415b      	adcs	r3, r3
 8006f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f50:	4641      	mov	r1, r8
 8006f52:	eb12 0a01 	adds.w	sl, r2, r1
 8006f56:	4649      	mov	r1, r9
 8006f58:	eb43 0b01 	adc.w	fp, r3, r1
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f70:	4692      	mov	sl, r2
 8006f72:	469b      	mov	fp, r3
 8006f74:	4643      	mov	r3, r8
 8006f76:	eb1a 0303 	adds.w	r3, sl, r3
 8006f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f7e:	464b      	mov	r3, r9
 8006f80:	eb4b 0303 	adc.w	r3, fp, r3
 8006f84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	18db      	adds	r3, r3, r3
 8006fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	eb42 0303 	adc.w	r3, r2, r3
 8006fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8006faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006fb2:	f7f9 fddb 	bl	8000b6c <__aeabi_uldivmod>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4b3b      	ldr	r3, [pc, #236]	; (80070ac <UART_SetConfig+0x2d4>)
 8006fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	2264      	movs	r2, #100	; 0x64
 8006fc6:	fb02 f303 	mul.w	r3, r2, r3
 8006fca:	1acb      	subs	r3, r1, r3
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fd2:	4b36      	ldr	r3, [pc, #216]	; (80070ac <UART_SetConfig+0x2d4>)
 8006fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fd8:	095b      	lsrs	r3, r3, #5
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fe0:	441c      	add	r4, r3
 8006fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ff0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ff4:	4642      	mov	r2, r8
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	1891      	adds	r1, r2, r2
 8006ffa:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ffc:	415b      	adcs	r3, r3
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007004:	4641      	mov	r1, r8
 8007006:	1851      	adds	r1, r2, r1
 8007008:	6339      	str	r1, [r7, #48]	; 0x30
 800700a:	4649      	mov	r1, r9
 800700c:	414b      	adcs	r3, r1
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800701c:	4659      	mov	r1, fp
 800701e:	00cb      	lsls	r3, r1, #3
 8007020:	4651      	mov	r1, sl
 8007022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007026:	4651      	mov	r1, sl
 8007028:	00ca      	lsls	r2, r1, #3
 800702a:	4610      	mov	r0, r2
 800702c:	4619      	mov	r1, r3
 800702e:	4603      	mov	r3, r0
 8007030:	4642      	mov	r2, r8
 8007032:	189b      	adds	r3, r3, r2
 8007034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007038:	464b      	mov	r3, r9
 800703a:	460a      	mov	r2, r1
 800703c:	eb42 0303 	adc.w	r3, r2, r3
 8007040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007050:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007058:	460b      	mov	r3, r1
 800705a:	18db      	adds	r3, r3, r3
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
 800705e:	4613      	mov	r3, r2
 8007060:	eb42 0303 	adc.w	r3, r2, r3
 8007064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800706a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800706e:	f7f9 fd7d 	bl	8000b6c <__aeabi_uldivmod>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <UART_SetConfig+0x2d4>)
 8007078:	fba3 1302 	umull	r1, r3, r3, r2
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	2164      	movs	r1, #100	; 0x64
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	3332      	adds	r3, #50	; 0x32
 800708a:	4a08      	ldr	r2, [pc, #32]	; (80070ac <UART_SetConfig+0x2d4>)
 800708c:	fba2 2303 	umull	r2, r3, r2, r3
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	f003 0207 	and.w	r2, r3, #7
 8007096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4422      	add	r2, r4
 800709e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070a0:	e105      	b.n	80072ae <UART_SetConfig+0x4d6>
 80070a2:	bf00      	nop
 80070a4:	40011000 	.word	0x40011000
 80070a8:	40011400 	.word	0x40011400
 80070ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80070be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80070c2:	4642      	mov	r2, r8
 80070c4:	464b      	mov	r3, r9
 80070c6:	1891      	adds	r1, r2, r2
 80070c8:	6239      	str	r1, [r7, #32]
 80070ca:	415b      	adcs	r3, r3
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
 80070ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070d2:	4641      	mov	r1, r8
 80070d4:	1854      	adds	r4, r2, r1
 80070d6:	4649      	mov	r1, r9
 80070d8:	eb43 0501 	adc.w	r5, r3, r1
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	00eb      	lsls	r3, r5, #3
 80070e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070ea:	00e2      	lsls	r2, r4, #3
 80070ec:	4614      	mov	r4, r2
 80070ee:	461d      	mov	r5, r3
 80070f0:	4643      	mov	r3, r8
 80070f2:	18e3      	adds	r3, r4, r3
 80070f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070f8:	464b      	mov	r3, r9
 80070fa:	eb45 0303 	adc.w	r3, r5, r3
 80070fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800710e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800711e:	4629      	mov	r1, r5
 8007120:	008b      	lsls	r3, r1, #2
 8007122:	4621      	mov	r1, r4
 8007124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007128:	4621      	mov	r1, r4
 800712a:	008a      	lsls	r2, r1, #2
 800712c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007130:	f7f9 fd1c 	bl	8000b6c <__aeabi_uldivmod>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4b60      	ldr	r3, [pc, #384]	; (80072bc <UART_SetConfig+0x4e4>)
 800713a:	fba3 2302 	umull	r2, r3, r3, r2
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	011c      	lsls	r4, r3, #4
 8007142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007146:	2200      	movs	r2, #0
 8007148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800714c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007150:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007154:	4642      	mov	r2, r8
 8007156:	464b      	mov	r3, r9
 8007158:	1891      	adds	r1, r2, r2
 800715a:	61b9      	str	r1, [r7, #24]
 800715c:	415b      	adcs	r3, r3
 800715e:	61fb      	str	r3, [r7, #28]
 8007160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007164:	4641      	mov	r1, r8
 8007166:	1851      	adds	r1, r2, r1
 8007168:	6139      	str	r1, [r7, #16]
 800716a:	4649      	mov	r1, r9
 800716c:	414b      	adcs	r3, r1
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800717c:	4659      	mov	r1, fp
 800717e:	00cb      	lsls	r3, r1, #3
 8007180:	4651      	mov	r1, sl
 8007182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007186:	4651      	mov	r1, sl
 8007188:	00ca      	lsls	r2, r1, #3
 800718a:	4610      	mov	r0, r2
 800718c:	4619      	mov	r1, r3
 800718e:	4603      	mov	r3, r0
 8007190:	4642      	mov	r2, r8
 8007192:	189b      	adds	r3, r3, r2
 8007194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007198:	464b      	mov	r3, r9
 800719a:	460a      	mov	r2, r1
 800719c:	eb42 0303 	adc.w	r3, r2, r3
 80071a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80071ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80071bc:	4649      	mov	r1, r9
 80071be:	008b      	lsls	r3, r1, #2
 80071c0:	4641      	mov	r1, r8
 80071c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071c6:	4641      	mov	r1, r8
 80071c8:	008a      	lsls	r2, r1, #2
 80071ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071ce:	f7f9 fccd 	bl	8000b6c <__aeabi_uldivmod>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4b39      	ldr	r3, [pc, #228]	; (80072bc <UART_SetConfig+0x4e4>)
 80071d8:	fba3 1302 	umull	r1, r3, r3, r2
 80071dc:	095b      	lsrs	r3, r3, #5
 80071de:	2164      	movs	r1, #100	; 0x64
 80071e0:	fb01 f303 	mul.w	r3, r1, r3
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	3332      	adds	r3, #50	; 0x32
 80071ea:	4a34      	ldr	r2, [pc, #208]	; (80072bc <UART_SetConfig+0x4e4>)
 80071ec:	fba2 2303 	umull	r2, r3, r2, r3
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071f6:	441c      	add	r4, r3
 80071f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071fc:	2200      	movs	r2, #0
 80071fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007200:	677a      	str	r2, [r7, #116]	; 0x74
 8007202:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007206:	4642      	mov	r2, r8
 8007208:	464b      	mov	r3, r9
 800720a:	1891      	adds	r1, r2, r2
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	415b      	adcs	r3, r3
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007216:	4641      	mov	r1, r8
 8007218:	1851      	adds	r1, r2, r1
 800721a:	6039      	str	r1, [r7, #0]
 800721c:	4649      	mov	r1, r9
 800721e:	414b      	adcs	r3, r1
 8007220:	607b      	str	r3, [r7, #4]
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	f04f 0300 	mov.w	r3, #0
 800722a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800722e:	4659      	mov	r1, fp
 8007230:	00cb      	lsls	r3, r1, #3
 8007232:	4651      	mov	r1, sl
 8007234:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007238:	4651      	mov	r1, sl
 800723a:	00ca      	lsls	r2, r1, #3
 800723c:	4610      	mov	r0, r2
 800723e:	4619      	mov	r1, r3
 8007240:	4603      	mov	r3, r0
 8007242:	4642      	mov	r2, r8
 8007244:	189b      	adds	r3, r3, r2
 8007246:	66bb      	str	r3, [r7, #104]	; 0x68
 8007248:	464b      	mov	r3, r9
 800724a:	460a      	mov	r2, r1
 800724c:	eb42 0303 	adc.w	r3, r2, r3
 8007250:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	663b      	str	r3, [r7, #96]	; 0x60
 800725c:	667a      	str	r2, [r7, #100]	; 0x64
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800726a:	4649      	mov	r1, r9
 800726c:	008b      	lsls	r3, r1, #2
 800726e:	4641      	mov	r1, r8
 8007270:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007274:	4641      	mov	r1, r8
 8007276:	008a      	lsls	r2, r1, #2
 8007278:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800727c:	f7f9 fc76 	bl	8000b6c <__aeabi_uldivmod>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <UART_SetConfig+0x4e4>)
 8007286:	fba3 1302 	umull	r1, r3, r3, r2
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	2164      	movs	r1, #100	; 0x64
 800728e:	fb01 f303 	mul.w	r3, r1, r3
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	3332      	adds	r3, #50	; 0x32
 8007298:	4a08      	ldr	r2, [pc, #32]	; (80072bc <UART_SetConfig+0x4e4>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	f003 020f 	and.w	r2, r3, #15
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4422      	add	r2, r4
 80072ac:	609a      	str	r2, [r3, #8]
}
 80072ae:	bf00      	nop
 80072b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80072b4:	46bd      	mov	sp, r7
 80072b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ba:	bf00      	nop
 80072bc:	51eb851f 	.word	0x51eb851f

080072c0 <__NVIC_SetPriority>:
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	db0a      	blt.n	80072ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	490c      	ldr	r1, [pc, #48]	; (800730c <__NVIC_SetPriority+0x4c>)
 80072da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072de:	0112      	lsls	r2, r2, #4
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	440b      	add	r3, r1
 80072e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80072e8:	e00a      	b.n	8007300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	4908      	ldr	r1, [pc, #32]	; (8007310 <__NVIC_SetPriority+0x50>)
 80072f0:	79fb      	ldrb	r3, [r7, #7]
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	3b04      	subs	r3, #4
 80072f8:	0112      	lsls	r2, r2, #4
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	440b      	add	r3, r1
 80072fe:	761a      	strb	r2, [r3, #24]
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	e000e100 	.word	0xe000e100
 8007310:	e000ed00 	.word	0xe000ed00

08007314 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <SysTick_Handler+0x1c>)
 800731a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800731c:	f001 fe8e 	bl	800903c <xTaskGetSchedulerState>
 8007320:	4603      	mov	r3, r0
 8007322:	2b01      	cmp	r3, #1
 8007324:	d001      	beq.n	800732a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007326:	f002 fc77 	bl	8009c18 <xPortSysTickHandler>
  }
}
 800732a:	bf00      	nop
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	e000e010 	.word	0xe000e010

08007334 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007338:	2100      	movs	r1, #0
 800733a:	f06f 0004 	mvn.w	r0, #4
 800733e:	f7ff ffbf 	bl	80072c0 <__NVIC_SetPriority>
#endif
}
 8007342:	bf00      	nop
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800734e:	f3ef 8305 	mrs	r3, IPSR
 8007352:	603b      	str	r3, [r7, #0]
  return(result);
 8007354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800735a:	f06f 0305 	mvn.w	r3, #5
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	e00c      	b.n	800737c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007362:	4b0a      	ldr	r3, [pc, #40]	; (800738c <osKernelInitialize+0x44>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d105      	bne.n	8007376 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800736a:	4b08      	ldr	r3, [pc, #32]	; (800738c <osKernelInitialize+0x44>)
 800736c:	2201      	movs	r2, #1
 800736e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007370:	2300      	movs	r3, #0
 8007372:	607b      	str	r3, [r7, #4]
 8007374:	e002      	b.n	800737c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007376:	f04f 33ff 	mov.w	r3, #4294967295
 800737a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800737c:	687b      	ldr	r3, [r7, #4]
}
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20000314 	.word	0x20000314

08007390 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007396:	f3ef 8305 	mrs	r3, IPSR
 800739a:	603b      	str	r3, [r7, #0]
  return(result);
 800739c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80073a2:	f06f 0305 	mvn.w	r3, #5
 80073a6:	607b      	str	r3, [r7, #4]
 80073a8:	e010      	b.n	80073cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073aa:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <osKernelStart+0x48>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d109      	bne.n	80073c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073b2:	f7ff ffbf 	bl	8007334 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073b6:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <osKernelStart+0x48>)
 80073b8:	2202      	movs	r2, #2
 80073ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073bc:	f001 fa2e 	bl	800881c <vTaskStartScheduler>
      stat = osOK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	607b      	str	r3, [r7, #4]
 80073c4:	e002      	b.n	80073cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073cc:	687b      	ldr	r3, [r7, #4]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000314 	.word	0x20000314

080073dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08e      	sub	sp, #56	; 0x38
 80073e0:	af04      	add	r7, sp, #16
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ec:	f3ef 8305 	mrs	r3, IPSR
 80073f0:	617b      	str	r3, [r7, #20]
  return(result);
 80073f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d17e      	bne.n	80074f6 <osThreadNew+0x11a>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d07b      	beq.n	80074f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073fe:	2380      	movs	r3, #128	; 0x80
 8007400:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007402:	2318      	movs	r3, #24
 8007404:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295
 800740e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d045      	beq.n	80074a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <osThreadNew+0x48>
        name = attr->name;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <osThreadNew+0x6e>
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2b38      	cmp	r3, #56	; 0x38
 800743c:	d805      	bhi.n	800744a <osThreadNew+0x6e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <osThreadNew+0x72>
        return (NULL);
 800744a:	2300      	movs	r3, #0
 800744c:	e054      	b.n	80074f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	089b      	lsrs	r3, r3, #2
 800745c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <osThreadNew+0xa8>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	2b5b      	cmp	r3, #91	; 0x5b
 800746c:	d90a      	bls.n	8007484 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007472:	2b00      	cmp	r3, #0
 8007474:	d006      	beq.n	8007484 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <osThreadNew+0xa8>
        mem = 1;
 800747e:	2301      	movs	r3, #1
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e010      	b.n	80074a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10c      	bne.n	80074a6 <osThreadNew+0xca>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d108      	bne.n	80074a6 <osThreadNew+0xca>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <osThreadNew+0xca>
          mem = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	e001      	b.n	80074a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d110      	bne.n	80074ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074b4:	9202      	str	r2, [sp, #8]
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	6a3a      	ldr	r2, [r7, #32]
 80074c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 ffe4 	bl	8008490 <xTaskCreateStatic>
 80074c8:	4603      	mov	r3, r0
 80074ca:	613b      	str	r3, [r7, #16]
 80074cc:	e013      	b.n	80074f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d110      	bne.n	80074f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	f107 0310 	add.w	r3, r7, #16
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f001 f82f 	bl	800854a <xTaskCreate>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d001      	beq.n	80074f6 <osThreadNew+0x11a>
            hTask = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074f6:	693b      	ldr	r3, [r7, #16]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3728      	adds	r7, #40	; 0x28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007506:	f3ef 8305 	mrs	r3, IPSR
 800750a:	603b      	str	r3, [r7, #0]
  return(result);
 800750c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <osThreadYield+0x1a>
    stat = osErrorISR;
 8007512:	f06f 0305 	mvn.w	r3, #5
 8007516:	607b      	str	r3, [r7, #4]
 8007518:	e009      	b.n	800752e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800751a:	2300      	movs	r3, #0
 800751c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800751e:	4b07      	ldr	r3, [pc, #28]	; (800753c <osThreadYield+0x3c>)
 8007520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800752e:	687b      	ldr	r3, [r7, #4]
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	e000ed04 	.word	0xe000ed04

08007540 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007548:	f3ef 8305 	mrs	r3, IPSR
 800754c:	60bb      	str	r3, [r7, #8]
  return(result);
 800754e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <osDelay+0x1c>
    stat = osErrorISR;
 8007554:	f06f 0305 	mvn.w	r3, #5
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	e007      	b.n	800756c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 f924 	bl	80087b4 <vTaskDelay>
    }
  }

  return (stat);
 800756c:	68fb      	ldr	r3, [r7, #12]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007576:	b580      	push	{r7, lr}
 8007578:	b08a      	sub	sp, #40	; 0x28
 800757a:	af02      	add	r7, sp, #8
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007586:	f3ef 8305 	mrs	r3, IPSR
 800758a:	613b      	str	r3, [r7, #16]
  return(result);
 800758c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800758e:	2b00      	cmp	r3, #0
 8007590:	d15f      	bne.n	8007652 <osMessageQueueNew+0xdc>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d05c      	beq.n	8007652 <osMessageQueueNew+0xdc>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d059      	beq.n	8007652 <osMessageQueueNew+0xdc>
    mem = -1;
 800759e:	f04f 33ff 	mov.w	r3, #4294967295
 80075a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d029      	beq.n	80075fe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d012      	beq.n	80075d8 <osMessageQueueNew+0x62>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	2b4f      	cmp	r3, #79	; 0x4f
 80075b8:	d90e      	bls.n	80075d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	fb01 f303 	mul.w	r3, r1, r3
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d302      	bcc.n	80075d8 <osMessageQueueNew+0x62>
        mem = 1;
 80075d2:	2301      	movs	r3, #1
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	e014      	b.n	8007602 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d110      	bne.n	8007602 <osMessageQueueNew+0x8c>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10c      	bne.n	8007602 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d108      	bne.n	8007602 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d104      	bne.n	8007602 <osMessageQueueNew+0x8c>
          mem = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	e001      	b.n	8007602 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d10b      	bne.n	8007620 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691a      	ldr	r2, [r3, #16]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2100      	movs	r1, #0
 8007612:	9100      	str	r1, [sp, #0]
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fa21 	bl	8007a5e <xQueueGenericCreateStatic>
 800761c:	61f8      	str	r0, [r7, #28]
 800761e:	e008      	b.n	8007632 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007626:	2200      	movs	r2, #0
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 fa8f 	bl	8007b4e <xQueueGenericCreate>
 8007630:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00c      	beq.n	8007652 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <osMessageQueueNew+0xd0>
        name = attr->name;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	e001      	b.n	800764a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800764a:	6979      	ldr	r1, [r7, #20]
 800764c:	69f8      	ldr	r0, [r7, #28]
 800764e:	f000 fec1 	bl	80083d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007652:	69fb      	ldr	r3, [r7, #28]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3720      	adds	r7, #32
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	603b      	str	r3, [r7, #0]
 8007668:	4613      	mov	r3, r2
 800766a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007670:	2300      	movs	r3, #0
 8007672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007674:	f3ef 8305 	mrs	r3, IPSR
 8007678:	617b      	str	r3, [r7, #20]
  return(result);
 800767a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800767c:	2b00      	cmp	r3, #0
 800767e:	d028      	beq.n	80076d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d005      	beq.n	8007692 <osMessageQueuePut+0x36>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <osMessageQueuePut+0x36>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007692:	f06f 0303 	mvn.w	r3, #3
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	e038      	b.n	800770c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800769a:	2300      	movs	r3, #0
 800769c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800769e:	f107 0210 	add.w	r2, r7, #16
 80076a2:	2300      	movs	r3, #0
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	69b8      	ldr	r0, [r7, #24]
 80076a8:	f000 fb94 	bl	8007dd4 <xQueueGenericSendFromISR>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d003      	beq.n	80076ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80076b2:	f06f 0302 	mvn.w	r3, #2
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e028      	b.n	800770c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d025      	beq.n	800770c <osMessageQueuePut+0xb0>
 80076c0:	4b15      	ldr	r3, [pc, #84]	; (8007718 <osMessageQueuePut+0xbc>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	e01c      	b.n	800770c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <osMessageQueuePut+0x82>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80076de:	f06f 0303 	mvn.w	r3, #3
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	e012      	b.n	800770c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80076e6:	2300      	movs	r3, #0
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	68b9      	ldr	r1, [r7, #8]
 80076ec:	69b8      	ldr	r0, [r7, #24]
 80076ee:	f000 fa8b 	bl	8007c08 <xQueueGenericSend>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d009      	beq.n	800770c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80076fe:	f06f 0301 	mvn.w	r3, #1
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	e002      	b.n	800770c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007706:	f06f 0302 	mvn.w	r3, #2
 800770a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800770c:	69fb      	ldr	r3, [r7, #28]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	e000ed04 	.word	0xe000ed04

0800771c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007732:	f3ef 8305 	mrs	r3, IPSR
 8007736:	617b      	str	r3, [r7, #20]
  return(result);
 8007738:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800773a:	2b00      	cmp	r3, #0
 800773c:	d028      	beq.n	8007790 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <osMessageQueueGet+0x34>
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <osMessageQueueGet+0x34>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007750:	f06f 0303 	mvn.w	r3, #3
 8007754:	61fb      	str	r3, [r7, #28]
 8007756:	e037      	b.n	80077c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007758:	2300      	movs	r3, #0
 800775a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800775c:	f107 0310 	add.w	r3, r7, #16
 8007760:	461a      	mov	r2, r3
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	69b8      	ldr	r0, [r7, #24]
 8007766:	f000 fca5 	bl	80080b4 <xQueueReceiveFromISR>
 800776a:	4603      	mov	r3, r0
 800776c:	2b01      	cmp	r3, #1
 800776e:	d003      	beq.n	8007778 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007770:	f06f 0302 	mvn.w	r3, #2
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	e027      	b.n	80077c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d024      	beq.n	80077c8 <osMessageQueueGet+0xac>
 800777e:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <osMessageQueueGet+0xb8>)
 8007780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	e01b      	b.n	80077c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <osMessageQueueGet+0x80>
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800779c:	f06f 0303 	mvn.w	r3, #3
 80077a0:	61fb      	str	r3, [r7, #28]
 80077a2:	e011      	b.n	80077c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	69b8      	ldr	r0, [r7, #24]
 80077aa:	f000 fbaf 	bl	8007f0c <xQueueReceive>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d009      	beq.n	80077c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80077ba:	f06f 0301 	mvn.w	r3, #1
 80077be:	61fb      	str	r3, [r7, #28]
 80077c0:	e002      	b.n	80077c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80077c2:	f06f 0302 	mvn.w	r3, #2
 80077c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80077c8:	69fb      	ldr	r3, [r7, #28]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3720      	adds	r7, #32
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	e000ed04 	.word	0xe000ed04

080077d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4a07      	ldr	r2, [pc, #28]	; (8007804 <vApplicationGetIdleTaskMemory+0x2c>)
 80077e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	4a06      	ldr	r2, [pc, #24]	; (8007808 <vApplicationGetIdleTaskMemory+0x30>)
 80077ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2280      	movs	r2, #128	; 0x80
 80077f4:	601a      	str	r2, [r3, #0]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000318 	.word	0x20000318
 8007808:	20000374 	.word	0x20000374

0800780c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4a07      	ldr	r2, [pc, #28]	; (8007838 <vApplicationGetTimerTaskMemory+0x2c>)
 800781c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4a06      	ldr	r2, [pc, #24]	; (800783c <vApplicationGetTimerTaskMemory+0x30>)
 8007822:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800782a:	601a      	str	r2, [r3, #0]
}
 800782c:	bf00      	nop
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	20000574 	.word	0x20000574
 800783c:	200005d0 	.word	0x200005d0

08007840 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f103 0208 	add.w	r2, r3, #8
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f04f 32ff 	mov.w	r2, #4294967295
 8007858:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f103 0208 	add.w	r2, r3, #8
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f103 0208 	add.w	r2, r3, #8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800789a:	b480      	push	{r7}
 800789c:	b085      	sub	sp, #20
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	601a      	str	r2, [r3, #0]
}
 80078d6:	bf00      	nop
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078e2:	b480      	push	{r7}
 80078e4:	b085      	sub	sp, #20
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d103      	bne.n	8007902 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	e00c      	b.n	800791c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3308      	adds	r3, #8
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	e002      	b.n	8007910 <vListInsert+0x2e>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	429a      	cmp	r2, r3
 800791a:	d2f6      	bcs.n	800790a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	601a      	str	r2, [r3, #0]
}
 8007948:	bf00      	nop
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6892      	ldr	r2, [r2, #8]
 800796a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6852      	ldr	r2, [r2, #4]
 8007974:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	429a      	cmp	r2, r3
 800797e:	d103      	bne.n	8007988 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	1e5a      	subs	r2, r3, #1
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80079d2:	f002 f88f 	bl	8009af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079de:	68f9      	ldr	r1, [r7, #12]
 80079e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079e2:	fb01 f303 	mul.w	r3, r1, r3
 80079e6:	441a      	add	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a02:	3b01      	subs	r3, #1
 8007a04:	68f9      	ldr	r1, [r7, #12]
 8007a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a08:	fb01 f303 	mul.w	r3, r1, r3
 8007a0c:	441a      	add	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	22ff      	movs	r2, #255	; 0xff
 8007a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	22ff      	movs	r2, #255	; 0xff
 8007a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d109      	bne.n	8007a3c <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00f      	beq.n	8007a50 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3310      	adds	r3, #16
 8007a34:	4618      	mov	r0, r3
 8007a36:	f001 f949 	bl	8008ccc <xTaskRemoveFromEventList>
 8007a3a:	e009      	b.n	8007a50 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3310      	adds	r3, #16
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff fefd 	bl	8007840 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3324      	adds	r3, #36	; 0x24
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7ff fef8 	bl	8007840 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a50:	f002 f880 	bl	8009b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a54:	2301      	movs	r3, #1
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b08e      	sub	sp, #56	; 0x38
 8007a62:	af02      	add	r7, sp, #8
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <xQueueGenericCreateStatic+0x52>
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <xQueueGenericCreateStatic+0x56>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <xQueueGenericCreateStatic+0x58>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10a      	bne.n	8007ad0 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	623b      	str	r3, [r7, #32]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d102      	bne.n	8007adc <xQueueGenericCreateStatic+0x7e>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <xQueueGenericCreateStatic+0x82>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <xQueueGenericCreateStatic+0x84>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10a      	bne.n	8007afc <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	61fb      	str	r3, [r7, #28]
}
 8007af8:	bf00      	nop
 8007afa:	e7fe      	b.n	8007afa <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007afc:	2350      	movs	r3, #80	; 0x50
 8007afe:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b50      	cmp	r3, #80	; 0x50
 8007b04:	d00a      	beq.n	8007b1c <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	61bb      	str	r3, [r7, #24]
}
 8007b18:	bf00      	nop
 8007b1a:	e7fe      	b.n	8007b1a <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00d      	beq.n	8007b44 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b30:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 f83f 	bl	8007bc2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3730      	adds	r7, #48	; 0x30
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b08a      	sub	sp, #40	; 0x28
 8007b52:	af02      	add	r7, sp, #8
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	613b      	str	r3, [r7, #16]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	fb02 f303 	mul.w	r3, r2, r3
 8007b80:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	3350      	adds	r3, #80	; 0x50
 8007b86:	4618      	mov	r0, r3
 8007b88:	f002 f8d6 	bl	8009d38 <pvPortMalloc>
 8007b8c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d011      	beq.n	8007bb8 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	3350      	adds	r3, #80	; 0x50
 8007b9c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ba6:	79fa      	ldrb	r2, [r7, #7]
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f805 	bl	8007bc2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
	}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3720      	adds	r7, #32
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e002      	b.n	8007be4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	69b8      	ldr	r0, [r7, #24]
 8007bf4:	f7ff fed8 	bl	80079a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08e      	sub	sp, #56	; 0x38
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c16:	2300      	movs	r3, #0
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10a      	bne.n	8007c3a <xQueueGenericSend+0x32>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c36:	bf00      	nop
 8007c38:	e7fe      	b.n	8007c38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d103      	bne.n	8007c48 <xQueueGenericSend+0x40>
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <xQueueGenericSend+0x44>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e000      	b.n	8007c4e <xQueueGenericSend+0x46>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10a      	bne.n	8007c68 <xQueueGenericSend+0x60>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d103      	bne.n	8007c76 <xQueueGenericSend+0x6e>
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <xQueueGenericSend+0x72>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericSend+0x74>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <xQueueGenericSend+0x8e>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	623b      	str	r3, [r7, #32]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c96:	f001 f9d1 	bl	800903c <xTaskGetSchedulerState>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d102      	bne.n	8007ca6 <xQueueGenericSend+0x9e>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <xQueueGenericSend+0xa2>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e000      	b.n	8007cac <xQueueGenericSend+0xa4>
 8007caa:	2300      	movs	r3, #0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	61fb      	str	r3, [r7, #28]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cc6:	f001 ff15 	bl	8009af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d302      	bcc.n	8007cdc <xQueueGenericSend+0xd4>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d112      	bne.n	8007d02 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ce2:	f000 fa67 	bl	80081b4 <prvCopyDataToQueue>
 8007ce6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	3324      	adds	r3, #36	; 0x24
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 ffe9 	bl	8008ccc <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007cfa:	f001 ff2b 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e062      	b.n	8007dc8 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d103      	bne.n	8007d10 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d08:	f001 ff24 	bl	8009b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e05b      	b.n	8007dc8 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d106      	bne.n	8007d24 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d16:	f107 0314 	add.w	r3, r7, #20
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 f83a 	bl	8008d94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d20:	2301      	movs	r3, #1
 8007d22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d24:	f001 ff16 	bl	8009b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d28:	f000 fdde 	bl	80088e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d2c:	f001 fee2 	bl	8009af4 <vPortEnterCritical>
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d36:	b25b      	sxtb	r3, r3
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3c:	d103      	bne.n	8007d46 <xQueueGenericSend+0x13e>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d4c:	b25b      	sxtb	r3, r3
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d52:	d103      	bne.n	8007d5c <xQueueGenericSend+0x154>
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d5c:	f001 fefa 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d60:	1d3a      	adds	r2, r7, #4
 8007d62:	f107 0314 	add.w	r3, r7, #20
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 f829 	bl	8008dc0 <xTaskCheckForTimeOut>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d123      	bne.n	8007dbc <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d76:	f000 fb15 	bl	80083a4 <prvIsQueueFull>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d017      	beq.n	8007db0 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	3310      	adds	r3, #16
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	4611      	mov	r1, r2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 ff4f 	bl	8008c2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d90:	f000 faa0 	bl	80082d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d94:	f000 fdb6 	bl	8008904 <xTaskResumeAll>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d193      	bne.n	8007cc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007d9e:	4b0c      	ldr	r3, [pc, #48]	; (8007dd0 <xQueueGenericSend+0x1c8>)
 8007da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	e78a      	b.n	8007cc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007db2:	f000 fa8f 	bl	80082d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007db6:	f000 fda5 	bl	8008904 <xTaskResumeAll>
 8007dba:	e784      	b.n	8007cc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dbe:	f000 fa89 	bl	80082d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dc2:	f000 fd9f 	bl	8008904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007dc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3738      	adds	r7, #56	; 0x38
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b090      	sub	sp, #64	; 0x40
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <xQueueGenericSendFromISR+0x3c>
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <xQueueGenericSendFromISR+0x40>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <xQueueGenericSendFromISR+0x42>
 8007e14:	2300      	movs	r3, #0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d103      	bne.n	8007e3e <xQueueGenericSendFromISR+0x6a>
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <xQueueGenericSendFromISR+0x6e>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <xQueueGenericSendFromISR+0x70>
 8007e42:	2300      	movs	r3, #0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	623b      	str	r3, [r7, #32]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e5e:	f001 ff2b 	bl	8009cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e62:	f3ef 8211 	mrs	r2, BASEPRI
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	61fa      	str	r2, [r7, #28]
 8007e78:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d302      	bcc.n	8007e90 <xQueueGenericSendFromISR+0xbc>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d12f      	bne.n	8007ef0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ea6:	f000 f985 	bl	80081b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007eaa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d112      	bne.n	8007eda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d016      	beq.n	8007eea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	3324      	adds	r3, #36	; 0x24
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 ff03 	bl	8008ccc <xTaskRemoveFromEventList>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00b      	beq.n	8007eea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	e007      	b.n	8007eea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007eda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ede:	3301      	adds	r3, #1
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	b25a      	sxtb	r2, r3
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007eea:	2301      	movs	r3, #1
 8007eec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007eee:	e001      	b.n	8007ef4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007efe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3740      	adds	r7, #64	; 0x40
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08c      	sub	sp, #48	; 0x30
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10a      	bne.n	8007f3c <xQueueReceive+0x30>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	623b      	str	r3, [r7, #32]
}
 8007f38:	bf00      	nop
 8007f3a:	e7fe      	b.n	8007f3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d103      	bne.n	8007f4a <xQueueReceive+0x3e>
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <xQueueReceive+0x42>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <xQueueReceive+0x44>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10a      	bne.n	8007f6a <xQueueReceive+0x5e>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	61fb      	str	r3, [r7, #28]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f6a:	f001 f867 	bl	800903c <xTaskGetSchedulerState>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <xQueueReceive+0x6e>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <xQueueReceive+0x72>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e000      	b.n	8007f80 <xQueueReceive+0x74>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10a      	bne.n	8007f9a <xQueueReceive+0x8e>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	61bb      	str	r3, [r7, #24]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f9a:	f001 fdab 	bl	8009af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d014      	beq.n	8007fd4 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fae:	f000 f96b 	bl	8008288 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	1e5a      	subs	r2, r3, #1
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc4:	3310      	adds	r3, #16
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fe80 	bl	8008ccc <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fcc:	f001 fdc2 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e069      	b.n	80080a8 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d103      	bne.n	8007fe2 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fda:	f001 fdbb 	bl	8009b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e062      	b.n	80080a8 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d106      	bne.n	8007ff6 <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fe8:	f107 0310 	add.w	r3, r7, #16
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fed1 	bl	8008d94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ff6:	f001 fdad 	bl	8009b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ffa:	f000 fc75 	bl	80088e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ffe:	f001 fd79 	bl	8009af4 <vPortEnterCritical>
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008008:	b25b      	sxtb	r3, r3
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800e:	d103      	bne.n	8008018 <xQueueReceive+0x10c>
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800801e:	b25b      	sxtb	r3, r3
 8008020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008024:	d103      	bne.n	800802e <xQueueReceive+0x122>
 8008026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800802e:	f001 fd91 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008032:	1d3a      	adds	r2, r7, #4
 8008034:	f107 0310 	add.w	r3, r7, #16
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fec0 	bl	8008dc0 <xTaskCheckForTimeOut>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d123      	bne.n	800808e <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008048:	f000 f996 	bl	8008378 <prvIsQueueEmpty>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d017      	beq.n	8008082 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	3324      	adds	r3, #36	; 0x24
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f000 fde6 	bl	8008c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008062:	f000 f937 	bl	80082d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008066:	f000 fc4d 	bl	8008904 <xTaskResumeAll>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d194      	bne.n	8007f9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008070:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <xQueueReceive+0x1a4>)
 8008072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	e78b      	b.n	8007f9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008084:	f000 f926 	bl	80082d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008088:	f000 fc3c 	bl	8008904 <xTaskResumeAll>
 800808c:	e785      	b.n	8007f9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800808e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008090:	f000 f920 	bl	80082d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008094:	f000 fc36 	bl	8008904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800809a:	f000 f96d 	bl	8008378 <prvIsQueueEmpty>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f43f af7a 	beq.w	8007f9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3730      	adds	r7, #48	; 0x30
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	e000ed04 	.word	0xe000ed04

080080b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08e      	sub	sp, #56	; 0x38
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	623b      	str	r3, [r7, #32]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d103      	bne.n	80080ee <xQueueReceiveFromISR+0x3a>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <xQueueReceiveFromISR+0x3e>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e000      	b.n	80080f4 <xQueueReceiveFromISR+0x40>
 80080f2:	2300      	movs	r3, #0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10a      	bne.n	800810e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	61fb      	str	r3, [r7, #28]
}
 800810a:	bf00      	nop
 800810c:	e7fe      	b.n	800810c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800810e:	f001 fdd3 	bl	8009cb8 <vPortValidateInterruptPriority>
	__asm volatile
 8008112:	f3ef 8211 	mrs	r2, BASEPRI
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	61ba      	str	r2, [r7, #24]
 8008128:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800812a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d02f      	beq.n	800819a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008148:	f000 f89e 	bl	8008288 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	1e5a      	subs	r2, r3, #1
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008154:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815c:	d112      	bne.n	8008184 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d016      	beq.n	8008194 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	3310      	adds	r3, #16
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fdae 	bl	8008ccc <xTaskRemoveFromEventList>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00e      	beq.n	8008194 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	e007      	b.n	8008194 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008188:	3301      	adds	r3, #1
 800818a:	b2db      	uxtb	r3, r3
 800818c:	b25a      	sxtb	r2, r3
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008194:	2301      	movs	r3, #1
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
 8008198:	e001      	b.n	800819e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800819a:	2300      	movs	r3, #0
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f383 8811 	msr	BASEPRI, r3
}
 80081a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3738      	adds	r7, #56	; 0x38
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10d      	bne.n	80081ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d14d      	bne.n	8008276 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 ff4a 	bl	8009078 <xTaskPriorityDisinherit>
 80081e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	609a      	str	r2, [r3, #8]
 80081ec:	e043      	b.n	8008276 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d119      	bne.n	8008228 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6858      	ldr	r0, [r3, #4]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	461a      	mov	r2, r3
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	f001 ffb2 	bl	800a168 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	441a      	add	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	429a      	cmp	r2, r3
 800821c:	d32b      	bcc.n	8008276 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	605a      	str	r2, [r3, #4]
 8008226:	e026      	b.n	8008276 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68d8      	ldr	r0, [r3, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	461a      	mov	r2, r3
 8008232:	68b9      	ldr	r1, [r7, #8]
 8008234:	f001 ff98 	bl	800a168 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	425b      	negs	r3, r3
 8008242:	441a      	add	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d207      	bcs.n	8008264 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	425b      	negs	r3, r3
 800825e:	441a      	add	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d105      	bne.n	8008276 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3b01      	subs	r3, #1
 8008274:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800827e:	697b      	ldr	r3, [r7, #20]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	d018      	beq.n	80082cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	441a      	add	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d303      	bcc.n	80082bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68d9      	ldr	r1, [r3, #12]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	461a      	mov	r2, r3
 80082c6:	6838      	ldr	r0, [r7, #0]
 80082c8:	f001 ff4e 	bl	800a168 <memcpy>
	}
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082dc:	f001 fc0a 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082e8:	e011      	b.n	800830e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d012      	beq.n	8008318 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3324      	adds	r3, #36	; 0x24
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fce8 	bl	8008ccc <xTaskRemoveFromEventList>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008302:	f000 fdbf 	bl	8008e84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	3b01      	subs	r3, #1
 800830a:	b2db      	uxtb	r3, r3
 800830c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800830e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	dce9      	bgt.n	80082ea <prvUnlockQueue+0x16>
 8008316:	e000      	b.n	800831a <prvUnlockQueue+0x46>
					break;
 8008318:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	22ff      	movs	r2, #255	; 0xff
 800831e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008322:	f001 fc17 	bl	8009b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008326:	f001 fbe5 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008330:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008332:	e011      	b.n	8008358 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d012      	beq.n	8008362 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	3310      	adds	r3, #16
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fcc3 	bl	8008ccc <xTaskRemoveFromEventList>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800834c:	f000 fd9a 	bl	8008e84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	3b01      	subs	r3, #1
 8008354:	b2db      	uxtb	r3, r3
 8008356:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800835c:	2b00      	cmp	r3, #0
 800835e:	dce9      	bgt.n	8008334 <prvUnlockQueue+0x60>
 8008360:	e000      	b.n	8008364 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008362:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	22ff      	movs	r2, #255	; 0xff
 8008368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800836c:	f001 fbf2 	bl	8009b54 <vPortExitCritical>
}
 8008370:	bf00      	nop
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008380:	f001 fbb8 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	2b00      	cmp	r3, #0
 800838a:	d102      	bne.n	8008392 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800838c:	2301      	movs	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	e001      	b.n	8008396 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008396:	f001 fbdd 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 800839a:	68fb      	ldr	r3, [r7, #12]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083ac:	f001 fba2 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d102      	bne.n	80083c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083bc:	2301      	movs	r3, #1
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	e001      	b.n	80083c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083c2:	2300      	movs	r3, #0
 80083c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083c6:	f001 fbc5 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 80083ca:	68fb      	ldr	r3, [r7, #12]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	e014      	b.n	800840e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083e4:	4a0f      	ldr	r2, [pc, #60]	; (8008424 <vQueueAddToRegistry+0x50>)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10b      	bne.n	8008408 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083f0:	490c      	ldr	r1, [pc, #48]	; (8008424 <vQueueAddToRegistry+0x50>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083fa:	4a0a      	ldr	r2, [pc, #40]	; (8008424 <vQueueAddToRegistry+0x50>)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	4413      	add	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008406:	e006      	b.n	8008416 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3301      	adds	r3, #1
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b07      	cmp	r3, #7
 8008412:	d9e7      	bls.n	80083e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	200009d0 	.word	0x200009d0

08008428 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008438:	f001 fb5c 	bl	8009af4 <vPortEnterCritical>
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008442:	b25b      	sxtb	r3, r3
 8008444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008448:	d103      	bne.n	8008452 <vQueueWaitForMessageRestricted+0x2a>
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008458:	b25b      	sxtb	r3, r3
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845e:	d103      	bne.n	8008468 <vQueueWaitForMessageRestricted+0x40>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008468:	f001 fb74 	bl	8009b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	2b00      	cmp	r3, #0
 8008472:	d106      	bne.n	8008482 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	3324      	adds	r3, #36	; 0x24
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fbf9 	bl	8008c74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008482:	6978      	ldr	r0, [r7, #20]
 8008484:	f7ff ff26 	bl	80082d4 <prvUnlockQueue>
	}
 8008488:	bf00      	nop
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08e      	sub	sp, #56	; 0x38
 8008494:	af04      	add	r7, sp, #16
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800849e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	623b      	str	r3, [r7, #32]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	61fb      	str	r3, [r7, #28]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084d6:	235c      	movs	r3, #92	; 0x5c
 80084d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	2b5c      	cmp	r3, #92	; 0x5c
 80084de:	d00a      	beq.n	80084f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	61bb      	str	r3, [r7, #24]
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d01e      	beq.n	800853c <xTaskCreateStatic+0xac>
 80084fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01b      	beq.n	800853c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800850c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	2202      	movs	r2, #2
 8008512:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008516:	2300      	movs	r3, #0
 8008518:	9303      	str	r3, [sp, #12]
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	9302      	str	r3, [sp, #8]
 800851e:	f107 0314 	add.w	r3, r7, #20
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f850 	bl	80085d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008536:	f000 f8dd 	bl	80086f4 <prvAddNewTaskToReadyList>
 800853a:	e001      	b.n	8008540 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008540:	697b      	ldr	r3, [r7, #20]
	}
 8008542:	4618      	mov	r0, r3
 8008544:	3728      	adds	r7, #40	; 0x28
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800854a:	b580      	push	{r7, lr}
 800854c:	b08c      	sub	sp, #48	; 0x30
 800854e:	af04      	add	r7, sp, #16
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	603b      	str	r3, [r7, #0]
 8008556:	4613      	mov	r3, r2
 8008558:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4618      	mov	r0, r3
 8008560:	f001 fbea 	bl	8009d38 <pvPortMalloc>
 8008564:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00e      	beq.n	800858a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800856c:	205c      	movs	r0, #92	; 0x5c
 800856e:	f001 fbe3 	bl	8009d38 <pvPortMalloc>
 8008572:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	631a      	str	r2, [r3, #48]	; 0x30
 8008580:	e005      	b.n	800858e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008582:	6978      	ldr	r0, [r7, #20]
 8008584:	f001 fca4 	bl	8009ed0 <vPortFree>
 8008588:	e001      	b.n	800858e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800858a:	2300      	movs	r3, #0
 800858c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d017      	beq.n	80085c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800859c:	88fa      	ldrh	r2, [r7, #6]
 800859e:	2300      	movs	r3, #0
 80085a0:	9303      	str	r3, [sp, #12]
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	9302      	str	r3, [sp, #8]
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68b9      	ldr	r1, [r7, #8]
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f80e 	bl	80085d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085b8:	69f8      	ldr	r0, [r7, #28]
 80085ba:	f000 f89b 	bl	80086f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085be:	2301      	movs	r3, #1
 80085c0:	61bb      	str	r3, [r7, #24]
 80085c2:	e002      	b.n	80085ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085c4:	f04f 33ff 	mov.w	r3, #4294967295
 80085c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085ca:	69bb      	ldr	r3, [r7, #24]
	}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	461a      	mov	r2, r3
 80085ec:	21a5      	movs	r1, #165	; 0xa5
 80085ee:	f001 fdc9 	bl	800a184 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085fc:	3b01      	subs	r3, #1
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	f023 0307 	bic.w	r3, r3, #7
 800860a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	f003 0307 	and.w	r3, r3, #7
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	617b      	str	r3, [r7, #20]
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d01f      	beq.n	8008672 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008632:	2300      	movs	r3, #0
 8008634:	61fb      	str	r3, [r7, #28]
 8008636:	e012      	b.n	800865e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	4413      	add	r3, r2
 800863e:	7819      	ldrb	r1, [r3, #0]
 8008640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	4413      	add	r3, r2
 8008646:	3334      	adds	r3, #52	; 0x34
 8008648:	460a      	mov	r2, r1
 800864a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	4413      	add	r3, r2
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d006      	beq.n	8008666 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	3301      	adds	r3, #1
 800865c:	61fb      	str	r3, [r7, #28]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	2b0f      	cmp	r3, #15
 8008662:	d9e9      	bls.n	8008638 <prvInitialiseNewTask+0x64>
 8008664:	e000      	b.n	8008668 <prvInitialiseNewTask+0x94>
			{
				break;
 8008666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008670:	e003      	b.n	800867a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867c:	2b37      	cmp	r3, #55	; 0x37
 800867e:	d901      	bls.n	8008684 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008680:	2337      	movs	r3, #55	; 0x37
 8008682:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800868e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	2200      	movs	r2, #0
 8008694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	3304      	adds	r3, #4
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff f8f0 	bl	8007880 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	3318      	adds	r3, #24
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff f8eb 	bl	8007880 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	2200      	movs	r2, #0
 80086c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	68f9      	ldr	r1, [r7, #12]
 80086d2:	69b8      	ldr	r0, [r7, #24]
 80086d4:	f001 f8e0 	bl	8009898 <pxPortInitialiseStack>
 80086d8:	4602      	mov	r2, r0
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086ea:	bf00      	nop
 80086ec:	3720      	adds	r7, #32
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086fc:	f001 f9fa 	bl	8009af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008700:	4b26      	ldr	r3, [pc, #152]	; (800879c <prvAddNewTaskToReadyList+0xa8>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3301      	adds	r3, #1
 8008706:	4a25      	ldr	r2, [pc, #148]	; (800879c <prvAddNewTaskToReadyList+0xa8>)
 8008708:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800870a:	4b25      	ldr	r3, [pc, #148]	; (80087a0 <prvAddNewTaskToReadyList+0xac>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d109      	bne.n	8008726 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008712:	4a23      	ldr	r2, [pc, #140]	; (80087a0 <prvAddNewTaskToReadyList+0xac>)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008718:	4b20      	ldr	r3, [pc, #128]	; (800879c <prvAddNewTaskToReadyList+0xa8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d110      	bne.n	8008742 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008720:	f000 fbce 	bl	8008ec0 <prvInitialiseTaskLists>
 8008724:	e00d      	b.n	8008742 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008726:	4b1f      	ldr	r3, [pc, #124]	; (80087a4 <prvAddNewTaskToReadyList+0xb0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d109      	bne.n	8008742 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800872e:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <prvAddNewTaskToReadyList+0xac>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	429a      	cmp	r2, r3
 800873a:	d802      	bhi.n	8008742 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800873c:	4a18      	ldr	r2, [pc, #96]	; (80087a0 <prvAddNewTaskToReadyList+0xac>)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008742:	4b19      	ldr	r3, [pc, #100]	; (80087a8 <prvAddNewTaskToReadyList+0xb4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3301      	adds	r3, #1
 8008748:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <prvAddNewTaskToReadyList+0xb4>)
 800874a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800874c:	4b16      	ldr	r3, [pc, #88]	; (80087a8 <prvAddNewTaskToReadyList+0xb4>)
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008758:	4b14      	ldr	r3, [pc, #80]	; (80087ac <prvAddNewTaskToReadyList+0xb8>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d903      	bls.n	8008768 <prvAddNewTaskToReadyList+0x74>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	4a11      	ldr	r2, [pc, #68]	; (80087ac <prvAddNewTaskToReadyList+0xb8>)
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4a0e      	ldr	r2, [pc, #56]	; (80087b0 <prvAddNewTaskToReadyList+0xbc>)
 8008776:	441a      	add	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3304      	adds	r3, #4
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f7ff f88b 	bl	800789a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008784:	f001 f9e6 	bl	8009b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <prvAddNewTaskToReadyList+0xb0>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008790:	4b03      	ldr	r3, [pc, #12]	; (80087a0 <prvAddNewTaskToReadyList+0xac>)
 8008792:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	20000ee4 	.word	0x20000ee4
 80087a0:	20000a10 	.word	0x20000a10
 80087a4:	20000ef0 	.word	0x20000ef0
 80087a8:	20000f00 	.word	0x20000f00
 80087ac:	20000eec 	.word	0x20000eec
 80087b0:	20000a14 	.word	0x20000a14

080087b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d017      	beq.n	80087f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087c6:	4b13      	ldr	r3, [pc, #76]	; (8008814 <vTaskDelay+0x60>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <vTaskDelay+0x30>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	60bb      	str	r3, [r7, #8]
}
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087e4:	f000 f880 	bl	80088e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087e8:	2100      	movs	r1, #0
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fcb2 	bl	8009154 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087f0:	f000 f888 	bl	8008904 <xTaskResumeAll>
 80087f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d107      	bne.n	800880c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087fc:	4b06      	ldr	r3, [pc, #24]	; (8008818 <vTaskDelay+0x64>)
 80087fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20000f0c 	.word	0x20000f0c
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	; 0x28
 8008820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800882a:	463a      	mov	r2, r7
 800882c:	1d39      	adds	r1, r7, #4
 800882e:	f107 0308 	add.w	r3, r7, #8
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe ffd0 	bl	80077d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	9202      	str	r2, [sp, #8]
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	2300      	movs	r3, #0
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	2300      	movs	r3, #0
 8008848:	460a      	mov	r2, r1
 800884a:	4921      	ldr	r1, [pc, #132]	; (80088d0 <vTaskStartScheduler+0xb4>)
 800884c:	4821      	ldr	r0, [pc, #132]	; (80088d4 <vTaskStartScheduler+0xb8>)
 800884e:	f7ff fe1f 	bl	8008490 <xTaskCreateStatic>
 8008852:	4603      	mov	r3, r0
 8008854:	4a20      	ldr	r2, [pc, #128]	; (80088d8 <vTaskStartScheduler+0xbc>)
 8008856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008858:	4b1f      	ldr	r3, [pc, #124]	; (80088d8 <vTaskStartScheduler+0xbc>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008860:	2301      	movs	r3, #1
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	e001      	b.n	800886a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008866:	2300      	movs	r3, #0
 8008868:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d102      	bne.n	8008876 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008870:	f000 fcc4 	bl	80091fc <xTimerCreateTimerTask>
 8008874:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d116      	bne.n	80088aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	613b      	str	r3, [r7, #16]
}
 800888e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008890:	4b12      	ldr	r3, [pc, #72]	; (80088dc <vTaskStartScheduler+0xc0>)
 8008892:	f04f 32ff 	mov.w	r2, #4294967295
 8008896:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008898:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <vTaskStartScheduler+0xc4>)
 800889a:	2201      	movs	r2, #1
 800889c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800889e:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <vTaskStartScheduler+0xc8>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088a4:	f001 f884 	bl	80099b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088a8:	e00e      	b.n	80088c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b0:	d10a      	bne.n	80088c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60fb      	str	r3, [r7, #12]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <vTaskStartScheduler+0xaa>
}
 80088c8:	bf00      	nop
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	0800a358 	.word	0x0800a358
 80088d4:	08008e9d 	.word	0x08008e9d
 80088d8:	20000f08 	.word	0x20000f08
 80088dc:	20000f04 	.word	0x20000f04
 80088e0:	20000ef0 	.word	0x20000ef0
 80088e4:	20000ee8 	.word	0x20000ee8

080088e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088ec:	4b04      	ldr	r3, [pc, #16]	; (8008900 <vTaskSuspendAll+0x18>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3301      	adds	r3, #1
 80088f2:	4a03      	ldr	r2, [pc, #12]	; (8008900 <vTaskSuspendAll+0x18>)
 80088f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088f6:	bf00      	nop
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	20000f0c 	.word	0x20000f0c

08008904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800890e:	2300      	movs	r3, #0
 8008910:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008912:	4b3c      	ldr	r3, [pc, #240]	; (8008a04 <xTaskResumeAll+0x100>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <xTaskResumeAll+0x2c>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	603b      	str	r3, [r7, #0]
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008930:	f001 f8e0 	bl	8009af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008934:	4b33      	ldr	r3, [pc, #204]	; (8008a04 <xTaskResumeAll+0x100>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3b01      	subs	r3, #1
 800893a:	4a32      	ldr	r2, [pc, #200]	; (8008a04 <xTaskResumeAll+0x100>)
 800893c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800893e:	4b31      	ldr	r3, [pc, #196]	; (8008a04 <xTaskResumeAll+0x100>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d156      	bne.n	80089f4 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008946:	4b30      	ldr	r3, [pc, #192]	; (8008a08 <xTaskResumeAll+0x104>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d052      	beq.n	80089f4 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800894e:	e02f      	b.n	80089b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008950:	4b2e      	ldr	r3, [pc, #184]	; (8008a0c <xTaskResumeAll+0x108>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3318      	adds	r3, #24
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe fff9 	bl	8007954 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3304      	adds	r3, #4
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fff4 	bl	8007954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008970:	4b27      	ldr	r3, [pc, #156]	; (8008a10 <xTaskResumeAll+0x10c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d903      	bls.n	8008980 <xTaskResumeAll+0x7c>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	4a24      	ldr	r2, [pc, #144]	; (8008a10 <xTaskResumeAll+0x10c>)
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4a21      	ldr	r2, [pc, #132]	; (8008a14 <xTaskResumeAll+0x110>)
 800898e:	441a      	add	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f7fe ff7f 	bl	800789a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	4b1d      	ldr	r3, [pc, #116]	; (8008a18 <xTaskResumeAll+0x114>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d302      	bcc.n	80089b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80089aa:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <xTaskResumeAll+0x118>)
 80089ac:	2201      	movs	r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089b0:	4b16      	ldr	r3, [pc, #88]	; (8008a0c <xTaskResumeAll+0x108>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1cb      	bne.n	8008950 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089be:	f000 fb1d 	bl	8008ffc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089c2:	4b17      	ldr	r3, [pc, #92]	; (8008a20 <xTaskResumeAll+0x11c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d010      	beq.n	80089f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089ce:	f000 f839 	bl	8008a44 <xTaskIncrementTick>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80089d8:	4b10      	ldr	r3, [pc, #64]	; (8008a1c <xTaskResumeAll+0x118>)
 80089da:	2201      	movs	r2, #1
 80089dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1f1      	bne.n	80089ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80089ea:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <xTaskResumeAll+0x11c>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <xTaskResumeAll+0x118>)
 80089f2:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089f4:	f001 f8ae 	bl	8009b54 <vPortExitCritical>

	return xAlreadyYielded;
 80089f8:	687b      	ldr	r3, [r7, #4]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000f0c 	.word	0x20000f0c
 8008a08:	20000ee4 	.word	0x20000ee4
 8008a0c:	20000ea4 	.word	0x20000ea4
 8008a10:	20000eec 	.word	0x20000eec
 8008a14:	20000a14 	.word	0x20000a14
 8008a18:	20000a10 	.word	0x20000a10
 8008a1c:	20000ef8 	.word	0x20000ef8
 8008a20:	20000ef4 	.word	0x20000ef4

08008a24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a2a:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <xTaskGetTickCount+0x1c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a30:	687b      	ldr	r3, [r7, #4]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	20000ee8 	.word	0x20000ee8

08008a44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a4e:	4b3f      	ldr	r3, [pc, #252]	; (8008b4c <xTaskIncrementTick+0x108>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d170      	bne.n	8008b38 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a56:	4b3e      	ldr	r3, [pc, #248]	; (8008b50 <xTaskIncrementTick+0x10c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a5e:	4a3c      	ldr	r2, [pc, #240]	; (8008b50 <xTaskIncrementTick+0x10c>)
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d120      	bne.n	8008aac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a6a:	4b3a      	ldr	r3, [pc, #232]	; (8008b54 <xTaskIncrementTick+0x110>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00a      	beq.n	8008a8a <xTaskIncrementTick+0x46>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	603b      	str	r3, [r7, #0]
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xTaskIncrementTick+0x44>
 8008a8a:	4b32      	ldr	r3, [pc, #200]	; (8008b54 <xTaskIncrementTick+0x110>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	4b31      	ldr	r3, [pc, #196]	; (8008b58 <xTaskIncrementTick+0x114>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a2f      	ldr	r2, [pc, #188]	; (8008b54 <xTaskIncrementTick+0x110>)
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	4a2f      	ldr	r2, [pc, #188]	; (8008b58 <xTaskIncrementTick+0x114>)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	4b2f      	ldr	r3, [pc, #188]	; (8008b5c <xTaskIncrementTick+0x118>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	4a2d      	ldr	r2, [pc, #180]	; (8008b5c <xTaskIncrementTick+0x118>)
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	f000 faa8 	bl	8008ffc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008aac:	4b2c      	ldr	r3, [pc, #176]	; (8008b60 <xTaskIncrementTick+0x11c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d345      	bcc.n	8008b42 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ab6:	4b27      	ldr	r3, [pc, #156]	; (8008b54 <xTaskIncrementTick+0x110>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d104      	bne.n	8008aca <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac0:	4b27      	ldr	r3, [pc, #156]	; (8008b60 <xTaskIncrementTick+0x11c>)
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	601a      	str	r2, [r3, #0]
					break;
 8008ac8:	e03b      	b.n	8008b42 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aca:	4b22      	ldr	r3, [pc, #136]	; (8008b54 <xTaskIncrementTick+0x110>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d203      	bcs.n	8008aea <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ae2:	4a1f      	ldr	r2, [pc, #124]	; (8008b60 <xTaskIncrementTick+0x11c>)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ae8:	e02b      	b.n	8008b42 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	3304      	adds	r3, #4
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe ff30 	bl	8007954 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d004      	beq.n	8008b06 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	3318      	adds	r3, #24
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe ff27 	bl	8007954 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0a:	4b16      	ldr	r3, [pc, #88]	; (8008b64 <xTaskIncrementTick+0x120>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d903      	bls.n	8008b1a <xTaskIncrementTick+0xd6>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	4a13      	ldr	r2, [pc, #76]	; (8008b64 <xTaskIncrementTick+0x120>)
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4a10      	ldr	r2, [pc, #64]	; (8008b68 <xTaskIncrementTick+0x124>)
 8008b28:	441a      	add	r2, r3
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4610      	mov	r0, r2
 8008b32:	f7fe feb2 	bl	800789a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b36:	e7be      	b.n	8008ab6 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <xTaskIncrementTick+0x128>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	4a0b      	ldr	r2, [pc, #44]	; (8008b6c <xTaskIncrementTick+0x128>)
 8008b40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b42:	697b      	ldr	r3, [r7, #20]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20000f0c 	.word	0x20000f0c
 8008b50:	20000ee8 	.word	0x20000ee8
 8008b54:	20000e9c 	.word	0x20000e9c
 8008b58:	20000ea0 	.word	0x20000ea0
 8008b5c:	20000efc 	.word	0x20000efc
 8008b60:	20000f04 	.word	0x20000f04
 8008b64:	20000eec 	.word	0x20000eec
 8008b68:	20000a14 	.word	0x20000a14
 8008b6c:	20000ef4 	.word	0x20000ef4

08008b70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b76:	4b28      	ldr	r3, [pc, #160]	; (8008c18 <vTaskSwitchContext+0xa8>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b7e:	4b27      	ldr	r3, [pc, #156]	; (8008c1c <vTaskSwitchContext+0xac>)
 8008b80:	2201      	movs	r2, #1
 8008b82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b84:	e041      	b.n	8008c0a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008b86:	4b25      	ldr	r3, [pc, #148]	; (8008c1c <vTaskSwitchContext+0xac>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8c:	4b24      	ldr	r3, [pc, #144]	; (8008c20 <vTaskSwitchContext+0xb0>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	e010      	b.n	8008bb6 <vTaskSwitchContext+0x46>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <vTaskSwitchContext+0x40>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	607b      	str	r3, [r7, #4]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <vTaskSwitchContext+0x3e>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	491b      	ldr	r1, [pc, #108]	; (8008c24 <vTaskSwitchContext+0xb4>)
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	440b      	add	r3, r1
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0e4      	beq.n	8008b94 <vTaskSwitchContext+0x24>
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4a13      	ldr	r2, [pc, #76]	; (8008c24 <vTaskSwitchContext+0xb4>)
 8008bd6:	4413      	add	r3, r2
 8008bd8:	60bb      	str	r3, [r7, #8]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	605a      	str	r2, [r3, #4]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	3308      	adds	r3, #8
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d104      	bne.n	8008bfa <vTaskSwitchContext+0x8a>
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	605a      	str	r2, [r3, #4]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	4a09      	ldr	r2, [pc, #36]	; (8008c28 <vTaskSwitchContext+0xb8>)
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	4a06      	ldr	r2, [pc, #24]	; (8008c20 <vTaskSwitchContext+0xb0>)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6013      	str	r3, [r2, #0]
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000f0c 	.word	0x20000f0c
 8008c1c:	20000ef8 	.word	0x20000ef8
 8008c20:	20000eec 	.word	0x20000eec
 8008c24:	20000a14 	.word	0x20000a14
 8008c28:	20000a10 	.word	0x20000a10

08008c2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10a      	bne.n	8008c52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	60fb      	str	r3, [r7, #12]
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c52:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <vTaskPlaceOnEventList+0x44>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3318      	adds	r3, #24
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fe fe41 	bl	80078e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c60:	2101      	movs	r1, #1
 8008c62:	6838      	ldr	r0, [r7, #0]
 8008c64:	f000 fa76 	bl	8009154 <prvAddCurrentTaskToDelayedList>
}
 8008c68:	bf00      	nop
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20000a10 	.word	0x20000a10

08008c74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	617b      	str	r3, [r7, #20]
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3318      	adds	r3, #24
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f7fe fdf8 	bl	800789a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	68b8      	ldr	r0, [r7, #8]
 8008cba:	f000 fa4b 	bl	8009154 <prvAddCurrentTaskToDelayedList>
	}
 8008cbe:	bf00      	nop
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20000a10 	.word	0x20000a10

08008ccc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	60fb      	str	r3, [r7, #12]
}
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	3318      	adds	r3, #24
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe fe29 	bl	8007954 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d02:	4b1e      	ldr	r3, [pc, #120]	; (8008d7c <xTaskRemoveFromEventList+0xb0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d11d      	bne.n	8008d46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe fe20 	bl	8007954 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d18:	4b19      	ldr	r3, [pc, #100]	; (8008d80 <xTaskRemoveFromEventList+0xb4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d903      	bls.n	8008d28 <xTaskRemoveFromEventList+0x5c>
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	4a16      	ldr	r2, [pc, #88]	; (8008d80 <xTaskRemoveFromEventList+0xb4>)
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4a13      	ldr	r2, [pc, #76]	; (8008d84 <xTaskRemoveFromEventList+0xb8>)
 8008d36:	441a      	add	r2, r3
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f7fe fdab 	bl	800789a <vListInsertEnd>
 8008d44:	e005      	b.n	8008d52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	3318      	adds	r3, #24
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	480e      	ldr	r0, [pc, #56]	; (8008d88 <xTaskRemoveFromEventList+0xbc>)
 8008d4e:	f7fe fda4 	bl	800789a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d56:	4b0d      	ldr	r3, [pc, #52]	; (8008d8c <xTaskRemoveFromEventList+0xc0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d905      	bls.n	8008d6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d60:	2301      	movs	r3, #1
 8008d62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d64:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <xTaskRemoveFromEventList+0xc4>)
 8008d66:	2201      	movs	r2, #1
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	e001      	b.n	8008d70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d70:	697b      	ldr	r3, [r7, #20]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20000f0c 	.word	0x20000f0c
 8008d80:	20000eec 	.word	0x20000eec
 8008d84:	20000a14 	.word	0x20000a14
 8008d88:	20000ea4 	.word	0x20000ea4
 8008d8c:	20000a10 	.word	0x20000a10
 8008d90:	20000ef8 	.word	0x20000ef8

08008d94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <vTaskInternalSetTimeOutState+0x24>)
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008da4:	4b05      	ldr	r3, [pc, #20]	; (8008dbc <vTaskInternalSetTimeOutState+0x28>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	605a      	str	r2, [r3, #4]
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	20000efc 	.word	0x20000efc
 8008dbc:	20000ee8 	.word	0x20000ee8

08008dc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	613b      	str	r3, [r7, #16]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	60fb      	str	r3, [r7, #12]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e02:	f000 fe77 	bl	8009af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e06:	4b1d      	ldr	r3, [pc, #116]	; (8008e7c <xTaskCheckForTimeOut+0xbc>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1e:	d102      	bne.n	8008e26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e20:	2300      	movs	r3, #0
 8008e22:	61fb      	str	r3, [r7, #28]
 8008e24:	e023      	b.n	8008e6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4b15      	ldr	r3, [pc, #84]	; (8008e80 <xTaskCheckForTimeOut+0xc0>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d007      	beq.n	8008e42 <xTaskCheckForTimeOut+0x82>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d302      	bcc.n	8008e42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	61fb      	str	r3, [r7, #28]
 8008e40:	e015      	b.n	8008e6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d20b      	bcs.n	8008e64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	1ad2      	subs	r2, r2, r3
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff ff9b 	bl	8008d94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	61fb      	str	r3, [r7, #28]
 8008e62:	e004      	b.n	8008e6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e6e:	f000 fe71 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 8008e72:	69fb      	ldr	r3, [r7, #28]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3720      	adds	r7, #32
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	20000ee8 	.word	0x20000ee8
 8008e80:	20000efc 	.word	0x20000efc

08008e84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e88:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <vTaskMissedYield+0x14>)
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
}
 8008e8e:	bf00      	nop
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	20000ef8 	.word	0x20000ef8

08008e9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ea4:	f000 f84c 	bl	8008f40 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8008ea8:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <prvIdleTask+0x20>)
 8008eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008eb8:	e7f4      	b.n	8008ea4 <prvIdleTask+0x8>
 8008eba:	bf00      	nop
 8008ebc:	e000ed04 	.word	0xe000ed04

08008ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	607b      	str	r3, [r7, #4]
 8008eca:	e00c      	b.n	8008ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4a12      	ldr	r2, [pc, #72]	; (8008f20 <prvInitialiseTaskLists+0x60>)
 8008ed8:	4413      	add	r3, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fcb0 	bl	8007840 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	607b      	str	r3, [r7, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b37      	cmp	r3, #55	; 0x37
 8008eea:	d9ef      	bls.n	8008ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008eec:	480d      	ldr	r0, [pc, #52]	; (8008f24 <prvInitialiseTaskLists+0x64>)
 8008eee:	f7fe fca7 	bl	8007840 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ef2:	480d      	ldr	r0, [pc, #52]	; (8008f28 <prvInitialiseTaskLists+0x68>)
 8008ef4:	f7fe fca4 	bl	8007840 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ef8:	480c      	ldr	r0, [pc, #48]	; (8008f2c <prvInitialiseTaskLists+0x6c>)
 8008efa:	f7fe fca1 	bl	8007840 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008efe:	480c      	ldr	r0, [pc, #48]	; (8008f30 <prvInitialiseTaskLists+0x70>)
 8008f00:	f7fe fc9e 	bl	8007840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f04:	480b      	ldr	r0, [pc, #44]	; (8008f34 <prvInitialiseTaskLists+0x74>)
 8008f06:	f7fe fc9b 	bl	8007840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <prvInitialiseTaskLists+0x78>)
 8008f0c:	4a05      	ldr	r2, [pc, #20]	; (8008f24 <prvInitialiseTaskLists+0x64>)
 8008f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f10:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <prvInitialiseTaskLists+0x7c>)
 8008f12:	4a05      	ldr	r2, [pc, #20]	; (8008f28 <prvInitialiseTaskLists+0x68>)
 8008f14:	601a      	str	r2, [r3, #0]
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20000a14 	.word	0x20000a14
 8008f24:	20000e74 	.word	0x20000e74
 8008f28:	20000e88 	.word	0x20000e88
 8008f2c:	20000ea4 	.word	0x20000ea4
 8008f30:	20000eb8 	.word	0x20000eb8
 8008f34:	20000ed0 	.word	0x20000ed0
 8008f38:	20000e9c 	.word	0x20000e9c
 8008f3c:	20000ea0 	.word	0x20000ea0

08008f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f46:	e019      	b.n	8008f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f48:	f000 fdd4 	bl	8009af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f4c:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <prvCheckTasksWaitingTermination+0x50>)
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3304      	adds	r3, #4
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe fcfb 	bl	8007954 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	; (8008f94 <prvCheckTasksWaitingTermination+0x54>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	4a0b      	ldr	r2, [pc, #44]	; (8008f94 <prvCheckTasksWaitingTermination+0x54>)
 8008f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f68:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <prvCheckTasksWaitingTermination+0x58>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	4a0a      	ldr	r2, [pc, #40]	; (8008f98 <prvCheckTasksWaitingTermination+0x58>)
 8008f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f72:	f000 fdef 	bl	8009b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f810 	bl	8008f9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f7c:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <prvCheckTasksWaitingTermination+0x58>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e1      	bne.n	8008f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000eb8 	.word	0x20000eb8
 8008f94:	20000ee4 	.word	0x20000ee4
 8008f98:	20000ecc 	.word	0x20000ecc

08008f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d108      	bne.n	8008fc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 ff8c 	bl	8009ed0 <vPortFree>
				vPortFree( pxTCB );
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 ff89 	bl	8009ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fbe:	e018      	b.n	8008ff2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d103      	bne.n	8008fd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 ff80 	bl	8009ed0 <vPortFree>
	}
 8008fd0:	e00f      	b.n	8008ff2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d00a      	beq.n	8008ff2 <prvDeleteTCB+0x56>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	60fb      	str	r3, [r7, #12]
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <prvDeleteTCB+0x54>
	}
 8008ff2:	bf00      	nop
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009002:	4b0c      	ldr	r3, [pc, #48]	; (8009034 <prvResetNextTaskUnblockTime+0x38>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d104      	bne.n	8009016 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <prvResetNextTaskUnblockTime+0x3c>)
 800900e:	f04f 32ff 	mov.w	r2, #4294967295
 8009012:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009014:	e008      	b.n	8009028 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009016:	4b07      	ldr	r3, [pc, #28]	; (8009034 <prvResetNextTaskUnblockTime+0x38>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	4a04      	ldr	r2, [pc, #16]	; (8009038 <prvResetNextTaskUnblockTime+0x3c>)
 8009026:	6013      	str	r3, [r2, #0]
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	20000e9c 	.word	0x20000e9c
 8009038:	20000f04 	.word	0x20000f04

0800903c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009042:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <xTaskGetSchedulerState+0x34>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800904a:	2301      	movs	r3, #1
 800904c:	607b      	str	r3, [r7, #4]
 800904e:	e008      	b.n	8009062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009050:	4b08      	ldr	r3, [pc, #32]	; (8009074 <xTaskGetSchedulerState+0x38>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d102      	bne.n	800905e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009058:	2302      	movs	r3, #2
 800905a:	607b      	str	r3, [r7, #4]
 800905c:	e001      	b.n	8009062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800905e:	2300      	movs	r3, #0
 8009060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009062:	687b      	ldr	r3, [r7, #4]
	}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20000ef0 	.word	0x20000ef0
 8009074:	20000f0c 	.word	0x20000f0c

08009078 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d056      	beq.n	800913c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800908e:	4b2e      	ldr	r3, [pc, #184]	; (8009148 <xTaskPriorityDisinherit+0xd0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	429a      	cmp	r2, r3
 8009096:	d00a      	beq.n	80090ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	60fb      	str	r3, [r7, #12]
}
 80090aa:	bf00      	nop
 80090ac:	e7fe      	b.n	80090ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10a      	bne.n	80090cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	60bb      	str	r3, [r7, #8]
}
 80090c8:	bf00      	nop
 80090ca:	e7fe      	b.n	80090ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d0:	1e5a      	subs	r2, r3, #1
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090de:	429a      	cmp	r2, r3
 80090e0:	d02c      	beq.n	800913c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d128      	bne.n	800913c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fc30 	bl	8007954 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	4b0f      	ldr	r3, [pc, #60]	; (800914c <xTaskPriorityDisinherit+0xd4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	429a      	cmp	r2, r3
 8009112:	d903      	bls.n	800911c <xTaskPriorityDisinherit+0xa4>
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	4a0c      	ldr	r2, [pc, #48]	; (800914c <xTaskPriorityDisinherit+0xd4>)
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4a09      	ldr	r2, [pc, #36]	; (8009150 <xTaskPriorityDisinherit+0xd8>)
 800912a:	441a      	add	r2, r3
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	3304      	adds	r3, #4
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f7fe fbb1 	bl	800789a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009138:	2301      	movs	r3, #1
 800913a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800913c:	697b      	ldr	r3, [r7, #20]
	}
 800913e:	4618      	mov	r0, r3
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20000a10 	.word	0x20000a10
 800914c:	20000eec 	.word	0x20000eec
 8009150:	20000a14 	.word	0x20000a14

08009154 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800915e:	4b21      	ldr	r3, [pc, #132]	; (80091e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009164:	4b20      	ldr	r3, [pc, #128]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fbf2 	bl	8007954 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d10a      	bne.n	800918e <prvAddCurrentTaskToDelayedList+0x3a>
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d007      	beq.n	800918e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800917e:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3304      	adds	r3, #4
 8009184:	4619      	mov	r1, r3
 8009186:	4819      	ldr	r0, [pc, #100]	; (80091ec <prvAddCurrentTaskToDelayedList+0x98>)
 8009188:	f7fe fb87 	bl	800789a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800918c:	e026      	b.n	80091dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4413      	add	r3, r2
 8009194:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009196:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d209      	bcs.n	80091ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091a6:	4b12      	ldr	r3, [pc, #72]	; (80091f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3304      	adds	r3, #4
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f7fe fb95 	bl	80078e2 <vListInsert>
}
 80091b8:	e010      	b.n	80091dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ba:	4b0e      	ldr	r3, [pc, #56]	; (80091f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f7fe fb8b 	bl	80078e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091cc:	4b0a      	ldr	r3, [pc, #40]	; (80091f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d202      	bcs.n	80091dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091d6:	4a08      	ldr	r2, [pc, #32]	; (80091f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	6013      	str	r3, [r2, #0]
}
 80091dc:	bf00      	nop
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20000ee8 	.word	0x20000ee8
 80091e8:	20000a10 	.word	0x20000a10
 80091ec:	20000ed0 	.word	0x20000ed0
 80091f0:	20000ea0 	.word	0x20000ea0
 80091f4:	20000e9c 	.word	0x20000e9c
 80091f8:	20000f04 	.word	0x20000f04

080091fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	; 0x28
 8009200:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009202:	2300      	movs	r3, #0
 8009204:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009206:	f000 fb07 	bl	8009818 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800920a:	4b1c      	ldr	r3, [pc, #112]	; (800927c <xTimerCreateTimerTask+0x80>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d021      	beq.n	8009256 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009216:	2300      	movs	r3, #0
 8009218:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800921a:	1d3a      	adds	r2, r7, #4
 800921c:	f107 0108 	add.w	r1, r7, #8
 8009220:	f107 030c 	add.w	r3, r7, #12
 8009224:	4618      	mov	r0, r3
 8009226:	f7fe faf1 	bl	800780c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	9202      	str	r2, [sp, #8]
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	2302      	movs	r3, #2
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	2300      	movs	r3, #0
 800923a:	460a      	mov	r2, r1
 800923c:	4910      	ldr	r1, [pc, #64]	; (8009280 <xTimerCreateTimerTask+0x84>)
 800923e:	4811      	ldr	r0, [pc, #68]	; (8009284 <xTimerCreateTimerTask+0x88>)
 8009240:	f7ff f926 	bl	8008490 <xTaskCreateStatic>
 8009244:	4603      	mov	r3, r0
 8009246:	4a10      	ldr	r2, [pc, #64]	; (8009288 <xTimerCreateTimerTask+0x8c>)
 8009248:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800924a:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <xTimerCreateTimerTask+0x8c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009252:	2301      	movs	r3, #1
 8009254:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	613b      	str	r3, [r7, #16]
}
 800926e:	bf00      	nop
 8009270:	e7fe      	b.n	8009270 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009272:	697b      	ldr	r3, [r7, #20]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20000f40 	.word	0x20000f40
 8009280:	0800a360 	.word	0x0800a360
 8009284:	080093c1 	.word	0x080093c1
 8009288:	20000f44 	.word	0x20000f44

0800928c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800929a:	2300      	movs	r3, #0
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	623b      	str	r3, [r7, #32]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092ba:	4b1a      	ldr	r3, [pc, #104]	; (8009324 <xTimerGenericCommand+0x98>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d02a      	beq.n	8009318 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2b05      	cmp	r3, #5
 80092d2:	dc18      	bgt.n	8009306 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092d4:	f7ff feb2 	bl	800903c <xTaskGetSchedulerState>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d109      	bne.n	80092f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092de:	4b11      	ldr	r3, [pc, #68]	; (8009324 <xTimerGenericCommand+0x98>)
 80092e0:	6818      	ldr	r0, [r3, #0]
 80092e2:	f107 0110 	add.w	r1, r7, #16
 80092e6:	2300      	movs	r3, #0
 80092e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ea:	f7fe fc8d 	bl	8007c08 <xQueueGenericSend>
 80092ee:	6278      	str	r0, [r7, #36]	; 0x24
 80092f0:	e012      	b.n	8009318 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092f2:	4b0c      	ldr	r3, [pc, #48]	; (8009324 <xTimerGenericCommand+0x98>)
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	f107 0110 	add.w	r1, r7, #16
 80092fa:	2300      	movs	r3, #0
 80092fc:	2200      	movs	r2, #0
 80092fe:	f7fe fc83 	bl	8007c08 <xQueueGenericSend>
 8009302:	6278      	str	r0, [r7, #36]	; 0x24
 8009304:	e008      	b.n	8009318 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009306:	4b07      	ldr	r3, [pc, #28]	; (8009324 <xTimerGenericCommand+0x98>)
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	f107 0110 	add.w	r1, r7, #16
 800930e:	2300      	movs	r3, #0
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	f7fe fd5f 	bl	8007dd4 <xQueueGenericSendFromISR>
 8009316:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800931a:	4618      	mov	r0, r3
 800931c:	3728      	adds	r7, #40	; 0x28
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	20000f40 	.word	0x20000f40

08009328 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af02      	add	r7, sp, #8
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009332:	4b22      	ldr	r3, [pc, #136]	; (80093bc <prvProcessExpiredTimer+0x94>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	3304      	adds	r3, #4
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe fb07 	bl	8007954 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d022      	beq.n	800939a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	699a      	ldr	r2, [r3, #24]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	18d1      	adds	r1, r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	6978      	ldr	r0, [r7, #20]
 8009362:	f000 f8d1 	bl	8009508 <prvInsertTimerInActiveList>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01f      	beq.n	80093ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800936c:	2300      	movs	r3, #0
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2300      	movs	r3, #0
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	2100      	movs	r1, #0
 8009376:	6978      	ldr	r0, [r7, #20]
 8009378:	f7ff ff88 	bl	800928c <xTimerGenericCommand>
 800937c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d113      	bne.n	80093ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	60fb      	str	r3, [r7, #12]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093a0:	f023 0301 	bic.w	r3, r3, #1
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	6978      	ldr	r0, [r7, #20]
 80093b2:	4798      	blx	r3
}
 80093b4:	bf00      	nop
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20000f38 	.word	0x20000f38

080093c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093c8:	f107 0308 	add.w	r3, r7, #8
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f857 	bl	8009480 <prvGetNextExpireTime>
 80093d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	4619      	mov	r1, r3
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 f803 	bl	80093e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093de:	f000 f8d5 	bl	800958c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093e2:	e7f1      	b.n	80093c8 <prvTimerTask+0x8>

080093e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093ee:	f7ff fa7b 	bl	80088e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093f2:	f107 0308 	add.w	r3, r7, #8
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 f866 	bl	80094c8 <prvSampleTimeNow>
 80093fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d130      	bne.n	8009466 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10a      	bne.n	8009420 <prvProcessTimerOrBlockTask+0x3c>
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	429a      	cmp	r2, r3
 8009410:	d806      	bhi.n	8009420 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009412:	f7ff fa77 	bl	8008904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff ff85 	bl	8009328 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800941e:	e024      	b.n	800946a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d008      	beq.n	8009438 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009426:	4b13      	ldr	r3, [pc, #76]	; (8009474 <prvProcessTimerOrBlockTask+0x90>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <prvProcessTimerOrBlockTask+0x50>
 8009430:	2301      	movs	r3, #1
 8009432:	e000      	b.n	8009436 <prvProcessTimerOrBlockTask+0x52>
 8009434:	2300      	movs	r3, #0
 8009436:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009438:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <prvProcessTimerOrBlockTask+0x94>)
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	4619      	mov	r1, r3
 8009446:	f7fe ffef 	bl	8008428 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800944a:	f7ff fa5b 	bl	8008904 <xTaskResumeAll>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009454:	4b09      	ldr	r3, [pc, #36]	; (800947c <prvProcessTimerOrBlockTask+0x98>)
 8009456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
}
 8009464:	e001      	b.n	800946a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009466:	f7ff fa4d 	bl	8008904 <xTaskResumeAll>
}
 800946a:	bf00      	nop
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	20000f3c 	.word	0x20000f3c
 8009478:	20000f40 	.word	0x20000f40
 800947c:	e000ed04 	.word	0xe000ed04

08009480 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009488:	4b0e      	ldr	r3, [pc, #56]	; (80094c4 <prvGetNextExpireTime+0x44>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <prvGetNextExpireTime+0x16>
 8009492:	2201      	movs	r2, #1
 8009494:	e000      	b.n	8009498 <prvGetNextExpireTime+0x18>
 8009496:	2200      	movs	r2, #0
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d105      	bne.n	80094b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094a4:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <prvGetNextExpireTime+0x44>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	e001      	b.n	80094b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094b4:	68fb      	ldr	r3, [r7, #12]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	20000f38 	.word	0x20000f38

080094c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094d0:	f7ff faa8 	bl	8008a24 <xTaskGetTickCount>
 80094d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094d6:	4b0b      	ldr	r3, [pc, #44]	; (8009504 <prvSampleTimeNow+0x3c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d205      	bcs.n	80094ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094e0:	f000 f936 	bl	8009750 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	e002      	b.n	80094f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094f2:	4a04      	ldr	r2, [pc, #16]	; (8009504 <prvSampleTimeNow+0x3c>)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094f8:	68fb      	ldr	r3, [r7, #12]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20000f48 	.word	0x20000f48

08009508 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009516:	2300      	movs	r3, #0
 8009518:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d812      	bhi.n	8009554 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	1ad2      	subs	r2, r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	429a      	cmp	r2, r3
 800953a:	d302      	bcc.n	8009542 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	e01b      	b.n	800957a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009542:	4b10      	ldr	r3, [pc, #64]	; (8009584 <prvInsertTimerInActiveList+0x7c>)
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3304      	adds	r3, #4
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fe f9c8 	bl	80078e2 <vListInsert>
 8009552:	e012      	b.n	800957a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d206      	bcs.n	800956a <prvInsertTimerInActiveList+0x62>
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d302      	bcc.n	800956a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009564:	2301      	movs	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	e007      	b.n	800957a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <prvInsertTimerInActiveList+0x80>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3304      	adds	r3, #4
 8009572:	4619      	mov	r1, r3
 8009574:	4610      	mov	r0, r2
 8009576:	f7fe f9b4 	bl	80078e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800957a:	697b      	ldr	r3, [r7, #20]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20000f3c 	.word	0x20000f3c
 8009588:	20000f38 	.word	0x20000f38

0800958c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08e      	sub	sp, #56	; 0x38
 8009590:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009592:	e0ca      	b.n	800972a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	da18      	bge.n	80095cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800959a:	1d3b      	adds	r3, r7, #4
 800959c:	3304      	adds	r3, #4
 800959e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10a      	bne.n	80095bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	61fb      	str	r3, [r7, #28]
}
 80095b8:	bf00      	nop
 80095ba:	e7fe      	b.n	80095ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c2:	6850      	ldr	r0, [r2, #4]
 80095c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c6:	6892      	ldr	r2, [r2, #8]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f2c0 80aa 	blt.w	8009728 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d004      	beq.n	80095ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	3304      	adds	r3, #4
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe f9b5 	bl	8007954 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095ea:	463b      	mov	r3, r7
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff ff6b 	bl	80094c8 <prvSampleTimeNow>
 80095f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b09      	cmp	r3, #9
 80095f8:	f200 8097 	bhi.w	800972a <prvProcessReceivedCommands+0x19e>
 80095fc:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <prvProcessReceivedCommands+0x78>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	0800962d 	.word	0x0800962d
 8009608:	0800962d 	.word	0x0800962d
 800960c:	0800962d 	.word	0x0800962d
 8009610:	080096a1 	.word	0x080096a1
 8009614:	080096b5 	.word	0x080096b5
 8009618:	080096ff 	.word	0x080096ff
 800961c:	0800962d 	.word	0x0800962d
 8009620:	0800962d 	.word	0x0800962d
 8009624:	080096a1 	.word	0x080096a1
 8009628:	080096b5 	.word	0x080096b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009632:	f043 0301 	orr.w	r3, r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	18d1      	adds	r1, r2, r3
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800964c:	f7ff ff5c 	bl	8009508 <prvInsertTimerInActiveList>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d069      	beq.n	800972a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800965c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009664:	f003 0304 	and.w	r3, r3, #4
 8009668:	2b00      	cmp	r3, #0
 800966a:	d05e      	beq.n	800972a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	441a      	add	r2, r3
 8009674:	2300      	movs	r3, #0
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	2300      	movs	r3, #0
 800967a:	2100      	movs	r1, #0
 800967c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800967e:	f7ff fe05 	bl	800928c <xTimerGenericCommand>
 8009682:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d14f      	bne.n	800972a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	61bb      	str	r3, [r7, #24]
}
 800969c:	bf00      	nop
 800969e:	e7fe      	b.n	800969e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a6:	f023 0301 	bic.w	r3, r3, #1
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096b2:	e03a      	b.n	800972a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ba:	f043 0301 	orr.w	r3, r3, #1
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10a      	bne.n	80096ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	617b      	str	r3, [r7, #20]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	699a      	ldr	r2, [r3, #24]
 80096ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f0:	18d1      	adds	r1, r2, r3
 80096f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f8:	f7ff ff06 	bl	8009508 <prvInsertTimerInActiveList>
					break;
 80096fc:	e015      	b.n	800972a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009704:	f003 0302 	and.w	r3, r3, #2
 8009708:	2b00      	cmp	r3, #0
 800970a:	d103      	bne.n	8009714 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800970c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800970e:	f000 fbdf 	bl	8009ed0 <vPortFree>
 8009712:	e00a      	b.n	800972a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800971a:	f023 0301 	bic.w	r3, r3, #1
 800971e:	b2da      	uxtb	r2, r3
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009726:	e000      	b.n	800972a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009728:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800972a:	4b08      	ldr	r3, [pc, #32]	; (800974c <prvProcessReceivedCommands+0x1c0>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	1d39      	adds	r1, r7, #4
 8009730:	2200      	movs	r2, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fbea 	bl	8007f0c <xQueueReceive>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	f47f af2a 	bne.w	8009594 <prvProcessReceivedCommands+0x8>
	}
}
 8009740:	bf00      	nop
 8009742:	bf00      	nop
 8009744:	3730      	adds	r7, #48	; 0x30
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20000f40 	.word	0x20000f40

08009750 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009756:	e048      	b.n	80097ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009758:	4b2d      	ldr	r3, [pc, #180]	; (8009810 <prvSwitchTimerLists+0xc0>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009762:	4b2b      	ldr	r3, [pc, #172]	; (8009810 <prvSwitchTimerLists+0xc0>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3304      	adds	r3, #4
 8009770:	4618      	mov	r0, r3
 8009772:	f7fe f8ef 	bl	8007954 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009784:	f003 0304 	and.w	r3, r3, #4
 8009788:	2b00      	cmp	r3, #0
 800978a:	d02e      	beq.n	80097ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	4413      	add	r3, r2
 8009794:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	429a      	cmp	r2, r3
 800979c:	d90e      	bls.n	80097bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097aa:	4b19      	ldr	r3, [pc, #100]	; (8009810 <prvSwitchTimerLists+0xc0>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3304      	adds	r3, #4
 80097b2:	4619      	mov	r1, r3
 80097b4:	4610      	mov	r0, r2
 80097b6:	f7fe f894 	bl	80078e2 <vListInsert>
 80097ba:	e016      	b.n	80097ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097bc:	2300      	movs	r3, #0
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	2300      	movs	r3, #0
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	2100      	movs	r1, #0
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff fd60 	bl	800928c <xTimerGenericCommand>
 80097cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	603b      	str	r3, [r7, #0]
}
 80097e6:	bf00      	nop
 80097e8:	e7fe      	b.n	80097e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097ea:	4b09      	ldr	r3, [pc, #36]	; (8009810 <prvSwitchTimerLists+0xc0>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1b1      	bne.n	8009758 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097f4:	4b06      	ldr	r3, [pc, #24]	; (8009810 <prvSwitchTimerLists+0xc0>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097fa:	4b06      	ldr	r3, [pc, #24]	; (8009814 <prvSwitchTimerLists+0xc4>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a04      	ldr	r2, [pc, #16]	; (8009810 <prvSwitchTimerLists+0xc0>)
 8009800:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009802:	4a04      	ldr	r2, [pc, #16]	; (8009814 <prvSwitchTimerLists+0xc4>)
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	6013      	str	r3, [r2, #0]
}
 8009808:	bf00      	nop
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	20000f38 	.word	0x20000f38
 8009814:	20000f3c 	.word	0x20000f3c

08009818 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800981e:	f000 f969 	bl	8009af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009822:	4b15      	ldr	r3, [pc, #84]	; (8009878 <prvCheckForValidListAndQueue+0x60>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d120      	bne.n	800986c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800982a:	4814      	ldr	r0, [pc, #80]	; (800987c <prvCheckForValidListAndQueue+0x64>)
 800982c:	f7fe f808 	bl	8007840 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009830:	4813      	ldr	r0, [pc, #76]	; (8009880 <prvCheckForValidListAndQueue+0x68>)
 8009832:	f7fe f805 	bl	8007840 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009836:	4b13      	ldr	r3, [pc, #76]	; (8009884 <prvCheckForValidListAndQueue+0x6c>)
 8009838:	4a10      	ldr	r2, [pc, #64]	; (800987c <prvCheckForValidListAndQueue+0x64>)
 800983a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800983c:	4b12      	ldr	r3, [pc, #72]	; (8009888 <prvCheckForValidListAndQueue+0x70>)
 800983e:	4a10      	ldr	r2, [pc, #64]	; (8009880 <prvCheckForValidListAndQueue+0x68>)
 8009840:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009842:	2300      	movs	r3, #0
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	4b11      	ldr	r3, [pc, #68]	; (800988c <prvCheckForValidListAndQueue+0x74>)
 8009848:	4a11      	ldr	r2, [pc, #68]	; (8009890 <prvCheckForValidListAndQueue+0x78>)
 800984a:	2110      	movs	r1, #16
 800984c:	200a      	movs	r0, #10
 800984e:	f7fe f906 	bl	8007a5e <xQueueGenericCreateStatic>
 8009852:	4603      	mov	r3, r0
 8009854:	4a08      	ldr	r2, [pc, #32]	; (8009878 <prvCheckForValidListAndQueue+0x60>)
 8009856:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009858:	4b07      	ldr	r3, [pc, #28]	; (8009878 <prvCheckForValidListAndQueue+0x60>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d005      	beq.n	800986c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009860:	4b05      	ldr	r3, [pc, #20]	; (8009878 <prvCheckForValidListAndQueue+0x60>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	490b      	ldr	r1, [pc, #44]	; (8009894 <prvCheckForValidListAndQueue+0x7c>)
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fdb4 	bl	80083d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800986c:	f000 f972 	bl	8009b54 <vPortExitCritical>
}
 8009870:	bf00      	nop
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20000f40 	.word	0x20000f40
 800987c:	20000f10 	.word	0x20000f10
 8009880:	20000f24 	.word	0x20000f24
 8009884:	20000f38 	.word	0x20000f38
 8009888:	20000f3c 	.word	0x20000f3c
 800988c:	20000fec 	.word	0x20000fec
 8009890:	20000f4c 	.word	0x20000f4c
 8009894:	0800a368 	.word	0x0800a368

08009898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3b04      	subs	r3, #4
 80098a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3b04      	subs	r3, #4
 80098b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f023 0201 	bic.w	r2, r3, #1
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	3b04      	subs	r3, #4
 80098c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098c8:	4a0c      	ldr	r2, [pc, #48]	; (80098fc <pxPortInitialiseStack+0x64>)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3b14      	subs	r3, #20
 80098d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3b04      	subs	r3, #4
 80098de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f06f 0202 	mvn.w	r2, #2
 80098e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3b20      	subs	r3, #32
 80098ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098ee:	68fb      	ldr	r3, [r7, #12]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	08009901 	.word	0x08009901

08009900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800990a:	4b12      	ldr	r3, [pc, #72]	; (8009954 <prvTaskExitError+0x54>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d00a      	beq.n	800992a <prvTaskExitError+0x2a>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	60fb      	str	r3, [r7, #12]
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <prvTaskExitError+0x28>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	60bb      	str	r3, [r7, #8]
}
 800993c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800993e:	bf00      	nop
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d0fc      	beq.n	8009940 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009946:	bf00      	nop
 8009948:	bf00      	nop
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	20000020 	.word	0x20000020
	...

08009960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <pxCurrentTCBConst2>)
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	6808      	ldr	r0, [r1, #0]
 8009966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	f380 8809 	msr	PSP, r0
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8811 	msr	BASEPRI, r0
 800997a:	4770      	bx	lr
 800997c:	f3af 8000 	nop.w

08009980 <pxCurrentTCBConst2>:
 8009980:	20000a10 	.word	0x20000a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009988:	4808      	ldr	r0, [pc, #32]	; (80099ac <prvPortStartFirstTask+0x24>)
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	6800      	ldr	r0, [r0, #0]
 800998e:	f380 8808 	msr	MSP, r0
 8009992:	f04f 0000 	mov.w	r0, #0
 8009996:	f380 8814 	msr	CONTROL, r0
 800999a:	b662      	cpsie	i
 800999c:	b661      	cpsie	f
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	df00      	svc	0
 80099a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099aa:	bf00      	nop
 80099ac:	e000ed08 	.word	0xe000ed08

080099b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099b6:	4b46      	ldr	r3, [pc, #280]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a46      	ldr	r2, [pc, #280]	; (8009ad4 <xPortStartScheduler+0x124>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d10a      	bne.n	80099d6 <xPortStartScheduler+0x26>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099d6:	4b3e      	ldr	r3, [pc, #248]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a3f      	ldr	r2, [pc, #252]	; (8009ad8 <xPortStartScheduler+0x128>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10a      	bne.n	80099f6 <xPortStartScheduler+0x46>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099f6:	4b39      	ldr	r3, [pc, #228]	; (8009adc <xPortStartScheduler+0x12c>)
 80099f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	22ff      	movs	r2, #255	; 0xff
 8009a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	4b31      	ldr	r3, [pc, #196]	; (8009ae0 <xPortStartScheduler+0x130>)
 8009a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a1e:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a20:	2207      	movs	r2, #7
 8009a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a24:	e009      	b.n	8009a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a26:	4b2f      	ldr	r3, [pc, #188]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d0ef      	beq.n	8009a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a46:	4b27      	ldr	r3, [pc, #156]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f1c3 0307 	rsb	r3, r3, #7
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d00a      	beq.n	8009a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	60bb      	str	r3, [r7, #8]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a68:	4b1e      	ldr	r3, [pc, #120]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	021b      	lsls	r3, r3, #8
 8009a6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a72:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a86:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a14      	ldr	r2, [pc, #80]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a9e:	f000 f8dd 	bl	8009c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <xPortStartScheduler+0x13c>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009aa8:	f000 f8fc 	bl	8009ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <xPortStartScheduler+0x140>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <xPortStartScheduler+0x140>)
 8009ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ab8:	f7ff ff66 	bl	8009988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009abc:	f7ff f858 	bl	8008b70 <vTaskSwitchContext>
	prvTaskExitError();
 8009ac0:	f7ff ff1e 	bl	8009900 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	e000ed00 	.word	0xe000ed00
 8009ad4:	410fc271 	.word	0x410fc271
 8009ad8:	410fc270 	.word	0x410fc270
 8009adc:	e000e400 	.word	0xe000e400
 8009ae0:	2000103c 	.word	0x2000103c
 8009ae4:	20001040 	.word	0x20001040
 8009ae8:	e000ed20 	.word	0xe000ed20
 8009aec:	20000020 	.word	0x20000020
 8009af0:	e000ef34 	.word	0xe000ef34

08009af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	607b      	str	r3, [r7, #4]
}
 8009b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	4a0d      	ldr	r2, [pc, #52]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10f      	bne.n	8009b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b20:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <vPortEnterCritical+0x5c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	603b      	str	r3, [r7, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <vPortEnterCritical+0x4a>
	}
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	20000020 	.word	0x20000020
 8009b50:	e000ed04 	.word	0xe000ed04

08009b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b5a:	4b12      	ldr	r3, [pc, #72]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <vPortExitCritical+0x24>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	607b      	str	r3, [r7, #4]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b78:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b82:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d105      	bne.n	8009b96 <vPortExitCritical+0x42>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	f383 8811 	msr	BASEPRI, r3
}
 8009b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000020 	.word	0x20000020
	...

08009bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bb0:	f3ef 8009 	mrs	r0, PSP
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <pxCurrentTCBConst>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	f01e 0f10 	tst.w	lr, #16
 8009bc0:	bf08      	it	eq
 8009bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bca:	6010      	str	r0, [r2, #0]
 8009bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bd4:	f380 8811 	msr	BASEPRI, r0
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f7fe ffc6 	bl	8008b70 <vTaskSwitchContext>
 8009be4:	f04f 0000 	mov.w	r0, #0
 8009be8:	f380 8811 	msr	BASEPRI, r0
 8009bec:	bc09      	pop	{r0, r3}
 8009bee:	6819      	ldr	r1, [r3, #0]
 8009bf0:	6808      	ldr	r0, [r1, #0]
 8009bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf6:	f01e 0f10 	tst.w	lr, #16
 8009bfa:	bf08      	it	eq
 8009bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c00:	f380 8809 	msr	PSP, r0
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	f3af 8000 	nop.w

08009c10 <pxCurrentTCBConst>:
 8009c10:	20000a10 	.word	0x20000a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop

08009c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	607b      	str	r3, [r7, #4]
}
 8009c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c32:	f7fe ff07 	bl	8008a44 <xTaskIncrementTick>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c3c:	4b06      	ldr	r3, [pc, #24]	; (8009c58 <xPortSysTickHandler+0x40>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f383 8811 	msr	BASEPRI, r3
}
 8009c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <vPortSetupTimerInterrupt+0x38>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <vPortSetupTimerInterrupt+0x3c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a0a      	ldr	r2, [pc, #40]	; (8009c9c <vPortSetupTimerInterrupt+0x40>)
 8009c72:	fba2 2303 	umull	r2, r3, r2, r3
 8009c76:	099b      	lsrs	r3, r3, #6
 8009c78:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <vPortSetupTimerInterrupt+0x44>)
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c7e:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c80:	2207      	movs	r2, #7
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	e000e010 	.word	0xe000e010
 8009c94:	e000e018 	.word	0xe000e018
 8009c98:	20000014 	.word	0x20000014
 8009c9c:	10624dd3 	.word	0x10624dd3
 8009ca0:	e000e014 	.word	0xe000e014

08009ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cb4 <vPortEnableVFP+0x10>
 8009ca8:	6801      	ldr	r1, [r0, #0]
 8009caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cae:	6001      	str	r1, [r0, #0]
 8009cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cb2:	bf00      	nop
 8009cb4:	e000ed88 	.word	0xe000ed88

08009cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cbe:	f3ef 8305 	mrs	r3, IPSR
 8009cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d914      	bls.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cca:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <vPortValidateInterruptPriority+0x70>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cd4:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <vPortValidateInterruptPriority+0x74>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	7afa      	ldrb	r2, [r7, #11]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d20a      	bcs.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <vPortValidateInterruptPriority+0x78>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <vPortValidateInterruptPriority+0x7c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d90a      	bls.n	8009d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	603b      	str	r3, [r7, #0]
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <vPortValidateInterruptPriority+0x60>
	}
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	e000e3f0 	.word	0xe000e3f0
 8009d2c:	2000103c 	.word	0x2000103c
 8009d30:	e000ed0c 	.word	0xe000ed0c
 8009d34:	20001040 	.word	0x20001040

08009d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	; 0x28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d44:	f7fe fdd0 	bl	80088e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d48:	4b5b      	ldr	r3, [pc, #364]	; (8009eb8 <pvPortMalloc+0x180>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d50:	f000 f920 	bl	8009f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d54:	4b59      	ldr	r3, [pc, #356]	; (8009ebc <pvPortMalloc+0x184>)
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f040 8093 	bne.w	8009e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01d      	beq.n	8009da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d68:	2208      	movs	r2, #8
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d014      	beq.n	8009da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f023 0307 	bic.w	r3, r3, #7
 8009d80:	3308      	adds	r3, #8
 8009d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <pvPortMalloc+0x6c>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	617b      	str	r3, [r7, #20]
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d06e      	beq.n	8009e88 <pvPortMalloc+0x150>
 8009daa:	4b45      	ldr	r3, [pc, #276]	; (8009ec0 <pvPortMalloc+0x188>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d869      	bhi.n	8009e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009db4:	4b43      	ldr	r3, [pc, #268]	; (8009ec4 <pvPortMalloc+0x18c>)
 8009db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009db8:	4b42      	ldr	r3, [pc, #264]	; (8009ec4 <pvPortMalloc+0x18c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dbe:	e004      	b.n	8009dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d903      	bls.n	8009ddc <pvPortMalloc+0xa4>
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f1      	bne.n	8009dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ddc:	4b36      	ldr	r3, [pc, #216]	; (8009eb8 <pvPortMalloc+0x180>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d050      	beq.n	8009e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2208      	movs	r2, #8
 8009dec:	4413      	add	r3, r2
 8009dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	2308      	movs	r3, #8
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d91f      	bls.n	8009e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <pvPortMalloc+0xf8>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	613b      	str	r3, [r7, #16]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	1ad2      	subs	r2, r2, r3
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e42:	69b8      	ldr	r0, [r7, #24]
 8009e44:	f000 f908 	bl	800a058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e48:	4b1d      	ldr	r3, [pc, #116]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	4a1b      	ldr	r2, [pc, #108]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e56:	4b1a      	ldr	r3, [pc, #104]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ec8 <pvPortMalloc+0x190>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d203      	bcs.n	8009e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e62:	4b17      	ldr	r3, [pc, #92]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a18      	ldr	r2, [pc, #96]	; (8009ec8 <pvPortMalloc+0x190>)
 8009e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	4b13      	ldr	r3, [pc, #76]	; (8009ebc <pvPortMalloc+0x184>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	431a      	orrs	r2, r3
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e7e:	4b13      	ldr	r3, [pc, #76]	; (8009ecc <pvPortMalloc+0x194>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	4a11      	ldr	r2, [pc, #68]	; (8009ecc <pvPortMalloc+0x194>)
 8009e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e88:	f7fe fd3c 	bl	8008904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	f003 0307 	and.w	r3, r3, #7
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <pvPortMalloc+0x174>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	60fb      	str	r3, [r7, #12]
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <pvPortMalloc+0x172>
	return pvReturn;
 8009eac:	69fb      	ldr	r3, [r7, #28]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3728      	adds	r7, #40	; 0x28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20004c4c 	.word	0x20004c4c
 8009ebc:	20004c60 	.word	0x20004c60
 8009ec0:	20004c50 	.word	0x20004c50
 8009ec4:	20004c44 	.word	0x20004c44
 8009ec8:	20004c54 	.word	0x20004c54
 8009ecc:	20004c58 	.word	0x20004c58

08009ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d04d      	beq.n	8009f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ee2:	2308      	movs	r3, #8
 8009ee4:	425b      	negs	r3, r3
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	4413      	add	r3, r2
 8009eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <vPortFree+0xb8>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <vPortFree+0x44>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	60fb      	str	r3, [r7, #12]
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <vPortFree+0x62>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	60bb      	str	r3, [r7, #8]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <vPortFree+0xb8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01e      	beq.n	8009f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d11a      	bne.n	8009f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	; (8009f88 <vPortFree+0xb8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	43db      	mvns	r3, r3
 8009f52:	401a      	ands	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f58:	f7fe fcc6 	bl	80088e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	4b0a      	ldr	r3, [pc, #40]	; (8009f8c <vPortFree+0xbc>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4413      	add	r3, r2
 8009f66:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <vPortFree+0xbc>)
 8009f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f6a:	6938      	ldr	r0, [r7, #16]
 8009f6c:	f000 f874 	bl	800a058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <vPortFree+0xc0>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3301      	adds	r3, #1
 8009f76:	4a06      	ldr	r2, [pc, #24]	; (8009f90 <vPortFree+0xc0>)
 8009f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f7a:	f7fe fcc3 	bl	8008904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f7e:	bf00      	nop
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20004c60 	.word	0x20004c60
 8009f8c:	20004c50 	.word	0x20004c50
 8009f90:	20004c5c 	.word	0x20004c5c

08009f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fa0:	4b27      	ldr	r3, [pc, #156]	; (800a040 <prvHeapInit+0xac>)
 8009fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3307      	adds	r3, #7
 8009fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0307 	bic.w	r3, r3, #7
 8009fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	4a1f      	ldr	r2, [pc, #124]	; (800a040 <prvHeapInit+0xac>)
 8009fc4:	4413      	add	r3, r2
 8009fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fcc:	4a1d      	ldr	r2, [pc, #116]	; (800a044 <prvHeapInit+0xb0>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fd2:	4b1c      	ldr	r3, [pc, #112]	; (800a044 <prvHeapInit+0xb0>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4413      	add	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fe0:	2208      	movs	r2, #8
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f023 0307 	bic.w	r3, r3, #7
 8009fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4a15      	ldr	r2, [pc, #84]	; (800a048 <prvHeapInit+0xb4>)
 8009ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ff6:	4b14      	ldr	r3, [pc, #80]	; (800a048 <prvHeapInit+0xb4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ffe:	4b12      	ldr	r3, [pc, #72]	; (800a048 <prvHeapInit+0xb4>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	1ad2      	subs	r2, r2, r3
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a014:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <prvHeapInit+0xb4>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <prvHeapInit+0xb8>)
 800a022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	4a09      	ldr	r2, [pc, #36]	; (800a050 <prvHeapInit+0xbc>)
 800a02a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a02c:	4b09      	ldr	r3, [pc, #36]	; (800a054 <prvHeapInit+0xc0>)
 800a02e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a032:	601a      	str	r2, [r3, #0]
}
 800a034:	bf00      	nop
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	20001044 	.word	0x20001044
 800a044:	20004c44 	.word	0x20004c44
 800a048:	20004c4c 	.word	0x20004c4c
 800a04c:	20004c54 	.word	0x20004c54
 800a050:	20004c50 	.word	0x20004c50
 800a054:	20004c60 	.word	0x20004c60

0800a058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a060:	4b28      	ldr	r3, [pc, #160]	; (800a104 <prvInsertBlockIntoFreeList+0xac>)
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e002      	b.n	800a06c <prvInsertBlockIntoFreeList+0x14>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	429a      	cmp	r2, r3
 800a074:	d8f7      	bhi.n	800a066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4413      	add	r3, r2
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	429a      	cmp	r2, r3
 800a086:	d108      	bne.n	800a09a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	441a      	add	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d118      	bne.n	800a0e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	4b15      	ldr	r3, [pc, #84]	; (800a108 <prvInsertBlockIntoFreeList+0xb0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d00d      	beq.n	800a0d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	441a      	add	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e008      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0d6:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <prvInsertBlockIntoFreeList+0xb0>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e003      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d002      	beq.n	800a0f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0f6:	bf00      	nop
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	20004c44 	.word	0x20004c44
 800a108:	20004c4c 	.word	0x20004c4c

0800a10c <atoi>:
 800a10c:	220a      	movs	r2, #10
 800a10e:	2100      	movs	r1, #0
 800a110:	f000 b8c2 	b.w	800a298 <strtol>

0800a114 <__errno>:
 800a114:	4b01      	ldr	r3, [pc, #4]	; (800a11c <__errno+0x8>)
 800a116:	6818      	ldr	r0, [r3, #0]
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	20000024 	.word	0x20000024

0800a120 <__libc_init_array>:
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	4d0d      	ldr	r5, [pc, #52]	; (800a158 <__libc_init_array+0x38>)
 800a124:	4c0d      	ldr	r4, [pc, #52]	; (800a15c <__libc_init_array+0x3c>)
 800a126:	1b64      	subs	r4, r4, r5
 800a128:	10a4      	asrs	r4, r4, #2
 800a12a:	2600      	movs	r6, #0
 800a12c:	42a6      	cmp	r6, r4
 800a12e:	d109      	bne.n	800a144 <__libc_init_array+0x24>
 800a130:	4d0b      	ldr	r5, [pc, #44]	; (800a160 <__libc_init_array+0x40>)
 800a132:	4c0c      	ldr	r4, [pc, #48]	; (800a164 <__libc_init_array+0x44>)
 800a134:	f000 f8ba 	bl	800a2ac <_init>
 800a138:	1b64      	subs	r4, r4, r5
 800a13a:	10a4      	asrs	r4, r4, #2
 800a13c:	2600      	movs	r6, #0
 800a13e:	42a6      	cmp	r6, r4
 800a140:	d105      	bne.n	800a14e <__libc_init_array+0x2e>
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	f855 3b04 	ldr.w	r3, [r5], #4
 800a148:	4798      	blx	r3
 800a14a:	3601      	adds	r6, #1
 800a14c:	e7ee      	b.n	800a12c <__libc_init_array+0xc>
 800a14e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a152:	4798      	blx	r3
 800a154:	3601      	adds	r6, #1
 800a156:	e7f2      	b.n	800a13e <__libc_init_array+0x1e>
 800a158:	0800a67c 	.word	0x0800a67c
 800a15c:	0800a67c 	.word	0x0800a67c
 800a160:	0800a67c 	.word	0x0800a67c
 800a164:	0800a680 	.word	0x0800a680

0800a168 <memcpy>:
 800a168:	440a      	add	r2, r1
 800a16a:	4291      	cmp	r1, r2
 800a16c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a170:	d100      	bne.n	800a174 <memcpy+0xc>
 800a172:	4770      	bx	lr
 800a174:	b510      	push	{r4, lr}
 800a176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a17a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a17e:	4291      	cmp	r1, r2
 800a180:	d1f9      	bne.n	800a176 <memcpy+0xe>
 800a182:	bd10      	pop	{r4, pc}

0800a184 <memset>:
 800a184:	4402      	add	r2, r0
 800a186:	4603      	mov	r3, r0
 800a188:	4293      	cmp	r3, r2
 800a18a:	d100      	bne.n	800a18e <memset+0xa>
 800a18c:	4770      	bx	lr
 800a18e:	f803 1b01 	strb.w	r1, [r3], #1
 800a192:	e7f9      	b.n	800a188 <memset+0x4>

0800a194 <_strtol_l.constprop.0>:
 800a194:	2b01      	cmp	r3, #1
 800a196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a19a:	d001      	beq.n	800a1a0 <_strtol_l.constprop.0+0xc>
 800a19c:	2b24      	cmp	r3, #36	; 0x24
 800a19e:	d906      	bls.n	800a1ae <_strtol_l.constprop.0+0x1a>
 800a1a0:	f7ff ffb8 	bl	800a114 <__errno>
 800a1a4:	2316      	movs	r3, #22
 800a1a6:	6003      	str	r3, [r0, #0]
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a294 <_strtol_l.constprop.0+0x100>
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	462e      	mov	r6, r5
 800a1b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a1be:	f017 0708 	ands.w	r7, r7, #8
 800a1c2:	d1f7      	bne.n	800a1b4 <_strtol_l.constprop.0+0x20>
 800a1c4:	2c2d      	cmp	r4, #45	; 0x2d
 800a1c6:	d132      	bne.n	800a22e <_strtol_l.constprop.0+0x9a>
 800a1c8:	782c      	ldrb	r4, [r5, #0]
 800a1ca:	2701      	movs	r7, #1
 800a1cc:	1cb5      	adds	r5, r6, #2
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d05b      	beq.n	800a28a <_strtol_l.constprop.0+0xf6>
 800a1d2:	2b10      	cmp	r3, #16
 800a1d4:	d109      	bne.n	800a1ea <_strtol_l.constprop.0+0x56>
 800a1d6:	2c30      	cmp	r4, #48	; 0x30
 800a1d8:	d107      	bne.n	800a1ea <_strtol_l.constprop.0+0x56>
 800a1da:	782c      	ldrb	r4, [r5, #0]
 800a1dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a1e0:	2c58      	cmp	r4, #88	; 0x58
 800a1e2:	d14d      	bne.n	800a280 <_strtol_l.constprop.0+0xec>
 800a1e4:	786c      	ldrb	r4, [r5, #1]
 800a1e6:	2310      	movs	r3, #16
 800a1e8:	3502      	adds	r5, #2
 800a1ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a1ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1f2:	f04f 0c00 	mov.w	ip, #0
 800a1f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800a1fa:	4666      	mov	r6, ip
 800a1fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800a200:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a204:	f1be 0f09 	cmp.w	lr, #9
 800a208:	d816      	bhi.n	800a238 <_strtol_l.constprop.0+0xa4>
 800a20a:	4674      	mov	r4, lr
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	dd24      	ble.n	800a25a <_strtol_l.constprop.0+0xc6>
 800a210:	f1bc 0f00 	cmp.w	ip, #0
 800a214:	db1e      	blt.n	800a254 <_strtol_l.constprop.0+0xc0>
 800a216:	45b1      	cmp	r9, r6
 800a218:	d31c      	bcc.n	800a254 <_strtol_l.constprop.0+0xc0>
 800a21a:	d101      	bne.n	800a220 <_strtol_l.constprop.0+0x8c>
 800a21c:	45a2      	cmp	sl, r4
 800a21e:	db19      	blt.n	800a254 <_strtol_l.constprop.0+0xc0>
 800a220:	fb06 4603 	mla	r6, r6, r3, r4
 800a224:	f04f 0c01 	mov.w	ip, #1
 800a228:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a22c:	e7e8      	b.n	800a200 <_strtol_l.constprop.0+0x6c>
 800a22e:	2c2b      	cmp	r4, #43	; 0x2b
 800a230:	bf04      	itt	eq
 800a232:	782c      	ldrbeq	r4, [r5, #0]
 800a234:	1cb5      	addeq	r5, r6, #2
 800a236:	e7ca      	b.n	800a1ce <_strtol_l.constprop.0+0x3a>
 800a238:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a23c:	f1be 0f19 	cmp.w	lr, #25
 800a240:	d801      	bhi.n	800a246 <_strtol_l.constprop.0+0xb2>
 800a242:	3c37      	subs	r4, #55	; 0x37
 800a244:	e7e2      	b.n	800a20c <_strtol_l.constprop.0+0x78>
 800a246:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a24a:	f1be 0f19 	cmp.w	lr, #25
 800a24e:	d804      	bhi.n	800a25a <_strtol_l.constprop.0+0xc6>
 800a250:	3c57      	subs	r4, #87	; 0x57
 800a252:	e7db      	b.n	800a20c <_strtol_l.constprop.0+0x78>
 800a254:	f04f 3cff 	mov.w	ip, #4294967295
 800a258:	e7e6      	b.n	800a228 <_strtol_l.constprop.0+0x94>
 800a25a:	f1bc 0f00 	cmp.w	ip, #0
 800a25e:	da05      	bge.n	800a26c <_strtol_l.constprop.0+0xd8>
 800a260:	2322      	movs	r3, #34	; 0x22
 800a262:	6003      	str	r3, [r0, #0]
 800a264:	4646      	mov	r6, r8
 800a266:	b942      	cbnz	r2, 800a27a <_strtol_l.constprop.0+0xe6>
 800a268:	4630      	mov	r0, r6
 800a26a:	e79e      	b.n	800a1aa <_strtol_l.constprop.0+0x16>
 800a26c:	b107      	cbz	r7, 800a270 <_strtol_l.constprop.0+0xdc>
 800a26e:	4276      	negs	r6, r6
 800a270:	2a00      	cmp	r2, #0
 800a272:	d0f9      	beq.n	800a268 <_strtol_l.constprop.0+0xd4>
 800a274:	f1bc 0f00 	cmp.w	ip, #0
 800a278:	d000      	beq.n	800a27c <_strtol_l.constprop.0+0xe8>
 800a27a:	1e69      	subs	r1, r5, #1
 800a27c:	6011      	str	r1, [r2, #0]
 800a27e:	e7f3      	b.n	800a268 <_strtol_l.constprop.0+0xd4>
 800a280:	2430      	movs	r4, #48	; 0x30
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1b1      	bne.n	800a1ea <_strtol_l.constprop.0+0x56>
 800a286:	2308      	movs	r3, #8
 800a288:	e7af      	b.n	800a1ea <_strtol_l.constprop.0+0x56>
 800a28a:	2c30      	cmp	r4, #48	; 0x30
 800a28c:	d0a5      	beq.n	800a1da <_strtol_l.constprop.0+0x46>
 800a28e:	230a      	movs	r3, #10
 800a290:	e7ab      	b.n	800a1ea <_strtol_l.constprop.0+0x56>
 800a292:	bf00      	nop
 800a294:	0800a571 	.word	0x0800a571

0800a298 <strtol>:
 800a298:	4613      	mov	r3, r2
 800a29a:	460a      	mov	r2, r1
 800a29c:	4601      	mov	r1, r0
 800a29e:	4802      	ldr	r0, [pc, #8]	; (800a2a8 <strtol+0x10>)
 800a2a0:	6800      	ldr	r0, [r0, #0]
 800a2a2:	f7ff bf77 	b.w	800a194 <_strtol_l.constprop.0>
 800a2a6:	bf00      	nop
 800a2a8:	20000024 	.word	0x20000024

0800a2ac <_init>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	bf00      	nop
 800a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b2:	bc08      	pop	{r3}
 800a2b4:	469e      	mov	lr, r3
 800a2b6:	4770      	bx	lr

0800a2b8 <_fini>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	bf00      	nop
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr
