
LDW_RD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005448  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005670  08005670  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005678  08005678  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a54  20000010  08005690  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a64  08005690  00024a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013105  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a08  00000000  00000000  00033145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00035b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00036cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a24  00000000  00000000  00037d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bd7  00000000  00000000  0003a7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094528  00000000  00000000  0004c383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e08ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a74  00000000  00000000  000e08fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055d0 	.word	0x080055d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080055d0 	.word	0x080055d0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_GPIO_EXTI_Callback>:
  .priority = (osPriority_t) osPriorityLow,
};
/* USER CODE BEGIN PV */
/* EXTI interrupt callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d002      	beq.n	80004fa <HAL_GPIO_EXTI_Callback+0x16>
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d008      	beq.n	800050a <HAL_GPIO_EXTI_Callback+0x26>
		break;
	case IR_RIGHT_Pin:
		counter2++;
		break;
	}
}
 80004f8:	e00f      	b.n	800051a <HAL_GPIO_EXTI_Callback+0x36>
		counter1++;
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_GPIO_EXTI_Callback+0x44>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	3301      	adds	r3, #1
 8000502:	b29a      	uxth	r2, r3
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_GPIO_EXTI_Callback+0x44>)
 8000506:	801a      	strh	r2, [r3, #0]
		break;
 8000508:	e007      	b.n	800051a <HAL_GPIO_EXTI_Callback+0x36>
		counter2++;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_GPIO_EXTI_Callback+0x48>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	b29b      	uxth	r3, r3
 8000510:	3301      	adds	r3, #1
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <HAL_GPIO_EXTI_Callback+0x48>)
 8000516:	801a      	strh	r2, [r3, #0]
		break;
 8000518:	bf00      	nop
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000002c 	.word	0x2000002c
 800052c:	2000002e 	.word	0x2000002e

08000530 <MoveForward>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**********************************************************************************************/
/* Operate all car motors in CW direction */
static void MoveForward(u8 Copy_u8Speed)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
	MOTOR_Speed_dir(M1, Copy_u8Speed , M_CW);
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	2200      	movs	r2, #0
 800053e:	4619      	mov	r1, r3
 8000540:	2000      	movs	r0, #0
 8000542:	f000 f835 	bl	80005b0 <MOTOR_Speed_dir>
	MOTOR_Speed_dir(M2, Copy_u8Speed , M_CW);
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	2001      	movs	r0, #1
 800054e:	f000 f82f 	bl	80005b0 <MOTOR_Speed_dir>

}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <MoveRight>:
}
/**********************************************************************************************/
/* Operate two right car motors in CW direction
 * Operate two left car motors in CCW direction */
static void MoveRight(u8 Copy_u8Speed)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	4603      	mov	r3, r0
 8000562:	80fb      	strh	r3, [r7, #6]
	MOTOR_Speed_dir(M1, Copy_u8Speed , M_CW);
 8000564:	88fb      	ldrh	r3, [r7, #6]
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	2000      	movs	r0, #0
 800056c:	f000 f820 	bl	80005b0 <MOTOR_Speed_dir>
	MOTOR_Speed_dir(M2, Copy_u8Speed , M_CCW);
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	2201      	movs	r2, #1
 8000574:	4619      	mov	r1, r3
 8000576:	2001      	movs	r0, #1
 8000578:	f000 f81a 	bl	80005b0 <MOTOR_Speed_dir>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <MoveLeft>:
/**********************************************************************************************/
/* Operate two right car motors in CCW direction
 * Operate two left car motors in CW direction */
static void MoveLeft(u8 Copy_u8Speed)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	MOTOR_Speed_dir(M1, Copy_u8Speed , M_CCW);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	2201      	movs	r2, #1
 8000592:	4619      	mov	r1, r3
 8000594:	2000      	movs	r0, #0
 8000596:	f000 f80b 	bl	80005b0 <MOTOR_Speed_dir>
	MOTOR_Speed_dir(M2, Copy_u8Speed , M_CW);
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 f805 	bl	80005b0 <MOTOR_Speed_dir>

}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MOTOR_Speed_dir>:
/**********************************************************************************************/
/* Stop all car motors */
void MOTOR_Speed_dir(MOTOR_type motor,u8 speed , Direction_status status)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	460b      	mov	r3, r1
 80005bc:	80bb      	strh	r3, [r7, #4]
 80005be:	4613      	mov	r3, r2
 80005c0:	71bb      	strb	r3, [r7, #6]

	switch (motor)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <MOTOR_Speed_dir+0x1e>
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d030      	beq.n	800062e <MOTOR_Speed_dir+0x7e>
			}
			break;
	}


}
 80005cc:	e062      	b.n	8000694 <MOTOR_Speed_dir+0xe4>
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, speed);
 80005ce:	4b33      	ldr	r3, [pc, #204]	; (800069c <MOTOR_Speed_dir+0xec>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	88ba      	ldrh	r2, [r7, #4]
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
		switch (status)
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d01c      	beq.n	8000616 <MOTOR_Speed_dir+0x66>
 80005dc:	2b02      	cmp	r3, #2
 80005de:	dc56      	bgt.n	800068e <MOTOR_Speed_dir+0xde>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d002      	beq.n	80005ea <MOTOR_Speed_dir+0x3a>
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d00b      	beq.n	8000600 <MOTOR_Speed_dir+0x50>
		break;
 80005e8:	e051      	b.n	800068e <MOTOR_Speed_dir+0xde>
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2110      	movs	r1, #16
 80005ee:	482c      	ldr	r0, [pc, #176]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 80005f0:	f000 ffbe 	bl	8001570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2108      	movs	r1, #8
 80005f8:	4829      	ldr	r0, [pc, #164]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 80005fa:	f000 ffb9 	bl	8001570 <HAL_GPIO_WritePin>
			break;
 80005fe:	e015      	b.n	800062c <MOTOR_Speed_dir+0x7c>
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	4826      	ldr	r0, [pc, #152]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 8000606:	f000 ffb3 	bl	8001570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	2108      	movs	r1, #8
 800060e:	4824      	ldr	r0, [pc, #144]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 8000610:	f000 ffae 	bl	8001570 <HAL_GPIO_WritePin>
			break;
 8000614:	e00a      	b.n	800062c <MOTOR_Speed_dir+0x7c>
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2110      	movs	r1, #16
 800061a:	4821      	ldr	r0, [pc, #132]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 800061c:	f000 ffa8 	bl	8001570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2108      	movs	r1, #8
 8000624:	481e      	ldr	r0, [pc, #120]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 8000626:	f000 ffa3 	bl	8001570 <HAL_GPIO_WritePin>
			break;
 800062a:	bf00      	nop
		break;
 800062c:	e02f      	b.n	800068e <MOTOR_Speed_dir+0xde>
			__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, speed);
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MOTOR_Speed_dir+0xf4>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	88ba      	ldrh	r2, [r7, #4]
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
			switch (status)
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d01c      	beq.n	8000676 <MOTOR_Speed_dir+0xc6>
 800063c:	2b02      	cmp	r3, #2
 800063e:	dc28      	bgt.n	8000692 <MOTOR_Speed_dir+0xe2>
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <MOTOR_Speed_dir+0x9a>
 8000644:	2b01      	cmp	r3, #1
 8000646:	d00b      	beq.n	8000660 <MOTOR_Speed_dir+0xb0>
			break;
 8000648:	e023      	b.n	8000692 <MOTOR_Speed_dir+0xe2>
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	2104      	movs	r1, #4
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 8000650:	f000 ff8e 	bl	8001570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2102      	movs	r1, #2
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 800065a:	f000 ff89 	bl	8001570 <HAL_GPIO_WritePin>
				break;
 800065e:	e015      	b.n	800068c <MOTOR_Speed_dir+0xdc>
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2104      	movs	r1, #4
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 8000666:	f000 ff83 	bl	8001570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	2102      	movs	r1, #2
 800066e:	480c      	ldr	r0, [pc, #48]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 8000670:	f000 ff7e 	bl	8001570 <HAL_GPIO_WritePin>
				break;
 8000674:	e00a      	b.n	800068c <MOTOR_Speed_dir+0xdc>
				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2104      	movs	r1, #4
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 800067c:	f000 ff78 	bl	8001570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2102      	movs	r1, #2
 8000684:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MOTOR_Speed_dir+0xf0>)
 8000686:	f000 ff73 	bl	8001570 <HAL_GPIO_WritePin>
				break;
 800068a:	bf00      	nop
			break;
 800068c:	e001      	b.n	8000692 <MOTOR_Speed_dir+0xe2>
		break;
 800068e:	bf00      	nop
 8000690:	e000      	b.n	8000694 <MOTOR_Speed_dir+0xe4>
			break;
 8000692:	bf00      	nop
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000078 	.word	0x20000078
 80006a0:	40020000 	.word	0x40020000
 80006a4:	200000c0 	.word	0x200000c0

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fc58 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f82a 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f9c0 	bl	8000a38 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006b8:	f000 f886 	bl	80007c8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006bc:	f000 f8d0 	bl	8000860 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006c0:	f000 f944 	bl	800094c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c4:	f002 f9fa 	bl	8002abc <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LKA_TASK */
  LKA_TASKHandle = osThreadNew(LaneKeepAssist, NULL, &LKA_TASK_attributes);
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <main+0x48>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <main+0x4c>)
 80006ce:	f002 fa3f 	bl	8002b50 <osThreadNew>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <main+0x50>)
 80006d6:	6013      	str	r3, [r2, #0]

  /* creation of LDW_TASK */
  LDW_TASKHandle = osThreadNew(LaneDetectionWarning, NULL, &LDW_TASK_attributes);
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <main+0x54>)
 80006da:	2100      	movs	r1, #0
 80006dc:	4808      	ldr	r0, [pc, #32]	; (8000700 <main+0x58>)
 80006de:	f002 fa37 	bl	8002b50 <osThreadNew>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <main+0x5c>)
 80006e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e8:	f002 fa0c 	bl	8002b04 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0x44>
 80006ee:	bf00      	nop
 80006f0:	08005618 	.word	0x08005618
 80006f4:	08000b21 	.word	0x08000b21
 80006f8:	20000108 	.word	0x20000108
 80006fc:	0800563c 	.word	0x0800563c
 8000700:	08000ba1 	.word	0x08000ba1
 8000704:	2000010c 	.word	0x2000010c

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 ff52 	bl	80055c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xb8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <SystemClock_Config+0xb8>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <SystemClock_Config+0xb8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <SystemClock_Config+0xbc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <SystemClock_Config+0xbc>)
 8000756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <SystemClock_Config+0xbc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f000 ff29 	bl	80015d4 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000788:	f000 fa9c 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f98c 	bl	8001ac4 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007b2:	f000 fa87 	bl	8000cc4 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_TIM2_Init+0x94>)
 80007e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_TIM2_Init+0x94>)
 80007ee:	220f      	movs	r2, #15
 80007f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_TIM2_Init+0x94>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_TIM2_Init+0x94>)
 80007fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80007fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_TIM2_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_TIM2_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080c:	4813      	ldr	r0, [pc, #76]	; (800085c <MX_TIM2_Init+0x94>)
 800080e:	f001 fb05 	bl	8001e1c <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000818:	f000 fa54 	bl	8000cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_TIM2_Init+0x94>)
 800082a:	f001 fd11 	bl	8002250 <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000834:	f000 fa46 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_TIM2_Init+0x94>)
 8000846:	f002 f897 	bl	8002978 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000850:	f000 fa38 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000030 	.word	0x20000030

08000860 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	; 0x38
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000890:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <MX_TIM4_Init+0xe4>)
 8000892:	4a2d      	ldr	r2, [pc, #180]	; (8000948 <MX_TIM4_Init+0xe8>)
 8000894:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 8000896:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <MX_TIM4_Init+0xe4>)
 8000898:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800089c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008a6:	2263      	movs	r2, #99	; 0x63
 80008a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008b6:	4823      	ldr	r0, [pc, #140]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008b8:	f001 fab0 	bl	8001e1c <HAL_TIM_Base_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80008c2:	f000 f9ff 	bl	8000cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d0:	4619      	mov	r1, r3
 80008d2:	481c      	ldr	r0, [pc, #112]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008d4:	f001 fcbc 	bl	8002250 <HAL_TIM_ConfigClockSource>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80008de:	f000 f9f1 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008e2:	4818      	ldr	r0, [pc, #96]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008e4:	f001 fae9 	bl	8001eba <HAL_TIM_PWM_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80008ee:	f000 f9e9 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	4619      	mov	r1, r3
 8000900:	4810      	ldr	r0, [pc, #64]	; (8000944 <MX_TIM4_Init+0xe4>)
 8000902:	f002 f839 	bl	8002978 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800090c:	f000 f9da 	bl	8000cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000910:	2360      	movs	r3, #96	; 0x60
 8000912:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000918:	2302      	movs	r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	4619      	mov	r1, r3
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <MX_TIM4_Init+0xe4>)
 8000928:	f001 fbd0 	bl	80020cc <HAL_TIM_PWM_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000932:	f000 f9c7 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM4_Init+0xe4>)
 8000938:	f000 fa42 	bl	8000dc0 <HAL_TIM_MspPostInit>

}
 800093c:	bf00      	nop
 800093e:	3738      	adds	r7, #56	; 0x38
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000078 	.word	0x20000078
 8000948:	40000800 	.word	0x40000800

0800094c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	f107 0320 	add.w	r3, r7, #32
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <MX_TIM5_Init+0xe4>)
 800097e:	4a2d      	ldr	r2, [pc, #180]	; (8000a34 <MX_TIM5_Init+0xe8>)
 8000980:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 6399;
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <MX_TIM5_Init+0xe4>)
 8000984:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000988:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <MX_TIM5_Init+0xe4>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <MX_TIM5_Init+0xe4>)
 8000992:	2263      	movs	r2, #99	; 0x63
 8000994:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000996:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <MX_TIM5_Init+0xe4>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099c:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <MX_TIM5_Init+0xe4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009a2:	4823      	ldr	r0, [pc, #140]	; (8000a30 <MX_TIM5_Init+0xe4>)
 80009a4:	f001 fa3a 	bl	8001e1c <HAL_TIM_Base_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80009ae:	f000 f989 	bl	8000cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009bc:	4619      	mov	r1, r3
 80009be:	481c      	ldr	r0, [pc, #112]	; (8000a30 <MX_TIM5_Init+0xe4>)
 80009c0:	f001 fc46 	bl	8002250 <HAL_TIM_ConfigClockSource>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80009ca:	f000 f97b 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80009ce:	4818      	ldr	r0, [pc, #96]	; (8000a30 <MX_TIM5_Init+0xe4>)
 80009d0:	f001 fa73 	bl	8001eba <HAL_TIM_PWM_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80009da:	f000 f973 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	4619      	mov	r1, r3
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <MX_TIM5_Init+0xe4>)
 80009ee:	f001 ffc3 	bl	8002978 <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80009f8:	f000 f964 	bl	8000cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fc:	2360      	movs	r3, #96	; 0x60
 80009fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <MX_TIM5_Init+0xe4>)
 8000a14:	f001 fb5a 	bl	80020cc <HAL_TIM_PWM_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000a1e:	f000 f951 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a22:	4803      	ldr	r0, [pc, #12]	; (8000a30 <MX_TIM5_Init+0xe4>)
 8000a24:	f000 f9cc 	bl	8000dc0 <HAL_TIM_MspPostInit>

}
 8000a28:	bf00      	nop
 8000a2a:	3738      	adds	r7, #56	; 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000c0 	.word	0x200000c0
 8000a34:	40000c00 	.word	0x40000c00

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <MX_GPIO_Init+0xdc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a2f      	ldr	r2, [pc, #188]	; (8000b14 <MX_GPIO_Init+0xdc>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <MX_GPIO_Init+0xdc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <MX_GPIO_Init+0xdc>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <MX_GPIO_Init+0xdc>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_GPIO_Init+0xdc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN4_Pin|IN3_Pin|IN2_Pin|IN1_Pin
 8000a86:	2200      	movs	r2, #0
 8000a88:	213e      	movs	r1, #62	; 0x3e
 8000a8a:	4823      	ldr	r0, [pc, #140]	; (8000b18 <MX_GPIO_Init+0xe0>)
 8000a8c:	f000 fd70 	bl	8001570 <HAL_GPIO_WritePin>
                          |RIGHT_IR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEFT_IR_LED_GPIO_Port, LEFT_IR_LED_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2104      	movs	r1, #4
 8000a94:	4821      	ldr	r0, [pc, #132]	; (8000b1c <MX_GPIO_Init+0xe4>)
 8000a96:	f000 fd6b 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN4_Pin IN3_Pin IN2_Pin IN1_Pin
                           RIGHT_IR_LED_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN2_Pin|IN1_Pin
 8000a9a:	233e      	movs	r3, #62	; 0x3e
 8000a9c:	60fb      	str	r3, [r7, #12]
                          |RIGHT_IR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4819      	ldr	r0, [pc, #100]	; (8000b18 <MX_GPIO_Init+0xe0>)
 8000ab2:	f000 fbd9 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_LEFT_Pin IR_RIGHT_Pin */
  GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_RIGHT_Pin;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <MX_GPIO_Init+0xe4>)
 8000acc:	f000 fbcc 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_IR_LED_Pin */
  GPIO_InitStruct.Pin = LEFT_IR_LED_Pin;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LEFT_IR_LED_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_GPIO_Init+0xe4>)
 8000ae8:	f000 fbbe 	bl	8001268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2105      	movs	r1, #5
 8000af0:	2006      	movs	r0, #6
 8000af2:	f000 fb82 	bl	80011fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000af6:	2006      	movs	r0, #6
 8000af8:	f000 fb9b 	bl	8001232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2105      	movs	r1, #5
 8000b00:	2007      	movs	r0, #7
 8000b02:	f000 fb7a 	bl	80011fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b06:	2007      	movs	r0, #7
 8000b08:	f000 fb93 	bl	8001232 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020400 	.word	0x40020400

08000b20 <LaneKeepAssist>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LaneKeepAssist */
void LaneKeepAssist(void *argument)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4819      	ldr	r0, [pc, #100]	; (8000b90 <LaneKeepAssist+0x70>)
 8000b2c:	f001 fa1e 	bl	8001f6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000b30:	2100      	movs	r1, #0
 8000b32:	4818      	ldr	r0, [pc, #96]	; (8000b94 <LaneKeepAssist+0x74>)
 8000b34:	f001 fa1a 	bl	8001f6c <HAL_TIM_PWM_Start>
	/* Infinite loop */
	for(;;)
	{
		if(counter1==1 && counter2==0)//left
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <LaneKeepAssist+0x78>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d10e      	bne.n	8000b60 <LaneKeepAssist+0x40>
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <LaneKeepAssist+0x7c>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d109      	bne.n	8000b60 <LaneKeepAssist+0x40>
		{
			MoveRight(50);
 8000b4c:	2032      	movs	r0, #50	; 0x32
 8000b4e:	f7ff fd04 	bl	800055a <MoveRight>
			osDelay(200);
 8000b52:	20c8      	movs	r0, #200	; 0xc8
 8000b54:	f002 f88e 	bl	8002c74 <osDelay>
			MoveForward(60);
 8000b58:	203c      	movs	r0, #60	; 0x3c
 8000b5a:	f7ff fce9 	bl	8000530 <MoveForward>
 8000b5e:	e012      	b.n	8000b86 <LaneKeepAssist+0x66>


		}
		else if(counter2==1 && counter1==0)
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <LaneKeepAssist+0x7c>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d10d      	bne.n	8000b86 <LaneKeepAssist+0x66>
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <LaneKeepAssist+0x78>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d108      	bne.n	8000b86 <LaneKeepAssist+0x66>
		{
			MoveLeft(50);
 8000b74:	2032      	movs	r0, #50	; 0x32
 8000b76:	f7ff fd05 	bl	8000584 <MoveLeft>
			osDelay(200);
 8000b7a:	20c8      	movs	r0, #200	; 0xc8
 8000b7c:	f002 f87a 	bl	8002c74 <osDelay>
			MoveForward(60);
 8000b80:	203c      	movs	r0, #60	; 0x3c
 8000b82:	f7ff fcd5 	bl	8000530 <MoveForward>

		}
		osDelay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f002 f874 	bl	8002c74 <osDelay>
		if(counter1==1 && counter2==0)//left
 8000b8c:	e7d4      	b.n	8000b38 <LaneKeepAssist+0x18>
 8000b8e:	bf00      	nop
 8000b90:	20000078 	.word	0x20000078
 8000b94:	200000c0 	.word	0x200000c0
 8000b98:	2000002c 	.word	0x2000002c
 8000b9c:	2000002e 	.word	0x2000002e

08000ba0 <LaneDetectionWarning>:
	 * @param argument: Not used
	 * @retval None
	 */
/* USER CODE END Header_LaneDetectionWarning */
void LaneDetectionWarning(void *argument)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LaneDetectionWarning */
		/* Infinite loop */
		for(;;)
		{
			if(counter1>2)
 8000ba8:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <LaneDetectionWarning+0x114>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d902      	bls.n	8000bb8 <LaneDetectionWarning+0x18>
			{
				counter1=0;
 8000bb2:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <LaneDetectionWarning+0x114>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	801a      	strh	r2, [r3, #0]
			}
			if(counter2>2)
 8000bb8:	4b3f      	ldr	r3, [pc, #252]	; (8000cb8 <LaneDetectionWarning+0x118>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d902      	bls.n	8000bc8 <LaneDetectionWarning+0x28>
			{
				counter2=0;
 8000bc2:	4b3d      	ldr	r3, [pc, #244]	; (8000cb8 <LaneDetectionWarning+0x118>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	801a      	strh	r2, [r3, #0]
			}
			if(counter1 == 1 && counter2 == 0)
 8000bc8:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <LaneDetectionWarning+0x114>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d10e      	bne.n	8000bf0 <LaneDetectionWarning+0x50>
 8000bd2:	4b39      	ldr	r3, [pc, #228]	; (8000cb8 <LaneDetectionWarning+0x118>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d109      	bne.n	8000bf0 <LaneDetectionWarning+0x50>
			{
				// Activate left lane warning
				HAL_GPIO_WritePin(LEFT_IR_LED_GPIO_Port,LEFT_IR_LED_Pin,1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2104      	movs	r1, #4
 8000be0:	4836      	ldr	r0, [pc, #216]	; (8000cbc <LaneDetectionWarning+0x11c>)
 8000be2:	f000 fcc5 	bl	8001570 <HAL_GPIO_WritePin>
				osDelay(500);
 8000be6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bea:	f002 f843 	bl	8002c74 <osDelay>
 8000bee:	e060      	b.n	8000cb2 <LaneDetectionWarning+0x112>
			}
			else if(counter1 == 2 )
 8000bf0:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <LaneDetectionWarning+0x114>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d10f      	bne.n	8000c1a <LaneDetectionWarning+0x7a>
			{
				// Deactivate left lane warning
				counter1 = 0;
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <LaneDetectionWarning+0x114>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	801a      	strh	r2, [r3, #0]
				counter2 = 0;
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <LaneDetectionWarning+0x118>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(LEFT_IR_LED_GPIO_Port,LEFT_IR_LED_Pin,0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2104      	movs	r1, #4
 8000c0a:	482c      	ldr	r0, [pc, #176]	; (8000cbc <LaneDetectionWarning+0x11c>)
 8000c0c:	f000 fcb0 	bl	8001570 <HAL_GPIO_WritePin>
				osDelay(500);
 8000c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c14:	f002 f82e 	bl	8002c74 <osDelay>
 8000c18:	e7c6      	b.n	8000ba8 <LaneDetectionWarning+0x8>
			}
			else if(counter2 == 1 && counter1 == 0)
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <LaneDetectionWarning+0x118>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d10e      	bne.n	8000c42 <LaneDetectionWarning+0xa2>
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <LaneDetectionWarning+0x114>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d109      	bne.n	8000c42 <LaneDetectionWarning+0xa2>
			{
				// Activate right lane warning
				HAL_GPIO_WritePin(RIGHT_IR_LED_GPIO_Port,RIGHT_IR_LED_Pin,1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2120      	movs	r1, #32
 8000c32:	4823      	ldr	r0, [pc, #140]	; (8000cc0 <LaneDetectionWarning+0x120>)
 8000c34:	f000 fc9c 	bl	8001570 <HAL_GPIO_WritePin>
				osDelay(500);
 8000c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3c:	f002 f81a 	bl	8002c74 <osDelay>
 8000c40:	e037      	b.n	8000cb2 <LaneDetectionWarning+0x112>
			}
			else if(counter2 == 2)
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <LaneDetectionWarning+0x118>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d10f      	bne.n	8000c6c <LaneDetectionWarning+0xcc>
			{
				// Deactivate right lane warning
				counter1 = 0;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <LaneDetectionWarning+0x114>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	801a      	strh	r2, [r3, #0]
				counter2 = 0;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <LaneDetectionWarning+0x118>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(RIGHT_IR_LED_GPIO_Port,RIGHT_IR_LED_Pin,0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2120      	movs	r1, #32
 8000c5c:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <LaneDetectionWarning+0x120>)
 8000c5e:	f000 fc87 	bl	8001570 <HAL_GPIO_WritePin>
				osDelay(500);
 8000c62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c66:	f002 f805 	bl	8002c74 <osDelay>
 8000c6a:	e79d      	b.n	8000ba8 <LaneDetectionWarning+0x8>
			}
			else if((counter2 == 1 && counter1 == 1))
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <LaneDetectionWarning+0x118>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d119      	bne.n	8000caa <LaneDetectionWarning+0x10a>
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <LaneDetectionWarning+0x114>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d114      	bne.n	8000caa <LaneDetectionWarning+0x10a>
			{
				counter1 = 0;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <LaneDetectionWarning+0x114>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	801a      	strh	r2, [r3, #0]
				counter2 = 0;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <LaneDetectionWarning+0x118>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(LEFT_IR_LED_GPIO_Port,LEFT_IR_LED_Pin,0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2104      	movs	r1, #4
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <LaneDetectionWarning+0x11c>)
 8000c92:	f000 fc6d 	bl	8001570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RIGHT_IR_LED_GPIO_Port,RIGHT_IR_LED_Pin,0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <LaneDetectionWarning+0x120>)
 8000c9c:	f000 fc68 	bl	8001570 <HAL_GPIO_WritePin>
				osDelay(500);
 8000ca0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca4:	f001 ffe6 	bl	8002c74 <osDelay>
 8000ca8:	e003      	b.n	8000cb2 <LaneDetectionWarning+0x112>
			}
			else
			{
				// No lane departure warning
				osDelay(300);
 8000caa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cae:	f001 ffe1 	bl	8002c74 <osDelay>
			if(counter1>2)
 8000cb2:	e779      	b.n	8000ba8 <LaneDetectionWarning+0x8>
 8000cb4:	2000002c 	.word	0x2000002c
 8000cb8:	2000002e 	.word	0x2000002e
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_MspInit+0x54>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <HAL_MspInit+0x54>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x54>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_MspInit+0x54>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_MspInit+0x54>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_MspInit+0x54>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	210f      	movs	r1, #15
 8000d12:	f06f 0001 	mvn.w	r0, #1
 8000d16:	f000 fa70 	bl	80011fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d38:	d10e      	bne.n	8000d58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000d56:	e026      	b.n	8000da6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <HAL_TIM_Base_MspInit+0x90>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10e      	bne.n	8000d80 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
}
 8000d7e:	e012      	b.n	8000da6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_TIM_Base_MspInit+0x94>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10d      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_TIM_Base_MspInit+0x8c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
}
 8000da6:	bf00      	nop
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40000800 	.word	0x40000800
 8000dbc:	40000c00 	.word	0x40000c00

08000dc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a24      	ldr	r2, [pc, #144]	; (8000e70 <HAL_TIM_MspPostInit+0xb0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d11e      	bne.n	8000e20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <HAL_TIM_MspPostInit+0xb4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_TIM_MspPostInit+0xb4>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HAL_TIM_MspPostInit+0xb4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dfe:	2340      	movs	r3, #64	; 0x40
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4817      	ldr	r0, [pc, #92]	; (8000e78 <HAL_TIM_MspPostInit+0xb8>)
 8000e1a:	f000 fa25 	bl	8001268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000e1e:	e022      	b.n	8000e66 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <HAL_TIM_MspPostInit+0xbc>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d11d      	bne.n	8000e66 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_TIM_MspPostInit+0xb4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <HAL_TIM_MspPostInit+0xb4>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_TIM_MspPostInit+0xb4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e56:	2302      	movs	r3, #2
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4807      	ldr	r0, [pc, #28]	; (8000e80 <HAL_TIM_MspPostInit+0xc0>)
 8000e62:	f000 fa01 	bl	8001268 <HAL_GPIO_Init>
}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	; 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40000800 	.word	0x40000800
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40000c00 	.word	0x40000c00
 8000e80:	40020000 	.word	0x40020000

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f8a6 	bl	8001004 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000eb8:	f003 faea 	bl	8004490 <xTaskGetSchedulerState>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d001      	beq.n	8000ec6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ec2:	f004 f8d1 	bl	8005068 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_LEFT_Pin);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f000 fb68 	bl	80015a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_RIGHT_Pin);
 8000edc:	2002      	movs	r0, #2
 8000ede:	f000 fb61 	bl	80015a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f28:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f36:	f7ff ffd7 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f004 fb0f 	bl	800555c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fbb3 	bl	80006a8 <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f50:	08005680 	.word	0x08005680
  ldr r2, =_sbss
 8000f54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f58:	20004a64 	.word	0x20004a64

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_Init+0x40>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_Init+0x40>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_Init+0x40>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f92b 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fe9c 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f943 	bl	800124e <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 f90b 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	20000110 	.word	0x20000110

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000110 	.word	0x20000110

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <__NVIC_EnableIRQ+0x38>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff29 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff3e 	bl	800108c <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff8e 	bl	8001138 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff31 	bl	80010a8 <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffa2 	bl	80011a0 <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	e159      	b.n	8001538 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	f040 8148 	bne.w	8001532 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d005      	beq.n	80012ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d130      	bne.n	800131c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 0201 	and.w	r2, r3, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b03      	cmp	r3, #3
 8001326:	d017      	beq.n	8001358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d123      	bne.n	80013ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	69b9      	ldr	r1, [r7, #24]
 80013a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0203 	and.w	r2, r3, #3
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80a2 	beq.w	8001532 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b57      	ldr	r3, [pc, #348]	; (8001550 <HAL_GPIO_Init+0x2e8>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a56      	ldr	r2, [pc, #344]	; (8001550 <HAL_GPIO_Init+0x2e8>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b54      	ldr	r3, [pc, #336]	; (8001550 <HAL_GPIO_Init+0x2e8>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140a:	4a52      	ldr	r2, [pc, #328]	; (8001554 <HAL_GPIO_Init+0x2ec>)
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	220f      	movs	r2, #15
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a49      	ldr	r2, [pc, #292]	; (8001558 <HAL_GPIO_Init+0x2f0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0x202>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a48      	ldr	r2, [pc, #288]	; (800155c <HAL_GPIO_Init+0x2f4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x1fe>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a47      	ldr	r2, [pc, #284]	; (8001560 <HAL_GPIO_Init+0x2f8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x1fa>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a46      	ldr	r2, [pc, #280]	; (8001564 <HAL_GPIO_Init+0x2fc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x1f6>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a45      	ldr	r2, [pc, #276]	; (8001568 <HAL_GPIO_Init+0x300>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x1f2>
 8001456:	2304      	movs	r3, #4
 8001458:	e008      	b.n	800146c <HAL_GPIO_Init+0x204>
 800145a:	2307      	movs	r3, #7
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x204>
 800145e:	2303      	movs	r3, #3
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x204>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x204>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x204>
 800146a:	2300      	movs	r3, #0
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	f002 0203 	and.w	r2, r2, #3
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4093      	lsls	r3, r2
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800147c:	4935      	ldr	r1, [pc, #212]	; (8001554 <HAL_GPIO_Init+0x2ec>)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_GPIO_Init+0x304>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <HAL_GPIO_Init+0x304>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_GPIO_Init+0x304>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d8:	4a24      	ldr	r2, [pc, #144]	; (800156c <HAL_GPIO_Init+0x304>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_GPIO_Init+0x304>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001502:	4a1a      	ldr	r2, [pc, #104]	; (800156c <HAL_GPIO_Init+0x304>)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_GPIO_Init+0x304>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_GPIO_Init+0x304>)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3301      	adds	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	2b0f      	cmp	r3, #15
 800153c:	f67f aea2 	bls.w	8001284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40013800 	.word	0x40013800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020400 	.word	0x40020400
 8001560:	40020800 	.word	0x40020800
 8001564:	40020c00 	.word	0x40020c00
 8001568:	40021000 	.word	0x40021000
 800156c:	40013c00 	.word	0x40013c00

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800158c:	e003      	b.n	8001596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	619a      	str	r2, [r3, #24]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ff8e 	bl	80004e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e267      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d075      	beq.n	80016de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f2:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d00c      	beq.n	8001618 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fe:	4b85      	ldr	r3, [pc, #532]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001606:	2b08      	cmp	r3, #8
 8001608:	d112      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160a:	4b82      	ldr	r3, [pc, #520]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001616:	d10b      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	4b7e      	ldr	r3, [pc, #504]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d05b      	beq.n	80016dc <HAL_RCC_OscConfig+0x108>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d157      	bne.n	80016dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e242      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001638:	d106      	bne.n	8001648 <HAL_RCC_OscConfig+0x74>
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a75      	ldr	r2, [pc, #468]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e01d      	b.n	8001684 <HAL_RCC_OscConfig+0xb0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x98>
 8001652:	4b70      	ldr	r3, [pc, #448]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6f      	ldr	r2, [pc, #444]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b6d      	ldr	r3, [pc, #436]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6c      	ldr	r2, [pc, #432]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xb0>
 800166c:	4b69      	ldr	r3, [pc, #420]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a68      	ldr	r2, [pc, #416]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b66      	ldr	r3, [pc, #408]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a65      	ldr	r2, [pc, #404]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fcce 	bl	800102c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fcca 	bl	800102c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e207      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0xc0>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fcba 	bl	800102c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fcb6 	bl	800102c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e1f3      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	4b51      	ldr	r3, [pc, #324]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0xe8>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d063      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ea:	4b4a      	ldr	r3, [pc, #296]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f6:	4b47      	ldr	r3, [pc, #284]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d11c      	bne.n	800173c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001702:	4b44      	ldr	r3, [pc, #272]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d116      	bne.n	800173c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	4b41      	ldr	r3, [pc, #260]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x152>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e1c7      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4937      	ldr	r1, [pc, #220]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	e03a      	b.n	80017b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001744:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_OscConfig+0x244>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fc6f 	bl	800102c <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fc6b 	bl	800102c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1a8      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4925      	ldr	r1, [pc, #148]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e015      	b.n	80017b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_OscConfig+0x244>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fc4e 	bl	800102c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff fc4a 	bl	800102c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e187      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d036      	beq.n	800182c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d016      	beq.n	80017f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_RCC_OscConfig+0x248>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fc2e 	bl	800102c <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fc2a 	bl	800102c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e167      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_OscConfig+0x240>)
 80017e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x200>
 80017f2:	e01b      	b.n	800182c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_RCC_OscConfig+0x248>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fc17 	bl	800102c <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	e00e      	b.n	8001820 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fc13 	bl	800102c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d907      	bls.n	8001820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e150      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
 8001814:	40023800 	.word	0x40023800
 8001818:	42470000 	.word	0x42470000
 800181c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ea      	bne.n	8001802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8097 	beq.w	8001968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b7d      	ldr	r3, [pc, #500]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a7c      	ldr	r2, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001866:	2301      	movs	r3, #1
 8001868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186a:	4b77      	ldr	r3, [pc, #476]	; (8001a48 <HAL_RCC_OscConfig+0x474>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d118      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001876:	4b74      	ldr	r3, [pc, #464]	; (8001a48 <HAL_RCC_OscConfig+0x474>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a73      	ldr	r2, [pc, #460]	; (8001a48 <HAL_RCC_OscConfig+0x474>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001882:	f7ff fbd3 	bl	800102c <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188a:	f7ff fbcf 	bl	800102c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e10c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x474>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x2ea>
 80018b0:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	4a63      	ldr	r2, [pc, #396]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	; 0x70
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x324>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x30c>
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a5e      	ldr	r2, [pc, #376]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70
 80018d2:	4b5c      	ldr	r3, [pc, #368]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a5b      	ldr	r2, [pc, #364]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0x324>
 80018e0:	4b58      	ldr	r3, [pc, #352]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	4a57      	ldr	r2, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	6713      	str	r3, [r2, #112]	; 0x70
 80018ec:	4b55      	ldr	r3, [pc, #340]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a54      	ldr	r2, [pc, #336]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d015      	beq.n	800192c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fb94 	bl	800102c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff fb90 	bl	800102c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	; 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e0cb      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0ee      	beq.n	8001908 <HAL_RCC_OscConfig+0x334>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff fb7e 	bl	800102c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fb7a 	bl	800102c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e0b5      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ee      	bne.n	8001934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	4a38      	ldr	r2, [pc, #224]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001966:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a1 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001972:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d05c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d141      	bne.n	8001a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_RCC_OscConfig+0x478>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fb4e 	bl	800102c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff fb4a 	bl	800102c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e087      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	085b      	lsrs	r3, r3, #1
 80019ca:	3b01      	subs	r3, #1
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	061b      	lsls	r3, r3, #24
 80019d6:	491b      	ldr	r1, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x478>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fb23 	bl	800102c <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff fb1f 	bl	800102c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e05c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x416>
 8001a08:	e054      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_RCC_OscConfig+0x478>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fb0c 	bl	800102c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fb08 	bl	800102c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e045      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x444>
 8001a36:	e03d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e038      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_RCC_OscConfig+0x4ec>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d028      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d121      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d11a      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d111      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0cc      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b68      	ldr	r3, [pc, #416]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d90c      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b65      	ldr	r3, [pc, #404]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0b8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	494d      	ldr	r1, [pc, #308]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d044      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d119      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e067      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4934      	ldr	r1, [pc, #208]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb4:	f7ff fa3a 	bl	800102c <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7ff fa36 	bl	800102c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e04f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 020c 	and.w	r2, r3, #12
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1eb      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d20c      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4916      	ldr	r1, [pc, #88]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	490e      	ldr	r1, [pc, #56]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c4a:	f000 f821 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490a      	ldr	r1, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f99a 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08005660 	.word	0x08005660
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c94:	b090      	sub	sp, #64	; 0x40
 8001c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	f200 80a1 	bhi.w	8001dfc <HAL_RCC_GetSysClockFreq+0x16c>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc2:	e09b      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001cc8:	e09b      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cca:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cce:	e098      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd0:	4b4f      	ldr	r3, [pc, #316]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d028      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	099b      	lsrs	r3, r3, #6
 8001cec:	2200      	movs	r2, #0
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	627a      	str	r2, [r7, #36]	; 0x24
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cfc:	fb03 f201 	mul.w	r2, r3, r1
 8001d00:	2300      	movs	r3, #0
 8001d02:	fb00 f303 	mul.w	r3, r0, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	4a43      	ldr	r2, [pc, #268]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d0a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d10:	460a      	mov	r2, r1
 8001d12:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d16:	4413      	add	r3, r2
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	61fa      	str	r2, [r7, #28]
 8001d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d2a:	f7fe fa59 	bl	80001e0 <__aeabi_uldivmod>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4613      	mov	r3, r2
 8001d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d36:	e053      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d38:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	2200      	movs	r2, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	617a      	str	r2, [r7, #20]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d4a:	f04f 0b00 	mov.w	fp, #0
 8001d4e:	4652      	mov	r2, sl
 8001d50:	465b      	mov	r3, fp
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	0159      	lsls	r1, r3, #5
 8001d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d60:	0150      	lsls	r0, r2, #5
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ebb2 080a 	subs.w	r8, r2, sl
 8001d6a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d82:	ebb2 0408 	subs.w	r4, r2, r8
 8001d86:	eb63 0509 	sbc.w	r5, r3, r9
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	00eb      	lsls	r3, r5, #3
 8001d94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d98:	00e2      	lsls	r2, r4, #3
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	461d      	mov	r5, r3
 8001d9e:	eb14 030a 	adds.w	r3, r4, sl
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	eb45 030b 	adc.w	r3, r5, fp
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001db6:	4629      	mov	r1, r5
 8001db8:	028b      	lsls	r3, r1, #10
 8001dba:	4621      	mov	r1, r4
 8001dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	028a      	lsls	r2, r1, #10
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	60fa      	str	r2, [r7, #12]
 8001dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dd4:	f7fe fa04 	bl	80001e0 <__aeabi_uldivmod>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4613      	mov	r3, r2
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3740      	adds	r7, #64	; 0x40
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	017d7840 	.word	0x017d7840

08001e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e041      	b.n	8001eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe ff70 	bl	8000d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 fac0 	bl	80023e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e041      	b.n	8001f50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d106      	bne.n	8001ee6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f839 	bl	8001f58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f000 fa71 	bl	80023e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_TIM_PWM_Start+0x24>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e022      	b.n	8001fd6 <HAL_TIM_PWM_Start+0x6a>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d109      	bne.n	8001faa <HAL_TIM_PWM_Start+0x3e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	bf14      	ite	ne
 8001fa2:	2301      	movne	r3, #1
 8001fa4:	2300      	moveq	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	e015      	b.n	8001fd6 <HAL_TIM_PWM_Start+0x6a>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d109      	bne.n	8001fc4 <HAL_TIM_PWM_Start+0x58>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	bf14      	ite	ne
 8001fbc:	2301      	movne	r3, #1
 8001fbe:	2300      	moveq	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	e008      	b.n	8001fd6 <HAL_TIM_PWM_Start+0x6a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e068      	b.n	80020b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d104      	bne.n	8001fee <HAL_TIM_PWM_Start+0x82>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fec:	e013      	b.n	8002016 <HAL_TIM_PWM_Start+0xaa>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d104      	bne.n	8001ffe <HAL_TIM_PWM_Start+0x92>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ffc:	e00b      	b.n	8002016 <HAL_TIM_PWM_Start+0xaa>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d104      	bne.n	800200e <HAL_TIM_PWM_Start+0xa2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800200c:	e003      	b.n	8002016 <HAL_TIM_PWM_Start+0xaa>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2201      	movs	r2, #1
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fc84 	bl	800292c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <HAL_TIM_PWM_Start+0x14c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d107      	bne.n	800203e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_TIM_PWM_Start+0x14c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d018      	beq.n	800207a <HAL_TIM_PWM_Start+0x10e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002050:	d013      	beq.n	800207a <HAL_TIM_PWM_Start+0x10e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a19      	ldr	r2, [pc, #100]	; (80020bc <HAL_TIM_PWM_Start+0x150>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00e      	beq.n	800207a <HAL_TIM_PWM_Start+0x10e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_TIM_PWM_Start+0x154>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d009      	beq.n	800207a <HAL_TIM_PWM_Start+0x10e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <HAL_TIM_PWM_Start+0x158>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d004      	beq.n	800207a <HAL_TIM_PWM_Start+0x10e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <HAL_TIM_PWM_Start+0x15c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d111      	bne.n	800209e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b06      	cmp	r3, #6
 800208a:	d010      	beq.n	80020ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209c:	e007      	b.n	80020ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40010000 	.word	0x40010000
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40000800 	.word	0x40000800
 80020c4:	40000c00 	.word	0x40000c00
 80020c8:	40014000 	.word	0x40014000

080020cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0ae      	b.n	8002248 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	f200 809f 	bhi.w	8002238 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020fa:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	08002135 	.word	0x08002135
 8002104:	08002239 	.word	0x08002239
 8002108:	08002239 	.word	0x08002239
 800210c:	08002239 	.word	0x08002239
 8002110:	08002175 	.word	0x08002175
 8002114:	08002239 	.word	0x08002239
 8002118:	08002239 	.word	0x08002239
 800211c:	08002239 	.word	0x08002239
 8002120:	080021b7 	.word	0x080021b7
 8002124:	08002239 	.word	0x08002239
 8002128:	08002239 	.word	0x08002239
 800212c:	08002239 	.word	0x08002239
 8002130:	080021f7 	.word	0x080021f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f9d0 	bl	80024e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0208 	orr.w	r2, r2, #8
 800214e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0204 	bic.w	r2, r2, #4
 800215e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6999      	ldr	r1, [r3, #24]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	619a      	str	r2, [r3, #24]
      break;
 8002172:	e064      	b.n	800223e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fa16 	bl	80025ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6999      	ldr	r1, [r3, #24]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	021a      	lsls	r2, r3, #8
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	619a      	str	r2, [r3, #24]
      break;
 80021b4:	e043      	b.n	800223e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fa61 	bl	8002684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0208 	orr.w	r2, r2, #8
 80021d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0204 	bic.w	r2, r2, #4
 80021e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69d9      	ldr	r1, [r3, #28]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	61da      	str	r2, [r3, #28]
      break;
 80021f4:	e023      	b.n	800223e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 faab 	bl	8002758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69d9      	ldr	r1, [r3, #28]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	021a      	lsls	r2, r3, #8
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	61da      	str	r2, [r3, #28]
      break;
 8002236:	e002      	b.n	800223e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	75fb      	strb	r3, [r7, #23]
      break;
 800223c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002246:	7dfb      	ldrb	r3, [r7, #23]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_TIM_ConfigClockSource+0x1c>
 8002268:	2302      	movs	r3, #2
 800226a:	e0b4      	b.n	80023d6 <HAL_TIM_ConfigClockSource+0x186>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800228a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a4:	d03e      	beq.n	8002324 <HAL_TIM_ConfigClockSource+0xd4>
 80022a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022aa:	f200 8087 	bhi.w	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b2:	f000 8086 	beq.w	80023c2 <HAL_TIM_ConfigClockSource+0x172>
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ba:	d87f      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022bc:	2b70      	cmp	r3, #112	; 0x70
 80022be:	d01a      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0xa6>
 80022c0:	2b70      	cmp	r3, #112	; 0x70
 80022c2:	d87b      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022c4:	2b60      	cmp	r3, #96	; 0x60
 80022c6:	d050      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x11a>
 80022c8:	2b60      	cmp	r3, #96	; 0x60
 80022ca:	d877      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022cc:	2b50      	cmp	r3, #80	; 0x50
 80022ce:	d03c      	beq.n	800234a <HAL_TIM_ConfigClockSource+0xfa>
 80022d0:	2b50      	cmp	r3, #80	; 0x50
 80022d2:	d873      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d058      	beq.n	800238a <HAL_TIM_ConfigClockSource+0x13a>
 80022d8:	2b40      	cmp	r3, #64	; 0x40
 80022da:	d86f      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b30      	cmp	r3, #48	; 0x30
 80022de:	d064      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15a>
 80022e0:	2b30      	cmp	r3, #48	; 0x30
 80022e2:	d86b      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d060      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15a>
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d867      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d05c      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15a>
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d05a      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15a>
 80022f4:	e062      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6899      	ldr	r1, [r3, #8]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f000 faf1 	bl	80028ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	609a      	str	r2, [r3, #8]
      break;
 8002322:	e04f      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6899      	ldr	r1, [r3, #8]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f000 fada 	bl	80028ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002346:	609a      	str	r2, [r3, #8]
      break;
 8002348:	e03c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6859      	ldr	r1, [r3, #4]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	461a      	mov	r2, r3
 8002358:	f000 fa4e 	bl	80027f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2150      	movs	r1, #80	; 0x50
 8002362:	4618      	mov	r0, r3
 8002364:	f000 faa7 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002368:	e02c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6859      	ldr	r1, [r3, #4]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	461a      	mov	r2, r3
 8002378:	f000 fa6d 	bl	8002856 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2160      	movs	r1, #96	; 0x60
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fa97 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002388:	e01c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6859      	ldr	r1, [r3, #4]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	461a      	mov	r2, r3
 8002398:	f000 fa2e 	bl	80027f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2140      	movs	r1, #64	; 0x40
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fa87 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 80023a8:	e00c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4610      	mov	r0, r2
 80023b6:	f000 fa7e 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 80023ba:	e003      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      break;
 80023c0:	e000      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a34      	ldr	r2, [pc, #208]	; (80024c4 <TIM_Base_SetConfig+0xe4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00f      	beq.n	8002418 <TIM_Base_SetConfig+0x38>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fe:	d00b      	beq.n	8002418 <TIM_Base_SetConfig+0x38>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a31      	ldr	r2, [pc, #196]	; (80024c8 <TIM_Base_SetConfig+0xe8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d007      	beq.n	8002418 <TIM_Base_SetConfig+0x38>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a30      	ldr	r2, [pc, #192]	; (80024cc <TIM_Base_SetConfig+0xec>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d003      	beq.n	8002418 <TIM_Base_SetConfig+0x38>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <TIM_Base_SetConfig+0xf0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d108      	bne.n	800242a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <TIM_Base_SetConfig+0xe4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01b      	beq.n	800246a <TIM_Base_SetConfig+0x8a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002438:	d017      	beq.n	800246a <TIM_Base_SetConfig+0x8a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <TIM_Base_SetConfig+0xe8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <TIM_Base_SetConfig+0x8a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a21      	ldr	r2, [pc, #132]	; (80024cc <TIM_Base_SetConfig+0xec>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00f      	beq.n	800246a <TIM_Base_SetConfig+0x8a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <TIM_Base_SetConfig+0xf0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00b      	beq.n	800246a <TIM_Base_SetConfig+0x8a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <TIM_Base_SetConfig+0xf4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <TIM_Base_SetConfig+0x8a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <TIM_Base_SetConfig+0xf8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d003      	beq.n	800246a <TIM_Base_SetConfig+0x8a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <TIM_Base_SetConfig+0xfc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d108      	bne.n	800247c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <TIM_Base_SetConfig+0xe4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d103      	bne.n	80024b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	615a      	str	r2, [r3, #20]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40010000 	.word	0x40010000
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40000800 	.word	0x40000800
 80024d0:	40000c00 	.word	0x40000c00
 80024d4:	40014000 	.word	0x40014000
 80024d8:	40014400 	.word	0x40014400
 80024dc:	40014800 	.word	0x40014800

080024e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f023 0201 	bic.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f023 0302 	bic.w	r3, r3, #2
 8002528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <TIM_OC1_SetConfig+0xc8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d10c      	bne.n	8002556 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f023 0308 	bic.w	r3, r3, #8
 8002542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a13      	ldr	r2, [pc, #76]	; (80025a8 <TIM_OC1_SetConfig+0xc8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d111      	bne.n	8002582 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800256c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	621a      	str	r2, [r3, #32]
}
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40010000 	.word	0x40010000

080025ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f023 0210 	bic.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0320 	bic.w	r3, r3, #32
 80025f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <TIM_OC2_SetConfig+0xd4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10d      	bne.n	8002628 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002626:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a15      	ldr	r2, [pc, #84]	; (8002680 <TIM_OC2_SetConfig+0xd4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d113      	bne.n	8002658 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800263e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	621a      	str	r2, [r3, #32]
}
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000

08002684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <TIM_OC3_SetConfig+0xd0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10d      	bne.n	80026fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a14      	ldr	r2, [pc, #80]	; (8002754 <TIM_OC3_SetConfig+0xd0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d113      	bne.n	800272e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800270c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	621a      	str	r2, [r3, #32]
}
 8002748:	bf00      	nop
 800274a:	371c      	adds	r7, #28
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	40010000 	.word	0x40010000

08002758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	031b      	lsls	r3, r3, #12
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <TIM_OC4_SetConfig+0x9c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d109      	bne.n	80027cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	621a      	str	r2, [r3, #32]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40010000 	.word	0x40010000

080027f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f023 0201 	bic.w	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f023 030a 	bic.w	r3, r3, #10
 8002834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	621a      	str	r2, [r3, #32]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002856:	b480      	push	{r7}
 8002858:	b087      	sub	sp, #28
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f023 0210 	bic.w	r2, r3, #16
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	031b      	lsls	r3, r3, #12
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f043 0307 	orr.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	609a      	str	r2, [r3, #8]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	431a      	orrs	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	2201      	movs	r2, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	43db      	mvns	r3, r3
 800294e:	401a      	ands	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800298c:	2302      	movs	r3, #2
 800298e:	e050      	b.n	8002a32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1c      	ldr	r2, [pc, #112]	; (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d018      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d013      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00e      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d004      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10c      	bne.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40014000 	.word	0x40014000

08002a54 <__NVIC_SetPriority>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	; (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002aac:	2100      	movs	r1, #0
 8002aae:	f06f 0004 	mvn.w	r0, #4
 8002ab2:	f7ff ffcf 	bl	8002a54 <__NVIC_SetPriority>
#endif
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ac2:	f3ef 8305 	mrs	r3, IPSR
 8002ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002ace:	f06f 0305 	mvn.w	r3, #5
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	e00c      	b.n	8002af0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <osKernelInitialize+0x44>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <osKernelInitialize+0x44>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	e002      	b.n	8002af0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
 8002aee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002af0:	687b      	ldr	r3, [r7, #4]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000114 	.word	0x20000114

08002b04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b0a:	f3ef 8305 	mrs	r3, IPSR
 8002b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8002b10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b16:	f06f 0305 	mvn.w	r3, #5
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e010      	b.n	8002b40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <osKernelStart+0x48>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d109      	bne.n	8002b3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b26:	f7ff ffbf 	bl	8002aa8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <osKernelStart+0x48>)
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b30:	f001 f866 	bl	8003c00 <vTaskStartScheduler>
      stat = osOK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	e002      	b.n	8002b40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000114 	.word	0x20000114

08002b50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08e      	sub	sp, #56	; 0x38
 8002b54:	af04      	add	r7, sp, #16
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b60:	f3ef 8305 	mrs	r3, IPSR
 8002b64:	617b      	str	r3, [r7, #20]
  return(result);
 8002b66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d17e      	bne.n	8002c6a <osThreadNew+0x11a>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d07b      	beq.n	8002c6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b76:	2318      	movs	r3, #24
 8002b78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d045      	beq.n	8002c16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <osThreadNew+0x48>
        name = attr->name;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <osThreadNew+0x6e>
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b38      	cmp	r3, #56	; 0x38
 8002bb0:	d805      	bhi.n	8002bbe <osThreadNew+0x6e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <osThreadNew+0x72>
        return (NULL);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e054      	b.n	8002c6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00e      	beq.n	8002bf8 <osThreadNew+0xa8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b5b      	cmp	r3, #91	; 0x5b
 8002be0:	d90a      	bls.n	8002bf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <osThreadNew+0xa8>
        mem = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	e010      	b.n	8002c1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10c      	bne.n	8002c1a <osThreadNew+0xca>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d108      	bne.n	8002c1a <osThreadNew+0xca>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d104      	bne.n	8002c1a <osThreadNew+0xca>
          mem = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	e001      	b.n	8002c1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d110      	bne.n	8002c42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c28:	9202      	str	r2, [sp, #8]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6a3a      	ldr	r2, [r7, #32]
 8002c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fe0c 	bl	8003854 <xTaskCreateStatic>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	e013      	b.n	8002c6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d110      	bne.n	8002c6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fe57 	bl	800390e <xTaskCreate>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d001      	beq.n	8002c6a <osThreadNew+0x11a>
            hTask = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c6a:	693b      	ldr	r3, [r7, #16]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3728      	adds	r7, #40	; 0x28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c7c:	f3ef 8305 	mrs	r3, IPSR
 8002c80:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <osDelay+0x1c>
    stat = osErrorISR;
 8002c88:	f06f 0305 	mvn.w	r3, #5
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e007      	b.n	8002ca0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 ff7c 	bl	8003b98 <vTaskDelay>
    }
  }

  return (stat);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <vApplicationGetIdleTaskMemory+0x30>)
 8002cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000118 	.word	0x20000118
 8002cdc:	20000174 	.word	0x20000174

08002ce0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <vApplicationGetTimerTaskMemory+0x2c>)
 8002cf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <vApplicationGetTimerTaskMemory+0x30>)
 8002cf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	20000374 	.word	0x20000374
 8002d10:	200003d0 	.word	0x200003d0

08002d14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f103 0208 	add.w	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f103 0208 	add.w	r2, r3, #8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f103 0208 	add.w	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d103      	bne.n	8002dd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e00c      	b.n	8002df0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e002      	b.n	8002de4 <vListInsert+0x2e>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d2f6      	bcs.n	8002dde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	601a      	str	r2, [r3, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6892      	ldr	r2, [r2, #8]
 8002e3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6852      	ldr	r2, [r2, #4]
 8002e48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d103      	bne.n	8002e5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	1e5a      	subs	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ea6:	f002 f84d 	bl	8004f44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	68f9      	ldr	r1, [r7, #12]
 8002eb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	441a      	add	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	68f9      	ldr	r1, [r7, #12]
 8002eda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	441a      	add	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	22ff      	movs	r2, #255	; 0xff
 8002eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	22ff      	movs	r2, #255	; 0xff
 8002ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d114      	bne.n	8002f26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01a      	beq.n	8002f3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3310      	adds	r3, #16
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 f903 	bl	8004114 <xTaskRemoveFromEventList>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d012      	beq.n	8002f3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <xQueueGenericReset+0xcc>)
 8002f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	e009      	b.n	8002f3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3310      	adds	r3, #16
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fef2 	bl	8002d14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3324      	adds	r3, #36	; 0x24
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff feed 	bl	8002d14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f3a:	f002 f833 	bl	8004fa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	e000ed04 	.word	0xe000ed04

08002f4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08e      	sub	sp, #56	; 0x38
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <xQueueGenericCreateStatic+0x52>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <xQueueGenericCreateStatic+0x56>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <xQueueGenericCreateStatic+0x58>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	623b      	str	r3, [r7, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <xQueueGenericCreateStatic+0x7e>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <xQueueGenericCreateStatic+0x82>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <xQueueGenericCreateStatic+0x84>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	61fb      	str	r3, [r7, #28]
}
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fea:	2350      	movs	r3, #80	; 0x50
 8002fec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b50      	cmp	r3, #80	; 0x50
 8002ff2:	d00a      	beq.n	800300a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	61bb      	str	r3, [r7, #24]
}
 8003006:	bf00      	nop
 8003008:	e7fe      	b.n	8003008 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800300a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800301e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f805 	bl	800303c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003034:	4618      	mov	r0, r3
 8003036:	3730      	adds	r7, #48	; 0x30
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d103      	bne.n	8003058 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e002      	b.n	800305e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800306a:	2101      	movs	r1, #1
 800306c:	69b8      	ldr	r0, [r7, #24]
 800306e:	f7ff ff05 	bl	8002e7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08e      	sub	sp, #56	; 0x38
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003092:	2300      	movs	r3, #0
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <xQueueGenericSend+0x32>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030b2:	bf00      	nop
 80030b4:	e7fe      	b.n	80030b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <xQueueGenericSend+0x40>
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <xQueueGenericSend+0x44>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <xQueueGenericSend+0x46>
 80030c8:	2300      	movs	r3, #0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <xQueueGenericSend+0x60>
	__asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030e0:	bf00      	nop
 80030e2:	e7fe      	b.n	80030e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d103      	bne.n	80030f2 <xQueueGenericSend+0x6e>
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <xQueueGenericSend+0x72>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <xQueueGenericSend+0x74>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <xQueueGenericSend+0x8e>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	623b      	str	r3, [r7, #32]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003112:	f001 f9bd 	bl	8004490 <xTaskGetSchedulerState>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <xQueueGenericSend+0x9e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <xQueueGenericSend+0xa2>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <xQueueGenericSend+0xa4>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <xQueueGenericSend+0xbe>
	__asm volatile
 800312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	61fb      	str	r3, [r7, #28]
}
 800313e:	bf00      	nop
 8003140:	e7fe      	b.n	8003140 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003142:	f001 feff 	bl	8004f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <xQueueGenericSend+0xd4>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d129      	bne.n	80031ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800315e:	f000 fa0b 	bl	8003578 <prvCopyDataToQueue>
 8003162:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	2b00      	cmp	r3, #0
 800316a:	d010      	beq.n	800318e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	3324      	adds	r3, #36	; 0x24
 8003170:	4618      	mov	r0, r3
 8003172:	f000 ffcf 	bl	8004114 <xTaskRemoveFromEventList>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800317c:	4b3f      	ldr	r3, [pc, #252]	; (800327c <xQueueGenericSend+0x1f8>)
 800317e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	e00a      	b.n	80031a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003194:	4b39      	ldr	r3, [pc, #228]	; (800327c <xQueueGenericSend+0x1f8>)
 8003196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80031a4:	f001 fefe 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e063      	b.n	8003274 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031b2:	f001 fef7 	bl	8004fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e05c      	b.n	8003274 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 f809 	bl	80041dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031ca:	2301      	movs	r3, #1
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ce:	f001 fee9 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031d2:	f000 fd7b 	bl	8003ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031d6:	f001 feb5 	bl	8004f44 <vPortEnterCritical>
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d103      	bne.n	80031f0 <xQueueGenericSend+0x16c>
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d103      	bne.n	8003206 <xQueueGenericSend+0x182>
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003206:	f001 fecd 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800320a:	1d3a      	adds	r2, r7, #4
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fff8 	bl	8004208 <xTaskCheckForTimeOut>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d124      	bne.n	8003268 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800321e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003220:	f000 faa2 	bl	8003768 <prvIsQueueFull>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d018      	beq.n	800325c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	3310      	adds	r3, #16
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ff1e 	bl	8004074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800323a:	f000 fa2d 	bl	8003698 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800323e:	f000 fd53 	bl	8003ce8 <xTaskResumeAll>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f af7c 	bne.w	8003142 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <xQueueGenericSend+0x1f8>)
 800324c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	e772      	b.n	8003142 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800325c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800325e:	f000 fa1b 	bl	8003698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003262:	f000 fd41 	bl	8003ce8 <xTaskResumeAll>
 8003266:	e76c      	b.n	8003142 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800326a:	f000 fa15 	bl	8003698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800326e:	f000 fd3b 	bl	8003ce8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003272:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003274:	4618      	mov	r0, r3
 8003276:	3738      	adds	r7, #56	; 0x38
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b090      	sub	sp, #64	; 0x40
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032aa:	bf00      	nop
 80032ac:	e7fe      	b.n	80032ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d103      	bne.n	80032bc <xQueueGenericSendFromISR+0x3c>
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <xQueueGenericSendFromISR+0x40>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <xQueueGenericSendFromISR+0x42>
 80032c0:	2300      	movs	r3, #0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032d8:	bf00      	nop
 80032da:	e7fe      	b.n	80032da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d103      	bne.n	80032ea <xQueueGenericSendFromISR+0x6a>
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <xQueueGenericSendFromISR+0x6e>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <xQueueGenericSendFromISR+0x70>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	623b      	str	r3, [r7, #32]
}
 8003306:	bf00      	nop
 8003308:	e7fe      	b.n	8003308 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800330a:	f001 fefd 	bl	8005108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800330e:	f3ef 8211 	mrs	r2, BASEPRI
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	61fa      	str	r2, [r7, #28]
 8003324:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003326:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	429a      	cmp	r2, r3
 8003334:	d302      	bcc.n	800333c <xQueueGenericSendFromISR+0xbc>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d12f      	bne.n	800339c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003352:	f000 f911 	bl	8003578 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003356:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d112      	bne.n	8003386 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2b00      	cmp	r3, #0
 8003366:	d016      	beq.n	8003396 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	3324      	adds	r3, #36	; 0x24
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fed1 	bl	8004114 <xTaskRemoveFromEventList>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00e      	beq.n	8003396 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e007      	b.n	8003396 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003386:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800338a:	3301      	adds	r3, #1
 800338c:	b2db      	uxtb	r3, r3
 800338e:	b25a      	sxtb	r2, r3
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003396:	2301      	movs	r3, #1
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800339a:	e001      	b.n	80033a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800339c:	2300      	movs	r3, #0
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80033aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3740      	adds	r7, #64	; 0x40
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08c      	sub	sp, #48	; 0x30
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <xQueueReceive+0x30>
	__asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	623b      	str	r3, [r7, #32]
}
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d103      	bne.n	80033f6 <xQueueReceive+0x3e>
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <xQueueReceive+0x42>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <xQueueReceive+0x44>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <xQueueReceive+0x5e>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	61fb      	str	r3, [r7, #28]
}
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003416:	f001 f83b 	bl	8004490 <xTaskGetSchedulerState>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <xQueueReceive+0x6e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <xQueueReceive+0x72>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <xQueueReceive+0x74>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <xQueueReceive+0x8e>
	__asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	61bb      	str	r3, [r7, #24]
}
 8003442:	bf00      	nop
 8003444:	e7fe      	b.n	8003444 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003446:	f001 fd7d 	bl	8004f44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01f      	beq.n	8003496 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800345a:	f000 f8f7 	bl	800364c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1e5a      	subs	r2, r3, #1
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00f      	beq.n	800348e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	3310      	adds	r3, #16
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fe4e 	bl	8004114 <xTaskRemoveFromEventList>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <xQueueReceive+0x1bc>)
 8003480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800348e:	f001 fd89 	bl	8004fa4 <vPortExitCritical>
				return pdPASS;
 8003492:	2301      	movs	r3, #1
 8003494:	e069      	b.n	800356a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d103      	bne.n	80034a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800349c:	f001 fd82 	bl	8004fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e062      	b.n	800356a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034aa:	f107 0310 	add.w	r3, r7, #16
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fe94 	bl	80041dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034b8:	f001 fd74 	bl	8004fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034bc:	f000 fc06 	bl	8003ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034c0:	f001 fd40 	bl	8004f44 <vPortEnterCritical>
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d103      	bne.n	80034da <xQueueReceive+0x122>
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034e0:	b25b      	sxtb	r3, r3
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d103      	bne.n	80034f0 <xQueueReceive+0x138>
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034f0:	f001 fd58 	bl	8004fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034f4:	1d3a      	adds	r2, r7, #4
 80034f6:	f107 0310 	add.w	r3, r7, #16
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fe83 	bl	8004208 <xTaskCheckForTimeOut>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d123      	bne.n	8003550 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800350a:	f000 f917 	bl	800373c <prvIsQueueEmpty>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d017      	beq.n	8003544 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	3324      	adds	r3, #36	; 0x24
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fda9 	bl	8004074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003524:	f000 f8b8 	bl	8003698 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003528:	f000 fbde 	bl	8003ce8 <xTaskResumeAll>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d189      	bne.n	8003446 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <xQueueReceive+0x1bc>)
 8003534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	e780      	b.n	8003446 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003546:	f000 f8a7 	bl	8003698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800354a:	f000 fbcd 	bl	8003ce8 <xTaskResumeAll>
 800354e:	e77a      	b.n	8003446 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003552:	f000 f8a1 	bl	8003698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003556:	f000 fbc7 	bl	8003ce8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800355a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800355c:	f000 f8ee 	bl	800373c <prvIsQueueEmpty>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	f43f af6f 	beq.w	8003446 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003568:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800356a:	4618      	mov	r0, r3
 800356c:	3730      	adds	r7, #48	; 0x30
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	e000ed04 	.word	0xe000ed04

08003578 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10d      	bne.n	80035b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d14d      	bne.n	800363a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 ff92 	bl	80044cc <xTaskPriorityDisinherit>
 80035a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	e043      	b.n	800363a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d119      	bne.n	80035ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6858      	ldr	r0, [r3, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	461a      	mov	r2, r3
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	f001 ffee 	bl	80055a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	441a      	add	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d32b      	bcc.n	800363a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	e026      	b.n	800363a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68d8      	ldr	r0, [r3, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	461a      	mov	r2, r3
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	f001 ffd4 	bl	80055a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	425b      	negs	r3, r3
 8003606:	441a      	add	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d207      	bcs.n	8003628 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	425b      	negs	r3, r3
 8003622:	441a      	add	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d105      	bne.n	800363a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	3b01      	subs	r3, #1
 8003638:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003642:	697b      	ldr	r3, [r7, #20]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d018      	beq.n	8003690 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	441a      	add	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	429a      	cmp	r2, r3
 8003676:	d303      	bcc.n	8003680 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68d9      	ldr	r1, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	461a      	mov	r2, r3
 800368a:	6838      	ldr	r0, [r7, #0]
 800368c:	f001 ff8a 	bl	80055a4 <memcpy>
	}
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036a0:	f001 fc50 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036ac:	e011      	b.n	80036d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d012      	beq.n	80036dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3324      	adds	r3, #36	; 0x24
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fd2a 	bl	8004114 <xTaskRemoveFromEventList>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036c6:	f000 fe01 	bl	80042cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	dce9      	bgt.n	80036ae <prvUnlockQueue+0x16>
 80036da:	e000      	b.n	80036de <prvUnlockQueue+0x46>
					break;
 80036dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	22ff      	movs	r2, #255	; 0xff
 80036e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036e6:	f001 fc5d 	bl	8004fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036ea:	f001 fc2b 	bl	8004f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036f6:	e011      	b.n	800371c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d012      	beq.n	8003726 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3310      	adds	r3, #16
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fd05 	bl	8004114 <xTaskRemoveFromEventList>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003710:	f000 fddc 	bl	80042cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003714:	7bbb      	ldrb	r3, [r7, #14]
 8003716:	3b01      	subs	r3, #1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800371c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003720:	2b00      	cmp	r3, #0
 8003722:	dce9      	bgt.n	80036f8 <prvUnlockQueue+0x60>
 8003724:	e000      	b.n	8003728 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003726:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	22ff      	movs	r2, #255	; 0xff
 800372c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003730:	f001 fc38 	bl	8004fa4 <vPortExitCritical>
}
 8003734:	bf00      	nop
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003744:	f001 fbfe 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003750:	2301      	movs	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	e001      	b.n	800375a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800375a:	f001 fc23 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 800375e:	68fb      	ldr	r3, [r7, #12]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003770:	f001 fbe8 	bl	8004f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	429a      	cmp	r2, r3
 800377e:	d102      	bne.n	8003786 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003780:	2301      	movs	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e001      	b.n	800378a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800378a:	f001 fc0b 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 800378e:	68fb      	ldr	r3, [r7, #12]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e014      	b.n	80037d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037a8:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <vQueueAddToRegistry+0x50>)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037b4:	490c      	ldr	r1, [pc, #48]	; (80037e8 <vQueueAddToRegistry+0x50>)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037be:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <vQueueAddToRegistry+0x50>)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037ca:	e006      	b.n	80037da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3301      	adds	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b07      	cmp	r3, #7
 80037d6:	d9e7      	bls.n	80037a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	200007d0 	.word	0x200007d0

080037ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037fc:	f001 fba2 	bl	8004f44 <vPortEnterCritical>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003806:	b25b      	sxtb	r3, r3
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d103      	bne.n	8003816 <vQueueWaitForMessageRestricted+0x2a>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800381c:	b25b      	sxtb	r3, r3
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d103      	bne.n	800382c <vQueueWaitForMessageRestricted+0x40>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800382c:	f001 fbba 	bl	8004fa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3324      	adds	r3, #36	; 0x24
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fc3b 	bl	80040bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003846:	6978      	ldr	r0, [r7, #20]
 8003848:	f7ff ff26 	bl	8003698 <prvUnlockQueue>
	}
 800384c:	bf00      	nop
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08e      	sub	sp, #56	; 0x38
 8003858:	af04      	add	r7, sp, #16
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	623b      	str	r3, [r7, #32]
}
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <xTaskCreateStatic+0x46>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	61fb      	str	r3, [r7, #28]
}
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800389a:	235c      	movs	r3, #92	; 0x5c
 800389c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b5c      	cmp	r3, #92	; 0x5c
 80038a2:	d00a      	beq.n	80038ba <xTaskCreateStatic+0x66>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	61bb      	str	r3, [r7, #24]
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d01e      	beq.n	8003900 <xTaskCreateStatic+0xac>
 80038c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01b      	beq.n	8003900 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038da:	2300      	movs	r3, #0
 80038dc:	9303      	str	r3, [sp, #12]
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	9302      	str	r3, [sp, #8]
 80038e2:	f107 0314 	add.w	r3, r7, #20
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f850 	bl	8003998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038fa:	f000 f8dd 	bl	8003ab8 <prvAddNewTaskToReadyList>
 80038fe:	e001      	b.n	8003904 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003904:	697b      	ldr	r3, [r7, #20]
	}
 8003906:	4618      	mov	r0, r3
 8003908:	3728      	adds	r7, #40	; 0x28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800390e:	b580      	push	{r7, lr}
 8003910:	b08c      	sub	sp, #48	; 0x30
 8003912:	af04      	add	r7, sp, #16
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fc30 	bl	8005188 <pvPortMalloc>
 8003928:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00e      	beq.n	800394e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003930:	205c      	movs	r0, #92	; 0x5c
 8003932:	f001 fc29 	bl	8005188 <pvPortMalloc>
 8003936:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
 8003944:	e005      	b.n	8003952 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	f001 fcea 	bl	8005320 <vPortFree>
 800394c:	e001      	b.n	8003952 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d017      	beq.n	8003988 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	2300      	movs	r3, #0
 8003964:	9303      	str	r3, [sp, #12]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	9302      	str	r3, [sp, #8]
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f80e 	bl	8003998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800397c:	69f8      	ldr	r0, [r7, #28]
 800397e:	f000 f89b 	bl	8003ab8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003982:	2301      	movs	r3, #1
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e002      	b.n	800398e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800398e:	69bb      	ldr	r3, [r7, #24]
	}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	461a      	mov	r2, r3
 80039b0:	21a5      	movs	r1, #165	; 0xa5
 80039b2:	f001 fe05 	bl	80055c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039c0:	3b01      	subs	r3, #1
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f023 0307 	bic.w	r3, r3, #7
 80039ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	617b      	str	r3, [r7, #20]
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01f      	beq.n	8003a36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	e012      	b.n	8003a22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	7819      	ldrb	r1, [r3, #0]
 8003a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4413      	add	r3, r2
 8003a0a:	3334      	adds	r3, #52	; 0x34
 8003a0c:	460a      	mov	r2, r1
 8003a0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d006      	beq.n	8003a2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b0f      	cmp	r3, #15
 8003a26:	d9e9      	bls.n	80039fc <prvInitialiseNewTask+0x64>
 8003a28:	e000      	b.n	8003a2c <prvInitialiseNewTask+0x94>
			{
				break;
 8003a2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a34:	e003      	b.n	8003a3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	2b37      	cmp	r3, #55	; 0x37
 8003a42:	d901      	bls.n	8003a48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a44:	2337      	movs	r3, #55	; 0x37
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	2200      	movs	r2, #0
 8003a58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff f978 	bl	8002d54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	3318      	adds	r3, #24
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff f973 	bl	8002d54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	2200      	movs	r2, #0
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	68f9      	ldr	r1, [r7, #12]
 8003a96:	69b8      	ldr	r0, [r7, #24]
 8003a98:	f001 f928 	bl	8004cec <pxPortInitialiseStack>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aae:	bf00      	nop
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ac0:	f001 fa40 	bl	8004f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ac4:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <prvAddNewTaskToReadyList+0xc4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <prvAddNewTaskToReadyList+0xc4>)
 8003acc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ace:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <prvAddNewTaskToReadyList+0xc8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <prvAddNewTaskToReadyList+0xc8>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003adc:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <prvAddNewTaskToReadyList+0xc4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d110      	bne.n	8003b06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ae4:	f000 fc16 	bl	8004314 <prvInitialiseTaskLists>
 8003ae8:	e00d      	b.n	8003b06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003aea:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <prvAddNewTaskToReadyList+0xcc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003af2:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <prvAddNewTaskToReadyList+0xc8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d802      	bhi.n	8003b06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b00:	4a1f      	ldr	r2, [pc, #124]	; (8003b80 <prvAddNewTaskToReadyList+0xc8>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <prvAddNewTaskToReadyList+0xd0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <prvAddNewTaskToReadyList+0xd0>)
 8003b0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b10:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <prvAddNewTaskToReadyList+0xd0>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <prvAddNewTaskToReadyList+0xd4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d903      	bls.n	8003b2c <prvAddNewTaskToReadyList+0x74>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <prvAddNewTaskToReadyList+0xd4>)
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <prvAddNewTaskToReadyList+0xd8>)
 8003b3a:	441a      	add	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f7ff f913 	bl	8002d6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b48:	f001 fa2c 	bl	8004fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <prvAddNewTaskToReadyList+0xcc>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <prvAddNewTaskToReadyList+0xc8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d207      	bcs.n	8003b72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <prvAddNewTaskToReadyList+0xdc>)
 8003b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000ce4 	.word	0x20000ce4
 8003b80:	20000810 	.word	0x20000810
 8003b84:	20000cf0 	.word	0x20000cf0
 8003b88:	20000d00 	.word	0x20000d00
 8003b8c:	20000cec 	.word	0x20000cec
 8003b90:	20000814 	.word	0x20000814
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <vTaskDelay+0x60>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <vTaskDelay+0x30>
	__asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	60bb      	str	r3, [r7, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bc8:	f000 f880 	bl	8003ccc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bcc:	2100      	movs	r1, #0
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fcea 	bl	80045a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bd4:	f000 f888 	bl	8003ce8 <xTaskResumeAll>
 8003bd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d107      	bne.n	8003bf0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <vTaskDelay+0x64>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000d0c 	.word	0x20000d0c
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	; 0x28
 8003c04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c0e:	463a      	mov	r2, r7
 8003c10:	1d39      	adds	r1, r7, #4
 8003c12:	f107 0308 	add.w	r3, r7, #8
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff f848 	bl	8002cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c1c:	6839      	ldr	r1, [r7, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	9202      	str	r2, [sp, #8]
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	460a      	mov	r2, r1
 8003c2e:	4921      	ldr	r1, [pc, #132]	; (8003cb4 <vTaskStartScheduler+0xb4>)
 8003c30:	4821      	ldr	r0, [pc, #132]	; (8003cb8 <vTaskStartScheduler+0xb8>)
 8003c32:	f7ff fe0f 	bl	8003854 <xTaskCreateStatic>
 8003c36:	4603      	mov	r3, r0
 8003c38:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <vTaskStartScheduler+0xbc>)
 8003c3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c3c:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <vTaskStartScheduler+0xbc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e001      	b.n	8003c4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d102      	bne.n	8003c5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c54:	f000 fcfc 	bl	8004650 <xTimerCreateTimerTask>
 8003c58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d116      	bne.n	8003c8e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	613b      	str	r3, [r7, #16]
}
 8003c72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <vTaskStartScheduler+0xc0>)
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <vTaskStartScheduler+0xc4>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <vTaskStartScheduler+0xc8>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c88:	f001 f8ba 	bl	8004e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c8c:	e00e      	b.n	8003cac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d10a      	bne.n	8003cac <vTaskStartScheduler+0xac>
	__asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	60fb      	str	r3, [r7, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <vTaskStartScheduler+0xaa>
}
 8003cac:	bf00      	nop
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	08005600 	.word	0x08005600
 8003cb8:	080042e5 	.word	0x080042e5
 8003cbc:	20000d08 	.word	0x20000d08
 8003cc0:	20000d04 	.word	0x20000d04
 8003cc4:	20000cf0 	.word	0x20000cf0
 8003cc8:	20000ce8 	.word	0x20000ce8

08003ccc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <vTaskSuspendAll+0x18>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	4a03      	ldr	r2, [pc, #12]	; (8003ce4 <vTaskSuspendAll+0x18>)
 8003cd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	20000d0c 	.word	0x20000d0c

08003ce8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cf6:	4b42      	ldr	r3, [pc, #264]	; (8003e00 <xTaskResumeAll+0x118>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	603b      	str	r3, [r7, #0]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d14:	f001 f916 	bl	8004f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <xTaskResumeAll+0x118>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	4a38      	ldr	r2, [pc, #224]	; (8003e00 <xTaskResumeAll+0x118>)
 8003d20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <xTaskResumeAll+0x118>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d162      	bne.n	8003df0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d2a:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <xTaskResumeAll+0x11c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d05e      	beq.n	8003df0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d32:	e02f      	b.n	8003d94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <xTaskResumeAll+0x120>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3318      	adds	r3, #24
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff f871 	bl	8002e28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff f86c 	bl	8002e28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <xTaskResumeAll+0x124>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d903      	bls.n	8003d64 <xTaskResumeAll+0x7c>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <xTaskResumeAll+0x124>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <xTaskResumeAll+0x128>)
 8003d72:	441a      	add	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f7fe fff7 	bl	8002d6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d84:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <xTaskResumeAll+0x12c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d8e:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <xTaskResumeAll+0x130>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d94:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <xTaskResumeAll+0x120>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1cb      	bne.n	8003d34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003da2:	f000 fb55 	bl	8004450 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003da6:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <xTaskResumeAll+0x134>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d010      	beq.n	8003dd4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003db2:	f000 f847 	bl	8003e44 <xTaskIncrementTick>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003dbc:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <xTaskResumeAll+0x130>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f1      	bne.n	8003db2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003dce:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <xTaskResumeAll+0x134>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dd4:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <xTaskResumeAll+0x130>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <xTaskResumeAll+0x138>)
 8003de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003df0:	f001 f8d8 	bl	8004fa4 <vPortExitCritical>

	return xAlreadyYielded;
 8003df4:	68bb      	ldr	r3, [r7, #8]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000d0c 	.word	0x20000d0c
 8003e04:	20000ce4 	.word	0x20000ce4
 8003e08:	20000ca4 	.word	0x20000ca4
 8003e0c:	20000cec 	.word	0x20000cec
 8003e10:	20000814 	.word	0x20000814
 8003e14:	20000810 	.word	0x20000810
 8003e18:	20000cf8 	.word	0x20000cf8
 8003e1c:	20000cf4 	.word	0x20000cf4
 8003e20:	e000ed04 	.word	0xe000ed04

08003e24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e2a:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <xTaskGetTickCount+0x1c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e30:	687b      	ldr	r3, [r7, #4]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000ce8 	.word	0x20000ce8

08003e44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e4e:	4b4f      	ldr	r3, [pc, #316]	; (8003f8c <xTaskIncrementTick+0x148>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 808f 	bne.w	8003f76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e58:	4b4d      	ldr	r3, [pc, #308]	; (8003f90 <xTaskIncrementTick+0x14c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e60:	4a4b      	ldr	r2, [pc, #300]	; (8003f90 <xTaskIncrementTick+0x14c>)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d120      	bne.n	8003eae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e6c:	4b49      	ldr	r3, [pc, #292]	; (8003f94 <xTaskIncrementTick+0x150>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <xTaskIncrementTick+0x48>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	603b      	str	r3, [r7, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	e7fe      	b.n	8003e8a <xTaskIncrementTick+0x46>
 8003e8c:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <xTaskIncrementTick+0x150>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <xTaskIncrementTick+0x154>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a3f      	ldr	r2, [pc, #252]	; (8003f94 <xTaskIncrementTick+0x150>)
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4a3f      	ldr	r2, [pc, #252]	; (8003f98 <xTaskIncrementTick+0x154>)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <xTaskIncrementTick+0x158>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4a3d      	ldr	r2, [pc, #244]	; (8003f9c <xTaskIncrementTick+0x158>)
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	f000 fad1 	bl	8004450 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003eae:	4b3c      	ldr	r3, [pc, #240]	; (8003fa0 <xTaskIncrementTick+0x15c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d349      	bcc.n	8003f4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb8:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <xTaskIncrementTick+0x150>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ec2:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <xTaskIncrementTick+0x15c>)
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	601a      	str	r2, [r3, #0]
					break;
 8003eca:	e03f      	b.n	8003f4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ecc:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <xTaskIncrementTick+0x150>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d203      	bcs.n	8003eec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ee4:	4a2e      	ldr	r2, [pc, #184]	; (8003fa0 <xTaskIncrementTick+0x15c>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003eea:	e02f      	b.n	8003f4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe ff99 	bl	8002e28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3318      	adds	r3, #24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe ff90 	bl	8002e28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <xTaskIncrementTick+0x160>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d903      	bls.n	8003f1c <xTaskIncrementTick+0xd8>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <xTaskIncrementTick+0x160>)
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <xTaskIncrementTick+0x164>)
 8003f2a:	441a      	add	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f7fe ff1b 	bl	8002d6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <xTaskIncrementTick+0x168>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3b8      	bcc.n	8003eb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f4a:	e7b5      	b.n	8003eb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f4c:	4b17      	ldr	r3, [pc, #92]	; (8003fac <xTaskIncrementTick+0x168>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	4915      	ldr	r1, [pc, #84]	; (8003fa8 <xTaskIncrementTick+0x164>)
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d901      	bls.n	8003f68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <xTaskIncrementTick+0x16c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e004      	b.n	8003f80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <xTaskIncrementTick+0x170>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <xTaskIncrementTick+0x170>)
 8003f7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f80:	697b      	ldr	r3, [r7, #20]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000d0c 	.word	0x20000d0c
 8003f90:	20000ce8 	.word	0x20000ce8
 8003f94:	20000c9c 	.word	0x20000c9c
 8003f98:	20000ca0 	.word	0x20000ca0
 8003f9c:	20000cfc 	.word	0x20000cfc
 8003fa0:	20000d04 	.word	0x20000d04
 8003fa4:	20000cec 	.word	0x20000cec
 8003fa8:	20000814 	.word	0x20000814
 8003fac:	20000810 	.word	0x20000810
 8003fb0:	20000cf8 	.word	0x20000cf8
 8003fb4:	20000cf4 	.word	0x20000cf4

08003fb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fbe:	4b28      	ldr	r3, [pc, #160]	; (8004060 <vTaskSwitchContext+0xa8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fc6:	4b27      	ldr	r3, [pc, #156]	; (8004064 <vTaskSwitchContext+0xac>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fcc:	e041      	b.n	8004052 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003fce:	4b25      	ldr	r3, [pc, #148]	; (8004064 <vTaskSwitchContext+0xac>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd4:	4b24      	ldr	r3, [pc, #144]	; (8004068 <vTaskSwitchContext+0xb0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e010      	b.n	8003ffe <vTaskSwitchContext+0x46>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	607b      	str	r3, [r7, #4]
}
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <vTaskSwitchContext+0x3e>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	491b      	ldr	r1, [pc, #108]	; (800406c <vTaskSwitchContext+0xb4>)
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0e4      	beq.n	8003fdc <vTaskSwitchContext+0x24>
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <vTaskSwitchContext+0xb4>)
 800401e:	4413      	add	r3, r2
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	3308      	adds	r3, #8
 8004034:	429a      	cmp	r2, r3
 8004036:	d104      	bne.n	8004042 <vTaskSwitchContext+0x8a>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a09      	ldr	r2, [pc, #36]	; (8004070 <vTaskSwitchContext+0xb8>)
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	4a06      	ldr	r2, [pc, #24]	; (8004068 <vTaskSwitchContext+0xb0>)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6013      	str	r3, [r2, #0]
}
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20000d0c 	.word	0x20000d0c
 8004064:	20000cf8 	.word	0x20000cf8
 8004068:	20000cec 	.word	0x20000cec
 800406c:	20000814 	.word	0x20000814
 8004070:	20000810 	.word	0x20000810

08004074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60fb      	str	r3, [r7, #12]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <vTaskPlaceOnEventList+0x44>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3318      	adds	r3, #24
 80040a0:	4619      	mov	r1, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fe fe87 	bl	8002db6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040a8:	2101      	movs	r1, #1
 80040aa:	6838      	ldr	r0, [r7, #0]
 80040ac:	f000 fa7c 	bl	80045a8 <prvAddCurrentTaskToDelayedList>
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000810 	.word	0x20000810

080040bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	617b      	str	r3, [r7, #20]
}
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <vTaskPlaceOnEventListRestricted+0x54>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3318      	adds	r3, #24
 80040ea:	4619      	mov	r1, r3
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7fe fe3e 	bl	8002d6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040f8:	f04f 33ff 	mov.w	r3, #4294967295
 80040fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	68b8      	ldr	r0, [r7, #8]
 8004102:	f000 fa51 	bl	80045a8 <prvAddCurrentTaskToDelayedList>
	}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000810 	.word	0x20000810

08004114 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	60fb      	str	r3, [r7, #12]
}
 800413c:	bf00      	nop
 800413e:	e7fe      	b.n	800413e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	3318      	adds	r3, #24
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fe6f 	bl	8002e28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800414a:	4b1e      	ldr	r3, [pc, #120]	; (80041c4 <xTaskRemoveFromEventList+0xb0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11d      	bne.n	800418e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3304      	adds	r3, #4
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe fe66 	bl	8002e28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <xTaskRemoveFromEventList+0xb4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d903      	bls.n	8004170 <xTaskRemoveFromEventList+0x5c>
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4a16      	ldr	r2, [pc, #88]	; (80041c8 <xTaskRemoveFromEventList+0xb4>)
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4a13      	ldr	r2, [pc, #76]	; (80041cc <xTaskRemoveFromEventList+0xb8>)
 800417e:	441a      	add	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f7fe fdf1 	bl	8002d6e <vListInsertEnd>
 800418c:	e005      	b.n	800419a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	3318      	adds	r3, #24
 8004192:	4619      	mov	r1, r3
 8004194:	480e      	ldr	r0, [pc, #56]	; (80041d0 <xTaskRemoveFromEventList+0xbc>)
 8004196:	f7fe fdea 	bl	8002d6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <xTaskRemoveFromEventList+0xc0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d905      	bls.n	80041b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <xTaskRemoveFromEventList+0xc4>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e001      	b.n	80041b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041b8:	697b      	ldr	r3, [r7, #20]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000d0c 	.word	0x20000d0c
 80041c8:	20000cec 	.word	0x20000cec
 80041cc:	20000814 	.word	0x20000814
 80041d0:	20000ca4 	.word	0x20000ca4
 80041d4:	20000810 	.word	0x20000810
 80041d8:	20000cf8 	.word	0x20000cf8

080041dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <vTaskInternalSetTimeOutState+0x24>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <vTaskInternalSetTimeOutState+0x28>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	605a      	str	r2, [r3, #4]
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	20000cfc 	.word	0x20000cfc
 8004204:	20000ce8 	.word	0x20000ce8

08004208 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	613b      	str	r3, [r7, #16]
}
 800422a:	bf00      	nop
 800422c:	e7fe      	b.n	800422c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60fb      	str	r3, [r7, #12]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800424a:	f000 fe7b 	bl	8004f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <xTaskCheckForTimeOut+0xbc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d102      	bne.n	800426e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e023      	b.n	80042b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <xTaskCheckForTimeOut+0xc0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d007      	beq.n	800428a <xTaskCheckForTimeOut+0x82>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	429a      	cmp	r2, r3
 8004282:	d302      	bcc.n	800428a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004284:	2301      	movs	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e015      	b.n	80042b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	429a      	cmp	r2, r3
 8004292:	d20b      	bcs.n	80042ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1ad2      	subs	r2, r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ff9b 	bl	80041dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	e004      	b.n	80042b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042b6:	f000 fe75 	bl	8004fa4 <vPortExitCritical>

	return xReturn;
 80042ba:	69fb      	ldr	r3, [r7, #28]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000ce8 	.word	0x20000ce8
 80042c8:	20000cfc 	.word	0x20000cfc

080042cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <vTaskMissedYield+0x14>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	20000cf8 	.word	0x20000cf8

080042e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042ec:	f000 f852 	bl	8004394 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <prvIdleTask+0x28>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d9f9      	bls.n	80042ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <prvIdleTask+0x2c>)
 80042fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004308:	e7f0      	b.n	80042ec <prvIdleTask+0x8>
 800430a:	bf00      	nop
 800430c:	20000814 	.word	0x20000814
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
 800431e:	e00c      	b.n	800433a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <prvInitialiseTaskLists+0x60>)
 800432c:	4413      	add	r3, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fcf0 	bl	8002d14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3301      	adds	r3, #1
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b37      	cmp	r3, #55	; 0x37
 800433e:	d9ef      	bls.n	8004320 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004340:	480d      	ldr	r0, [pc, #52]	; (8004378 <prvInitialiseTaskLists+0x64>)
 8004342:	f7fe fce7 	bl	8002d14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004346:	480d      	ldr	r0, [pc, #52]	; (800437c <prvInitialiseTaskLists+0x68>)
 8004348:	f7fe fce4 	bl	8002d14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800434c:	480c      	ldr	r0, [pc, #48]	; (8004380 <prvInitialiseTaskLists+0x6c>)
 800434e:	f7fe fce1 	bl	8002d14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004352:	480c      	ldr	r0, [pc, #48]	; (8004384 <prvInitialiseTaskLists+0x70>)
 8004354:	f7fe fcde 	bl	8002d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004358:	480b      	ldr	r0, [pc, #44]	; (8004388 <prvInitialiseTaskLists+0x74>)
 800435a:	f7fe fcdb 	bl	8002d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <prvInitialiseTaskLists+0x78>)
 8004360:	4a05      	ldr	r2, [pc, #20]	; (8004378 <prvInitialiseTaskLists+0x64>)
 8004362:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004364:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <prvInitialiseTaskLists+0x7c>)
 8004366:	4a05      	ldr	r2, [pc, #20]	; (800437c <prvInitialiseTaskLists+0x68>)
 8004368:	601a      	str	r2, [r3, #0]
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000814 	.word	0x20000814
 8004378:	20000c74 	.word	0x20000c74
 800437c:	20000c88 	.word	0x20000c88
 8004380:	20000ca4 	.word	0x20000ca4
 8004384:	20000cb8 	.word	0x20000cb8
 8004388:	20000cd0 	.word	0x20000cd0
 800438c:	20000c9c 	.word	0x20000c9c
 8004390:	20000ca0 	.word	0x20000ca0

08004394 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800439a:	e019      	b.n	80043d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800439c:	f000 fdd2 	bl	8004f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <prvCheckTasksWaitingTermination+0x50>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fd3b 	bl	8002e28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043b2:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <prvCheckTasksWaitingTermination+0x54>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <prvCheckTasksWaitingTermination+0x54>)
 80043ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <prvCheckTasksWaitingTermination+0x58>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <prvCheckTasksWaitingTermination+0x58>)
 80043c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043c6:	f000 fded 	bl	8004fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f810 	bl	80043f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <prvCheckTasksWaitingTermination+0x58>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e1      	bne.n	800439c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000cb8 	.word	0x20000cb8
 80043e8:	20000ce4 	.word	0x20000ce4
 80043ec:	20000ccc 	.word	0x20000ccc

080043f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d108      	bne.n	8004414 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	4618      	mov	r0, r3
 8004408:	f000 ff8a 	bl	8005320 <vPortFree>
				vPortFree( pxTCB );
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 ff87 	bl	8005320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004412:	e018      	b.n	8004446 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800441a:	2b01      	cmp	r3, #1
 800441c:	d103      	bne.n	8004426 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 ff7e 	bl	8005320 <vPortFree>
	}
 8004424:	e00f      	b.n	8004446 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800442c:	2b02      	cmp	r3, #2
 800442e:	d00a      	beq.n	8004446 <prvDeleteTCB+0x56>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	60fb      	str	r3, [r7, #12]
}
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <prvDeleteTCB+0x54>
	}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <prvResetNextTaskUnblockTime+0x38>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d104      	bne.n	800446a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <prvResetNextTaskUnblockTime+0x3c>)
 8004462:	f04f 32ff 	mov.w	r2, #4294967295
 8004466:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004468:	e008      	b.n	800447c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <prvResetNextTaskUnblockTime+0x38>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4a04      	ldr	r2, [pc, #16]	; (800448c <prvResetNextTaskUnblockTime+0x3c>)
 800447a:	6013      	str	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	20000c9c 	.word	0x20000c9c
 800448c:	20000d04 	.word	0x20000d04

08004490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <xTaskGetSchedulerState+0x34>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800449e:	2301      	movs	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	e008      	b.n	80044b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <xTaskGetSchedulerState+0x38>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044ac:	2302      	movs	r3, #2
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	e001      	b.n	80044b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044b6:	687b      	ldr	r3, [r7, #4]
	}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	20000cf0 	.word	0x20000cf0
 80044c8:	20000d0c 	.word	0x20000d0c

080044cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d056      	beq.n	8004590 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <xTaskPriorityDisinherit+0xd0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d00a      	beq.n	8004502 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	60fb      	str	r3, [r7, #12]
}
 80044fe:	bf00      	nop
 8004500:	e7fe      	b.n	8004500 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60bb      	str	r3, [r7, #8]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	1e5a      	subs	r2, r3, #1
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	429a      	cmp	r2, r3
 8004534:	d02c      	beq.n	8004590 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453a:	2b00      	cmp	r3, #0
 800453c:	d128      	bne.n	8004590 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	3304      	adds	r3, #4
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe fc70 	bl	8002e28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004560:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <xTaskPriorityDisinherit+0xd4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d903      	bls.n	8004570 <xTaskPriorityDisinherit+0xa4>
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	4a0c      	ldr	r2, [pc, #48]	; (80045a0 <xTaskPriorityDisinherit+0xd4>)
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <xTaskPriorityDisinherit+0xd8>)
 800457e:	441a      	add	r2, r3
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7fe fbf1 	bl	8002d6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800458c:	2301      	movs	r3, #1
 800458e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004590:	697b      	ldr	r3, [r7, #20]
	}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000810 	.word	0x20000810
 80045a0:	20000cec 	.word	0x20000cec
 80045a4:	20000814 	.word	0x20000814

080045a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045b2:	4b21      	ldr	r3, [pc, #132]	; (8004638 <prvAddCurrentTaskToDelayedList+0x90>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045b8:	4b20      	ldr	r3, [pc, #128]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3304      	adds	r3, #4
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe fc32 	bl	8002e28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d10a      	bne.n	80045e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4819      	ldr	r0, [pc, #100]	; (8004640 <prvAddCurrentTaskToDelayedList+0x98>)
 80045dc:	f7fe fbc7 	bl	8002d6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045e0:	e026      	b.n	8004630 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d209      	bcs.n	800460e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f7fe fbd5 	bl	8002db6 <vListInsert>
}
 800460c:	e010      	b.n	8004630 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <prvAddCurrentTaskToDelayedList+0x94>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f7fe fbcb 	bl	8002db6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d202      	bcs.n	8004630 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <prvAddCurrentTaskToDelayedList+0xa4>)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20000ce8 	.word	0x20000ce8
 800463c:	20000810 	.word	0x20000810
 8004640:	20000cd0 	.word	0x20000cd0
 8004644:	20000ca0 	.word	0x20000ca0
 8004648:	20000c9c 	.word	0x20000c9c
 800464c:	20000d04 	.word	0x20000d04

08004650 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800465a:	f000 fb07 	bl	8004c6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800465e:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <xTimerCreateTimerTask+0x80>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d021      	beq.n	80046aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800466e:	1d3a      	adds	r2, r7, #4
 8004670:	f107 0108 	add.w	r1, r7, #8
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe fb31 	bl	8002ce0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	9202      	str	r2, [sp, #8]
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	2302      	movs	r3, #2
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2300      	movs	r3, #0
 800468e:	460a      	mov	r2, r1
 8004690:	4910      	ldr	r1, [pc, #64]	; (80046d4 <xTimerCreateTimerTask+0x84>)
 8004692:	4811      	ldr	r0, [pc, #68]	; (80046d8 <xTimerCreateTimerTask+0x88>)
 8004694:	f7ff f8de 	bl	8003854 <xTaskCreateStatic>
 8004698:	4603      	mov	r3, r0
 800469a:	4a10      	ldr	r2, [pc, #64]	; (80046dc <xTimerCreateTimerTask+0x8c>)
 800469c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800469e:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <xTimerCreateTimerTask+0x8c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046a6:	2301      	movs	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	613b      	str	r3, [r7, #16]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046c6:	697b      	ldr	r3, [r7, #20]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000d40 	.word	0x20000d40
 80046d4:	08005608 	.word	0x08005608
 80046d8:	08004815 	.word	0x08004815
 80046dc:	20000d44 	.word	0x20000d44

080046e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xTimerGenericCommand+0x2e>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	623b      	str	r3, [r7, #32]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <xTimerGenericCommand+0x98>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d02a      	beq.n	800476c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b05      	cmp	r3, #5
 8004726:	dc18      	bgt.n	800475a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004728:	f7ff feb2 	bl	8004490 <xTaskGetSchedulerState>
 800472c:	4603      	mov	r3, r0
 800472e:	2b02      	cmp	r3, #2
 8004730:	d109      	bne.n	8004746 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004732:	4b11      	ldr	r3, [pc, #68]	; (8004778 <xTimerGenericCommand+0x98>)
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f107 0110 	add.w	r1, r7, #16
 800473a:	2300      	movs	r3, #0
 800473c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473e:	f7fe fca1 	bl	8003084 <xQueueGenericSend>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24
 8004744:	e012      	b.n	800476c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <xTimerGenericCommand+0x98>)
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	f107 0110 	add.w	r1, r7, #16
 800474e:	2300      	movs	r3, #0
 8004750:	2200      	movs	r2, #0
 8004752:	f7fe fc97 	bl	8003084 <xQueueGenericSend>
 8004756:	6278      	str	r0, [r7, #36]	; 0x24
 8004758:	e008      	b.n	800476c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <xTimerGenericCommand+0x98>)
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	f107 0110 	add.w	r1, r7, #16
 8004762:	2300      	movs	r3, #0
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	f7fe fd8b 	bl	8003280 <xQueueGenericSendFromISR>
 800476a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800476e:	4618      	mov	r0, r3
 8004770:	3728      	adds	r7, #40	; 0x28
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000d40 	.word	0x20000d40

0800477c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <prvProcessExpiredTimer+0x94>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	3304      	adds	r3, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f7fe fb47 	bl	8002e28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d022      	beq.n	80047ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	18d1      	adds	r1, r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f000 f8d1 	bl	800495c <prvInsertTimerInActiveList>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01f      	beq.n	8004800 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047c0:	2300      	movs	r3, #0
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	2100      	movs	r1, #0
 80047ca:	6978      	ldr	r0, [r7, #20]
 80047cc:	f7ff ff88 	bl	80046e0 <xTimerGenericCommand>
 80047d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d113      	bne.n	8004800 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60fb      	str	r3, [r7, #12]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	6978      	ldr	r0, [r7, #20]
 8004806:	4798      	blx	r3
}
 8004808:	bf00      	nop
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000d38 	.word	0x20000d38

08004814 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800481c:	f107 0308 	add.w	r3, r7, #8
 8004820:	4618      	mov	r0, r3
 8004822:	f000 f857 	bl	80048d4 <prvGetNextExpireTime>
 8004826:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4619      	mov	r1, r3
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f803 	bl	8004838 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004832:	f000 f8d5 	bl	80049e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004836:	e7f1      	b.n	800481c <prvTimerTask+0x8>

08004838 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004842:	f7ff fa43 	bl	8003ccc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004846:	f107 0308 	add.w	r3, r7, #8
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f866 	bl	800491c <prvSampleTimeNow>
 8004850:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d130      	bne.n	80048ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <prvProcessTimerOrBlockTask+0x3c>
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	429a      	cmp	r2, r3
 8004864:	d806      	bhi.n	8004874 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004866:	f7ff fa3f 	bl	8003ce8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff ff85 	bl	800477c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004872:	e024      	b.n	80048be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <prvProcessTimerOrBlockTask+0x90>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <prvProcessTimerOrBlockTask+0x50>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <prvProcessTimerOrBlockTask+0x52>
 8004888:	2300      	movs	r3, #0
 800488a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <prvProcessTimerOrBlockTask+0x94>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	4619      	mov	r1, r3
 800489a:	f7fe ffa7 	bl	80037ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800489e:	f7ff fa23 	bl	8003ce8 <xTaskResumeAll>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048a8:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <prvProcessTimerOrBlockTask+0x98>)
 80048aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	f3bf 8f6f 	isb	sy
}
 80048b8:	e001      	b.n	80048be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048ba:	f7ff fa15 	bl	8003ce8 <xTaskResumeAll>
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000d3c 	.word	0x20000d3c
 80048cc:	20000d40 	.word	0x20000d40
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048dc:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <prvGetNextExpireTime+0x44>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <prvGetNextExpireTime+0x16>
 80048e6:	2201      	movs	r2, #1
 80048e8:	e000      	b.n	80048ec <prvGetNextExpireTime+0x18>
 80048ea:	2200      	movs	r2, #0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048f8:	4b07      	ldr	r3, [pc, #28]	; (8004918 <prvGetNextExpireTime+0x44>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e001      	b.n	8004908 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000d38 	.word	0x20000d38

0800491c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004924:	f7ff fa7e 	bl	8003e24 <xTaskGetTickCount>
 8004928:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800492a:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <prvSampleTimeNow+0x3c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	429a      	cmp	r2, r3
 8004932:	d205      	bcs.n	8004940 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004934:	f000 f936 	bl	8004ba4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e002      	b.n	8004946 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004946:	4a04      	ldr	r2, [pc, #16]	; (8004958 <prvSampleTimeNow+0x3c>)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800494c:	68fb      	ldr	r3, [r7, #12]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000d48 	.word	0x20000d48

0800495c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	429a      	cmp	r2, r3
 8004980:	d812      	bhi.n	80049a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	1ad2      	subs	r2, r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	429a      	cmp	r2, r3
 800498e:	d302      	bcc.n	8004996 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e01b      	b.n	80049ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <prvInsertTimerInActiveList+0x7c>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3304      	adds	r3, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f7fe fa08 	bl	8002db6 <vListInsert>
 80049a6:	e012      	b.n	80049ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d206      	bcs.n	80049be <prvInsertTimerInActiveList+0x62>
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d302      	bcc.n	80049be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049b8:	2301      	movs	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e007      	b.n	80049ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049be:	4b07      	ldr	r3, [pc, #28]	; (80049dc <prvInsertTimerInActiveList+0x80>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f7fe f9f4 	bl	8002db6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049ce:	697b      	ldr	r3, [r7, #20]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000d3c 	.word	0x20000d3c
 80049dc:	20000d38 	.word	0x20000d38

080049e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	; 0x38
 80049e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049e6:	e0ca      	b.n	8004b7e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	da18      	bge.n	8004a20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049ee:	1d3b      	adds	r3, r7, #4
 80049f0:	3304      	adds	r3, #4
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	61fb      	str	r3, [r7, #28]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a16:	6850      	ldr	r0, [r2, #4]
 8004a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1a:	6892      	ldr	r2, [r2, #8]
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f2c0 80aa 	blt.w	8004b7c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d004      	beq.n	8004a3e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe f9f5 	bl	8002e28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a3e:	463b      	mov	r3, r7
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff ff6b 	bl	800491c <prvSampleTimeNow>
 8004a46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b09      	cmp	r3, #9
 8004a4c:	f200 8097 	bhi.w	8004b7e <prvProcessReceivedCommands+0x19e>
 8004a50:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <prvProcessReceivedCommands+0x78>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a81 	.word	0x08004a81
 8004a64:	08004af5 	.word	0x08004af5
 8004a68:	08004b09 	.word	0x08004b09
 8004a6c:	08004b53 	.word	0x08004b53
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a81 	.word	0x08004a81
 8004a78:	08004af5 	.word	0x08004af5
 8004a7c:	08004b09 	.word	0x08004b09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	18d1      	adds	r1, r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa0:	f7ff ff5c 	bl	800495c <prvInsertTimerInActiveList>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d069      	beq.n	8004b7e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d05e      	beq.n	8004b7e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2300      	movs	r3, #0
 8004ace:	2100      	movs	r1, #0
 8004ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad2:	f7ff fe05 	bl	80046e0 <xTimerGenericCommand>
 8004ad6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d14f      	bne.n	8004b7e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	61bb      	str	r3, [r7, #24]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b06:	e03a      	b.n	8004b7e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	617b      	str	r3, [r7, #20]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	18d1      	adds	r1, r2, r3
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b4c:	f7ff ff06 	bl	800495c <prvInsertTimerInActiveList>
					break;
 8004b50:	e015      	b.n	8004b7e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b62:	f000 fbdd 	bl	8005320 <vPortFree>
 8004b66:	e00a      	b.n	8004b7e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b7a:	e000      	b.n	8004b7e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <prvProcessReceivedCommands+0x1c0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1d39      	adds	r1, r7, #4
 8004b84:	2200      	movs	r2, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe fc16 	bl	80033b8 <xQueueReceive>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f47f af2a 	bne.w	80049e8 <prvProcessReceivedCommands+0x8>
	}
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	3730      	adds	r7, #48	; 0x30
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000d40 	.word	0x20000d40

08004ba4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004baa:	e048      	b.n	8004c3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bac:	4b2d      	ldr	r3, [pc, #180]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb6:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe f92f 	bl	8002e28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02e      	beq.n	8004c3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d90e      	bls.n	8004c10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bfe:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7fe f8d4 	bl	8002db6 <vListInsert>
 8004c0e:	e016      	b.n	8004c3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c10:	2300      	movs	r3, #0
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	2100      	movs	r1, #0
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff fd60 	bl	80046e0 <xTimerGenericCommand>
 8004c20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	603b      	str	r3, [r7, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	e7fe      	b.n	8004c3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1b1      	bne.n	8004bac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <prvSwitchTimerLists+0xc4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <prvSwitchTimerLists+0xc0>)
 8004c54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c56:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <prvSwitchTimerLists+0xc4>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	6013      	str	r3, [r2, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000d38 	.word	0x20000d38
 8004c68:	20000d3c 	.word	0x20000d3c

08004c6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c72:	f000 f967 	bl	8004f44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c76:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <prvCheckForValidListAndQueue+0x60>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d120      	bne.n	8004cc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c7e:	4814      	ldr	r0, [pc, #80]	; (8004cd0 <prvCheckForValidListAndQueue+0x64>)
 8004c80:	f7fe f848 	bl	8002d14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c84:	4813      	ldr	r0, [pc, #76]	; (8004cd4 <prvCheckForValidListAndQueue+0x68>)
 8004c86:	f7fe f845 	bl	8002d14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <prvCheckForValidListAndQueue+0x6c>)
 8004c8c:	4a10      	ldr	r2, [pc, #64]	; (8004cd0 <prvCheckForValidListAndQueue+0x64>)
 8004c8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c90:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <prvCheckForValidListAndQueue+0x70>)
 8004c92:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <prvCheckForValidListAndQueue+0x68>)
 8004c94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c96:	2300      	movs	r3, #0
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <prvCheckForValidListAndQueue+0x74>)
 8004c9c:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <prvCheckForValidListAndQueue+0x78>)
 8004c9e:	2110      	movs	r1, #16
 8004ca0:	200a      	movs	r0, #10
 8004ca2:	f7fe f953 	bl	8002f4c <xQueueGenericCreateStatic>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <prvCheckForValidListAndQueue+0x60>)
 8004caa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <prvCheckForValidListAndQueue+0x60>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <prvCheckForValidListAndQueue+0x60>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	490b      	ldr	r1, [pc, #44]	; (8004ce8 <prvCheckForValidListAndQueue+0x7c>)
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fd6c 	bl	8003798 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cc0:	f000 f970 	bl	8004fa4 <vPortExitCritical>
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000d40 	.word	0x20000d40
 8004cd0:	20000d10 	.word	0x20000d10
 8004cd4:	20000d24 	.word	0x20000d24
 8004cd8:	20000d38 	.word	0x20000d38
 8004cdc:	20000d3c 	.word	0x20000d3c
 8004ce0:	20000dec 	.word	0x20000dec
 8004ce4:	20000d4c 	.word	0x20000d4c
 8004ce8:	08005610 	.word	0x08005610

08004cec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3b04      	subs	r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f023 0201 	bic.w	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b04      	subs	r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d1c:	4a0c      	ldr	r2, [pc, #48]	; (8004d50 <pxPortInitialiseStack+0x64>)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3b14      	subs	r3, #20
 8004d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3b04      	subs	r3, #4
 8004d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f06f 0202 	mvn.w	r2, #2
 8004d3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3b20      	subs	r3, #32
 8004d40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	08004d55 	.word	0x08004d55

08004d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <prvTaskExitError+0x54>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d00a      	beq.n	8004d7e <prvTaskExitError+0x2a>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	60fb      	str	r3, [r7, #12]
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <prvTaskExitError+0x28>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60bb      	str	r3, [r7, #8]
}
 8004d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d92:	bf00      	nop
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0fc      	beq.n	8004d94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	2000000c 	.word	0x2000000c
 8004dac:	00000000 	.word	0x00000000

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	4770      	bx	lr
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004dd8:	4808      	ldr	r0, [pc, #32]	; (8004dfc <prvPortStartFirstTask+0x24>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8814 	msr	CONTROL, r0
 8004dea:	b662      	cpsie	i
 8004dec:	b661      	cpsie	f
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	df00      	svc	0
 8004df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dfa:	bf00      	nop
 8004dfc:	e000ed08 	.word	0xe000ed08

08004e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e06:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <xPortStartScheduler+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x26>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <xPortStartScheduler+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10a      	bne.n	8004e46 <xPortStartScheduler+0x46>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xPortStartScheduler+0x12c>)
 8004e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	22ff      	movs	r2, #255	; 0xff
 8004e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <xPortStartScheduler+0x130>)
 8004e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e74:	e009      	b.n	8004e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e76:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d0ef      	beq.n	8004e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1c3 0307 	rsb	r3, r3, #7
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d00a      	beq.n	8004eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <xPortStartScheduler+0x134>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <xPortStartScheduler+0x138>)
 8004edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eee:	f000 f8dd 	bl	80050ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <xPortStartScheduler+0x13c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ef8:	f000 f8fc 	bl	80050f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <xPortStartScheduler+0x140>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <xPortStartScheduler+0x140>)
 8004f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f08:	f7ff ff66 	bl	8004dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f0c:	f7ff f854 	bl	8003fb8 <vTaskSwitchContext>
	prvTaskExitError();
 8004f10:	f7ff ff20 	bl	8004d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	410fc271 	.word	0x410fc271
 8004f28:	410fc270 	.word	0x410fc270
 8004f2c:	e000e400 	.word	0xe000e400
 8004f30:	20000e3c 	.word	0x20000e3c
 8004f34:	20000e40 	.word	0x20000e40
 8004f38:	e000ed20 	.word	0xe000ed20
 8004f3c:	2000000c 	.word	0x2000000c
 8004f40:	e000ef34 	.word	0xe000ef34

08004f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10f      	bne.n	8004f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortEnterCritical+0x5c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vPortEnterCritical+0x4a>
	}
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <vPortExitCritical+0x24>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	607b      	str	r3, [r7, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <vPortExitCritical+0x42>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c
	...

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7fe ffc2 	bl	8003fb8 <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005082:	f7fe fedf 	bl	8003e44 <xTaskIncrementTick>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <xPortSysTickHandler+0x40>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
}
 800509e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <vPortSetupTimerInterrupt+0x38>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vPortSetupTimerInterrupt+0x3c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <vPortSetupTimerInterrupt+0x40>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <vPortSetupTimerInterrupt+0x44>)
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010
 80050e4:	e000e018 	.word	0xe000e018
 80050e8:	20000000 	.word	0x20000000
 80050ec:	10624dd3 	.word	0x10624dd3
 80050f0:	e000e014 	.word	0xe000e014

080050f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005104 <vPortEnableVFP+0x10>
 80050f8:	6801      	ldr	r1, [r0, #0]
 80050fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fe:	6001      	str	r1, [r0, #0]
 8005100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005102:	bf00      	nop
 8005104:	e000ed88 	.word	0xe000ed88

08005108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800510e:	f3ef 8305 	mrs	r3, IPSR
 8005112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d914      	bls.n	8005144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <vPortValidateInterruptPriority+0x70>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005124:	4b15      	ldr	r3, [pc, #84]	; (800517c <vPortValidateInterruptPriority+0x74>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	7afa      	ldrb	r2, [r7, #11]
 800512a:	429a      	cmp	r2, r3
 800512c:	d20a      	bcs.n	8005144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	607b      	str	r3, [r7, #4]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <vPortValidateInterruptPriority+0x78>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <vPortValidateInterruptPriority+0x7c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90a      	bls.n	800516a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	603b      	str	r3, [r7, #0]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <vPortValidateInterruptPriority+0x60>
	}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	e000e3f0 	.word	0xe000e3f0
 800517c:	20000e3c 	.word	0x20000e3c
 8005180:	e000ed0c 	.word	0xe000ed0c
 8005184:	20000e40 	.word	0x20000e40

08005188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005194:	f7fe fd9a 	bl	8003ccc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005198:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <pvPortMalloc+0x180>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a0:	f000 f920 	bl	80053e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051a4:	4b59      	ldr	r3, [pc, #356]	; (800530c <pvPortMalloc+0x184>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 8093 	bne.w	80052d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01d      	beq.n	80051f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051b8:	2208      	movs	r2, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <pvPortMalloc+0x6c>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06e      	beq.n	80052d8 <pvPortMalloc+0x150>
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <pvPortMalloc+0x188>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d869      	bhi.n	80052d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <pvPortMalloc+0x18c>)
 8005206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <pvPortMalloc+0x18c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800520e:	e004      	b.n	800521a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d903      	bls.n	800522c <pvPortMalloc+0xa4>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f1      	bne.n	8005210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <pvPortMalloc+0x180>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	429a      	cmp	r2, r3
 8005234:	d050      	beq.n	80052d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2208      	movs	r2, #8
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	2308      	movs	r3, #8
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d91f      	bls.n	8005298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <pvPortMalloc+0xf8>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	613b      	str	r3, [r7, #16]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005292:	69b8      	ldr	r0, [r7, #24]
 8005294:	f000 f908 	bl	80054a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <pvPortMalloc+0x188>)
 80052a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <pvPortMalloc+0x188>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <pvPortMalloc+0x190>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d203      	bcs.n	80052ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <pvPortMalloc+0x188>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <pvPortMalloc+0x190>)
 80052b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <pvPortMalloc+0x184>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <pvPortMalloc+0x194>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <pvPortMalloc+0x194>)
 80052d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052d8:	f7fe fd06 	bl	8003ce8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <pvPortMalloc+0x174>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <pvPortMalloc+0x172>
	return pvReturn;
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20004a4c 	.word	0x20004a4c
 800530c:	20004a60 	.word	0x20004a60
 8005310:	20004a50 	.word	0x20004a50
 8005314:	20004a44 	.word	0x20004a44
 8005318:	20004a54 	.word	0x20004a54
 800531c:	20004a58 	.word	0x20004a58

08005320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04d      	beq.n	80053ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005332:	2308      	movs	r3, #8
 8005334:	425b      	negs	r3, r3
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <vPortFree+0xb8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <vPortFree+0x44>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <vPortFree+0x62>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60bb      	str	r3, [r7, #8]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <vPortFree+0xb8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01e      	beq.n	80053ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11a      	bne.n	80053ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <vPortFree+0xb8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a8:	f7fe fc90 	bl	8003ccc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <vPortFree+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <vPortFree+0xbc>)
 80053b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f000 f874 	bl	80054a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <vPortFree+0xc0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <vPortFree+0xc0>)
 80053c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053ca:	f7fe fc8d 	bl	8003ce8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20004a60 	.word	0x20004a60
 80053dc:	20004a50 	.word	0x20004a50
 80053e0:	20004a5c 	.word	0x20004a5c

080053e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <prvHeapInit+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3307      	adds	r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <prvHeapInit+0xac>)
 8005414:	4413      	add	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800541c:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <prvHeapInit+0xb0>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <prvHeapInit+0xb0>)
 8005424:	2200      	movs	r2, #0
 8005426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005430:	2208      	movs	r2, #8
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <prvHeapInit+0xb4>)
 8005444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <prvHeapInit+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <prvHeapInit+0xb4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvHeapInit+0xb4>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <prvHeapInit+0xb8>)
 8005472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <prvHeapInit+0xbc>)
 800547a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <prvHeapInit+0xc0>)
 800547e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000e44 	.word	0x20000e44
 8005494:	20004a44 	.word	0x20004a44
 8005498:	20004a4c 	.word	0x20004a4c
 800549c:	20004a54 	.word	0x20004a54
 80054a0:	20004a50 	.word	0x20004a50
 80054a4:	20004a60 	.word	0x20004a60

080054a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <prvInsertBlockIntoFreeList+0xac>)
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e002      	b.n	80054bc <prvInsertBlockIntoFreeList+0x14>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d8f7      	bhi.n	80054b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d108      	bne.n	80054ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	441a      	add	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	441a      	add	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d118      	bne.n	8005530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d00d      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	441a      	add	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e008      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e003      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d002      	beq.n	8005546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20004a44 	.word	0x20004a44
 8005558:	20004a4c 	.word	0x20004a4c

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4d0d      	ldr	r5, [pc, #52]	; (8005594 <__libc_init_array+0x38>)
 8005560:	4c0d      	ldr	r4, [pc, #52]	; (8005598 <__libc_init_array+0x3c>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	2600      	movs	r6, #0
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	4d0b      	ldr	r5, [pc, #44]	; (800559c <__libc_init_array+0x40>)
 800556e:	4c0c      	ldr	r4, [pc, #48]	; (80055a0 <__libc_init_array+0x44>)
 8005570:	f000 f82e 	bl	80055d0 <_init>
 8005574:	1b64      	subs	r4, r4, r5
 8005576:	10a4      	asrs	r4, r4, #2
 8005578:	2600      	movs	r6, #0
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f855 3b04 	ldr.w	r3, [r5], #4
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	f855 3b04 	ldr.w	r3, [r5], #4
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	08005678 	.word	0x08005678
 8005598:	08005678 	.word	0x08005678
 800559c:	08005678 	.word	0x08005678
 80055a0:	0800567c 	.word	0x0800567c

080055a4 <memcpy>:
 80055a4:	440a      	add	r2, r1
 80055a6:	4291      	cmp	r1, r2
 80055a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055ac:	d100      	bne.n	80055b0 <memcpy+0xc>
 80055ae:	4770      	bx	lr
 80055b0:	b510      	push	{r4, lr}
 80055b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ba:	4291      	cmp	r1, r2
 80055bc:	d1f9      	bne.n	80055b2 <memcpy+0xe>
 80055be:	bd10      	pop	{r4, pc}

080055c0 <memset>:
 80055c0:	4402      	add	r2, r0
 80055c2:	4603      	mov	r3, r0
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d100      	bne.n	80055ca <memset+0xa>
 80055c8:	4770      	bx	lr
 80055ca:	f803 1b01 	strb.w	r1, [r3], #1
 80055ce:	e7f9      	b.n	80055c4 <memset+0x4>

080055d0 <_init>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr

080055dc <_fini>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr
