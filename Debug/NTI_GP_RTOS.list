
NTI_GP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009050  08009050  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009058  08009058  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009058  08009058  00019058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800905c  0800905c  0001905c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad8  20000078  080090d4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004b50  080090d4  00024b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af0b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c21  00000000  00000000  0003afaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003ebd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  00040130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185fd  00000000  00000000  00041510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b82  00000000  00000000  00059b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000971e8  00000000  00000000  0007268f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109877  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a6c  00000000  00000000  001098c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e3c 	.word	0x08008e3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08008e3c 	.word	0x08008e3c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <DWT_Delay_Init>:


#include "stm32f4xx_hal.h"
//uint32_t DWT_Delay_Init(void);
__STATIC_INLINE uint32_t DWT_Delay_Init(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d6e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000d9a:	bf00      	nop
    __ASM volatile ("NOP");
 8000d9c:	bf00      	nop
    __ASM volatile ("NOP");
 8000d9e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000da8:	2300      	movs	r3, #0
 8000daa:	e000      	b.n	8000dae <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000dac:	2301      	movs	r3, #1
    }
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000edf0 	.word	0xe000edf0
 8000dbc:	e0001000 	.word	0xe0001000

08000dc0 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <DWT_Delay_us+0x40>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000dce:	f002 fc4f 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <DWT_Delay_us+0x44>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	0c9b      	lsrs	r3, r3, #18
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000de4:	bf00      	nop
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <DWT_Delay_us+0x40>)
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d3f8      	bcc.n	8000de6 <DWT_Delay_us+0x26>
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e0001000 	.word	0xe0001000
 8000e04:	431bde83 	.word	0x431bde83

08000e08 <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b096      	sub	sp, #88	; 0x58
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8000e14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]

    DWT_Delay_Init();
 8000e4a:	f7ff ff89 	bl	8000d60 <DWT_Delay_Init>

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 8000e4e:	79fa      	ldrb	r2, [r7, #7]
 8000e50:	49a2      	ldr	r1, [pc, #648]	; (80010dc <HCSR04_Init+0x2d4>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4aa0      	ldr	r2, [pc, #640]	; (80010e0 <HCSR04_Init+0x2d8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d10e      	bne.n	8000e82 <HCSR04_Init+0x7a>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	4b9e      	ldr	r3, [pc, #632]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a9d      	ldr	r2, [pc, #628]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b9b      	ldr	r3, [pc, #620]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	e066      	b.n	8000f50 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	4995      	ldr	r1, [pc, #596]	; (80010dc <HCSR04_Init+0x2d4>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a95      	ldr	r2, [pc, #596]	; (80010e8 <HCSR04_Init+0x2e0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d10e      	bne.n	8000eb6 <HCSR04_Init+0xae>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	4b91      	ldr	r3, [pc, #580]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a90      	ldr	r2, [pc, #576]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b8e      	ldr	r3, [pc, #568]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	e04c      	b.n	8000f50 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	4988      	ldr	r1, [pc, #544]	; (80010dc <HCSR04_Init+0x2d4>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a89      	ldr	r2, [pc, #548]	; (80010ec <HCSR04_Init+0x2e4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d10e      	bne.n	8000eea <HCSR04_Init+0xe2>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	4b84      	ldr	r3, [pc, #528]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	4a83      	ldr	r2, [pc, #524]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6313      	str	r3, [r2, #48]	; 0x30
 8000edc:	4b81      	ldr	r3, [pc, #516]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	e032      	b.n	8000f50 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	497b      	ldr	r1, [pc, #492]	; (80010dc <HCSR04_Init+0x2d4>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7d      	ldr	r2, [pc, #500]	; (80010f0 <HCSR04_Init+0x2e8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d10e      	bne.n	8000f1e <HCSR04_Init+0x116>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b77      	ldr	r3, [pc, #476]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a76      	ldr	r2, [pc, #472]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f10:	4b74      	ldr	r3, [pc, #464]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	e018      	b.n	8000f50 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	496e      	ldr	r1, [pc, #440]	; (80010dc <HCSR04_Init+0x2d4>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a71      	ldr	r2, [pc, #452]	; (80010f4 <HCSR04_Init+0x2ec>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d10d      	bne.n	8000f50 <HCSR04_Init+0x148>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	4b6a      	ldr	r3, [pc, #424]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a69      	ldr	r2, [pc, #420]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b67      	ldr	r3, [pc, #412]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    }
    HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, GPIO_PIN_RESET);
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	4962      	ldr	r1, [pc, #392]	; (80010dc <HCSR04_Init+0x2d4>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	79fa      	ldrb	r2, [r7, #7]
 8000f62:	495e      	ldr	r1, [pc, #376]	; (80010dc <HCSR04_Init+0x2d4>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3304      	adds	r3, #4
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	4619      	mov	r1, r3
 8000f76:	f001 ff3d 	bl	8002df4 <HAL_GPIO_WritePin>
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 8000f7a:	79fa      	ldrb	r2, [r7, #7]
 8000f7c:	4957      	ldr	r1, [pc, #348]	; (80010dc <HCSR04_Init+0x2d4>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	3304      	adds	r3, #4
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8000f9a:	79fa      	ldrb	r2, [r7, #7]
 8000f9c:	494f      	ldr	r1, [pc, #316]	; (80010dc <HCSR04_Init+0x2d4>)
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fd9b 	bl	8002aec <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	4948      	ldr	r1, [pc, #288]	; (80010dc <HCSR04_Init+0x2d4>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	79fa      	ldrb	r2, [r7, #7]
 8000fca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fcc:	484a      	ldr	r0, [pc, #296]	; (80010f8 <HCSR04_Init+0x2f0>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4403      	add	r3, r0
 8000fd8:	3304      	adds	r3, #4
 8000fda:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 8000fdc:	79fa      	ldrb	r2, [r7, #7]
 8000fde:	493f      	ldr	r1, [pc, #252]	; (80010dc <HCSR04_Init+0x2d4>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3308      	adds	r3, #8
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ff2:	4841      	ldr	r0, [pc, #260]	; (80010f8 <HCSR04_Init+0x2f0>)
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4403      	add	r3, r0
 8000ffe:	3308      	adds	r3, #8
 8001000:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8001002:	79fa      	ldrb	r2, [r7, #7]
 8001004:	493c      	ldr	r1, [pc, #240]	; (80010f8 <HCSR04_Init+0x2f0>)
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3302      	adds	r3, #2
 8001012:	2200      	movs	r2, #0
 8001014:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	4937      	ldr	r1, [pc, #220]	; (80010f8 <HCSR04_Init+0x2f0>)
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	331c      	adds	r3, #28
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	4932      	ldr	r1, [pc, #200]	; (80010f8 <HCSR04_Init+0x2f0>)
 800102e:	4613      	mov	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3308      	adds	r3, #8
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <HCSR04_Init+0x24e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8001040:	79fa      	ldrb	r2, [r7, #7]
 8001042:	492d      	ldr	r1, [pc, #180]	; (80010f8 <HCSR04_Init+0x2f0>)
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	3308      	adds	r3, #8
 8001050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001054:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 8001056:	79fa      	ldrb	r2, [r7, #7]
 8001058:	4920      	ldr	r1, [pc, #128]	; (80010dc <HCSR04_Init+0x2d4>)
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	330c      	adds	r3, #12
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10a      	bne.n	8001082 <HCSR04_Init+0x27a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	4922      	ldr	r1, [pc, #136]	; (80010f8 <HCSR04_Init+0x2f0>)
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	3320      	adds	r3, #32
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e051      	b.n	8001126 <HCSR04_Init+0x31e>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	4915      	ldr	r1, [pc, #84]	; (80010dc <HCSR04_Init+0x2d4>)
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	330c      	adds	r3, #12
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b04      	cmp	r3, #4
 8001096:	d10a      	bne.n	80010ae <HCSR04_Init+0x2a6>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8001098:	79fa      	ldrb	r2, [r7, #7]
 800109a:	4917      	ldr	r1, [pc, #92]	; (80010f8 <HCSR04_Init+0x2f0>)
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	3320      	adds	r3, #32
 80010a8:	2202      	movs	r2, #2
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e03b      	b.n	8001126 <HCSR04_Init+0x31e>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	490a      	ldr	r1, [pc, #40]	; (80010dc <HCSR04_Init+0x2d4>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	330c      	adds	r3, #12
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d11b      	bne.n	80010fc <HCSR04_Init+0x2f4>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	490c      	ldr	r1, [pc, #48]	; (80010f8 <HCSR04_Init+0x2f0>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3320      	adds	r3, #32
 80010d4:	2204      	movs	r2, #4
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e025      	b.n	8001126 <HCSR04_Init+0x31e>
 80010da:	bf00      	nop
 80010dc:	08008e9c 	.word	0x08008e9c
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	20000094 	.word	0x20000094
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	493f      	ldr	r1, [pc, #252]	; (80011fc <HCSR04_Init+0x3f4>)
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	330c      	adds	r3, #12
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b0c      	cmp	r3, #12
 8001110:	d109      	bne.n	8001126 <HCSR04_Init+0x31e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8001112:	79fa      	ldrb	r2, [r7, #7]
 8001114:	493a      	ldr	r1, [pc, #232]	; (8001200 <HCSR04_Init+0x3f8>)
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3320      	adds	r3, #32
 8001122:	2208      	movs	r2, #8
 8001124:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	4934      	ldr	r1, [pc, #208]	; (80011fc <HCSR04_Init+0x3f4>)
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	3308      	adds	r3, #8
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	4930      	ldr	r1, [pc, #192]	; (8001200 <HCSR04_Init+0x3f8>)
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3304      	adds	r3, #4
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	4929      	ldr	r1, [pc, #164]	; (8001200 <HCSR04_Init+0x3f8>)
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3308      	adds	r3, #8
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
	//TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f002 fade 	bl	800373c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8001186:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800118a:	4619      	mov	r1, r3
 800118c:	6838      	ldr	r0, [r7, #0]
 800118e:	f003 f8c5 	bl	800431c <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 8001192:	6838      	ldr	r0, [r7, #0]
 8001194:	f002 fce8 	bl	8003b68 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80011a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a4:	4619      	mov	r1, r3
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f003 fdcc 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b0:	2301      	movs	r3, #1
 80011b2:	623b      	str	r3, [r7, #32]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigIC.ICFilter = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	490f      	ldr	r1, [pc, #60]	; (80011fc <HCSR04_Init+0x3f4>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	330c      	adds	r3, #12
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f002 ff43 	bl	8004060 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	//HAL_TIM_Base_Start_IT(TMR_Handle);
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <HCSR04_Init+0x3f4>)
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	330c      	adds	r3, #12
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f002 fd14 	bl	8003c1c <HAL_TIM_IC_Start_IT>
}
 80011f4:	bf00      	nop
 80011f6:	3758      	adds	r7, #88	; 0x58
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08008e9c 	.word	0x08008e9c
 8001200:	20000094 	.word	0x20000094

08001204 <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e023      	b.n	800125e <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6819      	ldr	r1, [r3, #0]
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <HCSR04_TMR_OVF_ISR+0x70>)
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4403      	add	r3, r0
 8001228:	3308      	adds	r3, #8
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4299      	cmp	r1, r3
 800122e:	d113      	bne.n	8001258 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	4911      	ldr	r1, [pc, #68]	; (8001278 <HCSR04_TMR_OVF_ISR+0x74>)
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	3302      	adds	r3, #2
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	b298      	uxth	r0, r3
 8001246:	490c      	ldr	r1, [pc, #48]	; (8001278 <HCSR04_TMR_OVF_ISR+0x74>)
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	3302      	adds	r3, #2
 8001254:	4602      	mov	r2, r0
 8001256:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3301      	adds	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0d8      	beq.n	8001216 <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	08008e9c 	.word	0x08008e9c
 8001278:	20000094 	.word	0x20000094
 800127c:	00000000 	.word	0x00000000

08001280 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e230      	b.n	80016f8 <HCSR04_TMR_IC_ISR+0x478>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance)/* && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH)*/)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6819      	ldr	r1, [r3, #0]
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	489c      	ldr	r0, [pc, #624]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4403      	add	r3, r0
 80012a8:	3308      	adds	r3, #8
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4299      	cmp	r1, r3
 80012ae:	f040 8220 	bne.w	80016f2 <HCSR04_TMR_IC_ISR+0x472>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	4997      	ldr	r1, [pc, #604]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 80b3 	bne.w	800142e <HCSR04_TMR_IC_ISR+0x1ae>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	4991      	ldr	r1, [pc, #580]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	330c      	adds	r3, #12
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	7bfc      	ldrb	r4, [r7, #15]
 80012dc:	4619      	mov	r1, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f003 f8e4 	bl	80044ac <HAL_TIM_ReadCapturedValue>
 80012e4:	4602      	mov	r2, r0
 80012e6:	498b      	ldr	r1, [pc, #556]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80012e8:	4623      	mov	r3, r4
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4423      	add	r3, r4
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	330c      	adds	r3, #12
 80012f4:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	4986      	ldr	r1, [pc, #536]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
				//gs_HCSR04_info[i].T1 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	4981      	ldr	r1, [pc, #516]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	330c      	adds	r3, #12
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d108      	bne.n	8001330 <HCSR04_TMR_IC_ISR+0xb0>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 020a 	bic.w	r2, r2, #10
 800132c:	621a      	str	r2, [r3, #32]
 800132e:	e02f      	b.n	8001390 <HCSR04_TMR_IC_ISR+0x110>
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	4977      	ldr	r1, [pc, #476]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	330c      	adds	r3, #12
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b04      	cmp	r3, #4
 8001344:	d108      	bne.n	8001358 <HCSR04_TMR_IC_ISR+0xd8>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001354:	6213      	str	r3, [r2, #32]
 8001356:	e01b      	b.n	8001390 <HCSR04_TMR_IC_ISR+0x110>
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	496d      	ldr	r1, [pc, #436]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	330c      	adds	r3, #12
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b08      	cmp	r3, #8
 800136c:	d108      	bne.n	8001380 <HCSR04_TMR_IC_ISR+0x100>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	e007      	b.n	8001390 <HCSR04_TMR_IC_ISR+0x110>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	495f      	ldr	r1, [pc, #380]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	330c      	adds	r3, #12
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d108      	bne.n	80013b8 <HCSR04_TMR_IC_ISR+0x138>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a1a      	ldr	r2, [r3, #32]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0202 	orr.w	r2, r2, #2
 80013b4:	621a      	str	r2, [r3, #32]
 80013b6:	e02f      	b.n	8001418 <HCSR04_TMR_IC_ISR+0x198>
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	4955      	ldr	r1, [pc, #340]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	330c      	adds	r3, #12
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d108      	bne.n	80013e0 <HCSR04_TMR_IC_ISR+0x160>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	6213      	str	r3, [r2, #32]
 80013de:	e01b      	b.n	8001418 <HCSR04_TMR_IC_ISR+0x198>
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	494b      	ldr	r1, [pc, #300]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	330c      	adds	r3, #12
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d108      	bne.n	8001408 <HCSR04_TMR_IC_ISR+0x188>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001404:	6213      	str	r3, [r2, #32]
 8001406:	e007      	b.n	8001418 <HCSR04_TMR_IC_ISR+0x198>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001416:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	493e      	ldr	r1, [pc, #248]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3302      	adds	r3, #2
 8001428:	2200      	movs	r2, #0
 800142a:	801a      	strh	r2, [r3, #0]
 800142c:	e161      	b.n	80016f2 <HCSR04_TMR_IC_ISR+0x472>
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	4938      	ldr	r1, [pc, #224]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	f040 8157 	bne.w	80016f2 <HCSR04_TMR_IC_ISR+0x472>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	4932      	ldr	r1, [pc, #200]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	3308      	adds	r3, #8
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	492c      	ldr	r1, [pc, #176]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	3308      	adds	r3, #8
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001470:	4828      	ldr	r0, [pc, #160]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4403      	add	r3, r0
 800147c:	3308      	adds	r3, #8
 800147e:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	4923      	ldr	r1, [pc, #140]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	330c      	adds	r3, #12
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	7bfc      	ldrb	r4, [r7, #15]
 8001494:	4619      	mov	r1, r3
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f003 f808 	bl	80044ac <HAL_TIM_ReadCapturedValue>
 800149c:	4602      	mov	r2, r0
 800149e:	491d      	ldr	r1, [pc, #116]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80014a0:	4623      	mov	r3, r4
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4423      	add	r3, r4
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3310      	adds	r3, #16
 80014ac:	601a      	str	r2, [r3, #0]
				//gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
				//gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
				if(gs_HCSR04_info[i].T2 > gs_HCSR04_info[i].T1)
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	4918      	ldr	r1, [pc, #96]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	3310      	adds	r3, #16
 80014be:	6819      	ldr	r1, [r3, #0]
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4403      	add	r3, r0
 80014ce:	330c      	adds	r3, #12
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4299      	cmp	r1, r3
 80014d4:	d920      	bls.n	8001518 <HCSR04_TMR_IC_ISR+0x298>
				{
					gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	490e      	ldr	r1, [pc, #56]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3310      	adds	r3, #16
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4403      	add	r3, r0
 80014f6:	330c      	adds	r3, #12
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	1ac9      	subs	r1, r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4403      	add	r3, r0
 800150a:	3314      	adds	r3, #20
 800150c:	6019      	str	r1, [r3, #0]
 800150e:	e022      	b.n	8001556 <HCSR04_TMR_IC_ISR+0x2d6>
 8001510:	08008e9c 	.word	0x08008e9c
 8001514:	20000094 	.word	0x20000094
				}
				else
				{
					gs_HCSR04_info[i].DIFF = (0xffff-gs_HCSR04_info[i].T1) + gs_HCSR04_info[i].T2;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	497f      	ldr	r1, [pc, #508]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3310      	adds	r3, #16
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	487a      	ldr	r0, [pc, #488]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4403      	add	r3, r0
 8001538:	330c      	adds	r3, #12
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	1acb      	subs	r3, r1, r3
 800153e:	7bf9      	ldrb	r1, [r7, #15]
 8001540:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
 8001544:	32ff      	adds	r2, #255	; 0xff
 8001546:	4874      	ldr	r0, [pc, #464]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 8001548:	460b      	mov	r3, r1
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4403      	add	r3, r0
 8001552:	3314      	adds	r3, #20
 8001554:	601a      	str	r2, [r3, #0]
				}
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	496f      	ldr	r1, [pc, #444]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	3314      	adds	r3, #20
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff7b 	bl	8000464 <__aeabi_ui2d>
 800156e:	a368      	add	r3, pc, #416	; (adr r3, 8001710 <HCSR04_TMR_IC_ISR+0x490>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7fe fff0 	bl	8000558 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	4966      	ldr	r1, [pc, #408]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3310      	adds	r3, #16
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3301      	adds	r3, #1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff62 	bl	8000464 <__aeabi_ui2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7ff f900 	bl	80007ac <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	7bfc      	ldrb	r4, [r7, #15]
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fa01 	bl	80009bc <__aeabi_d2f>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4956      	ldr	r1, [pc, #344]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 80015be:	4623      	mov	r3, r4
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4423      	add	r3, r4
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	3318      	adds	r3, #24
 80015ca:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	4952      	ldr	r1, [pc, #328]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
				gs_HCSR04_info[i].TMR_OVC = 0;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	494d      	ldr	r1, [pc, #308]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	3302      	adds	r3, #2
 80015ee:	2200      	movs	r2, #0
 80015f0:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	4949      	ldr	r1, [pc, #292]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	330c      	adds	r3, #12
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <HCSR04_TMR_IC_ISR+0x39a>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6a1a      	ldr	r2, [r3, #32]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 020a 	bic.w	r2, r2, #10
 8001616:	621a      	str	r2, [r3, #32]
 8001618:	e02f      	b.n	800167a <HCSR04_TMR_IC_ISR+0x3fa>
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	493f      	ldr	r1, [pc, #252]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	330c      	adds	r3, #12
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b04      	cmp	r3, #4
 800162e:	d108      	bne.n	8001642 <HCSR04_TMR_IC_ISR+0x3c2>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e01b      	b.n	800167a <HCSR04_TMR_IC_ISR+0x3fa>
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	4935      	ldr	r1, [pc, #212]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	330c      	adds	r3, #12
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b08      	cmp	r3, #8
 8001656:	d108      	bne.n	800166a <HCSR04_TMR_IC_ISR+0x3ea>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	e007      	b.n	800167a <HCSR04_TMR_IC_ISR+0x3fa>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	4927      	ldr	r1, [pc, #156]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	330c      	adds	r3, #12
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <HCSR04_TMR_IC_ISR+0x41e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a12      	ldr	r2, [r2, #32]
 800169a:	621a      	str	r2, [r3, #32]
 800169c:	e029      	b.n	80016f2 <HCSR04_TMR_IC_ISR+0x472>
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	491e      	ldr	r1, [pc, #120]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	330c      	adds	r3, #12
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d106      	bne.n	80016c2 <HCSR04_TMR_IC_ISR+0x442>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e017      	b.n	80016f2 <HCSR04_TMR_IC_ISR+0x472>
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	4915      	ldr	r1, [pc, #84]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	330c      	adds	r3, #12
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d106      	bne.n	80016e6 <HCSR04_TMR_IC_ISR+0x466>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	e005      	b.n	80016f2 <HCSR04_TMR_IC_ISR+0x472>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	3301      	adds	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f43f adcb 	beq.w	8001296 <HCSR04_TMR_IC_ISR+0x16>
				//HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
				//HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
			}
		}
	}
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bdb0      	pop	{r4, r5, r7, pc}
 800170a:	bf00      	nop
 800170c:	f3af 8000 	nop.w
 8001710:	b020c49c 	.word	0xb020c49c
 8001714:	3f916872 	.word	0x3f916872
 8001718:	20000094 	.word	0x20000094
 800171c:	08008e9c 	.word	0x08008e9c

08001720 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 800172a:	79fa      	ldrb	r2, [r7, #7]
 800172c:	4908      	ldr	r1, [pc, #32]	; (8001750 <HCSR04_Read+0x30>)
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3318      	adds	r3, #24
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	ee07 3a90 	vmov	s15, r3
}
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000094 	.word	0x20000094

08001754 <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	//__HAL_TIM_SET_COUNTER(gs_HCSR04_info[au8_HCSR04_Instance].HTIM, 0);
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	4917      	ldr	r1, [pc, #92]	; (80017c0 <HCSR04_Trigger+0x6c>)
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	79fa      	ldrb	r2, [r7, #7]
 8001770:	4913      	ldr	r1, [pc, #76]	; (80017c0 <HCSR04_Trigger+0x6c>)
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3304      	adds	r3, #4
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	4619      	mov	r1, r3
 8001784:	f001 fb36 	bl	8002df4 <HAL_GPIO_WritePin>
	//HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
	//HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
	//DWT_Delay_us(2);
	DWT_Delay_us(10);
 8001788:	200a      	movs	r0, #10
 800178a:	f7ff fb19 	bl	8000dc0 <DWT_Delay_us>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	490b      	ldr	r1, [pc, #44]	; (80017c0 <HCSR04_Trigger+0x6c>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	79fa      	ldrb	r2, [r7, #7]
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <HCSR04_Trigger+0x6c>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	3304      	adds	r3, #4
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	f001 fb1e 	bl	8002df4 <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	08008e9c 	.word	0x08008e9c

080017c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of motorQueue */
  motorQueueHandle = osMessageQueueNew (16, sizeof(motorControl_t), &motorQueue_attributes);
 80017c8:	4a10      	ldr	r2, [pc, #64]	; (800180c <MX_FREERTOS_Init+0x48>)
 80017ca:	2106      	movs	r1, #6
 80017cc:	2010      	movs	r0, #16
 80017ce:	f004 fc9a 	bl	8006106 <osMessageQueueNew>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <MX_FREERTOS_Init+0x4c>)
 80017d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartmotorTask, NULL, &motorTask_attributes);
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <MX_FREERTOS_Init+0x50>)
 80017da:	2100      	movs	r1, #0
 80017dc:	480e      	ldr	r0, [pc, #56]	; (8001818 <MX_FREERTOS_Init+0x54>)
 80017de:	f004 fbe5 	bl	8005fac <osThreadNew>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <MX_FREERTOS_Init+0x58>)
 80017e6:	6013      	str	r3, [r2, #0]

  /* creation of ACCTask */
  ACCTaskHandle = osThreadNew(StartACCTask, NULL, &ACCTask_attributes);
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <MX_FREERTOS_Init+0x5c>)
 80017ea:	2100      	movs	r1, #0
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_FREERTOS_Init+0x60>)
 80017ee:	f004 fbdd 	bl	8005fac <osThreadNew>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <MX_FREERTOS_Init+0x64>)
 80017f6:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_TASK */
  UART_RX_TASKHandle = osThreadNew(UART_RX, NULL, &UART_RX_TASK_attributes);
 80017f8:	4a0c      	ldr	r2, [pc, #48]	; (800182c <MX_FREERTOS_Init+0x68>)
 80017fa:	2100      	movs	r1, #0
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <MX_FREERTOS_Init+0x6c>)
 80017fe:	f004 fbd5 	bl	8005fac <osThreadNew>
 8001802:	4603      	mov	r3, r0
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <MX_FREERTOS_Init+0x70>)
 8001806:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	08008f1c 	.word	0x08008f1c
 8001810:	200000d0 	.word	0x200000d0
 8001814:	08008eb0 	.word	0x08008eb0
 8001818:	08001839 	.word	0x08001839
 800181c:	200000c4 	.word	0x200000c4
 8001820:	08008ed4 	.word	0x08008ed4
 8001824:	080019bd 	.word	0x080019bd
 8001828:	200000c8 	.word	0x200000c8
 800182c:	08008ef8 	.word	0x08008ef8
 8001830:	08001da5 	.word	0x08001da5
 8001834:	200000cc 	.word	0x200000cc

08001838 <StartmotorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartmotorTask */
void StartmotorTask(void *argument)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  motorControl_t motortask;
	  uint8_t motortask_prio;
	  if(osMessageQueueGet(motorQueueHandle, &motortask, &motortask_prio, 10) == osOK)
 8001840:	4b5b      	ldr	r3, [pc, #364]	; (80019b0 <StartmotorTask+0x178>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	f107 020f 	add.w	r2, r7, #15
 8001848:	f107 0110 	add.w	r1, r7, #16
 800184c:	230a      	movs	r3, #10
 800184e:	f004 fd2d 	bl	80062ac <osMessageQueueGet>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	f040 80a2 	bne.w	800199e <StartmotorTask+0x166>
	  {
		  if(motortask.motors[0].speed > 0 && motortask.motors[0].speed < 40)
 800185a:	7c7b      	ldrb	r3, [r7, #17]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00d      	beq.n	800187c <StartmotorTask+0x44>
 8001860:	7c7b      	ldrb	r3, [r7, #17]
 8001862:	2b27      	cmp	r3, #39	; 0x27
 8001864:	d80a      	bhi.n	800187c <StartmotorTask+0x44>
		  {
			  Motor1_SetSpeed(70);
 8001866:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80019a8 <StartmotorTask+0x170>
 800186a:	f000 fe21 	bl	80024b0 <Motor1_SetSpeed>
			  Motor2_SetSpeed(70);
 800186e:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 80019a8 <StartmotorTask+0x170>
 8001872:	f000 fe6d 	bl	8002550 <Motor2_SetSpeed>
			  HAL_Delay(5);
 8001876:	2005      	movs	r0, #5
 8001878:	f000 ffa0 	bl	80027bc <HAL_Delay>
		  }
		  for(uint8_t i = 0; i < 2; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001882:	e087      	b.n	8001994 <StartmotorTask+0x15c>
		  {
			  uint16_t INx1_pin, INx2_pin;
			  GPIO_TypeDef *INx1_port, *INx2_port;
			  if(motortask.motors[i].modify == 0) continue;
 8001884:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	3328      	adds	r3, #40	; 0x28
 8001890:	443b      	add	r3, r7
 8001892:	3b18      	subs	r3, #24
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d076      	beq.n	8001988 <StartmotorTask+0x150>
			  if(i == 0){
 800189a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d11a      	bne.n	80018d8 <StartmotorTask+0xa0>
				  Motor1_SetSpeed(motortask.motors[i].speed);
 80018a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	3328      	adds	r3, #40	; 0x28
 80018ae:	443b      	add	r3, r7
 80018b0:	3b17      	subs	r3, #23
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fdd5 	bl	8000464 <__aeabi_ui2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	ec43 2b10 	vmov	d0, r2, r3
 80018c2:	f000 fdf5 	bl	80024b0 <Motor1_SetSpeed>
				  INx1_port = MOTOR_IN1_GPIO_Port;
 80018c6:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <StartmotorTask+0x17c>)
 80018c8:	61fb      	str	r3, [r7, #28]
				  INx2_port = MOTOR_IN2_GPIO_Port;
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <StartmotorTask+0x17c>)
 80018cc:	61bb      	str	r3, [r7, #24]
				  INx1_pin = MOTOR_IN1_Pin;
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	84bb      	strh	r3, [r7, #36]	; 0x24
				  INx2_pin = MOTOR_IN2_Pin;
 80018d2:	2340      	movs	r3, #64	; 0x40
 80018d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80018d6:	e01e      	b.n	8001916 <StartmotorTask+0xde>
			  }
			  else if(i == 1){
 80018d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d11a      	bne.n	8001916 <StartmotorTask+0xde>
				  Motor2_SetSpeed(motortask.motors[i].speed);
 80018e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	3328      	adds	r3, #40	; 0x28
 80018ec:	443b      	add	r3, r7
 80018ee:	3b17      	subs	r3, #23
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fdb6 	bl	8000464 <__aeabi_ui2d>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	ec43 2b10 	vmov	d0, r2, r3
 8001900:	f000 fe26 	bl	8002550 <Motor2_SetSpeed>
				  INx1_port = MOTOR_IN3_GPIO_Port;
 8001904:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <StartmotorTask+0x17c>)
 8001906:	61fb      	str	r3, [r7, #28]
				  INx2_port = MOTOR_IN4_GPIO_Port;
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <StartmotorTask+0x180>)
 800190a:	61bb      	str	r3, [r7, #24]
				  INx1_pin = MOTOR_IN3_Pin;
 800190c:	2320      	movs	r3, #32
 800190e:	84bb      	strh	r3, [r7, #36]	; 0x24
				  INx2_pin = MOTOR_IN4_Pin;
 8001910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001914:	847b      	strh	r3, [r7, #34]	; 0x22
			  }
		  switch(motortask.motors[i].control)
 8001916:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	3328      	adds	r3, #40	; 0x28
 8001922:	443b      	add	r3, r7
 8001924:	3b16      	subs	r3, #22
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b04      	cmp	r3, #4
 800192a:	d020      	beq.n	800196e <StartmotorTask+0x136>
 800192c:	2b04      	cmp	r3, #4
 800192e:	dc2c      	bgt.n	800198a <StartmotorTask+0x152>
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <StartmotorTask+0x102>
 8001934:	2b02      	cmp	r3, #2
 8001936:	d00d      	beq.n	8001954 <StartmotorTask+0x11c>
 8001938:	e027      	b.n	800198a <StartmotorTask+0x152>
		  {
		  case MOTOR_OFF:
			  HAL_GPIO_WritePin(INx1_port, INx1_pin, 0);
 800193a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800193c:	2200      	movs	r2, #0
 800193e:	4619      	mov	r1, r3
 8001940:	69f8      	ldr	r0, [r7, #28]
 8001942:	f001 fa57 	bl	8002df4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(INx2_port, INx2_pin, 0);
 8001946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001948:	2200      	movs	r2, #0
 800194a:	4619      	mov	r1, r3
 800194c:	69b8      	ldr	r0, [r7, #24]
 800194e:	f001 fa51 	bl	8002df4 <HAL_GPIO_WritePin>
			  break;
 8001952:	e01a      	b.n	800198a <StartmotorTask+0x152>
		  case MOTOR_FWD:
			  HAL_GPIO_WritePin(INx1_port, INx1_pin, 1);
 8001954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001956:	2201      	movs	r2, #1
 8001958:	4619      	mov	r1, r3
 800195a:	69f8      	ldr	r0, [r7, #28]
 800195c:	f001 fa4a 	bl	8002df4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(INx2_port, INx2_pin, 0);
 8001960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001962:	2200      	movs	r2, #0
 8001964:	4619      	mov	r1, r3
 8001966:	69b8      	ldr	r0, [r7, #24]
 8001968:	f001 fa44 	bl	8002df4 <HAL_GPIO_WritePin>
			  break;
 800196c:	e00d      	b.n	800198a <StartmotorTask+0x152>
		  case MOTOR_REV:
			  HAL_GPIO_WritePin(INx1_port, INx1_pin, 0);
 800196e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	69f8      	ldr	r0, [r7, #28]
 8001976:	f001 fa3d 	bl	8002df4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(INx2_port, INx2_pin, 1);
 800197a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800197c:	2201      	movs	r2, #1
 800197e:	4619      	mov	r1, r3
 8001980:	69b8      	ldr	r0, [r7, #24]
 8001982:	f001 fa37 	bl	8002df4 <HAL_GPIO_WritePin>
			  break;
 8001986:	e000      	b.n	800198a <StartmotorTask+0x152>
			  if(motortask.motors[i].modify == 0) continue;
 8001988:	bf00      	nop
		  for(uint8_t i = 0; i < 2; i++)
 800198a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800198e:	3301      	adds	r3, #1
 8001990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001998:	2b01      	cmp	r3, #1
 800199a:	f67f af73 	bls.w	8001884 <StartmotorTask+0x4c>
		  }
		  }
	  }
    osDelay(10);
 800199e:	200a      	movs	r0, #10
 80019a0:	f004 fb96 	bl	80060d0 <osDelay>
  {
 80019a4:	e74c      	b.n	8001840 <StartmotorTask+0x8>
 80019a6:	bf00      	nop
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40518000 	.word	0x40518000
 80019b0:	200000d0 	.word	0x200000d0
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020000 	.word	0x40020000

080019bc <StartACCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartACCTask */
void StartACCTask(void *argument)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	; 0x40
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	static uint8_t TRIG_Ticks = 0;
	static double prev_distance;
  /* Infinite loop */
  for(;;)
  {
	  Distance = HCSR04_Read(HCSR04_SENSOR1);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff feab 	bl	8001720 <HCSR04_Read>
 80019ca:	eef0 7a40 	vmov.f32	s15, s0
 80019ce:	4bce      	ldr	r3, [pc, #824]	; (8001d08 <StartACCTask+0x34c>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]
	  TRIG_Ticks++;
 80019d4:	4bcd      	ldr	r3, [pc, #820]	; (8001d0c <StartACCTask+0x350>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4bcb      	ldr	r3, [pc, #812]	; (8001d0c <StartACCTask+0x350>)
 80019de:	701a      	strb	r2, [r3, #0]
	  if(TRIG_Ticks >= 5)
 80019e0:	4bca      	ldr	r3, [pc, #808]	; (8001d0c <StartACCTask+0x350>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d905      	bls.n	80019f4 <StartACCTask+0x38>
	  {
		  HCSR04_Trigger(HCSR04_SENSOR1);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff feb3 	bl	8001754 <HCSR04_Trigger>
		  TRIG_Ticks = 0;
 80019ee:	4bc7      	ldr	r3, [pc, #796]	; (8001d0c <StartACCTask+0x350>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
		 break;
	 }
	 }
#endif
#if 1
	  if(Distance > DISTANCE_1)
 80019f4:	4bc4      	ldr	r3, [pc, #784]	; (8001d08 <StartACCTask+0x34c>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8001d10 <StartACCTask+0x354>
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	dd38      	ble.n	8001a7a <StartACCTask+0xbe>
	  {
		  motorControl_t payload = {0};
 8001a08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a18:	e022      	b.n	8001a60 <StartACCTask+0xa4>
		  {
			  payload.motors[i].modify = 1;
 8001a1a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	3340      	adds	r3, #64	; 0x40
 8001a26:	443b      	add	r3, r7
 8001a28:	3b0c      	subs	r3, #12
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = SPEED_1;
 8001a2e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	3340      	adds	r3, #64	; 0x40
 8001a3a:	443b      	add	r3, r7
 8001a3c:	3b0b      	subs	r3, #11
 8001a3e:	2264      	movs	r2, #100	; 0x64
 8001a40:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_FWD;
 8001a42:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3340      	adds	r3, #64	; 0x40
 8001a4e:	443b      	add	r3, r7
 8001a50:	3b0a      	subs	r3, #10
 8001a52:	2202      	movs	r2, #2
 8001a54:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001a56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d9d8      	bls.n	8001a1a <StartACCTask+0x5e>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001a68:	4baa      	ldr	r3, [pc, #680]	; (8001d14 <StartACCTask+0x358>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001a70:	2301      	movs	r3, #1
 8001a72:	2200      	movs	r2, #0
 8001a74:	f004 fbba 	bl	80061ec <osMessageQueuePut>
 8001a78:	e17f      	b.n	8001d7a <StartACCTask+0x3be>
	  }
	  else if(Distance < DISTANCE_1 && Distance > DISTANCE_2)
 8001a7a:	4ba3      	ldr	r3, [pc, #652]	; (8001d08 <StartACCTask+0x34c>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001d10 <StartACCTask+0x354>
 8001a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8c:	d542      	bpl.n	8001b14 <StartACCTask+0x158>
 8001a8e:	4b9e      	ldr	r3, [pc, #632]	; (8001d08 <StartACCTask+0x34c>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001d18 <StartACCTask+0x35c>
 8001a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	dd38      	ble.n	8001b14 <StartACCTask+0x158>
	  {
		  motorControl_t payload = {0};
 8001aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ab2:	e022      	b.n	8001afa <StartACCTask+0x13e>
		  {
			  payload.motors[i].modify = 1;
 8001ab4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	3340      	adds	r3, #64	; 0x40
 8001ac0:	443b      	add	r3, r7
 8001ac2:	3b14      	subs	r3, #20
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = SPEED_2;
 8001ac8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3340      	adds	r3, #64	; 0x40
 8001ad4:	443b      	add	r3, r7
 8001ad6:	3b13      	subs	r3, #19
 8001ad8:	2250      	movs	r2, #80	; 0x50
 8001ada:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_FWD;
 8001adc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3340      	adds	r3, #64	; 0x40
 8001ae8:	443b      	add	r3, r7
 8001aea:	3b12      	subs	r3, #18
 8001aec:	2202      	movs	r2, #2
 8001aee:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001af0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001af4:	3301      	adds	r3, #1
 8001af6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001afa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d9d8      	bls.n	8001ab4 <StartACCTask+0xf8>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001b02:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <StartACCTask+0x358>)
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f004 fb6d 	bl	80061ec <osMessageQueuePut>
	  {
 8001b12:	e132      	b.n	8001d7a <StartACCTask+0x3be>
	  }
	  else if(Distance < DISTANCE_2 && Distance > DISTANCE_3)
 8001b14:	4b7c      	ldr	r3, [pc, #496]	; (8001d08 <StartACCTask+0x34c>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001d18 <StartACCTask+0x35c>
 8001b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	d542      	bpl.n	8001bae <StartACCTask+0x1f2>
 8001b28:	4b77      	ldr	r3, [pc, #476]	; (8001d08 <StartACCTask+0x34c>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	dd38      	ble.n	8001bae <StartACCTask+0x1f2>
	  {
		  motorControl_t payload = {0};
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001b4c:	e022      	b.n	8001b94 <StartACCTask+0x1d8>
		  {
			  payload.motors[i].modify = 1;
 8001b4e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	3340      	adds	r3, #64	; 0x40
 8001b5a:	443b      	add	r3, r7
 8001b5c:	3b1c      	subs	r3, #28
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = SPEED_3;
 8001b62:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3340      	adds	r3, #64	; 0x40
 8001b6e:	443b      	add	r3, r7
 8001b70:	3b1b      	subs	r3, #27
 8001b72:	223c      	movs	r2, #60	; 0x3c
 8001b74:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_FWD;
 8001b76:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	3340      	adds	r3, #64	; 0x40
 8001b82:	443b      	add	r3, r7
 8001b84:	3b1a      	subs	r3, #26
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001b8a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b8e:	3301      	adds	r3, #1
 8001b90:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001b94:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d9d8      	bls.n	8001b4e <StartACCTask+0x192>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001b9c:	4b5d      	ldr	r3, [pc, #372]	; (8001d14 <StartACCTask+0x358>)
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f004 fb20 	bl	80061ec <osMessageQueuePut>
	  {
 8001bac:	e0e5      	b.n	8001d7a <StartACCTask+0x3be>
	  }
	  else if(Distance < DISTANCE_3 && Distance > DISTANCE_4)
 8001bae:	4b56      	ldr	r3, [pc, #344]	; (8001d08 <StartACCTask+0x34c>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d542      	bpl.n	8001c48 <StartACCTask+0x28c>
 8001bc2:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <StartACCTask+0x34c>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	dd38      	ble.n	8001c48 <StartACCTask+0x28c>
	  {
		  motorControl_t payload = {0};
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001be6:	e022      	b.n	8001c2e <StartACCTask+0x272>
		  {
			  payload.motors[i].modify = 1;
 8001be8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3340      	adds	r3, #64	; 0x40
 8001bf4:	443b      	add	r3, r7
 8001bf6:	3b24      	subs	r3, #36	; 0x24
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = SPEED_4;
 8001bfc:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	3340      	adds	r3, #64	; 0x40
 8001c08:	443b      	add	r3, r7
 8001c0a:	3b23      	subs	r3, #35	; 0x23
 8001c0c:	2228      	movs	r2, #40	; 0x28
 8001c0e:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_FWD;
 8001c10:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	3340      	adds	r3, #64	; 0x40
 8001c1c:	443b      	add	r3, r7
 8001c1e:	3b22      	subs	r3, #34	; 0x22
 8001c20:	2202      	movs	r2, #2
 8001c22:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001c24:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001c2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d9d8      	bls.n	8001be8 <StartACCTask+0x22c>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <StartACCTask+0x358>)
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	f107 011c 	add.w	r1, r7, #28
 8001c3e:	2301      	movs	r3, #1
 8001c40:	2200      	movs	r2, #0
 8001c42:	f004 fad3 	bl	80061ec <osMessageQueuePut>
	  {
 8001c46:	e098      	b.n	8001d7a <StartACCTask+0x3be>
	  }
	  else if(Distance < DISTANCE_4 && Distance > DISTANCE_5)
 8001c48:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <StartACCTask+0x34c>)
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d542      	bpl.n	8001ce2 <StartACCTask+0x326>
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <StartACCTask+0x34c>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	dd38      	ble.n	8001ce2 <StartACCTask+0x326>
	  {
		  motorControl_t payload = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001c80:	e022      	b.n	8001cc8 <StartACCTask+0x30c>
		  {
			  payload.motors[i].modify = 1;
 8001c82:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3340      	adds	r3, #64	; 0x40
 8001c8e:	443b      	add	r3, r7
 8001c90:	3b2c      	subs	r3, #44	; 0x2c
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = SPEED_5;
 8001c96:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3340      	adds	r3, #64	; 0x40
 8001ca2:	443b      	add	r3, r7
 8001ca4:	3b2b      	subs	r3, #43	; 0x2b
 8001ca6:	2214      	movs	r2, #20
 8001ca8:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_FWD;
 8001caa:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3340      	adds	r3, #64	; 0x40
 8001cb6:	443b      	add	r3, r7
 8001cb8:	3b2a      	subs	r3, #42	; 0x2a
 8001cba:	2202      	movs	r2, #2
 8001cbc:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001cbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001cc8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d9d8      	bls.n	8001c82 <StartACCTask+0x2c6>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <StartACCTask+0x358>)
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	f107 0114 	add.w	r1, r7, #20
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f004 fa86 	bl	80061ec <osMessageQueuePut>
	  {
 8001ce0:	e04b      	b.n	8001d7a <StartACCTask+0x3be>
	  }
	  else if(Distance < DISTANCE_5)
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <StartACCTask+0x34c>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	d541      	bpl.n	8001d7a <StartACCTask+0x3be>
	  {
		  motorControl_t payload = {0};
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001d06:	e02c      	b.n	8001d62 <StartACCTask+0x3a6>
 8001d08:	200000c0 	.word	0x200000c0
 8001d0c:	200000d4 	.word	0x200000d4
 8001d10:	42480000 	.word	0x42480000
 8001d14:	200000d0 	.word	0x200000d0
 8001d18:	420c0000 	.word	0x420c0000
		  {
			  payload.motors[i].modify = 1;
 8001d1c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	3340      	adds	r3, #64	; 0x40
 8001d28:	443b      	add	r3, r7
 8001d2a:	3b34      	subs	r3, #52	; 0x34
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = 0;
 8001d30:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	3340      	adds	r3, #64	; 0x40
 8001d3c:	443b      	add	r3, r7
 8001d3e:	3b33      	subs	r3, #51	; 0x33
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_OFF;
 8001d44:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3340      	adds	r3, #64	; 0x40
 8001d50:	443b      	add	r3, r7
 8001d52:	3b32      	subs	r3, #50	; 0x32
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001d58:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001d62:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d9d8      	bls.n	8001d1c <StartACCTask+0x360>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <StartACCTask+0x3dc>)
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	f107 010c 	add.w	r1, r7, #12
 8001d72:	2301      	movs	r3, #1
 8001d74:	2200      	movs	r2, #0
 8001d76:	f004 fa39 	bl	80061ec <osMessageQueuePut>
	  }
#endif
	  prev_distance = Distance;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <StartACCTask+0x3e0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fb92 	bl	80004a8 <__aeabi_f2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4905      	ldr	r1, [pc, #20]	; (8001da0 <StartACCTask+0x3e4>)
 8001d8a:	e9c1 2300 	strd	r2, r3, [r1]
	  // ACC END
	 #endif
	  osDelay(20);
 8001d8e:	2014      	movs	r0, #20
 8001d90:	f004 f99e 	bl	80060d0 <osDelay>
	  Distance = HCSR04_Read(HCSR04_SENSOR1);
 8001d94:	e616      	b.n	80019c4 <StartACCTask+0x8>
 8001d96:	bf00      	nop
 8001d98:	200000d0 	.word	0x200000d0
 8001d9c:	200000c0 	.word	0x200000c0
 8001da0:	200000d8 	.word	0x200000d8

08001da4 <UART_RX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX */
void UART_RX(void *argument)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX */
  /* Infinite loop */
  for(;;)
  {
   HAL_UART_Receive(&huart2,Static_u8UART_Recieve,4,10);
 8001dac:	230a      	movs	r3, #10
 8001dae:	2204      	movs	r2, #4
 8001db0:	4903      	ldr	r1, [pc, #12]	; (8001dc0 <UART_RX+0x1c>)
 8001db2:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <UART_RX+0x20>)
 8001db4:	f003 f895 	bl	8004ee2 <HAL_UART_Receive>
    osDelay(5);
 8001db8:	2005      	movs	r0, #5
 8001dba:	f004 f989 	bl	80060d0 <osDelay>
   HAL_UART_Receive(&huart2,Static_u8UART_Recieve,4,10);
 8001dbe:	e7f5      	b.n	8001dac <UART_RX+0x8>
 8001dc0:	200000b8 	.word	0x200000b8
 8001dc4:	200001b8 	.word	0x200001b8

08001dc8 <USART2_IRQHandler>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void USART2_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN USART1_IRQn 0 */
	  /* USER CODE END USART1_IRQn 0 */
	  HAL_UART_IRQHandler(&huart2);
 8001dcc:	4805      	ldr	r0, [pc, #20]	; (8001de4 <USART2_IRQHandler+0x1c>)
 8001dce:	f003 f92b 	bl	8005028 <HAL_UART_IRQHandler>
	  /* USER CODE BEGIN USART1_IRQn 1 */
	  Global_u8CarMode=atoi((char*)Static_u8UART_Recieve);
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <USART2_IRQHandler+0x20>)
 8001dd4:	f006 ff62 	bl	8008c9c <atoi>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <USART2_IRQHandler+0x24>)
 8001dde:	701a      	strb	r2, [r3, #0]
	  /* USER CODE END USART1_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200001b8 	.word	0x200001b8
 8001de8:	200000b8 	.word	0x200000b8
 8001dec:	200000bc 	.word	0x200000bc

08001df0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <MX_GPIO_Init+0xac>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a23      	ldr	r2, [pc, #140]	; (8001e9c <MX_GPIO_Init+0xac>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <MX_GPIO_Init+0xac>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <MX_GPIO_Init+0xac>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <MX_GPIO_Init+0xac>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_GPIO_Init+0xac>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|MOTOR_IN3_Pin|MOTOR_IN2_Pin|MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f244 01e0 	movw	r1, #16608	; 0x40e0
 8001e44:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <MX_GPIO_Init+0xb0>)
 8001e46:	f000 ffd5 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_IN4_GPIO_Port, MOTOR_IN4_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e50:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <MX_GPIO_Init+0xb4>)
 8001e52:	f000 ffcf 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|MOTOR_IN3_Pin|MOTOR_IN2_Pin|MOTOR_IN1_Pin;
 8001e56:	f244 03e0 	movw	r3, #16608	; 0x40e0
 8001e5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <MX_GPIO_Init+0xb0>)
 8001e70:	f000 fe3c 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_IN4_Pin;
 8001e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_IN4_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_GPIO_Init+0xb4>)
 8001e8e:	f000 fe2d 	bl	8002aec <HAL_GPIO_Init>

}
 8001e92:	bf00      	nop
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eac:	f000 fc44 	bl	8002738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb0:	f000 f820 	bl	8001ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb4:	f7ff ff9c 	bl	8001df0 <MX_GPIO_Init>
  MX_TIM5_Init();
 8001eb8:	f000 f9ec 	bl	8002294 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001ebc:	f000 f97a 	bl	80021b4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001ec0:	f000 fb96 	bl	80025f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HCSR04_Init(HCSR04_SENSOR1, &htim2);
 8001ec4:	4909      	ldr	r1, [pc, #36]	; (8001eec <main+0x44>)
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7fe ff9e 	bl	8000e08 <HCSR04_Init>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4808      	ldr	r0, [pc, #32]	; (8001ef0 <main+0x48>)
 8001ed0:	f001 fd36 	bl	8003940 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001ed4:	2104      	movs	r1, #4
 8001ed6:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <main+0x48>)
 8001ed8:	f001 fd32 	bl	8003940 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001edc:	f004 f81c 	bl	8005f18 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ee0:	f7ff fc70 	bl	80017c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ee4:	f004 f83c 	bl	8005f60 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <main+0x40>
 8001eea:	bf00      	nop
 8001eec:	20000128 	.word	0x20000128
 8001ef0:	20000170 	.word	0x20000170

08001ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b094      	sub	sp, #80	; 0x50
 8001ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efa:	f107 0320 	add.w	r3, r7, #32
 8001efe:	2230      	movs	r2, #48	; 0x30
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f006 ff06 	bl	8008d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	4b23      	ldr	r3, [pc, #140]	; (8001fac <SystemClock_Config+0xb8>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	4a22      	ldr	r2, [pc, #136]	; (8001fac <SystemClock_Config+0xb8>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6413      	str	r3, [r2, #64]	; 0x40
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <SystemClock_Config+0xb8>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <SystemClock_Config+0xbc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <SystemClock_Config+0xbc>)
 8001f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <SystemClock_Config+0xbc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f54:	2302      	movs	r3, #2
 8001f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f64:	f107 0320 	add.w	r3, r7, #32
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 ff5d 	bl	8002e28 <HAL_RCC_OscConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001f74:	f000 f83e 	bl	8001ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f78:	230f      	movs	r3, #15
 8001f7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 f9c0 	bl	8003318 <HAL_RCC_ClockConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f9e:	f000 f829 	bl	8001ff4 <Error_Handler>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3750      	adds	r7, #80	; 0x50
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_IC_ISR(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff f95f 	bl	8001280 <HCSR04_TMR_IC_ISR>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fde:	f000 fbcd 	bl	800277c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HCSR04_TMR_OVF_ISR(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff f90e 	bl	8001204 <HCSR04_TMR_OVF_ISR>
  /* USER CODE END Callback 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40014400 	.word	0x40014400

08001ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff8:	b672      	cpsid	i
}
 8001ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <Error_Handler+0x8>
	...

08002000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_MspInit+0x54>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a11      	ldr	r2, [pc, #68]	; (8002054 <HAL_MspInit+0x54>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_MspInit+0x54>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_MspInit+0x54>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_MspInit+0x54>)
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_MspInit+0x54>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	210f      	movs	r1, #15
 8002042:	f06f 0001 	mvn.w	r0, #1
 8002046:	f000 fc95 	bl	8002974 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08c      	sub	sp, #48	; 0x30
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <HAL_InitTick+0xd0>)
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <HAL_InitTick+0xd0>)
 8002072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002076:	6453      	str	r3, [r2, #68]	; 0x44
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_InitTick+0xd0>)
 800207a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002084:	f107 020c 	add.w	r2, r7, #12
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f001 fb22 	bl	80036d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002094:	f001 fb0c 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 8002098:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	4a23      	ldr	r2, [pc, #140]	; (800212c <HAL_InitTick+0xd4>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0c9b      	lsrs	r3, r3, #18
 80020a4:	3b01      	subs	r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_InitTick+0xd8>)
 80020aa:	4a22      	ldr	r2, [pc, #136]	; (8002134 <HAL_InitTick+0xdc>)
 80020ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_InitTick+0xd8>)
 80020b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020b4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80020b6:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <HAL_InitTick+0xd8>)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80020bc:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_InitTick+0xd8>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_InitTick+0xd8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_InitTick+0xd8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80020ce:	4818      	ldr	r0, [pc, #96]	; (8002130 <HAL_InitTick+0xd8>)
 80020d0:	f001 fb34 	bl	800373c <HAL_TIM_Base_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80020da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d11b      	bne.n	800211a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80020e2:	4813      	ldr	r0, [pc, #76]	; (8002130 <HAL_InitTick+0xd8>)
 80020e4:	f001 fb7a 	bl	80037dc <HAL_TIM_Base_Start_IT>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80020ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d111      	bne.n	800211a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020f6:	2019      	movs	r0, #25
 80020f8:	f000 fc58 	bl	80029ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	d808      	bhi.n	8002114 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002102:	2200      	movs	r2, #0
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	2019      	movs	r0, #25
 8002108:	f000 fc34 	bl	8002974 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_InitTick+0xe0>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e002      	b.n	800211a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800211a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800211e:	4618      	mov	r0, r3
 8002120:	3730      	adds	r7, #48	; 0x30
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	431bde83 	.word	0x431bde83
 8002130:	200000e0 	.word	0x200000e0
 8002134:	40014400 	.word	0x40014400
 8002138:	20000004 	.word	0x20000004

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <NMI_Handler+0x4>

08002142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <HardFault_Handler+0x4>

08002148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <MemManage_Handler+0x4>

0800214e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <UsageFault_Handler+0x4>

0800215a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HCSR04_TMR_OVF_ISR(&htim1);
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800216e:	f001 fe6f 	bl	8003e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200000e0 	.word	0x200000e0

0800217c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM2_IRQHandler+0x10>)
 8002182:	f001 fe65 	bl	8003e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000128 	.word	0x20000128

08002190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <SystemInit+0x20>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <SystemInit+0x20>)
 800219c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ba:	f107 0318 	add.w	r3, r7, #24
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021d2:	463b      	mov	r3, r7
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021de:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <MX_TIM2_Init+0xdc>)
 80021e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <MX_TIM2_Init+0xdc>)
 80021e8:	220f      	movs	r2, #15
 80021ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <MX_TIM2_Init+0xdc>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <MX_TIM2_Init+0xdc>)
 80021f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <MX_TIM2_Init+0xdc>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b23      	ldr	r3, [pc, #140]	; (8002290 <MX_TIM2_Init+0xdc>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002206:	4822      	ldr	r0, [pc, #136]	; (8002290 <MX_TIM2_Init+0xdc>)
 8002208:	f001 fa98 	bl	800373c <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002212:	f7ff feef 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800221c:	f107 0318 	add.w	r3, r7, #24
 8002220:	4619      	mov	r1, r3
 8002222:	481b      	ldr	r0, [pc, #108]	; (8002290 <MX_TIM2_Init+0xdc>)
 8002224:	f002 f87a 	bl	800431c <HAL_TIM_ConfigClockSource>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800222e:	f7ff fee1 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002232:	4817      	ldr	r0, [pc, #92]	; (8002290 <MX_TIM2_Init+0xdc>)
 8002234:	f001 fc98 	bl	8003b68 <HAL_TIM_IC_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800223e:	f7ff fed9 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800224a:	f107 0310 	add.w	r3, r7, #16
 800224e:	4619      	mov	r1, r3
 8002250:	480f      	ldr	r0, [pc, #60]	; (8002290 <MX_TIM2_Init+0xdc>)
 8002252:	f002 fd77 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800225c:	f7ff feca 	bl	8001ff4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002260:	2300      	movs	r3, #0
 8002262:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002264:	2301      	movs	r3, #1
 8002266:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002270:	463b      	mov	r3, r7
 8002272:	2200      	movs	r2, #0
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	; (8002290 <MX_TIM2_Init+0xdc>)
 8002278:	f001 fef2 	bl	8004060 <HAL_TIM_IC_ConfigChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002282:	f7ff feb7 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	3728      	adds	r7, #40	; 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000128 	.word	0x20000128

08002294 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229a:	f107 0320 	add.w	r3, r7, #32
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	615a      	str	r2, [r3, #20]
 80022b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <MX_TIM5_Init+0xc0>)
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <MX_TIM5_Init+0xc4>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <MX_TIM5_Init+0xc0>)
 80022be:	220f      	movs	r2, #15
 80022c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <MX_TIM5_Init+0xc0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 80022c8:	4b22      	ldr	r3, [pc, #136]	; (8002354 <MX_TIM5_Init+0xc0>)
 80022ca:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80022ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <MX_TIM5_Init+0xc0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <MX_TIM5_Init+0xc0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80022dc:	481d      	ldr	r0, [pc, #116]	; (8002354 <MX_TIM5_Init+0xc0>)
 80022de:	f001 fadf 	bl	80038a0 <HAL_TIM_PWM_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80022e8:	f7ff fe84 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022f4:	f107 0320 	add.w	r3, r7, #32
 80022f8:	4619      	mov	r1, r3
 80022fa:	4816      	ldr	r0, [pc, #88]	; (8002354 <MX_TIM5_Init+0xc0>)
 80022fc:	f002 fd22 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002306:	f7ff fe75 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230a:	2360      	movs	r3, #96	; 0x60
 800230c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2200      	movs	r2, #0
 800231e:	4619      	mov	r1, r3
 8002320:	480c      	ldr	r0, [pc, #48]	; (8002354 <MX_TIM5_Init+0xc0>)
 8002322:	f001 ff39 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800232c:	f7ff fe62 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2204      	movs	r2, #4
 8002334:	4619      	mov	r1, r3
 8002336:	4807      	ldr	r0, [pc, #28]	; (8002354 <MX_TIM5_Init+0xc0>)
 8002338:	f001 ff2e 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002342:	f7ff fe57 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002346:	4803      	ldr	r0, [pc, #12]	; (8002354 <MX_TIM5_Init+0xc0>)
 8002348:	f000 f878 	bl	800243c <HAL_TIM_MspPostInit>

}
 800234c:	bf00      	nop
 800234e:	3728      	adds	r7, #40	; 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000170 	.word	0x20000170
 8002358:	40000c00 	.word	0x40000c00

0800235c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237c:	d133      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_TIM_Base_MspInit+0x94>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_TIM_Base_MspInit+0x94>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_TIM_Base_MspInit+0x94>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_TIM_Base_MspInit+0x94>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <HAL_TIM_Base_MspInit+0x94>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_TIM_Base_MspInit+0x94>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023b6:	2320      	movs	r3, #32
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023c6:	2301      	movs	r3, #1
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	4808      	ldr	r0, [pc, #32]	; (80023f4 <HAL_TIM_Base_MspInit+0x98>)
 80023d2:	f000 fb8b 	bl	8002aec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2105      	movs	r1, #5
 80023da:	201c      	movs	r0, #28
 80023dc:	f000 faca 	bl	8002974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023e0:	201c      	movs	r0, #28
 80023e2:	f000 fae3 	bl	80029ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020000 	.word	0x40020000

080023f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_TIM_PWM_MspInit+0x3c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10d      	bne.n	8002426 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_TIM_PWM_MspInit+0x40>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_TIM_PWM_MspInit+0x40>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_TIM_PWM_MspInit+0x40>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40000c00 	.word	0x40000c00
 8002438:	40023800 	.word	0x40023800

0800243c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <HAL_TIM_MspPostInit+0x68>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d11d      	bne.n	800249a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_TIM_MspPostInit+0x6c>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <HAL_TIM_MspPostInit+0x6c>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_TIM_MspPostInit+0x6c>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_EN1_Pin|MOTOR_EN2_Pin;
 800247a:	2303      	movs	r3, #3
 800247c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800248a:	2302      	movs	r3, #2
 800248c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <HAL_TIM_MspPostInit+0x70>)
 8002496:	f000 fb29 	bl	8002aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800249a:	bf00      	nop
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40000c00 	.word	0x40000c00
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020000 	.word	0x40020000

080024b0 <Motor1_SetSpeed>:
  }
}

/* USER CODE BEGIN 1 */
void Motor1_SetSpeed(double speed)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	ed87 0b00 	vstr	d0, [r7]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	611a      	str	r2, [r3, #16]
 80024ca:	615a      	str	r2, [r3, #20]
 80024cc:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ce:	2360      	movs	r3, #96	; 0x60
 80024d0:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = (speed/100.0) * (20000-1);
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <Motor1_SetSpeed+0x98>)
 80024d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024dc:	f7fe f966 	bl	80007ac <__aeabi_ddiv>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	a315      	add	r3, pc, #84	; (adr r3, 8002540 <Motor1_SetSpeed+0x90>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fe f833 	bl	8000558 <__aeabi_dmul>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f7fe fa3f 	bl	800097c <__aeabi_d2uiz>
 80024fe:	4603      	mov	r3, r0
 8002500:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	2200      	movs	r2, #0
 8002510:	4619      	mov	r1, r3
 8002512:	480e      	ldr	r0, [pc, #56]	; (800254c <Motor1_SetSpeed+0x9c>)
 8002514:	f001 fe40 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <Motor1_SetSpeed+0x72>
	  {
	    Error_Handler();
 800251e:	f7ff fd69 	bl	8001ff4 <Error_Handler>
	  }
	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8002522:	2100      	movs	r1, #0
 8002524:	4809      	ldr	r0, [pc, #36]	; (800254c <Motor1_SetSpeed+0x9c>)
 8002526:	f001 fabb 	bl	8003aa0 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800252a:	2100      	movs	r1, #0
 800252c:	4807      	ldr	r0, [pc, #28]	; (800254c <Motor1_SetSpeed+0x9c>)
 800252e:	f001 fa07 	bl	8003940 <HAL_TIM_PWM_Start>
}
 8002532:	bf00      	nop
 8002534:	3728      	adds	r7, #40	; 0x28
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	f3af 8000 	nop.w
 8002540:	00000000 	.word	0x00000000
 8002544:	40d387c0 	.word	0x40d387c0
 8002548:	40590000 	.word	0x40590000
 800254c:	20000170 	.word	0x20000170

08002550 <Motor2_SetSpeed>:

void Motor2_SetSpeed(double speed)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	ed87 0b00 	vstr	d0, [r7]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	615a      	str	r2, [r3, #20]
 800256c:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256e:	2360      	movs	r3, #96	; 0x60
 8002570:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = (speed/100.0) * (20000-1);
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <Motor2_SetSpeed+0x98>)
 8002578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800257c:	f7fe f916 	bl	80007ac <__aeabi_ddiv>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	a315      	add	r3, pc, #84	; (adr r3, 80025e0 <Motor2_SetSpeed+0x90>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fd ffe3 	bl	8000558 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f7fe f9ef 	bl	800097c <__aeabi_d2uiz>
 800259e:	4603      	mov	r3, r0
 80025a0:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	2204      	movs	r2, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	480e      	ldr	r0, [pc, #56]	; (80025ec <Motor2_SetSpeed+0x9c>)
 80025b4:	f001 fdf0 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <Motor2_SetSpeed+0x72>
	  {
	    Error_Handler();
 80025be:	f7ff fd19 	bl	8001ff4 <Error_Handler>
	  }
	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
 80025c2:	2104      	movs	r1, #4
 80025c4:	4809      	ldr	r0, [pc, #36]	; (80025ec <Motor2_SetSpeed+0x9c>)
 80025c6:	f001 fa6b 	bl	8003aa0 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80025ca:	2104      	movs	r1, #4
 80025cc:	4807      	ldr	r0, [pc, #28]	; (80025ec <Motor2_SetSpeed+0x9c>)
 80025ce:	f001 f9b7 	bl	8003940 <HAL_TIM_PWM_Start>
}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	f3af 8000 	nop.w
 80025e0:	00000000 	.word	0x00000000
 80025e4:	40d387c0 	.word	0x40d387c0
 80025e8:	40590000 	.word	0x40590000
 80025ec:	20000170 	.word	0x20000170

080025f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_USART2_UART_Init+0x4c>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <MX_USART2_UART_Init+0x50>)
 80025f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <MX_USART2_UART_Init+0x4c>)
 80025fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_USART2_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_USART2_UART_Init+0x4c>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MX_USART2_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_USART2_UART_Init+0x4c>)
 8002616:	220c      	movs	r2, #12
 8002618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <MX_USART2_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_USART2_UART_Init+0x4c>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <MX_USART2_UART_Init+0x4c>)
 8002628:	f002 fc0e 	bl	8004e48 <HAL_UART_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002632:	f7ff fcdf 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200001b8 	.word	0x200001b8
 8002640:	40004400 	.word	0x40004400

08002644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_UART_MspInit+0x94>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d133      	bne.n	80026ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_UART_MspInit+0x98>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <HAL_UART_MspInit+0x98>)
 8002670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_UART_MspInit+0x98>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_UART_MspInit+0x98>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a14      	ldr	r2, [pc, #80]	; (80026dc <HAL_UART_MspInit+0x98>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_UART_MspInit+0x98>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800269e:	230c      	movs	r3, #12
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ae:	2307      	movs	r3, #7
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	4809      	ldr	r0, [pc, #36]	; (80026e0 <HAL_UART_MspInit+0x9c>)
 80026ba:	f000 fa17 	bl	8002aec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2105      	movs	r1, #5
 80026c2:	2026      	movs	r0, #38	; 0x26
 80026c4:	f000 f956 	bl	8002974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026c8:	2026      	movs	r0, #38	; 0x26
 80026ca:	f000 f96f 	bl	80029ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026ce:	bf00      	nop
 80026d0:	3728      	adds	r7, #40	; 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40004400 	.word	0x40004400
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020000 	.word	0x40020000

080026e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800271c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e8:	480d      	ldr	r0, [pc, #52]	; (8002720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ea:	490e      	ldr	r1, [pc, #56]	; (8002724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026ec:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f0:	e002      	b.n	80026f8 <LoopCopyDataInit>

080026f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f6:	3304      	adds	r3, #4

080026f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026fc:	d3f9      	bcc.n	80026f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002700:	4c0b      	ldr	r4, [pc, #44]	; (8002730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002704:	e001      	b.n	800270a <LoopFillZerobss>

08002706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002708:	3204      	adds	r2, #4

0800270a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800270c:	d3fb      	bcc.n	8002706 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800270e:	f7ff fd3f 	bl	8002190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002712:	f006 facd 	bl	8008cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002716:	f7ff fbc7 	bl	8001ea8 <main>
  bx  lr    
 800271a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800271c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002724:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002728:	08009060 	.word	0x08009060
  ldr r2, =_sbss
 800272c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002730:	20004b50 	.word	0x20004b50

08002734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002734:	e7fe      	b.n	8002734 <ADC_IRQHandler>
	...

08002738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <HAL_Init+0x40>)
 8002742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_Init+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_Init+0x40>)
 800274e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_Init+0x40>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a07      	ldr	r2, [pc, #28]	; (8002778 <HAL_Init+0x40>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002760:	2003      	movs	r0, #3
 8002762:	f000 f8fc 	bl	800295e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002766:	200f      	movs	r0, #15
 8002768:	f7ff fc76 	bl	8002058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800276c:	f7ff fc48 	bl	8002000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023c00 	.word	0x40023c00

0800277c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_IncTick+0x20>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_IncTick+0x24>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_IncTick+0x24>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000008 	.word	0x20000008
 80027a0:	200001fc 	.word	0x200001fc

080027a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return uwTick;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_GetTick+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	200001fc 	.word	0x200001fc

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff ffee 	bl	80027a4 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027e2:	bf00      	nop
 80027e4:	f7ff ffde 	bl	80027a4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000008 	.word	0x20000008

08002804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800282c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db0b      	blt.n	8002892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4907      	ldr	r1, [pc, #28]	; (80028a0 <__NVIC_EnableIRQ+0x38>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2001      	movs	r0, #1
 800288a:	fa00 f202 	lsl.w	r2, r0, r2
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	db0a      	blt.n	80028ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	490c      	ldr	r1, [pc, #48]	; (80028f0 <__NVIC_SetPriority+0x4c>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	0112      	lsls	r2, r2, #4
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	440b      	add	r3, r1
 80028c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028cc:	e00a      	b.n	80028e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4908      	ldr	r1, [pc, #32]	; (80028f4 <__NVIC_SetPriority+0x50>)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	3b04      	subs	r3, #4
 80028dc:	0112      	lsls	r2, r2, #4
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	440b      	add	r3, r1
 80028e2:	761a      	strb	r2, [r3, #24]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000e100 	.word	0xe000e100
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f1c3 0307 	rsb	r3, r3, #7
 8002912:	2b04      	cmp	r3, #4
 8002914:	bf28      	it	cs
 8002916:	2304      	movcs	r3, #4
 8002918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3304      	adds	r3, #4
 800291e:	2b06      	cmp	r3, #6
 8002920:	d902      	bls.n	8002928 <NVIC_EncodePriority+0x30>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3b03      	subs	r3, #3
 8002926:	e000      	b.n	800292a <NVIC_EncodePriority+0x32>
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	401a      	ands	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	43d9      	mvns	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	4313      	orrs	r3, r2
         );
}
 8002952:	4618      	mov	r0, r3
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ff4c 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002986:	f7ff ff61 	bl	800284c <__NVIC_GetPriorityGrouping>
 800298a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	6978      	ldr	r0, [r7, #20]
 8002992:	f7ff ffb1 	bl	80028f8 <NVIC_EncodePriority>
 8002996:	4602      	mov	r2, r0
 8002998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff80 	bl	80028a4 <__NVIC_SetPriority>
}
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff54 	bl	8002868 <__NVIC_EnableIRQ>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029d6:	f7ff fee5 	bl	80027a4 <HAL_GetTick>
 80029da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d008      	beq.n	80029fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e052      	b.n	8002aa0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0216 	bic.w	r2, r2, #22
 8002a08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <HAL_DMA_Abort+0x62>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0208 	bic.w	r2, r2, #8
 8002a38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4a:	e013      	b.n	8002a74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4c:	f7ff feaa 	bl	80027a4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d90c      	bls.n	8002a74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2203      	movs	r2, #3
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e015      	b.n	8002aa0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1e4      	bne.n	8002a4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	223f      	movs	r2, #63	; 0x3f
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00c      	b.n	8002ae0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2205      	movs	r2, #5
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	e159      	b.n	8002dbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	f040 8148 	bne.w	8002db6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d005      	beq.n	8002b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d130      	bne.n	8002ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	2203      	movs	r2, #3
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b74:	2201      	movs	r2, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 0201 	and.w	r2, r3, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d017      	beq.n	8002bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d123      	bne.n	8002c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	08da      	lsrs	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3208      	adds	r2, #8
 8002bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	08da      	lsrs	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	69b9      	ldr	r1, [r7, #24]
 8002c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0203 	and.w	r2, r3, #3
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80a2 	beq.w	8002db6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <HAL_GPIO_Init+0x2e8>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a56      	ldr	r2, [pc, #344]	; (8002dd4 <HAL_GPIO_Init+0x2e8>)
 8002c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b54      	ldr	r3, [pc, #336]	; (8002dd4 <HAL_GPIO_Init+0x2e8>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8e:	4a52      	ldr	r2, [pc, #328]	; (8002dd8 <HAL_GPIO_Init+0x2ec>)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	3302      	adds	r3, #2
 8002c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a49      	ldr	r2, [pc, #292]	; (8002ddc <HAL_GPIO_Init+0x2f0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d019      	beq.n	8002cee <HAL_GPIO_Init+0x202>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a48      	ldr	r2, [pc, #288]	; (8002de0 <HAL_GPIO_Init+0x2f4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_GPIO_Init+0x1fe>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a47      	ldr	r2, [pc, #284]	; (8002de4 <HAL_GPIO_Init+0x2f8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_GPIO_Init+0x1fa>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a46      	ldr	r2, [pc, #280]	; (8002de8 <HAL_GPIO_Init+0x2fc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_GPIO_Init+0x1f6>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a45      	ldr	r2, [pc, #276]	; (8002dec <HAL_GPIO_Init+0x300>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x1f2>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	e008      	b.n	8002cf0 <HAL_GPIO_Init+0x204>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e006      	b.n	8002cf0 <HAL_GPIO_Init+0x204>
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e004      	b.n	8002cf0 <HAL_GPIO_Init+0x204>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e002      	b.n	8002cf0 <HAL_GPIO_Init+0x204>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_GPIO_Init+0x204>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	f002 0203 	and.w	r2, r2, #3
 8002cf6:	0092      	lsls	r2, r2, #2
 8002cf8:	4093      	lsls	r3, r2
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d00:	4935      	ldr	r1, [pc, #212]	; (8002dd8 <HAL_GPIO_Init+0x2ec>)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	089b      	lsrs	r3, r3, #2
 8002d06:	3302      	adds	r3, #2
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0e:	4b38      	ldr	r3, [pc, #224]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d32:	4a2f      	ldr	r2, [pc, #188]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d38:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d5c:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d62:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d86:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db0:	4a0f      	ldr	r2, [pc, #60]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b0f      	cmp	r3, #15
 8002dc0:	f67f aea2 	bls.w	8002b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	3724      	adds	r7, #36	; 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40020400 	.word	0x40020400
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020c00 	.word	0x40020c00
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40013c00 	.word	0x40013c00

08002df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
 8002e00:	4613      	mov	r3, r2
 8002e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e04:	787b      	ldrb	r3, [r7, #1]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e10:	e003      	b.n	8002e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	041a      	lsls	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	619a      	str	r2, [r3, #24]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e267      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d075      	beq.n	8002f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e46:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d00c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d112      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b82      	ldr	r3, [pc, #520]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	4b7e      	ldr	r3, [pc, #504]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d05b      	beq.n	8002f30 <HAL_RCC_OscConfig+0x108>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d157      	bne.n	8002f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e242      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0x74>
 8002e8e:	4b76      	ldr	r3, [pc, #472]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a75      	ldr	r2, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e01d      	b.n	8002ed8 <HAL_RCC_OscConfig+0xb0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x98>
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6f      	ldr	r2, [pc, #444]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6c      	ldr	r2, [pc, #432]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0xb0>
 8002ec0:	4b69      	ldr	r3, [pc, #420]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a68      	ldr	r2, [pc, #416]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a65      	ldr	r2, [pc, #404]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7ff fc60 	bl	80027a4 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7ff fc5c 	bl	80027a4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e207      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xc0>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7ff fc4c 	bl	80027a4 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7ff fc48 	bl	80027a4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1f3      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	4b51      	ldr	r3, [pc, #324]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0xe8>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d063      	beq.n	8003006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3e:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d11c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b44      	ldr	r3, [pc, #272]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d116      	bne.n	8002f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x152>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1c7      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4937      	ldr	r1, [pc, #220]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	e03a      	b.n	8003006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f98:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_OscConfig+0x244>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7ff fc01 	bl	80027a4 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa6:	f7ff fbfd 	bl	80027a4 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1a8      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4925      	ldr	r1, [pc, #148]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
 8002fd8:	e015      	b.n	8003006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_OscConfig+0x244>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7ff fbe0 	bl	80027a4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7ff fbdc 	bl	80027a4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e187      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d036      	beq.n	8003080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_RCC_OscConfig+0x248>)
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7ff fbc0 	bl	80027a4 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003028:	f7ff fbbc 	bl	80027a4 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e167      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_OscConfig+0x240>)
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x200>
 8003046:	e01b      	b.n	8003080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_OscConfig+0x248>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304e:	f7ff fba9 	bl	80027a4 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	e00e      	b.n	8003074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003056:	f7ff fba5 	bl	80027a4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d907      	bls.n	8003074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e150      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
 8003068:	40023800 	.word	0x40023800
 800306c:	42470000 	.word	0x42470000
 8003070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	4b88      	ldr	r3, [pc, #544]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ea      	bne.n	8003056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8097 	beq.w	80031bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10f      	bne.n	80030be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	4b7d      	ldr	r3, [pc, #500]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a7c      	ldr	r2, [pc, #496]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
 80030ae:	4b7a      	ldr	r3, [pc, #488]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b77      	ldr	r3, [pc, #476]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d118      	bne.n	80030fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b74      	ldr	r3, [pc, #464]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a73      	ldr	r2, [pc, #460]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d6:	f7ff fb65 	bl	80027a4 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7ff fb61 	bl	80027a4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e10c      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	4b6a      	ldr	r3, [pc, #424]	; (800329c <HAL_RCC_OscConfig+0x474>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x2ea>
 8003104:	4b64      	ldr	r3, [pc, #400]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a63      	ldr	r2, [pc, #396]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	e01c      	b.n	800314c <HAL_RCC_OscConfig+0x324>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b05      	cmp	r3, #5
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x30c>
 800311a:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a5e      	ldr	r2, [pc, #376]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	4b5c      	ldr	r3, [pc, #368]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a5b      	ldr	r2, [pc, #364]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0x324>
 8003134:	4b58      	ldr	r3, [pc, #352]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a57      	ldr	r2, [pc, #348]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	4b55      	ldr	r3, [pc, #340]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a54      	ldr	r2, [pc, #336]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 0304 	bic.w	r3, r3, #4
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d015      	beq.n	8003180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7ff fb26 	bl	80027a4 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315a:	e00a      	b.n	8003172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7ff fb22 	bl	80027a4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0cb      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	4b49      	ldr	r3, [pc, #292]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0ee      	beq.n	800315c <HAL_RCC_OscConfig+0x334>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003180:	f7ff fb10 	bl	80027a4 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7ff fb0c 	bl	80027a4 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0b5      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319e:	4b3e      	ldr	r3, [pc, #248]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ee      	bne.n	8003188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b0:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	4a38      	ldr	r2, [pc, #224]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a1 	beq.w	8003308 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c6:	4b34      	ldr	r3, [pc, #208]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d05c      	beq.n	800328c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d141      	bne.n	800325e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_RCC_OscConfig+0x478>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7ff fae0 	bl	80027a4 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7ff fadc 	bl	80027a4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e087      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	4b27      	ldr	r3, [pc, #156]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	019b      	lsls	r3, r3, #6
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	3b01      	subs	r3, #1
 8003220:	041b      	lsls	r3, r3, #16
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	491b      	ldr	r1, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x478>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7ff fab5 	bl	80027a4 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323e:	f7ff fab1 	bl	80027a4 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e05c      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x416>
 800325c:	e054      	b.n	8003308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_OscConfig+0x478>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7ff fa9e 	bl	80027a4 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7ff fa9a 	bl	80027a4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e045      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_OscConfig+0x470>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x444>
 800328a:	e03d      	b.n	8003308 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e038      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
 8003298:	40023800 	.word	0x40023800
 800329c:	40007000 	.word	0x40007000
 80032a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCC_OscConfig+0x4ec>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d028      	beq.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d121      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d11a      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d4:	4013      	ands	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032dc:	4293      	cmp	r3, r2
 80032de:	d111      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	3b01      	subs	r3, #1
 80032ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800

08003318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0cc      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800332c:	4b68      	ldr	r3, [pc, #416]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d90c      	bls.n	8003354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0b8      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800336c:	4b59      	ldr	r3, [pc, #356]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a58      	ldr	r2, [pc, #352]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003384:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a52      	ldr	r2, [pc, #328]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800338e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	494d      	ldr	r1, [pc, #308]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d044      	beq.n	8003438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d119      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e07f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d107      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d6:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e06f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e067      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f6:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f023 0203 	bic.w	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4934      	ldr	r1, [pc, #208]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003408:	f7ff f9cc 	bl	80027a4 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	e00a      	b.n	8003426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003410:	f7ff f9c8 	bl	80027a4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e04f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 020c 	and.w	r2, r3, #12
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	429a      	cmp	r2, r3
 8003436:	d1eb      	bne.n	8003410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d20c      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e032      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4916      	ldr	r1, [pc, #88]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	490e      	ldr	r1, [pc, #56]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349e:	f000 f821 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	490a      	ldr	r1, [pc, #40]	; (80034d8 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	5ccb      	ldrb	r3, [r1, r3]
 80034b2:	fa22 f303 	lsr.w	r3, r2, r3
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_ClockConfig+0x1c8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fdca 	bl	8002058 <HAL_InitTick>

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40023c00 	.word	0x40023c00
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08008f34 	.word	0x08008f34
 80034dc:	20000000 	.word	0x20000000
 80034e0:	20000004 	.word	0x20000004

080034e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e8:	b090      	sub	sp, #64	; 0x40
 80034ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
 80034f0:	2300      	movs	r3, #0
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f4:	2300      	movs	r3, #0
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034fc:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b08      	cmp	r3, #8
 8003506:	d00d      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x40>
 8003508:	2b08      	cmp	r3, #8
 800350a:	f200 80a1 	bhi.w	8003650 <HAL_RCC_GetSysClockFreq+0x16c>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x34>
 8003512:	2b04      	cmp	r3, #4
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x3a>
 8003516:	e09b      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_GetSysClockFreq+0x184>)
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800351c:	e09b      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351e:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCC_GetSysClockFreq+0x188>)
 8003520:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003522:	e098      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003524:	4b4f      	ldr	r3, [pc, #316]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352e:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d028      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353a:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	2200      	movs	r2, #0
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	627a      	str	r2, [r7, #36]	; 0x24
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800354c:	2100      	movs	r1, #0
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_GetSysClockFreq+0x188>)
 8003550:	fb03 f201 	mul.w	r2, r3, r1
 8003554:	2300      	movs	r3, #0
 8003556:	fb00 f303 	mul.w	r3, r0, r3
 800355a:	4413      	add	r3, r2
 800355c:	4a43      	ldr	r2, [pc, #268]	; (800366c <HAL_RCC_GetSysClockFreq+0x188>)
 800355e:	fba0 1202 	umull	r1, r2, r0, r2
 8003562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003564:	460a      	mov	r2, r1
 8003566:	62ba      	str	r2, [r7, #40]	; 0x28
 8003568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800356a:	4413      	add	r3, r2
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	2200      	movs	r2, #0
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	61fa      	str	r2, [r7, #28]
 8003576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800357e:	f7fd fa6d 	bl	8000a5c <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4613      	mov	r3, r2
 8003588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358a:	e053      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358c:	4b35      	ldr	r3, [pc, #212]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	2200      	movs	r2, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	617a      	str	r2, [r7, #20]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800359e:	f04f 0b00 	mov.w	fp, #0
 80035a2:	4652      	mov	r2, sl
 80035a4:	465b      	mov	r3, fp
 80035a6:	f04f 0000 	mov.w	r0, #0
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	0159      	lsls	r1, r3, #5
 80035b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b4:	0150      	lsls	r0, r2, #5
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	ebb2 080a 	subs.w	r8, r2, sl
 80035be:	eb63 090b 	sbc.w	r9, r3, fp
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035d6:	ebb2 0408 	subs.w	r4, r2, r8
 80035da:	eb63 0509 	sbc.w	r5, r3, r9
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	00eb      	lsls	r3, r5, #3
 80035e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ec:	00e2      	lsls	r2, r4, #3
 80035ee:	4614      	mov	r4, r2
 80035f0:	461d      	mov	r5, r3
 80035f2:	eb14 030a 	adds.w	r3, r4, sl
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	eb45 030b 	adc.w	r3, r5, fp
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800360a:	4629      	mov	r1, r5
 800360c:	028b      	lsls	r3, r1, #10
 800360e:	4621      	mov	r1, r4
 8003610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003614:	4621      	mov	r1, r4
 8003616:	028a      	lsls	r2, r1, #10
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361e:	2200      	movs	r2, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	60fa      	str	r2, [r7, #12]
 8003624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003628:	f7fd fa18 	bl	8000a5c <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_GetSysClockFreq+0x180>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	3301      	adds	r3, #1
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800364e:	e002      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetSysClockFreq+0x184>)
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003658:	4618      	mov	r0, r3
 800365a:	3740      	adds	r7, #64	; 0x40
 800365c:	46bd      	mov	sp, r7
 800365e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	00f42400 	.word	0x00f42400
 800366c:	017d7840 	.word	0x017d7840

08003670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCC_GetHCLKFreq+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000000 	.word	0x20000000

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800368c:	f7ff fff0 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	0a9b      	lsrs	r3, r3, #10
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	08008f44 	.word	0x08008f44

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036b4:	f7ff ffdc 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0b5b      	lsrs	r3, r3, #13
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	08008f44 	.word	0x08008f44

080036d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	220f      	movs	r2, #15
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0203 	and.w	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <HAL_RCC_GetClockConfig+0x60>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0207 	and.w	r2, r3, #7
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40023c00 	.word	0x40023c00

0800373c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e041      	b.n	80037d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe fdfa 	bl	800235c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f000 fef8 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d001      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e044      	b.n	800387e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1e      	ldr	r2, [pc, #120]	; (800388c <HAL_TIM_Base_Start_IT+0xb0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d018      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x6c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381e:	d013      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x6c>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <HAL_TIM_Base_Start_IT+0xb4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00e      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x6c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a19      	ldr	r2, [pc, #100]	; (8003894 <HAL_TIM_Base_Start_IT+0xb8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d009      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x6c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a17      	ldr	r2, [pc, #92]	; (8003898 <HAL_TIM_Base_Start_IT+0xbc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x6c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a16      	ldr	r2, [pc, #88]	; (800389c <HAL_TIM_Base_Start_IT+0xc0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d111      	bne.n	800386c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b06      	cmp	r3, #6
 8003858:	d010      	beq.n	800387c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386a:	e007      	b.n	800387c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800
 8003898:	40000c00 	.word	0x40000c00
 800389c:	40014000 	.word	0x40014000

080038a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e041      	b.n	8003936 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fe fd96 	bl	80023f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f000 fe46 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <HAL_TIM_PWM_Start+0x24>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e022      	b.n	80039aa <HAL_TIM_PWM_Start+0x6a>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b04      	cmp	r3, #4
 8003968:	d109      	bne.n	800397e <HAL_TIM_PWM_Start+0x3e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	e015      	b.n	80039aa <HAL_TIM_PWM_Start+0x6a>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d109      	bne.n	8003998 <HAL_TIM_PWM_Start+0x58>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e008      	b.n	80039aa <HAL_TIM_PWM_Start+0x6a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	bf14      	ite	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	2300      	moveq	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e068      	b.n	8003a84 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Start+0x82>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c0:	e013      	b.n	80039ea <HAL_TIM_PWM_Start+0xaa>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_PWM_Start+0x92>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d0:	e00b      	b.n	80039ea <HAL_TIM_PWM_Start+0xaa>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_PWM_Start+0xa2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e0:	e003      	b.n	80039ea <HAL_TIM_PWM_Start+0xaa>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 f980 	bl	8004cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <HAL_TIM_PWM_Start+0x14c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d107      	bne.n	8003a12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <HAL_TIM_PWM_Start+0x14c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x10e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a24:	d013      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x10e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <HAL_TIM_PWM_Start+0x150>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x10e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <HAL_TIM_PWM_Start+0x154>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x10e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_TIM_PWM_Start+0x158>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x10e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <HAL_TIM_PWM_Start+0x15c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d111      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b06      	cmp	r3, #6
 8003a5e:	d010      	beq.n	8003a82 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a70:	e007      	b.n	8003a82 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40014000 	.word	0x40014000

08003aa0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	6839      	ldr	r1, [r7, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 f920 	bl	8004cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a29      	ldr	r2, [pc, #164]	; (8003b64 <HAL_TIM_PWM_Stop+0xc4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d117      	bne.n	8003af2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a1a      	ldr	r2, [r3, #32]
 8003ac8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10f      	bne.n	8003af2 <HAL_TIM_PWM_Stop+0x52>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6a1a      	ldr	r2, [r3, #32]
 8003ad8:	f240 4344 	movw	r3, #1092	; 0x444
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d107      	bne.n	8003af2 <HAL_TIM_PWM_Stop+0x52>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a1a      	ldr	r2, [r3, #32]
 8003af8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10f      	bne.n	8003b22 <HAL_TIM_PWM_Stop+0x82>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a1a      	ldr	r2, [r3, #32]
 8003b08:	f240 4344 	movw	r3, #1092	; 0x444
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <HAL_TIM_PWM_Stop+0x82>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_PWM_Stop+0x92>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b30:	e013      	b.n	8003b5a <HAL_TIM_PWM_Stop+0xba>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_PWM_Stop+0xa2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b40:	e00b      	b.n	8003b5a <HAL_TIM_PWM_Stop+0xba>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_PWM_Stop+0xb2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b50:	e003      	b.n	8003b5a <HAL_TIM_PWM_Stop+0xba>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40010000 	.word	0x40010000

08003b68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e041      	b.n	8003bfe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f839 	bl	8003c06 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f000 fce2 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_IC_Start_IT+0x1e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	e013      	b.n	8003c62 <HAL_TIM_IC_Start_IT+0x46>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_IC_Start_IT+0x2e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e00b      	b.n	8003c62 <HAL_TIM_IC_Start_IT+0x46>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_IC_Start_IT+0x3e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	e003      	b.n	8003c62 <HAL_TIM_IC_Start_IT+0x46>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <HAL_TIM_IC_Start_IT+0x58>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	e013      	b.n	8003c9c <HAL_TIM_IC_Start_IT+0x80>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d104      	bne.n	8003c84 <HAL_TIM_IC_Start_IT+0x68>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e00b      	b.n	8003c9c <HAL_TIM_IC_Start_IT+0x80>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d104      	bne.n	8003c94 <HAL_TIM_IC_Start_IT+0x78>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e003      	b.n	8003c9c <HAL_TIM_IC_Start_IT+0x80>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c9e:	7bbb      	ldrb	r3, [r7, #14]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d102      	bne.n	8003caa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ca4:	7b7b      	ldrb	r3, [r7, #13]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d001      	beq.n	8003cae <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0c2      	b.n	8003e34 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d104      	bne.n	8003cbe <HAL_TIM_IC_Start_IT+0xa2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cbc:	e013      	b.n	8003ce6 <HAL_TIM_IC_Start_IT+0xca>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d104      	bne.n	8003cce <HAL_TIM_IC_Start_IT+0xb2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ccc:	e00b      	b.n	8003ce6 <HAL_TIM_IC_Start_IT+0xca>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d104      	bne.n	8003cde <HAL_TIM_IC_Start_IT+0xc2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cdc:	e003      	b.n	8003ce6 <HAL_TIM_IC_Start_IT+0xca>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d104      	bne.n	8003cf6 <HAL_TIM_IC_Start_IT+0xda>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf4:	e013      	b.n	8003d1e <HAL_TIM_IC_Start_IT+0x102>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_IC_Start_IT+0xea>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d04:	e00b      	b.n	8003d1e <HAL_TIM_IC_Start_IT+0x102>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_IC_Start_IT+0xfa>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d14:	e003      	b.n	8003d1e <HAL_TIM_IC_Start_IT+0x102>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b0c      	cmp	r3, #12
 8003d22:	d841      	bhi.n	8003da8 <HAL_TIM_IC_Start_IT+0x18c>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <HAL_TIM_IC_Start_IT+0x110>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d61 	.word	0x08003d61
 8003d30:	08003da9 	.word	0x08003da9
 8003d34:	08003da9 	.word	0x08003da9
 8003d38:	08003da9 	.word	0x08003da9
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003da9 	.word	0x08003da9
 8003d44:	08003da9 	.word	0x08003da9
 8003d48:	08003da9 	.word	0x08003da9
 8003d4c:	08003d85 	.word	0x08003d85
 8003d50:	08003da9 	.word	0x08003da9
 8003d54:	08003da9 	.word	0x08003da9
 8003d58:	08003da9 	.word	0x08003da9
 8003d5c:	08003d97 	.word	0x08003d97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0202 	orr.w	r2, r2, #2
 8003d6e:	60da      	str	r2, [r3, #12]
      break;
 8003d70:	e01d      	b.n	8003dae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0204 	orr.w	r2, r2, #4
 8003d80:	60da      	str	r2, [r3, #12]
      break;
 8003d82:	e014      	b.n	8003dae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0208 	orr.w	r2, r2, #8
 8003d92:	60da      	str	r2, [r3, #12]
      break;
 8003d94:	e00b      	b.n	8003dae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0210 	orr.w	r2, r2, #16
 8003da4:	60da      	str	r2, [r3, #12]
      break;
 8003da6:	e002      	b.n	8003dae <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dac:	bf00      	nop
  }

  if (status == HAL_OK)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d13e      	bne.n	8003e32 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2201      	movs	r2, #1
 8003dba:	6839      	ldr	r1, [r7, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 ff9b 	bl	8004cf8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <HAL_TIM_IC_Start_IT+0x220>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d018      	beq.n	8003dfe <HAL_TIM_IC_Start_IT+0x1e2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d013      	beq.n	8003dfe <HAL_TIM_IC_Start_IT+0x1e2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <HAL_TIM_IC_Start_IT+0x224>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00e      	beq.n	8003dfe <HAL_TIM_IC_Start_IT+0x1e2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <HAL_TIM_IC_Start_IT+0x228>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d009      	beq.n	8003dfe <HAL_TIM_IC_Start_IT+0x1e2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_TIM_IC_Start_IT+0x22c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_TIM_IC_Start_IT+0x1e2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <HAL_TIM_IC_Start_IT+0x230>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d111      	bne.n	8003e22 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d010      	beq.n	8003e32 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	e007      	b.n	8003e32 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800
 8003e48:	40000c00 	.word	0x40000c00
 8003e4c:	40014000 	.word	0x40014000

08003e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0202 	mvn.w	r2, #2
 8003e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe f88e 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fb4a 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fb51 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0204 	mvn.w	r2, #4
 8003ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fe f864 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fb20 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fb27 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d122      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d11b      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0208 	mvn.w	r2, #8
 8003f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fe f83a 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 faf6 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fafd 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d122      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b10      	cmp	r3, #16
 8003f6e:	d11b      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0210 	mvn.w	r2, #16
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fe f810 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 facc 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fad3 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d10e      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d107      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0201 	mvn.w	r2, #1
 8003fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd fffc 	bl	8001fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	2b80      	cmp	r3, #128	; 0x80
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 ff1a 	bl	8004e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa98 	bl	800455c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b20      	cmp	r3, #32
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b20      	cmp	r3, #32
 8004046:	d107      	bne.n	8004058 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0220 	mvn.w	r2, #32
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fee4 	bl	8004e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_TIM_IC_ConfigChannel+0x1e>
 800407a:	2302      	movs	r3, #2
 800407c:	e088      	b.n	8004190 <HAL_TIM_IC_ConfigChannel+0x130>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f000 fc74 	bl	8004988 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 020c 	bic.w	r2, r2, #12
 80040ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6999      	ldr	r1, [r3, #24]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	619a      	str	r2, [r3, #24]
 80040c2:	e060      	b.n	8004186 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d11c      	bne.n	8004104 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f000 fcec 	bl	8004ab6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6999      	ldr	r1, [r3, #24]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	021a      	lsls	r2, r3, #8
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	619a      	str	r2, [r3, #24]
 8004102:	e040      	b.n	8004186 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d11b      	bne.n	8004142 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f000 fd39 	bl	8004b90 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 020c 	bic.w	r2, r2, #12
 800412c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69d9      	ldr	r1, [r3, #28]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	61da      	str	r2, [r3, #28]
 8004140:	e021      	b.n	8004186 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d11c      	bne.n	8004182 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f000 fd56 	bl	8004c08 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800416a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69d9      	ldr	r1, [r3, #28]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	021a      	lsls	r2, r3, #8
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	61da      	str	r2, [r3, #28]
 8004180:	e001      	b.n	8004186 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0ae      	b.n	8004314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	f200 809f 	bhi.w	8004304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004305 	.word	0x08004305
 80041d4:	08004305 	.word	0x08004305
 80041d8:	08004305 	.word	0x08004305
 80041dc:	08004241 	.word	0x08004241
 80041e0:	08004305 	.word	0x08004305
 80041e4:	08004305 	.word	0x08004305
 80041e8:	08004305 	.word	0x08004305
 80041ec:	08004283 	.word	0x08004283
 80041f0:	08004305 	.word	0x08004305
 80041f4:	08004305 	.word	0x08004305
 80041f8:	08004305 	.word	0x08004305
 80041fc:	080042c3 	.word	0x080042c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fa32 	bl	8004670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0208 	orr.w	r2, r2, #8
 800421a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0204 	bic.w	r2, r2, #4
 800422a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6999      	ldr	r1, [r3, #24]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	619a      	str	r2, [r3, #24]
      break;
 800423e:	e064      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fa78 	bl	800473c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800425a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6999      	ldr	r1, [r3, #24]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	619a      	str	r2, [r3, #24]
      break;
 8004280:	e043      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fac3 	bl	8004814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0208 	orr.w	r2, r2, #8
 800429c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0204 	bic.w	r2, r2, #4
 80042ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69d9      	ldr	r1, [r3, #28]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	61da      	str	r2, [r3, #28]
      break;
 80042c0:	e023      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fb0d 	bl	80048e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69d9      	ldr	r1, [r3, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	021a      	lsls	r2, r3, #8
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	61da      	str	r2, [r3, #28]
      break;
 8004302:	e002      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
      break;
 8004308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_TIM_ConfigClockSource+0x1c>
 8004334:	2302      	movs	r3, #2
 8004336:	e0b4      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x186>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800435e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004370:	d03e      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004376:	f200 8087 	bhi.w	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437e:	f000 8086 	beq.w	800448e <HAL_TIM_ConfigClockSource+0x172>
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004386:	d87f      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b70      	cmp	r3, #112	; 0x70
 800438a:	d01a      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0xa6>
 800438c:	2b70      	cmp	r3, #112	; 0x70
 800438e:	d87b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b60      	cmp	r3, #96	; 0x60
 8004392:	d050      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x11a>
 8004394:	2b60      	cmp	r3, #96	; 0x60
 8004396:	d877      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b50      	cmp	r3, #80	; 0x50
 800439a:	d03c      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0xfa>
 800439c:	2b50      	cmp	r3, #80	; 0x50
 800439e:	d873      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d058      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x13a>
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d86f      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d064      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043ac:	2b30      	cmp	r3, #48	; 0x30
 80043ae:	d86b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d060      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d867      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05c      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d05a      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043c0:	e062      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6899      	ldr	r1, [r3, #8]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f000 fc71 	bl	8004cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	609a      	str	r2, [r3, #8]
      break;
 80043ee:	e04f      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f000 fc5a 	bl	8004cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004412:	609a      	str	r2, [r3, #8]
      break;
 8004414:	e03c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	461a      	mov	r2, r3
 8004424:	f000 fb18 	bl	8004a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2150      	movs	r1, #80	; 0x50
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fc27 	bl	8004c82 <TIM_ITRx_SetConfig>
      break;
 8004434:	e02c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	461a      	mov	r2, r3
 8004444:	f000 fb74 	bl	8004b30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2160      	movs	r1, #96	; 0x60
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fc17 	bl	8004c82 <TIM_ITRx_SetConfig>
      break;
 8004454:	e01c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	461a      	mov	r2, r3
 8004464:	f000 faf8 	bl	8004a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2140      	movs	r1, #64	; 0x40
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fc07 	bl	8004c82 <TIM_ITRx_SetConfig>
      break;
 8004474:	e00c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f000 fbfe 	bl	8004c82 <TIM_ITRx_SetConfig>
      break;
 8004486:	e003      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
      break;
 800448c:	e000      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800448e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b0c      	cmp	r3, #12
 80044be:	d831      	bhi.n	8004524 <HAL_TIM_ReadCapturedValue+0x78>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044fd 	.word	0x080044fd
 80044cc:	08004525 	.word	0x08004525
 80044d0:	08004525 	.word	0x08004525
 80044d4:	08004525 	.word	0x08004525
 80044d8:	08004507 	.word	0x08004507
 80044dc:	08004525 	.word	0x08004525
 80044e0:	08004525 	.word	0x08004525
 80044e4:	08004525 	.word	0x08004525
 80044e8:	08004511 	.word	0x08004511
 80044ec:	08004525 	.word	0x08004525
 80044f0:	08004525 	.word	0x08004525
 80044f4:	08004525 	.word	0x08004525
 80044f8:	0800451b 	.word	0x0800451b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	60fb      	str	r3, [r7, #12]

      break;
 8004504:	e00f      	b.n	8004526 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	60fb      	str	r3, [r7, #12]

      break;
 800450e:	e00a      	b.n	8004526 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	60fb      	str	r3, [r7, #12]

      break;
 8004518:	e005      	b.n	8004526 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	60fb      	str	r3, [r7, #12]

      break;
 8004522:	e000      	b.n	8004526 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004524:	bf00      	nop
  }

  return tmpreg;
 8004526:	68fb      	ldr	r3, [r7, #12]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a34      	ldr	r2, [pc, #208]	; (8004654 <TIM_Base_SetConfig+0xe4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00f      	beq.n	80045a8 <TIM_Base_SetConfig+0x38>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458e:	d00b      	beq.n	80045a8 <TIM_Base_SetConfig+0x38>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a31      	ldr	r2, [pc, #196]	; (8004658 <TIM_Base_SetConfig+0xe8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d007      	beq.n	80045a8 <TIM_Base_SetConfig+0x38>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a30      	ldr	r2, [pc, #192]	; (800465c <TIM_Base_SetConfig+0xec>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0x38>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a2f      	ldr	r2, [pc, #188]	; (8004660 <TIM_Base_SetConfig+0xf0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d108      	bne.n	80045ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a25      	ldr	r2, [pc, #148]	; (8004654 <TIM_Base_SetConfig+0xe4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01b      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c8:	d017      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a22      	ldr	r2, [pc, #136]	; (8004658 <TIM_Base_SetConfig+0xe8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a21      	ldr	r2, [pc, #132]	; (800465c <TIM_Base_SetConfig+0xec>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00f      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a20      	ldr	r2, [pc, #128]	; (8004660 <TIM_Base_SetConfig+0xf0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <TIM_Base_SetConfig+0xf4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d007      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <TIM_Base_SetConfig+0xf8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_Base_SetConfig+0x8a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <TIM_Base_SetConfig+0xfc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d108      	bne.n	800460c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a08      	ldr	r2, [pc, #32]	; (8004654 <TIM_Base_SetConfig+0xe4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d103      	bne.n	8004640 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	615a      	str	r2, [r3, #20]
}
 8004646:	bf00      	nop
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40014000 	.word	0x40014000
 8004668:	40014400 	.word	0x40014400
 800466c:	40014800 	.word	0x40014800

08004670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f023 0201 	bic.w	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f023 0302 	bic.w	r3, r3, #2
 80046b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <TIM_OC1_SetConfig+0xc8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d10c      	bne.n	80046e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0308 	bic.w	r3, r3, #8
 80046d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f023 0304 	bic.w	r3, r3, #4
 80046e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a13      	ldr	r2, [pc, #76]	; (8004738 <TIM_OC1_SetConfig+0xc8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d111      	bne.n	8004712 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	621a      	str	r2, [r3, #32]
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	40010000 	.word	0x40010000

0800473c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0210 	bic.w	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0320 	bic.w	r3, r3, #32
 8004786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <TIM_OC2_SetConfig+0xd4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d10d      	bne.n	80047b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <TIM_OC2_SetConfig+0xd4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d113      	bne.n	80047e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40010000 	.word	0x40010000

08004814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0303 	bic.w	r3, r3, #3
 800484a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800485c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <TIM_OC3_SetConfig+0xd0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10d      	bne.n	800488e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800488c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a14      	ldr	r2, [pc, #80]	; (80048e4 <TIM_OC3_SetConfig+0xd0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d113      	bne.n	80048be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800489c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40010000 	.word	0x40010000

080048e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	031b      	lsls	r3, r3, #12
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a10      	ldr	r2, [pc, #64]	; (8004984 <TIM_OC4_SetConfig+0x9c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d109      	bne.n	800495c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800494e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	019b      	lsls	r3, r3, #6
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40010000 	.word	0x40010000

08004988 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f023 0201 	bic.w	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a24      	ldr	r2, [pc, #144]	; (8004a44 <TIM_TI1_SetConfig+0xbc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <TIM_TI1_SetConfig+0x56>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049bc:	d00f      	beq.n	80049de <TIM_TI1_SetConfig+0x56>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <TIM_TI1_SetConfig+0xc0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00b      	beq.n	80049de <TIM_TI1_SetConfig+0x56>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a20      	ldr	r2, [pc, #128]	; (8004a4c <TIM_TI1_SetConfig+0xc4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_TI1_SetConfig+0x56>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4a1f      	ldr	r2, [pc, #124]	; (8004a50 <TIM_TI1_SetConfig+0xc8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_TI1_SetConfig+0x56>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a1e      	ldr	r2, [pc, #120]	; (8004a54 <TIM_TI1_SetConfig+0xcc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d101      	bne.n	80049e2 <TIM_TI1_SetConfig+0x5a>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <TIM_TI1_SetConfig+0x5c>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0303 	bic.w	r3, r3, #3
 80049ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e003      	b.n	8004a02 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f023 030a 	bic.w	r3, r3, #10
 8004a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f003 030a 	and.w	r3, r3, #10
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	40014000 	.word	0x40014000

08004a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f023 0201 	bic.w	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 030a 	bic.w	r3, r3, #10
 8004a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b087      	sub	sp, #28
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]
 8004ac2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f023 0210 	bic.w	r2, r3, #16
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	031b      	lsls	r3, r3, #12
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	621a      	str	r2, [r3, #32]
}
 8004b24:	bf00      	nop
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f023 0210 	bic.w	r2, r3, #16
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	031b      	lsls	r3, r3, #12
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f023 0303 	bic.w	r3, r3, #3
 8004bbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004be0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	621a      	str	r2, [r3, #32]
}
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	031b      	lsls	r3, r3, #12
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	031b      	lsls	r3, r3, #12
 8004c60:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f043 0307 	orr.w	r3, r3, #7
 8004ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	609a      	str	r2, [r3, #8]
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	021a      	lsls	r2, r3, #8
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	609a      	str	r2, [r3, #8]
}
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a1a      	ldr	r2, [r3, #32]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a1a      	ldr	r2, [r3, #32]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d30:	431a      	orrs	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e050      	b.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d018      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d013      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00e      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10c      	bne.n	8004dec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40000c00 	.word	0x40000c00
 8004e1c:	40014000 	.word	0x40014000

08004e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e03f      	b.n	8004eda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd fbe8 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	; 0x24
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fd8b 	bl	80059a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b08a      	sub	sp, #40	; 0x28
 8004ee6:	af02      	add	r7, sp, #8
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	f040 808c 	bne.w	800501c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_UART_Receive+0x2e>
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e084      	b.n	800501e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Receive+0x40>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e07d      	b.n	800501e <HAL_UART_Receive+0x13c>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2222      	movs	r2, #34	; 0x22
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f3e:	f7fd fc31 	bl	80027a4 <HAL_GetTick>
 8004f42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	88fa      	ldrh	r2, [r7, #6]
 8004f4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f58:	d108      	bne.n	8004f6c <HAL_UART_Receive+0x8a>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d104      	bne.n	8004f6c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	e003      	b.n	8004f74 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004f7c:	e043      	b.n	8005006 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2200      	movs	r2, #0
 8004f86:	2120      	movs	r1, #32
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fb05 	bl	8005598 <UART_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e042      	b.n	800501e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	3302      	adds	r3, #2
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	e01f      	b.n	8004ff8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc0:	d007      	beq.n	8004fd2 <HAL_UART_Receive+0xf0>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10a      	bne.n	8004fe0 <HAL_UART_Receive+0xfe>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e008      	b.n	8004ff2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1b6      	bne.n	8004f7e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800501c:	2302      	movs	r3, #2
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b0ba      	sub	sp, #232	; 0xe8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800504e:	2300      	movs	r3, #0
 8005050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005054:	2300      	movs	r3, #0
 8005056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800505a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10f      	bne.n	800508e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800506e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <HAL_UART_IRQHandler+0x66>
 800507a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fbd3 	bl	8005832 <UART_Receive_IT>
      return;
 800508c:	e256      	b.n	800553c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800508e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 80de 	beq.w	8005254 <HAL_UART_IRQHandler+0x22c>
 8005098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80d1 	beq.w	8005254 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <HAL_UART_IRQHandler+0xae>
 80050be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <HAL_UART_IRQHandler+0xd2>
 80050e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f043 0202 	orr.w	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00b      	beq.n	800511e <HAL_UART_IRQHandler+0xf6>
 8005106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f043 0204 	orr.w	r2, r3, #4
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800511e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d011      	beq.n	800514e <HAL_UART_IRQHandler+0x126>
 800512a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d105      	bne.n	8005142 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f043 0208 	orr.w	r2, r3, #8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 81ed 	beq.w	8005532 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <HAL_UART_IRQHandler+0x14e>
 8005164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fb5e 	bl	8005832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <HAL_UART_IRQHandler+0x17a>
 800519a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d04f      	beq.n	8005242 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa66 	bl	8005674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	d141      	bne.n	800523a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3314      	adds	r3, #20
 80051bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3314      	adds	r3, #20
 80051de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1d9      	bne.n	80051b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	2b00      	cmp	r3, #0
 8005208:	d013      	beq.n	8005232 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	4a7d      	ldr	r2, [pc, #500]	; (8005404 <HAL_UART_IRQHandler+0x3dc>)
 8005210:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	4618      	mov	r0, r3
 8005218:	f7fd fc46 	bl	8002aa8 <HAL_DMA_Abort_IT>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d016      	beq.n	8005250 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800522c:	4610      	mov	r0, r2
 800522e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	e00e      	b.n	8005250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f99a 	bl	800556c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e00a      	b.n	8005250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f996 	bl	800556c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e006      	b.n	8005250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f992 	bl	800556c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800524e:	e170      	b.n	8005532 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	bf00      	nop
    return;
 8005252:	e16e      	b.n	8005532 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	2b01      	cmp	r3, #1
 800525a:	f040 814a 	bne.w	80054f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 8143 	beq.w	80054f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800526c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 813c 	beq.w	80054f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529a:	2b40      	cmp	r3, #64	; 0x40
 800529c:	f040 80b4 	bne.w	8005408 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8140 	beq.w	8005536 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052be:	429a      	cmp	r2, r3
 80052c0:	f080 8139 	bcs.w	8005536 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d6:	f000 8088 	beq.w	80053ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800530a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005312:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800531e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1d9      	bne.n	80052da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3314      	adds	r3, #20
 800532c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800534a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800534e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005352:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800535c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e1      	bne.n	8005326 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005386:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005388:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800538c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e3      	bne.n	8005362 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ba:	f023 0310 	bic.w	r3, r3, #16
 80053be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80053ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e3      	bne.n	80053a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fd faef 	bl	80029c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f8c0 	bl	8005580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005400:	e099      	b.n	8005536 <HAL_UART_IRQHandler+0x50e>
 8005402:	bf00      	nop
 8005404:	0800573b 	.word	0x0800573b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005410:	b29b      	uxth	r3, r3
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 808b 	beq.w	800553a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8086 	beq.w	800553a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005452:	647a      	str	r2, [r7, #68]	; 0x44
 8005454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e3      	bne.n	800542e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3314      	adds	r3, #20
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	623b      	str	r3, [r7, #32]
   return(result);
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	f023 0301 	bic.w	r3, r3, #1
 800547c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3314      	adds	r3, #20
 8005486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800548a:	633a      	str	r2, [r7, #48]	; 0x30
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e3      	bne.n	8005466 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0310 	bic.w	r3, r3, #16
 80054c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	330c      	adds	r3, #12
 80054cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054d0:	61fa      	str	r2, [r7, #28]
 80054d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	69b9      	ldr	r1, [r7, #24]
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	617b      	str	r3, [r7, #20]
   return(result);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e3      	bne.n	80054ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054e8:	4619      	mov	r1, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f848 	bl	8005580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054f0:	e023      	b.n	800553a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d009      	beq.n	8005512 <HAL_UART_IRQHandler+0x4ea>
 80054fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f929 	bl	8005762 <UART_Transmit_IT>
    return;
 8005510:	e014      	b.n	800553c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00e      	beq.n	800553c <HAL_UART_IRQHandler+0x514>
 800551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f969 	bl	8005802 <UART_EndTransmit_IT>
    return;
 8005530:	e004      	b.n	800553c <HAL_UART_IRQHandler+0x514>
    return;
 8005532:	bf00      	nop
 8005534:	e002      	b.n	800553c <HAL_UART_IRQHandler+0x514>
      return;
 8005536:	bf00      	nop
 8005538:	e000      	b.n	800553c <HAL_UART_IRQHandler+0x514>
      return;
 800553a:	bf00      	nop
  }
}
 800553c:	37e8      	adds	r7, #232	; 0xe8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop

08005544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b090      	sub	sp, #64	; 0x40
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a8:	e050      	b.n	800564c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d04c      	beq.n	800564c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80055b8:	f7fd f8f4 	bl	80027a4 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d241      	bcs.n	800564c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	330c      	adds	r3, #12
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055e8:	637a      	str	r2, [r7, #52]	; 0x34
 80055ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e5      	bne.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3314      	adds	r3, #20
 8005602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	613b      	str	r3, [r7, #16]
   return(result);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	63bb      	str	r3, [r7, #56]	; 0x38
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3314      	adds	r3, #20
 800561a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800561c:	623a      	str	r2, [r7, #32]
 800561e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	69f9      	ldr	r1, [r7, #28]
 8005622:	6a3a      	ldr	r2, [r7, #32]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	61bb      	str	r3, [r7, #24]
   return(result);
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e5      	bne.n	80055fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e00f      	b.n	800566c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4013      	ands	r3, r2
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	429a      	cmp	r2, r3
 800565a:	bf0c      	ite	eq
 800565c:	2301      	moveq	r3, #1
 800565e:	2300      	movne	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	461a      	mov	r2, r3
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	429a      	cmp	r2, r3
 8005668:	d09f      	beq.n	80055aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3740      	adds	r7, #64	; 0x40
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b095      	sub	sp, #84	; 0x54
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800569c:	643a      	str	r2, [r7, #64]	; 0x40
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056a4:	e841 2300 	strex	r3, r2, [r1]
 80056a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e5      	bne.n	800567c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3314      	adds	r3, #20
 80056b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3314      	adds	r3, #20
 80056ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e5      	bne.n	80056b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d119      	bne.n	8005720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0310 	bic.w	r3, r3, #16
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800570c:	61ba      	str	r2, [r7, #24]
 800570e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	613b      	str	r3, [r7, #16]
   return(result);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e5      	bne.n	80056ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800572e:	bf00      	nop
 8005730:	3754      	adds	r7, #84	; 0x54
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ff09 	bl	800556c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b21      	cmp	r3, #33	; 0x21
 8005774:	d13e      	bne.n	80057f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577e:	d114      	bne.n	80057aa <UART_Transmit_IT+0x48>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d110      	bne.n	80057aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800579c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	1c9a      	adds	r2, r3, #2
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	621a      	str	r2, [r3, #32]
 80057a8:	e008      	b.n	80057bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	1c59      	adds	r1, r3, #1
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6211      	str	r1, [r2, #32]
 80057b4:	781a      	ldrb	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4619      	mov	r1, r3
 80057ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10f      	bne.n	80057f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff fe8e 	bl	8005544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b08c      	sub	sp, #48	; 0x30
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b22      	cmp	r3, #34	; 0x22
 8005844:	f040 80ab 	bne.w	800599e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005850:	d117      	bne.n	8005882 <UART_Receive_IT+0x50>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d113      	bne.n	8005882 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005870:	b29a      	uxth	r2, r3
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28
 8005880:	e026      	b.n	80058d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005888:	2300      	movs	r3, #0
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005894:	d007      	beq.n	80058a6 <UART_Receive_IT+0x74>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <UART_Receive_IT+0x82>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e008      	b.n	80058c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29b      	uxth	r3, r3
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	4619      	mov	r1, r3
 80058de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d15a      	bne.n	800599a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0220 	bic.w	r2, r2, #32
 80058f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0201 	bic.w	r2, r2, #1
 8005912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	2b01      	cmp	r3, #1
 8005922:	d135      	bne.n	8005990 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	613b      	str	r3, [r7, #16]
   return(result);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f023 0310 	bic.w	r3, r3, #16
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594a:	623a      	str	r2, [r7, #32]
 800594c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	69f9      	ldr	r1, [r7, #28]
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	61bb      	str	r3, [r7, #24]
   return(result);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e5      	bne.n	800592a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b10      	cmp	r3, #16
 800596a:	d10a      	bne.n	8005982 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fdf9 	bl	8005580 <HAL_UARTEx_RxEventCallback>
 800598e:	e002      	b.n	8005996 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fde1 	bl	8005558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e002      	b.n	80059a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3730      	adds	r7, #48	; 0x30
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059ac:	b0c0      	sub	sp, #256	; 0x100
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c4:	68d9      	ldr	r1, [r3, #12]
 80059c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	ea40 0301 	orr.w	r3, r0, r1
 80059d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	431a      	orrs	r2, r3
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a00:	f021 010c 	bic.w	r1, r1, #12
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a22:	6999      	ldr	r1, [r3, #24]
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	ea40 0301 	orr.w	r3, r0, r1
 8005a2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b8f      	ldr	r3, [pc, #572]	; (8005c74 <UART_SetConfig+0x2cc>)
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d005      	beq.n	8005a48 <UART_SetConfig+0xa0>
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b8d      	ldr	r3, [pc, #564]	; (8005c78 <UART_SetConfig+0x2d0>)
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d104      	bne.n	8005a52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a48:	f7fd fe32 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 8005a4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a50:	e003      	b.n	8005a5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a52:	f7fd fe19 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8005a56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a64:	f040 810c 	bne.w	8005c80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	1891      	adds	r1, r2, r2
 8005a80:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a82:	415b      	adcs	r3, r3
 8005a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	eb12 0801 	adds.w	r8, r2, r1
 8005a90:	4629      	mov	r1, r5
 8005a92:	eb43 0901 	adc.w	r9, r3, r1
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aaa:	4690      	mov	r8, r2
 8005aac:	4699      	mov	r9, r3
 8005aae:	4623      	mov	r3, r4
 8005ab0:	eb18 0303 	adds.w	r3, r8, r3
 8005ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ab8:	462b      	mov	r3, r5
 8005aba:	eb49 0303 	adc.w	r3, r9, r3
 8005abe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ace:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ad2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	18db      	adds	r3, r3, r3
 8005ada:	653b      	str	r3, [r7, #80]	; 0x50
 8005adc:	4613      	mov	r3, r2
 8005ade:	eb42 0303 	adc.w	r3, r2, r3
 8005ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ae4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ae8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005aec:	f7fa ffb6 	bl	8000a5c <__aeabi_uldivmod>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <UART_SetConfig+0x2d4>)
 8005af6:	fba3 2302 	umull	r2, r3, r3, r2
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	011c      	lsls	r4, r3, #4
 8005afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b10:	4642      	mov	r2, r8
 8005b12:	464b      	mov	r3, r9
 8005b14:	1891      	adds	r1, r2, r2
 8005b16:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b18:	415b      	adcs	r3, r3
 8005b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b20:	4641      	mov	r1, r8
 8005b22:	eb12 0a01 	adds.w	sl, r2, r1
 8005b26:	4649      	mov	r1, r9
 8005b28:	eb43 0b01 	adc.w	fp, r3, r1
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b40:	4692      	mov	sl, r2
 8005b42:	469b      	mov	fp, r3
 8005b44:	4643      	mov	r3, r8
 8005b46:	eb1a 0303 	adds.w	r3, sl, r3
 8005b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b4e:	464b      	mov	r3, r9
 8005b50:	eb4b 0303 	adc.w	r3, fp, r3
 8005b54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	18db      	adds	r3, r3, r3
 8005b70:	643b      	str	r3, [r7, #64]	; 0x40
 8005b72:	4613      	mov	r3, r2
 8005b74:	eb42 0303 	adc.w	r3, r2, r3
 8005b78:	647b      	str	r3, [r7, #68]	; 0x44
 8005b7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b82:	f7fa ff6b 	bl	8000a5c <__aeabi_uldivmod>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <UART_SetConfig+0x2d4>)
 8005b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	2264      	movs	r2, #100	; 0x64
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	1acb      	subs	r3, r1, r3
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ba2:	4b36      	ldr	r3, [pc, #216]	; (8005c7c <UART_SetConfig+0x2d4>)
 8005ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bb0:	441c      	add	r4, r3
 8005bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	1891      	adds	r1, r2, r2
 8005bca:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bcc:	415b      	adcs	r3, r3
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bd4:	4641      	mov	r1, r8
 8005bd6:	1851      	adds	r1, r2, r1
 8005bd8:	6339      	str	r1, [r7, #48]	; 0x30
 8005bda:	4649      	mov	r1, r9
 8005bdc:	414b      	adcs	r3, r1
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bec:	4659      	mov	r1, fp
 8005bee:	00cb      	lsls	r3, r1, #3
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bf6:	4651      	mov	r1, sl
 8005bf8:	00ca      	lsls	r2, r1, #3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4642      	mov	r2, r8
 8005c02:	189b      	adds	r3, r3, r2
 8005c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c08:	464b      	mov	r3, r9
 8005c0a:	460a      	mov	r2, r1
 8005c0c:	eb42 0303 	adc.w	r3, r2, r3
 8005c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c28:	460b      	mov	r3, r1
 8005c2a:	18db      	adds	r3, r3, r3
 8005c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c2e:	4613      	mov	r3, r2
 8005c30:	eb42 0303 	adc.w	r3, r2, r3
 8005c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c3e:	f7fa ff0d 	bl	8000a5c <__aeabi_uldivmod>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <UART_SetConfig+0x2d4>)
 8005c48:	fba3 1302 	umull	r1, r3, r3, r2
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	2164      	movs	r1, #100	; 0x64
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	3332      	adds	r3, #50	; 0x32
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <UART_SetConfig+0x2d4>)
 8005c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	f003 0207 	and.w	r2, r3, #7
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4422      	add	r2, r4
 8005c6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c70:	e105      	b.n	8005e7e <UART_SetConfig+0x4d6>
 8005c72:	bf00      	nop
 8005c74:	40011000 	.word	0x40011000
 8005c78:	40011400 	.word	0x40011400
 8005c7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c92:	4642      	mov	r2, r8
 8005c94:	464b      	mov	r3, r9
 8005c96:	1891      	adds	r1, r2, r2
 8005c98:	6239      	str	r1, [r7, #32]
 8005c9a:	415b      	adcs	r3, r3
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	1854      	adds	r4, r2, r1
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	eb43 0501 	adc.w	r5, r3, r1
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	00eb      	lsls	r3, r5, #3
 8005cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cba:	00e2      	lsls	r2, r4, #3
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	461d      	mov	r5, r3
 8005cc0:	4643      	mov	r3, r8
 8005cc2:	18e3      	adds	r3, r4, r3
 8005cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cc8:	464b      	mov	r3, r9
 8005cca:	eb45 0303 	adc.w	r3, r5, r3
 8005cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cee:	4629      	mov	r1, r5
 8005cf0:	008b      	lsls	r3, r1, #2
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	008a      	lsls	r2, r1, #2
 8005cfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d00:	f7fa feac 	bl	8000a5c <__aeabi_uldivmod>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4b60      	ldr	r3, [pc, #384]	; (8005e8c <UART_SetConfig+0x4e4>)
 8005d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	011c      	lsls	r4, r3, #4
 8005d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	1891      	adds	r1, r2, r2
 8005d2a:	61b9      	str	r1, [r7, #24]
 8005d2c:	415b      	adcs	r3, r3
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d34:	4641      	mov	r1, r8
 8005d36:	1851      	adds	r1, r2, r1
 8005d38:	6139      	str	r1, [r7, #16]
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	414b      	adcs	r3, r1
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d4c:	4659      	mov	r1, fp
 8005d4e:	00cb      	lsls	r3, r1, #3
 8005d50:	4651      	mov	r1, sl
 8005d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d56:	4651      	mov	r1, sl
 8005d58:	00ca      	lsls	r2, r1, #3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4642      	mov	r2, r8
 8005d62:	189b      	adds	r3, r3, r2
 8005d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d68:	464b      	mov	r3, r9
 8005d6a:	460a      	mov	r2, r1
 8005d6c:	eb42 0303 	adc.w	r3, r2, r3
 8005d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	008b      	lsls	r3, r1, #2
 8005d90:	4641      	mov	r1, r8
 8005d92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d96:	4641      	mov	r1, r8
 8005d98:	008a      	lsls	r2, r1, #2
 8005d9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d9e:	f7fa fe5d 	bl	8000a5c <__aeabi_uldivmod>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <UART_SetConfig+0x4e4>)
 8005da8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	2164      	movs	r1, #100	; 0x64
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	3332      	adds	r3, #50	; 0x32
 8005dba:	4a34      	ldr	r2, [pc, #208]	; (8005e8c <UART_SetConfig+0x4e4>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dc6:	441c      	add	r4, r3
 8005dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dcc:	2200      	movs	r2, #0
 8005dce:	673b      	str	r3, [r7, #112]	; 0x70
 8005dd0:	677a      	str	r2, [r7, #116]	; 0x74
 8005dd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dd6:	4642      	mov	r2, r8
 8005dd8:	464b      	mov	r3, r9
 8005dda:	1891      	adds	r1, r2, r2
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	415b      	adcs	r3, r3
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005de6:	4641      	mov	r1, r8
 8005de8:	1851      	adds	r1, r2, r1
 8005dea:	6039      	str	r1, [r7, #0]
 8005dec:	4649      	mov	r1, r9
 8005dee:	414b      	adcs	r3, r1
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dfe:	4659      	mov	r1, fp
 8005e00:	00cb      	lsls	r3, r1, #3
 8005e02:	4651      	mov	r1, sl
 8005e04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e08:	4651      	mov	r1, sl
 8005e0a:	00ca      	lsls	r2, r1, #3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4603      	mov	r3, r0
 8005e12:	4642      	mov	r2, r8
 8005e14:	189b      	adds	r3, r3, r2
 8005e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e18:	464b      	mov	r3, r9
 8005e1a:	460a      	mov	r2, r1
 8005e1c:	eb42 0303 	adc.w	r3, r2, r3
 8005e20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e2c:	667a      	str	r2, [r7, #100]	; 0x64
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	008b      	lsls	r3, r1, #2
 8005e3e:	4641      	mov	r1, r8
 8005e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e44:	4641      	mov	r1, r8
 8005e46:	008a      	lsls	r2, r1, #2
 8005e48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e4c:	f7fa fe06 	bl	8000a5c <__aeabi_uldivmod>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <UART_SetConfig+0x4e4>)
 8005e56:	fba3 1302 	umull	r1, r3, r3, r2
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	2164      	movs	r1, #100	; 0x64
 8005e5e:	fb01 f303 	mul.w	r3, r1, r3
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	3332      	adds	r3, #50	; 0x32
 8005e68:	4a08      	ldr	r2, [pc, #32]	; (8005e8c <UART_SetConfig+0x4e4>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	f003 020f 	and.w	r2, r3, #15
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4422      	add	r2, r4
 8005e7c:	609a      	str	r2, [r3, #8]
}
 8005e7e:	bf00      	nop
 8005e80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e84:	46bd      	mov	sp, r7
 8005e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e8a:	bf00      	nop
 8005e8c:	51eb851f 	.word	0x51eb851f

08005e90 <__NVIC_SetPriority>:
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	6039      	str	r1, [r7, #0]
 8005e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	db0a      	blt.n	8005eba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	490c      	ldr	r1, [pc, #48]	; (8005edc <__NVIC_SetPriority+0x4c>)
 8005eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eae:	0112      	lsls	r2, r2, #4
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005eb8:	e00a      	b.n	8005ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	4908      	ldr	r1, [pc, #32]	; (8005ee0 <__NVIC_SetPriority+0x50>)
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	3b04      	subs	r3, #4
 8005ec8:	0112      	lsls	r2, r2, #4
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	440b      	add	r3, r1
 8005ece:	761a      	strb	r2, [r3, #24]
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	e000e100 	.word	0xe000e100
 8005ee0:	e000ed00 	.word	0xe000ed00

08005ee4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <SysTick_Handler+0x1c>)
 8005eea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005eec:	f001 fe6e 	bl	8007bcc <xTaskGetSchedulerState>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d001      	beq.n	8005efa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ef6:	f002 fc57 	bl	80087a8 <xPortSysTickHandler>
  }
}
 8005efa:	bf00      	nop
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	e000e010 	.word	0xe000e010

08005f04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f08:	2100      	movs	r1, #0
 8005f0a:	f06f 0004 	mvn.w	r0, #4
 8005f0e:	f7ff ffbf 	bl	8005e90 <__NVIC_SetPriority>
#endif
}
 8005f12:	bf00      	nop
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f1e:	f3ef 8305 	mrs	r3, IPSR
 8005f22:	603b      	str	r3, [r7, #0]
  return(result);
 8005f24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f2a:	f06f 0305 	mvn.w	r3, #5
 8005f2e:	607b      	str	r3, [r7, #4]
 8005f30:	e00c      	b.n	8005f4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <osKernelInitialize+0x44>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d105      	bne.n	8005f46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f3a:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <osKernelInitialize+0x44>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	e002      	b.n	8005f4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f46:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f4c:	687b      	ldr	r3, [r7, #4]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20000200 	.word	0x20000200

08005f60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f66:	f3ef 8305 	mrs	r3, IPSR
 8005f6a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f72:	f06f 0305 	mvn.w	r3, #5
 8005f76:	607b      	str	r3, [r7, #4]
 8005f78:	e010      	b.n	8005f9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <osKernelStart+0x48>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d109      	bne.n	8005f96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f82:	f7ff ffbf 	bl	8005f04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f86:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <osKernelStart+0x48>)
 8005f88:	2202      	movs	r2, #2
 8005f8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f8c:	f001 fa0e 	bl	80073ac <vTaskStartScheduler>
      stat = osOK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	e002      	b.n	8005f9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f9c:	687b      	ldr	r3, [r7, #4]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000200 	.word	0x20000200

08005fac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08e      	sub	sp, #56	; 0x38
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fbc:	f3ef 8305 	mrs	r3, IPSR
 8005fc0:	617b      	str	r3, [r7, #20]
  return(result);
 8005fc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d17e      	bne.n	80060c6 <osThreadNew+0x11a>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d07b      	beq.n	80060c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005fce:	2380      	movs	r3, #128	; 0x80
 8005fd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005fd2:	2318      	movs	r3, #24
 8005fd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005fda:	f04f 33ff 	mov.w	r3, #4294967295
 8005fde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d045      	beq.n	8006072 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <osThreadNew+0x48>
        name = attr->name;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <osThreadNew+0x6e>
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	2b38      	cmp	r3, #56	; 0x38
 800600c:	d805      	bhi.n	800601a <osThreadNew+0x6e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <osThreadNew+0x72>
        return (NULL);
 800601a:	2300      	movs	r3, #0
 800601c:	e054      	b.n	80060c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	089b      	lsrs	r3, r3, #2
 800602c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00e      	beq.n	8006054 <osThreadNew+0xa8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	2b5b      	cmp	r3, #91	; 0x5b
 800603c:	d90a      	bls.n	8006054 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006042:	2b00      	cmp	r3, #0
 8006044:	d006      	beq.n	8006054 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <osThreadNew+0xa8>
        mem = 1;
 800604e:	2301      	movs	r3, #1
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	e010      	b.n	8006076 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10c      	bne.n	8006076 <osThreadNew+0xca>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d108      	bne.n	8006076 <osThreadNew+0xca>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <osThreadNew+0xca>
          mem = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e001      	b.n	8006076 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d110      	bne.n	800609e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006084:	9202      	str	r2, [sp, #8]
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6a3a      	ldr	r2, [r7, #32]
 8006090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 ffc4 	bl	8007020 <xTaskCreateStatic>
 8006098:	4603      	mov	r3, r0
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	e013      	b.n	80060c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d110      	bne.n	80060c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f107 0310 	add.w	r3, r7, #16
 80060ac:	9301      	str	r3, [sp, #4]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f001 f80f 	bl	80070da <xTaskCreate>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d001      	beq.n	80060c6 <osThreadNew+0x11a>
            hTask = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060c6:	693b      	ldr	r3, [r7, #16]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3728      	adds	r7, #40	; 0x28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d8:	f3ef 8305 	mrs	r3, IPSR
 80060dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80060de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <osDelay+0x1c>
    stat = osErrorISR;
 80060e4:	f06f 0305 	mvn.w	r3, #5
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	e007      	b.n	80060fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 f924 	bl	8007344 <vTaskDelay>
    }
  }

  return (stat);
 80060fc:	68fb      	ldr	r3, [r7, #12]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006106:	b580      	push	{r7, lr}
 8006108:	b08a      	sub	sp, #40	; 0x28
 800610a:	af02      	add	r7, sp, #8
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006116:	f3ef 8305 	mrs	r3, IPSR
 800611a:	613b      	str	r3, [r7, #16]
  return(result);
 800611c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800611e:	2b00      	cmp	r3, #0
 8006120:	d15f      	bne.n	80061e2 <osMessageQueueNew+0xdc>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05c      	beq.n	80061e2 <osMessageQueueNew+0xdc>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d059      	beq.n	80061e2 <osMessageQueueNew+0xdc>
    mem = -1;
 800612e:	f04f 33ff 	mov.w	r3, #4294967295
 8006132:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d029      	beq.n	800618e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d012      	beq.n	8006168 <osMessageQueueNew+0x62>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2b4f      	cmp	r3, #79	; 0x4f
 8006148:	d90e      	bls.n	8006168 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	fb01 f303 	mul.w	r3, r1, r3
 800615e:	429a      	cmp	r2, r3
 8006160:	d302      	bcc.n	8006168 <osMessageQueueNew+0x62>
        mem = 1;
 8006162:	2301      	movs	r3, #1
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	e014      	b.n	8006192 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d110      	bne.n	8006192 <osMessageQueueNew+0x8c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10c      	bne.n	8006192 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800617c:	2b00      	cmp	r3, #0
 800617e:	d108      	bne.n	8006192 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <osMessageQueueNew+0x8c>
          mem = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	e001      	b.n	8006192 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d10b      	bne.n	80061b0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2100      	movs	r1, #0
 80061a2:	9100      	str	r1, [sp, #0]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fa21 	bl	80065ee <xQueueGenericCreateStatic>
 80061ac:	61f8      	str	r0, [r7, #28]
 80061ae:	e008      	b.n	80061c2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d105      	bne.n	80061c2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80061b6:	2200      	movs	r2, #0
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fa8f 	bl	80066de <xQueueGenericCreate>
 80061c0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00c      	beq.n	80061e2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	e001      	b.n	80061da <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80061da:	6979      	ldr	r1, [r7, #20]
 80061dc:	69f8      	ldr	r0, [r7, #28]
 80061de:	f000 fec1 	bl	8006f64 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80061e2:	69fb      	ldr	r3, [r7, #28]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006204:	f3ef 8305 	mrs	r3, IPSR
 8006208:	617b      	str	r3, [r7, #20]
  return(result);
 800620a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800620c:	2b00      	cmp	r3, #0
 800620e:	d028      	beq.n	8006262 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <osMessageQueuePut+0x36>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <osMessageQueuePut+0x36>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006222:	f06f 0303 	mvn.w	r3, #3
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	e038      	b.n	800629c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800622a:	2300      	movs	r3, #0
 800622c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800622e:	f107 0210 	add.w	r2, r7, #16
 8006232:	2300      	movs	r3, #0
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	69b8      	ldr	r0, [r7, #24]
 8006238:	f000 fb94 	bl	8006964 <xQueueGenericSendFromISR>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d003      	beq.n	800624a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006242:	f06f 0302 	mvn.w	r3, #2
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	e028      	b.n	800629c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d025      	beq.n	800629c <osMessageQueuePut+0xb0>
 8006250:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <osMessageQueuePut+0xbc>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	e01c      	b.n	800629c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <osMessageQueuePut+0x82>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800626e:	f06f 0303 	mvn.w	r3, #3
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	e012      	b.n	800629c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006276:	2300      	movs	r3, #0
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	69b8      	ldr	r0, [r7, #24]
 800627e:	f000 fa8b 	bl	8006798 <xQueueGenericSend>
 8006282:	4603      	mov	r3, r0
 8006284:	2b01      	cmp	r3, #1
 8006286:	d009      	beq.n	800629c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800628e:	f06f 0301 	mvn.w	r3, #1
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	e002      	b.n	800629c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006296:	f06f 0302 	mvn.w	r3, #2
 800629a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800629c:	69fb      	ldr	r3, [r7, #28]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c2:	f3ef 8305 	mrs	r3, IPSR
 80062c6:	617b      	str	r3, [r7, #20]
  return(result);
 80062c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d028      	beq.n	8006320 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <osMessageQueueGet+0x34>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <osMessageQueueGet+0x34>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80062e0:	f06f 0303 	mvn.w	r3, #3
 80062e4:	61fb      	str	r3, [r7, #28]
 80062e6:	e037      	b.n	8006358 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80062ec:	f107 0310 	add.w	r3, r7, #16
 80062f0:	461a      	mov	r2, r3
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	69b8      	ldr	r0, [r7, #24]
 80062f6:	f000 fca5 	bl	8006c44 <xQueueReceiveFromISR>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d003      	beq.n	8006308 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006300:	f06f 0302 	mvn.w	r3, #2
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	e027      	b.n	8006358 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d024      	beq.n	8006358 <osMessageQueueGet+0xac>
 800630e:	4b15      	ldr	r3, [pc, #84]	; (8006364 <osMessageQueueGet+0xb8>)
 8006310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	e01b      	b.n	8006358 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <osMessageQueueGet+0x80>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d103      	bne.n	8006334 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800632c:	f06f 0303 	mvn.w	r3, #3
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	e011      	b.n	8006358 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	69b8      	ldr	r0, [r7, #24]
 800633a:	f000 fbaf 	bl	8006a9c <xQueueReceive>
 800633e:	4603      	mov	r3, r0
 8006340:	2b01      	cmp	r3, #1
 8006342:	d009      	beq.n	8006358 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800634a:	f06f 0301 	mvn.w	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e002      	b.n	8006358 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006352:	f06f 0302 	mvn.w	r3, #2
 8006356:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006358:	69fb      	ldr	r3, [r7, #28]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a07      	ldr	r2, [pc, #28]	; (8006394 <vApplicationGetIdleTaskMemory+0x2c>)
 8006378:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4a06      	ldr	r2, [pc, #24]	; (8006398 <vApplicationGetIdleTaskMemory+0x30>)
 800637e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2280      	movs	r2, #128	; 0x80
 8006384:	601a      	str	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000204 	.word	0x20000204
 8006398:	20000260 	.word	0x20000260

0800639c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4a07      	ldr	r2, [pc, #28]	; (80063c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80063ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4a06      	ldr	r2, [pc, #24]	; (80063cc <vApplicationGetTimerTaskMemory+0x30>)
 80063b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ba:	601a      	str	r2, [r3, #0]
}
 80063bc:	bf00      	nop
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	20000460 	.word	0x20000460
 80063cc:	200004bc 	.word	0x200004bc

080063d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f103 0208 	add.w	r2, r3, #8
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f04f 32ff 	mov.w	r2, #4294967295
 80063e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f103 0208 	add.w	r2, r3, #8
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f103 0208 	add.w	r2, r3, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006472:	b480      	push	{r7}
 8006474:	b085      	sub	sp, #20
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006488:	d103      	bne.n	8006492 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	e00c      	b.n	80064ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3308      	adds	r3, #8
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e002      	b.n	80064a0 <vListInsert+0x2e>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d2f6      	bcs.n	800649a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	601a      	str	r2, [r3, #0]
}
 80064d8:	bf00      	nop
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6892      	ldr	r2, [r2, #8]
 80064fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6852      	ldr	r2, [r2, #4]
 8006504:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	429a      	cmp	r2, r3
 800650e:	d103      	bne.n	8006518 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	1e5a      	subs	r2, r3, #1
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006562:	f002 f88f 	bl	8008684 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006572:	fb01 f303 	mul.w	r3, r1, r3
 8006576:	441a      	add	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	3b01      	subs	r3, #1
 8006594:	68f9      	ldr	r1, [r7, #12]
 8006596:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006598:	fb01 f303 	mul.w	r3, r1, r3
 800659c:	441a      	add	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	22ff      	movs	r2, #255	; 0xff
 80065a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	22ff      	movs	r2, #255	; 0xff
 80065ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00f      	beq.n	80065e0 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3310      	adds	r3, #16
 80065c4:	4618      	mov	r0, r3
 80065c6:	f001 f949 	bl	800785c <xTaskRemoveFromEventList>
 80065ca:	e009      	b.n	80065e0 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3310      	adds	r3, #16
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fefd 	bl	80063d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3324      	adds	r3, #36	; 0x24
 80065da:	4618      	mov	r0, r3
 80065dc:	f7ff fef8 	bl	80063d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065e0:	f002 f880 	bl	80086e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065e4:	2301      	movs	r3, #1
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b08e      	sub	sp, #56	; 0x38
 80065f2:	af02      	add	r7, sp, #8
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006614:	bf00      	nop
 8006616:	e7fe      	b.n	8006616 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <xQueueGenericCreateStatic+0x52>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <xQueueGenericCreateStatic+0x56>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <xQueueGenericCreateStatic+0x58>
 8006644:	2300      	movs	r3, #0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	623b      	str	r3, [r7, #32]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <xQueueGenericCreateStatic+0x7e>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <xQueueGenericCreateStatic+0x82>
 800666c:	2301      	movs	r3, #1
 800666e:	e000      	b.n	8006672 <xQueueGenericCreateStatic+0x84>
 8006670:	2300      	movs	r3, #0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	61fb      	str	r3, [r7, #28]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800668c:	2350      	movs	r3, #80	; 0x50
 800668e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b50      	cmp	r3, #80	; 0x50
 8006694:	d00a      	beq.n	80066ac <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	61bb      	str	r3, [r7, #24]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00d      	beq.n	80066d4 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066c0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	4613      	mov	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f83f 	bl	8006752 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3730      	adds	r7, #48	; 0x30
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b08a      	sub	sp, #40	; 0x28
 80066e2:	af02      	add	r7, sp, #8
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	4613      	mov	r3, r2
 80066ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <xQueueGenericCreate+0x2a>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	613b      	str	r3, [r7, #16]
}
 8006704:	bf00      	nop
 8006706:	e7fe      	b.n	8006706 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	fb02 f303 	mul.w	r3, r2, r3
 8006710:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	3350      	adds	r3, #80	; 0x50
 8006716:	4618      	mov	r0, r3
 8006718:	f002 f8d6 	bl	80088c8 <pvPortMalloc>
 800671c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d011      	beq.n	8006748 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	3350      	adds	r3, #80	; 0x50
 800672c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006736:	79fa      	ldrb	r2, [r7, #7]
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f805 	bl	8006752 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006748:	69bb      	ldr	r3, [r7, #24]
	}
 800674a:	4618      	mov	r0, r3
 800674c:	3720      	adds	r7, #32
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	e002      	b.n	8006774 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006780:	2101      	movs	r1, #1
 8006782:	69b8      	ldr	r0, [r7, #24]
 8006784:	f7ff fed8 	bl	8006538 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	78fa      	ldrb	r2, [r7, #3]
 800678c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08e      	sub	sp, #56	; 0x38
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067a6:	2300      	movs	r3, #0
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xQueueGenericSend+0x32>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <xQueueGenericSend+0x40>
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <xQueueGenericSend+0x44>
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <xQueueGenericSend+0x46>
 80067dc:	2300      	movs	r3, #0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <xQueueGenericSend+0x60>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d103      	bne.n	8006806 <xQueueGenericSend+0x6e>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <xQueueGenericSend+0x72>
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <xQueueGenericSend+0x74>
 800680a:	2300      	movs	r3, #0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <xQueueGenericSend+0x8e>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	623b      	str	r3, [r7, #32]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006826:	f001 f9d1 	bl	8007bcc <xTaskGetSchedulerState>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <xQueueGenericSend+0x9e>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <xQueueGenericSend+0xa2>
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <xQueueGenericSend+0xa4>
 800683a:	2300      	movs	r3, #0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <xQueueGenericSend+0xbe>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	61fb      	str	r3, [r7, #28]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006856:	f001 ff15 	bl	8008684 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006862:	429a      	cmp	r2, r3
 8006864:	d302      	bcc.n	800686c <xQueueGenericSend+0xd4>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d112      	bne.n	8006892 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006872:	f000 fa67 	bl	8006d44 <prvCopyDataToQueue>
 8006876:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d004      	beq.n	800688a <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	3324      	adds	r3, #36	; 0x24
 8006884:	4618      	mov	r0, r3
 8006886:	f000 ffe9 	bl	800785c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800688a:	f001 ff2b 	bl	80086e4 <vPortExitCritical>
				return pdPASS;
 800688e:	2301      	movs	r3, #1
 8006890:	e062      	b.n	8006958 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d103      	bne.n	80068a0 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006898:	f001 ff24 	bl	80086e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800689c:	2300      	movs	r3, #0
 800689e:	e05b      	b.n	8006958 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068a6:	f107 0314 	add.w	r3, r7, #20
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 f83a 	bl	8007924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068b0:	2301      	movs	r3, #1
 80068b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068b4:	f001 ff16 	bl	80086e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068b8:	f000 fdde 	bl	8007478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068bc:	f001 fee2 	bl	8008684 <vPortEnterCritical>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068c6:	b25b      	sxtb	r3, r3
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d103      	bne.n	80068d6 <xQueueGenericSend+0x13e>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068dc:	b25b      	sxtb	r3, r3
 80068de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e2:	d103      	bne.n	80068ec <xQueueGenericSend+0x154>
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068ec:	f001 fefa 	bl	80086e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068f0:	1d3a      	adds	r2, r7, #4
 80068f2:	f107 0314 	add.w	r3, r7, #20
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 f829 	bl	8007950 <xTaskCheckForTimeOut>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d123      	bne.n	800694c <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006906:	f000 fb15 	bl	8006f34 <prvIsQueueFull>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d017      	beq.n	8006940 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	3310      	adds	r3, #16
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	4611      	mov	r1, r2
 8006918:	4618      	mov	r0, r3
 800691a:	f000 ff4f 	bl	80077bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800691e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006920:	f000 faa0 	bl	8006e64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006924:	f000 fdb6 	bl	8007494 <xTaskResumeAll>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d193      	bne.n	8006856 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800692e:	4b0c      	ldr	r3, [pc, #48]	; (8006960 <xQueueGenericSend+0x1c8>)
 8006930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	e78a      	b.n	8006856 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006942:	f000 fa8f 	bl	8006e64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006946:	f000 fda5 	bl	8007494 <xTaskResumeAll>
 800694a:	e784      	b.n	8006856 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800694c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800694e:	f000 fa89 	bl	8006e64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006952:	f000 fd9f 	bl	8007494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006956:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006958:	4618      	mov	r0, r3
 800695a:	3738      	adds	r7, #56	; 0x38
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b090      	sub	sp, #64	; 0x40
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d103      	bne.n	80069a0 <xQueueGenericSendFromISR+0x3c>
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <xQueueGenericSendFromISR+0x40>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <xQueueGenericSendFromISR+0x42>
 80069a4:	2300      	movs	r3, #0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d103      	bne.n	80069ce <xQueueGenericSendFromISR+0x6a>
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <xQueueGenericSendFromISR+0x6e>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <xQueueGenericSendFromISR+0x70>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	623b      	str	r3, [r7, #32]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ee:	f001 ff2b 	bl	8008848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069f2:	f3ef 8211 	mrs	r2, BASEPRI
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	61fa      	str	r2, [r7, #28]
 8006a08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d302      	bcc.n	8006a20 <xQueueGenericSendFromISR+0xbc>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d12f      	bne.n	8006a80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a36:	f000 f985 	bl	8006d44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a42:	d112      	bne.n	8006a6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d016      	beq.n	8006a7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	3324      	adds	r3, #36	; 0x24
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 ff03 	bl	800785c <xTaskRemoveFromEventList>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00e      	beq.n	8006a7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	e007      	b.n	8006a7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a6e:	3301      	adds	r3, #1
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	b25a      	sxtb	r2, r3
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006a7e:	e001      	b.n	8006a84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3740      	adds	r7, #64	; 0x40
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08c      	sub	sp, #48	; 0x30
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <xQueueReceive+0x30>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	623b      	str	r3, [r7, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d103      	bne.n	8006ada <xQueueReceive+0x3e>
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <xQueueReceive+0x42>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <xQueueReceive+0x44>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <xQueueReceive+0x5e>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	61fb      	str	r3, [r7, #28]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006afa:	f001 f867 	bl	8007bcc <xTaskGetSchedulerState>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <xQueueReceive+0x6e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <xQueueReceive+0x72>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <xQueueReceive+0x74>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <xQueueReceive+0x8e>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	61bb      	str	r3, [r7, #24]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b2a:	f001 fdab 	bl	8008684 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b3e:	f000 f96b 	bl	8006e18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	1e5a      	subs	r2, r3, #1
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	3310      	adds	r3, #16
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fe80 	bl	800785c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b5c:	f001 fdc2 	bl	80086e4 <vPortExitCritical>
				return pdPASS;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e069      	b.n	8006c38 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d103      	bne.n	8006b72 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b6a:	f001 fdbb 	bl	80086e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e062      	b.n	8006c38 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b78:	f107 0310 	add.w	r3, r7, #16
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fed1 	bl	8007924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b82:	2301      	movs	r3, #1
 8006b84:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b86:	f001 fdad 	bl	80086e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b8a:	f000 fc75 	bl	8007478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b8e:	f001 fd79 	bl	8008684 <vPortEnterCritical>
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9e:	d103      	bne.n	8006ba8 <xQueueReceive+0x10c>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bae:	b25b      	sxtb	r3, r3
 8006bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb4:	d103      	bne.n	8006bbe <xQueueReceive+0x122>
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bbe:	f001 fd91 	bl	80086e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bc2:	1d3a      	adds	r2, r7, #4
 8006bc4:	f107 0310 	add.w	r3, r7, #16
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fec0 	bl	8007950 <xTaskCheckForTimeOut>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d123      	bne.n	8006c1e <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bd8:	f000 f996 	bl	8006f08 <prvIsQueueEmpty>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d017      	beq.n	8006c12 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	3324      	adds	r3, #36	; 0x24
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fde6 	bl	80077bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bf2:	f000 f937 	bl	8006e64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bf6:	f000 fc4d 	bl	8007494 <xTaskResumeAll>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d194      	bne.n	8006b2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c00:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <xQueueReceive+0x1a4>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	e78b      	b.n	8006b2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c14:	f000 f926 	bl	8006e64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c18:	f000 fc3c 	bl	8007494 <xTaskResumeAll>
 8006c1c:	e785      	b.n	8006b2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c20:	f000 f920 	bl	8006e64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c24:	f000 fc36 	bl	8007494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2a:	f000 f96d 	bl	8006f08 <prvIsQueueEmpty>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f43f af7a 	beq.w	8006b2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3730      	adds	r7, #48	; 0x30
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	e000ed04 	.word	0xe000ed04

08006c44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08e      	sub	sp, #56	; 0x38
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	623b      	str	r3, [r7, #32]
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d103      	bne.n	8006c7e <xQueueReceiveFromISR+0x3a>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <xQueueReceiveFromISR+0x3e>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <xQueueReceiveFromISR+0x40>
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	61fb      	str	r3, [r7, #28]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c9e:	f001 fdd3 	bl	8008848 <vPortValidateInterruptPriority>
	__asm volatile
 8006ca2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	61ba      	str	r2, [r7, #24]
 8006cb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006cba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d02f      	beq.n	8006d2a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cd8:	f000 f89e 	bl	8006e18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	1e5a      	subs	r2, r3, #1
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ce4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cec:	d112      	bne.n	8006d14 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d016      	beq.n	8006d24 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	3310      	adds	r3, #16
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fdae 	bl	800785c <xTaskRemoveFromEventList>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00e      	beq.n	8006d24 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	e007      	b.n	8006d24 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d18:	3301      	adds	r3, #1
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	b25a      	sxtb	r2, r3
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006d24:	2301      	movs	r3, #1
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
 8006d28:	e001      	b.n	8006d2e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f383 8811 	msr	BASEPRI, r3
}
 8006d38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3738      	adds	r7, #56	; 0x38
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10d      	bne.n	8006d7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d14d      	bne.n	8006e06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 ff4a 	bl	8007c08 <xTaskPriorityDisinherit>
 8006d74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	609a      	str	r2, [r3, #8]
 8006d7c:	e043      	b.n	8006e06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d119      	bne.n	8006db8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6858      	ldr	r0, [r3, #4]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	f001 ffb2 	bl	8008cf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	441a      	add	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d32b      	bcc.n	8006e06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]
 8006db6:	e026      	b.n	8006e06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68d8      	ldr	r0, [r3, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	68b9      	ldr	r1, [r7, #8]
 8006dc4:	f001 ff98 	bl	8008cf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	425b      	negs	r3, r3
 8006dd2:	441a      	add	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d207      	bcs.n	8006df4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dec:	425b      	negs	r3, r3
 8006dee:	441a      	add	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d105      	bne.n	8006e06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e0e:	697b      	ldr	r3, [r7, #20]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d018      	beq.n	8006e5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	441a      	add	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d303      	bcc.n	8006e4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68d9      	ldr	r1, [r3, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	461a      	mov	r2, r3
 8006e56:	6838      	ldr	r0, [r7, #0]
 8006e58:	f001 ff4e 	bl	8008cf8 <memcpy>
	}
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e6c:	f001 fc0a 	bl	8008684 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e78:	e011      	b.n	8006e9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d012      	beq.n	8006ea8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3324      	adds	r3, #36	; 0x24
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fce8 	bl	800785c <xTaskRemoveFromEventList>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e92:	f000 fdbf 	bl	8007a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	dce9      	bgt.n	8006e7a <prvUnlockQueue+0x16>
 8006ea6:	e000      	b.n	8006eaa <prvUnlockQueue+0x46>
					break;
 8006ea8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	22ff      	movs	r2, #255	; 0xff
 8006eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006eb2:	f001 fc17 	bl	80086e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006eb6:	f001 fbe5 	bl	8008684 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ec0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ec2:	e011      	b.n	8006ee8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d012      	beq.n	8006ef2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3310      	adds	r3, #16
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fcc3 	bl	800785c <xTaskRemoveFromEventList>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006edc:	f000 fd9a 	bl	8007a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	dce9      	bgt.n	8006ec4 <prvUnlockQueue+0x60>
 8006ef0:	e000      	b.n	8006ef4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ef2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	22ff      	movs	r2, #255	; 0xff
 8006ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006efc:	f001 fbf2 	bl	80086e4 <vPortExitCritical>
}
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f10:	f001 fbb8 	bl	8008684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	e001      	b.n	8006f26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f26:	f001 fbdd 	bl	80086e4 <vPortExitCritical>

	return xReturn;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f3c:	f001 fba2 	bl	8008684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d102      	bne.n	8006f52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e001      	b.n	8006f56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f56:	f001 fbc5 	bl	80086e4 <vPortExitCritical>

	return xReturn;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	e014      	b.n	8006f9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f74:	4a0f      	ldr	r2, [pc, #60]	; (8006fb4 <vQueueAddToRegistry+0x50>)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10b      	bne.n	8006f98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f80:	490c      	ldr	r1, [pc, #48]	; (8006fb4 <vQueueAddToRegistry+0x50>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f8a:	4a0a      	ldr	r2, [pc, #40]	; (8006fb4 <vQueueAddToRegistry+0x50>)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4413      	add	r3, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f96:	e006      	b.n	8006fa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b07      	cmp	r3, #7
 8006fa2:	d9e7      	bls.n	8006f74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	200008bc 	.word	0x200008bc

08006fb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fc8:	f001 fb5c 	bl	8008684 <vPortEnterCritical>
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd2:	b25b      	sxtb	r3, r3
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d103      	bne.n	8006fe2 <vQueueWaitForMessageRestricted+0x2a>
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d103      	bne.n	8006ff8 <vQueueWaitForMessageRestricted+0x40>
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ff8:	f001 fb74 	bl	80086e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	2b00      	cmp	r3, #0
 8007002:	d106      	bne.n	8007012 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	3324      	adds	r3, #36	; 0x24
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fbf9 	bl	8007804 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007012:	6978      	ldr	r0, [r7, #20]
 8007014:	f7ff ff26 	bl	8006e64 <prvUnlockQueue>
	}
 8007018:	bf00      	nop
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08e      	sub	sp, #56	; 0x38
 8007024:	af04      	add	r7, sp, #16
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800702e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	623b      	str	r3, [r7, #32]
}
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <xTaskCreateStatic+0x46>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	61fb      	str	r3, [r7, #28]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007066:	235c      	movs	r3, #92	; 0x5c
 8007068:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b5c      	cmp	r3, #92	; 0x5c
 800706e:	d00a      	beq.n	8007086 <xTaskCreateStatic+0x66>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	61bb      	str	r3, [r7, #24]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007086:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01e      	beq.n	80070cc <xTaskCreateStatic+0xac>
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01b      	beq.n	80070cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800709c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	2202      	movs	r2, #2
 80070a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070a6:	2300      	movs	r3, #0
 80070a8:	9303      	str	r3, [sp, #12]
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	9302      	str	r3, [sp, #8]
 80070ae:	f107 0314 	add.w	r3, r7, #20
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	68b9      	ldr	r1, [r7, #8]
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 f850 	bl	8007164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070c6:	f000 f8dd 	bl	8007284 <prvAddNewTaskToReadyList>
 80070ca:	e001      	b.n	80070d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070d0:	697b      	ldr	r3, [r7, #20]
	}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3728      	adds	r7, #40	; 0x28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b08c      	sub	sp, #48	; 0x30
 80070de:	af04      	add	r7, sp, #16
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	603b      	str	r3, [r7, #0]
 80070e6:	4613      	mov	r3, r2
 80070e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 fbea 	bl	80088c8 <pvPortMalloc>
 80070f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00e      	beq.n	800711a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070fc:	205c      	movs	r0, #92	; 0x5c
 80070fe:	f001 fbe3 	bl	80088c8 <pvPortMalloc>
 8007102:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	631a      	str	r2, [r3, #48]	; 0x30
 8007110:	e005      	b.n	800711e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007112:	6978      	ldr	r0, [r7, #20]
 8007114:	f001 fca4 	bl	8008a60 <vPortFree>
 8007118:	e001      	b.n	800711e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800711a:	2300      	movs	r3, #0
 800711c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d017      	beq.n	8007154 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800712c:	88fa      	ldrh	r2, [r7, #6]
 800712e:	2300      	movs	r3, #0
 8007130:	9303      	str	r3, [sp, #12]
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	9302      	str	r3, [sp, #8]
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 f80e 	bl	8007164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007148:	69f8      	ldr	r0, [r7, #28]
 800714a:	f000 f89b 	bl	8007284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800714e:	2301      	movs	r3, #1
 8007150:	61bb      	str	r3, [r7, #24]
 8007152:	e002      	b.n	800715a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007154:	f04f 33ff 	mov.w	r3, #4294967295
 8007158:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800715a:	69bb      	ldr	r3, [r7, #24]
	}
 800715c:	4618      	mov	r0, r3
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	461a      	mov	r2, r3
 800717c:	21a5      	movs	r1, #165	; 0xa5
 800717e:	f001 fdc9 	bl	8008d14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800718c:	3b01      	subs	r3, #1
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	f023 0307 	bic.w	r3, r3, #7
 800719a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	617b      	str	r3, [r7, #20]
}
 80071b8:	bf00      	nop
 80071ba:	e7fe      	b.n	80071ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d01f      	beq.n	8007202 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
 80071c6:	e012      	b.n	80071ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	7819      	ldrb	r1, [r3, #0]
 80071d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	3334      	adds	r3, #52	; 0x34
 80071d8:	460a      	mov	r2, r1
 80071da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	4413      	add	r3, r2
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	3301      	adds	r3, #1
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	2b0f      	cmp	r3, #15
 80071f2:	d9e9      	bls.n	80071c8 <prvInitialiseNewTask+0x64>
 80071f4:	e000      	b.n	80071f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80071f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007200:	e003      	b.n	800720a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	2b37      	cmp	r3, #55	; 0x37
 800720e:	d901      	bls.n	8007214 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007210:	2337      	movs	r3, #55	; 0x37
 8007212:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007218:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800721e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	2200      	movs	r2, #0
 8007224:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	3304      	adds	r3, #4
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff f8f0 	bl	8006410 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	3318      	adds	r3, #24
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff f8eb 	bl	8006410 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	2200      	movs	r2, #0
 8007254:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	68f9      	ldr	r1, [r7, #12]
 8007262:	69b8      	ldr	r0, [r7, #24]
 8007264:	f001 f8e0 	bl	8008428 <pxPortInitialiseStack>
 8007268:	4602      	mov	r2, r0
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800727a:	bf00      	nop
 800727c:	3720      	adds	r7, #32
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800728c:	f001 f9fa 	bl	8008684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007290:	4b26      	ldr	r3, [pc, #152]	; (800732c <prvAddNewTaskToReadyList+0xa8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3301      	adds	r3, #1
 8007296:	4a25      	ldr	r2, [pc, #148]	; (800732c <prvAddNewTaskToReadyList+0xa8>)
 8007298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800729a:	4b25      	ldr	r3, [pc, #148]	; (8007330 <prvAddNewTaskToReadyList+0xac>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072a2:	4a23      	ldr	r2, [pc, #140]	; (8007330 <prvAddNewTaskToReadyList+0xac>)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072a8:	4b20      	ldr	r3, [pc, #128]	; (800732c <prvAddNewTaskToReadyList+0xa8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d110      	bne.n	80072d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072b0:	f000 fbce 	bl	8007a50 <prvInitialiseTaskLists>
 80072b4:	e00d      	b.n	80072d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072b6:	4b1f      	ldr	r3, [pc, #124]	; (8007334 <prvAddNewTaskToReadyList+0xb0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d109      	bne.n	80072d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072be:	4b1c      	ldr	r3, [pc, #112]	; (8007330 <prvAddNewTaskToReadyList+0xac>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d802      	bhi.n	80072d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072cc:	4a18      	ldr	r2, [pc, #96]	; (8007330 <prvAddNewTaskToReadyList+0xac>)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072d2:	4b19      	ldr	r3, [pc, #100]	; (8007338 <prvAddNewTaskToReadyList+0xb4>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3301      	adds	r3, #1
 80072d8:	4a17      	ldr	r2, [pc, #92]	; (8007338 <prvAddNewTaskToReadyList+0xb4>)
 80072da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072dc:	4b16      	ldr	r3, [pc, #88]	; (8007338 <prvAddNewTaskToReadyList+0xb4>)
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e8:	4b14      	ldr	r3, [pc, #80]	; (800733c <prvAddNewTaskToReadyList+0xb8>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d903      	bls.n	80072f8 <prvAddNewTaskToReadyList+0x74>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	4a11      	ldr	r2, [pc, #68]	; (800733c <prvAddNewTaskToReadyList+0xb8>)
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4a0e      	ldr	r2, [pc, #56]	; (8007340 <prvAddNewTaskToReadyList+0xbc>)
 8007306:	441a      	add	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3304      	adds	r3, #4
 800730c:	4619      	mov	r1, r3
 800730e:	4610      	mov	r0, r2
 8007310:	f7ff f88b 	bl	800642a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007314:	f001 f9e6 	bl	80086e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007318:	4b06      	ldr	r3, [pc, #24]	; (8007334 <prvAddNewTaskToReadyList+0xb0>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007320:	4b03      	ldr	r3, [pc, #12]	; (8007330 <prvAddNewTaskToReadyList+0xac>)
 8007322:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007324:	bf00      	nop
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20000dd0 	.word	0x20000dd0
 8007330:	200008fc 	.word	0x200008fc
 8007334:	20000ddc 	.word	0x20000ddc
 8007338:	20000dec 	.word	0x20000dec
 800733c:	20000dd8 	.word	0x20000dd8
 8007340:	20000900 	.word	0x20000900

08007344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d017      	beq.n	8007386 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007356:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <vTaskDelay+0x60>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <vTaskDelay+0x30>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	60bb      	str	r3, [r7, #8]
}
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007374:	f000 f880 	bl	8007478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007378:	2100      	movs	r1, #0
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fcb2 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007380:	f000 f888 	bl	8007494 <xTaskResumeAll>
 8007384:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d107      	bne.n	800739c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800738c:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <vTaskDelay+0x64>)
 800738e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800739c:	bf00      	nop
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000df8 	.word	0x20000df8
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08a      	sub	sp, #40	; 0x28
 80073b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073ba:	463a      	mov	r2, r7
 80073bc:	1d39      	adds	r1, r7, #4
 80073be:	f107 0308 	add.w	r3, r7, #8
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe ffd0 	bl	8006368 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	9202      	str	r2, [sp, #8]
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	2300      	movs	r3, #0
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	2300      	movs	r3, #0
 80073d8:	460a      	mov	r2, r1
 80073da:	4921      	ldr	r1, [pc, #132]	; (8007460 <vTaskStartScheduler+0xb4>)
 80073dc:	4821      	ldr	r0, [pc, #132]	; (8007464 <vTaskStartScheduler+0xb8>)
 80073de:	f7ff fe1f 	bl	8007020 <xTaskCreateStatic>
 80073e2:	4603      	mov	r3, r0
 80073e4:	4a20      	ldr	r2, [pc, #128]	; (8007468 <vTaskStartScheduler+0xbc>)
 80073e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073e8:	4b1f      	ldr	r3, [pc, #124]	; (8007468 <vTaskStartScheduler+0xbc>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073f0:	2301      	movs	r3, #1
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	e001      	b.n	80073fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d102      	bne.n	8007406 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007400:	f000 fcc4 	bl	8007d8c <xTimerCreateTimerTask>
 8007404:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d116      	bne.n	800743a <vTaskStartScheduler+0x8e>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	613b      	str	r3, [r7, #16]
}
 800741e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007420:	4b12      	ldr	r3, [pc, #72]	; (800746c <vTaskStartScheduler+0xc0>)
 8007422:	f04f 32ff 	mov.w	r2, #4294967295
 8007426:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007428:	4b11      	ldr	r3, [pc, #68]	; (8007470 <vTaskStartScheduler+0xc4>)
 800742a:	2201      	movs	r2, #1
 800742c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800742e:	4b11      	ldr	r3, [pc, #68]	; (8007474 <vTaskStartScheduler+0xc8>)
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007434:	f001 f884 	bl	8008540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007438:	e00e      	b.n	8007458 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007440:	d10a      	bne.n	8007458 <vTaskStartScheduler+0xac>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	60fb      	str	r3, [r7, #12]
}
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <vTaskStartScheduler+0xaa>
}
 8007458:	bf00      	nop
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	08008e84 	.word	0x08008e84
 8007464:	08007a2d 	.word	0x08007a2d
 8007468:	20000df4 	.word	0x20000df4
 800746c:	20000df0 	.word	0x20000df0
 8007470:	20000ddc 	.word	0x20000ddc
 8007474:	20000dd4 	.word	0x20000dd4

08007478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <vTaskSuspendAll+0x18>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	4a03      	ldr	r2, [pc, #12]	; (8007490 <vTaskSuspendAll+0x18>)
 8007484:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007486:	bf00      	nop
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	20000df8 	.word	0x20000df8

08007494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800749e:	2300      	movs	r3, #0
 80074a0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074a2:	4b3c      	ldr	r3, [pc, #240]	; (8007594 <xTaskResumeAll+0x100>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	603b      	str	r3, [r7, #0]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074c0:	f001 f8e0 	bl	8008684 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074c4:	4b33      	ldr	r3, [pc, #204]	; (8007594 <xTaskResumeAll+0x100>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	4a32      	ldr	r2, [pc, #200]	; (8007594 <xTaskResumeAll+0x100>)
 80074cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ce:	4b31      	ldr	r3, [pc, #196]	; (8007594 <xTaskResumeAll+0x100>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d156      	bne.n	8007584 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074d6:	4b30      	ldr	r3, [pc, #192]	; (8007598 <xTaskResumeAll+0x104>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d052      	beq.n	8007584 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074de:	e02f      	b.n	8007540 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e0:	4b2e      	ldr	r3, [pc, #184]	; (800759c <xTaskResumeAll+0x108>)
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3318      	adds	r3, #24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe fff9 	bl	80064e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3304      	adds	r3, #4
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe fff4 	bl	80064e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007500:	4b27      	ldr	r3, [pc, #156]	; (80075a0 <xTaskResumeAll+0x10c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d903      	bls.n	8007510 <xTaskResumeAll+0x7c>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	4a24      	ldr	r2, [pc, #144]	; (80075a0 <xTaskResumeAll+0x10c>)
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4a21      	ldr	r2, [pc, #132]	; (80075a4 <xTaskResumeAll+0x110>)
 800751e:	441a      	add	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3304      	adds	r3, #4
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f7fe ff7f 	bl	800642a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007530:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <xTaskResumeAll+0x114>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	429a      	cmp	r2, r3
 8007538:	d302      	bcc.n	8007540 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800753a:	4b1c      	ldr	r3, [pc, #112]	; (80075ac <xTaskResumeAll+0x118>)
 800753c:	2201      	movs	r2, #1
 800753e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007540:	4b16      	ldr	r3, [pc, #88]	; (800759c <xTaskResumeAll+0x108>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1cb      	bne.n	80074e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800754e:	f000 fb1d 	bl	8007b8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007552:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <xTaskResumeAll+0x11c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d010      	beq.n	8007580 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800755e:	f000 f839 	bl	80075d4 <xTaskIncrementTick>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007568:	4b10      	ldr	r3, [pc, #64]	; (80075ac <xTaskResumeAll+0x118>)
 800756a:	2201      	movs	r2, #1
 800756c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	3b01      	subs	r3, #1
 8007572:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1f1      	bne.n	800755e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800757a:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <xTaskResumeAll+0x11c>)
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <xTaskResumeAll+0x118>)
 8007582:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007584:	f001 f8ae 	bl	80086e4 <vPortExitCritical>

	return xAlreadyYielded;
 8007588:	687b      	ldr	r3, [r7, #4]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000df8 	.word	0x20000df8
 8007598:	20000dd0 	.word	0x20000dd0
 800759c:	20000d90 	.word	0x20000d90
 80075a0:	20000dd8 	.word	0x20000dd8
 80075a4:	20000900 	.word	0x20000900
 80075a8:	200008fc 	.word	0x200008fc
 80075ac:	20000de4 	.word	0x20000de4
 80075b0:	20000de0 	.word	0x20000de0

080075b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075ba:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <xTaskGetTickCount+0x1c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075c0:	687b      	ldr	r3, [r7, #4]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20000dd4 	.word	0x20000dd4

080075d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075de:	4b3f      	ldr	r3, [pc, #252]	; (80076dc <xTaskIncrementTick+0x108>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d170      	bne.n	80076c8 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075e6:	4b3e      	ldr	r3, [pc, #248]	; (80076e0 <xTaskIncrementTick+0x10c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075ee:	4a3c      	ldr	r2, [pc, #240]	; (80076e0 <xTaskIncrementTick+0x10c>)
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d120      	bne.n	800763c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80075fa:	4b3a      	ldr	r3, [pc, #232]	; (80076e4 <xTaskIncrementTick+0x110>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <xTaskIncrementTick+0x46>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	603b      	str	r3, [r7, #0]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xTaskIncrementTick+0x44>
 800761a:	4b32      	ldr	r3, [pc, #200]	; (80076e4 <xTaskIncrementTick+0x110>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	4b31      	ldr	r3, [pc, #196]	; (80076e8 <xTaskIncrementTick+0x114>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2f      	ldr	r2, [pc, #188]	; (80076e4 <xTaskIncrementTick+0x110>)
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	4a2f      	ldr	r2, [pc, #188]	; (80076e8 <xTaskIncrementTick+0x114>)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	4b2f      	ldr	r3, [pc, #188]	; (80076ec <xTaskIncrementTick+0x118>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3301      	adds	r3, #1
 8007634:	4a2d      	ldr	r2, [pc, #180]	; (80076ec <xTaskIncrementTick+0x118>)
 8007636:	6013      	str	r3, [r2, #0]
 8007638:	f000 faa8 	bl	8007b8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800763c:	4b2c      	ldr	r3, [pc, #176]	; (80076f0 <xTaskIncrementTick+0x11c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	429a      	cmp	r2, r3
 8007644:	d345      	bcc.n	80076d2 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007646:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <xTaskIncrementTick+0x110>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007650:	4b27      	ldr	r3, [pc, #156]	; (80076f0 <xTaskIncrementTick+0x11c>)
 8007652:	f04f 32ff 	mov.w	r2, #4294967295
 8007656:	601a      	str	r2, [r3, #0]
					break;
 8007658:	e03b      	b.n	80076d2 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765a:	4b22      	ldr	r3, [pc, #136]	; (80076e4 <xTaskIncrementTick+0x110>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d203      	bcs.n	800767a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007672:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <xTaskIncrementTick+0x11c>)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007678:	e02b      	b.n	80076d2 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3304      	adds	r3, #4
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe ff30 	bl	80064e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	3318      	adds	r3, #24
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe ff27 	bl	80064e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	4b16      	ldr	r3, [pc, #88]	; (80076f4 <xTaskIncrementTick+0x120>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d903      	bls.n	80076aa <xTaskIncrementTick+0xd6>
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	4a13      	ldr	r2, [pc, #76]	; (80076f4 <xTaskIncrementTick+0x120>)
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4a10      	ldr	r2, [pc, #64]	; (80076f8 <xTaskIncrementTick+0x124>)
 80076b8:	441a      	add	r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	3304      	adds	r3, #4
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f7fe feb2 	bl	800642a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076c6:	e7be      	b.n	8007646 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <xTaskIncrementTick+0x128>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3301      	adds	r3, #1
 80076ce:	4a0b      	ldr	r2, [pc, #44]	; (80076fc <xTaskIncrementTick+0x128>)
 80076d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076d2:	697b      	ldr	r3, [r7, #20]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20000df8 	.word	0x20000df8
 80076e0:	20000dd4 	.word	0x20000dd4
 80076e4:	20000d88 	.word	0x20000d88
 80076e8:	20000d8c 	.word	0x20000d8c
 80076ec:	20000de8 	.word	0x20000de8
 80076f0:	20000df0 	.word	0x20000df0
 80076f4:	20000dd8 	.word	0x20000dd8
 80076f8:	20000900 	.word	0x20000900
 80076fc:	20000de0 	.word	0x20000de0

08007700 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007706:	4b28      	ldr	r3, [pc, #160]	; (80077a8 <vTaskSwitchContext+0xa8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800770e:	4b27      	ldr	r3, [pc, #156]	; (80077ac <vTaskSwitchContext+0xac>)
 8007710:	2201      	movs	r2, #1
 8007712:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007714:	e041      	b.n	800779a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007716:	4b25      	ldr	r3, [pc, #148]	; (80077ac <vTaskSwitchContext+0xac>)
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800771c:	4b24      	ldr	r3, [pc, #144]	; (80077b0 <vTaskSwitchContext+0xb0>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	e010      	b.n	8007746 <vTaskSwitchContext+0x46>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <vTaskSwitchContext+0x40>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	607b      	str	r3, [r7, #4]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <vTaskSwitchContext+0x3e>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3b01      	subs	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	491b      	ldr	r1, [pc, #108]	; (80077b4 <vTaskSwitchContext+0xb4>)
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	440b      	add	r3, r1
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0e4      	beq.n	8007724 <vTaskSwitchContext+0x24>
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4a13      	ldr	r2, [pc, #76]	; (80077b4 <vTaskSwitchContext+0xb4>)
 8007766:	4413      	add	r3, r2
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	605a      	str	r2, [r3, #4]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3308      	adds	r3, #8
 800777c:	429a      	cmp	r2, r3
 800777e:	d104      	bne.n	800778a <vTaskSwitchContext+0x8a>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	605a      	str	r2, [r3, #4]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	4a09      	ldr	r2, [pc, #36]	; (80077b8 <vTaskSwitchContext+0xb8>)
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	4a06      	ldr	r2, [pc, #24]	; (80077b0 <vTaskSwitchContext+0xb0>)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6013      	str	r3, [r2, #0]
}
 800779a:	bf00      	nop
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	20000df8 	.word	0x20000df8
 80077ac:	20000de4 	.word	0x20000de4
 80077b0:	20000dd8 	.word	0x20000dd8
 80077b4:	20000900 	.word	0x20000900
 80077b8:	200008fc 	.word	0x200008fc

080077bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60fb      	str	r3, [r7, #12]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077e2:	4b07      	ldr	r3, [pc, #28]	; (8007800 <vTaskPlaceOnEventList+0x44>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3318      	adds	r3, #24
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fe fe41 	bl	8006472 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077f0:	2101      	movs	r1, #1
 80077f2:	6838      	ldr	r0, [r7, #0]
 80077f4:	f000 fa76 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>
}
 80077f8:	bf00      	nop
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	200008fc 	.word	0x200008fc

08007804 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	617b      	str	r3, [r7, #20]
}
 8007828:	bf00      	nop
 800782a:	e7fe      	b.n	800782a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800782c:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <vTaskPlaceOnEventListRestricted+0x54>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3318      	adds	r3, #24
 8007832:	4619      	mov	r1, r3
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7fe fdf8 	bl	800642a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007840:	f04f 33ff 	mov.w	r3, #4294967295
 8007844:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	68b8      	ldr	r0, [r7, #8]
 800784a:	f000 fa4b 	bl	8007ce4 <prvAddCurrentTaskToDelayedList>
	}
 800784e:	bf00      	nop
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	200008fc 	.word	0x200008fc

0800785c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	60fb      	str	r3, [r7, #12]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	3318      	adds	r3, #24
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe fe29 	bl	80064e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007892:	4b1e      	ldr	r3, [pc, #120]	; (800790c <xTaskRemoveFromEventList+0xb0>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d11d      	bne.n	80078d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	3304      	adds	r3, #4
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe fe20 	bl	80064e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a8:	4b19      	ldr	r3, [pc, #100]	; (8007910 <xTaskRemoveFromEventList+0xb4>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d903      	bls.n	80078b8 <xTaskRemoveFromEventList+0x5c>
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	4a16      	ldr	r2, [pc, #88]	; (8007910 <xTaskRemoveFromEventList+0xb4>)
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4a13      	ldr	r2, [pc, #76]	; (8007914 <xTaskRemoveFromEventList+0xb8>)
 80078c6:	441a      	add	r2, r3
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f7fe fdab 	bl	800642a <vListInsertEnd>
 80078d4:	e005      	b.n	80078e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	3318      	adds	r3, #24
 80078da:	4619      	mov	r1, r3
 80078dc:	480e      	ldr	r0, [pc, #56]	; (8007918 <xTaskRemoveFromEventList+0xbc>)
 80078de:	f7fe fda4 	bl	800642a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <xTaskRemoveFromEventList+0xc0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d905      	bls.n	80078fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078f0:	2301      	movs	r3, #1
 80078f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <xTaskRemoveFromEventList+0xc4>)
 80078f6:	2201      	movs	r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	e001      	b.n	8007900 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007900:	697b      	ldr	r3, [r7, #20]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000df8 	.word	0x20000df8
 8007910:	20000dd8 	.word	0x20000dd8
 8007914:	20000900 	.word	0x20000900
 8007918:	20000d90 	.word	0x20000d90
 800791c:	200008fc 	.word	0x200008fc
 8007920:	20000de4 	.word	0x20000de4

08007924 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <vTaskInternalSetTimeOutState+0x24>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007934:	4b05      	ldr	r3, [pc, #20]	; (800794c <vTaskInternalSetTimeOutState+0x28>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	605a      	str	r2, [r3, #4]
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	20000de8 	.word	0x20000de8
 800794c:	20000dd4 	.word	0x20000dd4

08007950 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	613b      	str	r3, [r7, #16]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	60fb      	str	r3, [r7, #12]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007992:	f000 fe77 	bl	8008684 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007996:	4b1d      	ldr	r3, [pc, #116]	; (8007a0c <xTaskCheckForTimeOut+0xbc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d102      	bne.n	80079b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	e023      	b.n	80079fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4b15      	ldr	r3, [pc, #84]	; (8007a10 <xTaskCheckForTimeOut+0xc0>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d007      	beq.n	80079d2 <xTaskCheckForTimeOut+0x82>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d302      	bcc.n	80079d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	61fb      	str	r3, [r7, #28]
 80079d0:	e015      	b.n	80079fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d20b      	bcs.n	80079f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	1ad2      	subs	r2, r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff ff9b 	bl	8007924 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]
 80079f2:	e004      	b.n	80079fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079fa:	2301      	movs	r3, #1
 80079fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079fe:	f000 fe71 	bl	80086e4 <vPortExitCritical>

	return xReturn;
 8007a02:	69fb      	ldr	r3, [r7, #28]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20000dd4 	.word	0x20000dd4
 8007a10:	20000de8 	.word	0x20000de8

08007a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a18:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <vTaskMissedYield+0x14>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]
}
 8007a1e:	bf00      	nop
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	20000de4 	.word	0x20000de4

08007a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a34:	f000 f84c 	bl	8007ad0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8007a38:	4b04      	ldr	r3, [pc, #16]	; (8007a4c <prvIdleTask+0x20>)
 8007a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a48:	e7f4      	b.n	8007a34 <prvIdleTask+0x8>
 8007a4a:	bf00      	nop
 8007a4c:	e000ed04 	.word	0xe000ed04

08007a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a56:	2300      	movs	r3, #0
 8007a58:	607b      	str	r3, [r7, #4]
 8007a5a:	e00c      	b.n	8007a76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <prvInitialiseTaskLists+0x60>)
 8007a68:	4413      	add	r3, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fcb0 	bl	80063d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3301      	adds	r3, #1
 8007a74:	607b      	str	r3, [r7, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b37      	cmp	r3, #55	; 0x37
 8007a7a:	d9ef      	bls.n	8007a5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a7c:	480d      	ldr	r0, [pc, #52]	; (8007ab4 <prvInitialiseTaskLists+0x64>)
 8007a7e:	f7fe fca7 	bl	80063d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a82:	480d      	ldr	r0, [pc, #52]	; (8007ab8 <prvInitialiseTaskLists+0x68>)
 8007a84:	f7fe fca4 	bl	80063d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a88:	480c      	ldr	r0, [pc, #48]	; (8007abc <prvInitialiseTaskLists+0x6c>)
 8007a8a:	f7fe fca1 	bl	80063d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a8e:	480c      	ldr	r0, [pc, #48]	; (8007ac0 <prvInitialiseTaskLists+0x70>)
 8007a90:	f7fe fc9e 	bl	80063d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a94:	480b      	ldr	r0, [pc, #44]	; (8007ac4 <prvInitialiseTaskLists+0x74>)
 8007a96:	f7fe fc9b 	bl	80063d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <prvInitialiseTaskLists+0x78>)
 8007a9c:	4a05      	ldr	r2, [pc, #20]	; (8007ab4 <prvInitialiseTaskLists+0x64>)
 8007a9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <prvInitialiseTaskLists+0x7c>)
 8007aa2:	4a05      	ldr	r2, [pc, #20]	; (8007ab8 <prvInitialiseTaskLists+0x68>)
 8007aa4:	601a      	str	r2, [r3, #0]
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000900 	.word	0x20000900
 8007ab4:	20000d60 	.word	0x20000d60
 8007ab8:	20000d74 	.word	0x20000d74
 8007abc:	20000d90 	.word	0x20000d90
 8007ac0:	20000da4 	.word	0x20000da4
 8007ac4:	20000dbc 	.word	0x20000dbc
 8007ac8:	20000d88 	.word	0x20000d88
 8007acc:	20000d8c 	.word	0x20000d8c

08007ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ad6:	e019      	b.n	8007b0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ad8:	f000 fdd4 	bl	8008684 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007adc:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <prvCheckTasksWaitingTermination+0x50>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe fcfb 	bl	80064e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007aee:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <prvCheckTasksWaitingTermination+0x54>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	4a0b      	ldr	r2, [pc, #44]	; (8007b24 <prvCheckTasksWaitingTermination+0x54>)
 8007af6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <prvCheckTasksWaitingTermination+0x58>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	4a0a      	ldr	r2, [pc, #40]	; (8007b28 <prvCheckTasksWaitingTermination+0x58>)
 8007b00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b02:	f000 fdef 	bl	80086e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f810 	bl	8007b2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b0c:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <prvCheckTasksWaitingTermination+0x58>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e1      	bne.n	8007ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000da4 	.word	0x20000da4
 8007b24:	20000dd0 	.word	0x20000dd0
 8007b28:	20000db8 	.word	0x20000db8

08007b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d108      	bne.n	8007b50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 ff8c 	bl	8008a60 <vPortFree>
				vPortFree( pxTCB );
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 ff89 	bl	8008a60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b4e:	e018      	b.n	8007b82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d103      	bne.n	8007b62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 ff80 	bl	8008a60 <vPortFree>
	}
 8007b60:	e00f      	b.n	8007b82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d00a      	beq.n	8007b82 <prvDeleteTCB+0x56>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	60fb      	str	r3, [r7, #12]
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <prvDeleteTCB+0x54>
	}
 8007b82:	bf00      	nop
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <prvResetNextTaskUnblockTime+0x38>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d104      	bne.n	8007ba6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <prvResetNextTaskUnblockTime+0x3c>)
 8007b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ba4:	e008      	b.n	8007bb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba6:	4b07      	ldr	r3, [pc, #28]	; (8007bc4 <prvResetNextTaskUnblockTime+0x38>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	4a04      	ldr	r2, [pc, #16]	; (8007bc8 <prvResetNextTaskUnblockTime+0x3c>)
 8007bb6:	6013      	str	r3, [r2, #0]
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	20000d88 	.word	0x20000d88
 8007bc8:	20000df0 	.word	0x20000df0

08007bcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <xTaskGetSchedulerState+0x34>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d102      	bne.n	8007be0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	607b      	str	r3, [r7, #4]
 8007bde:	e008      	b.n	8007bf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007be0:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <xTaskGetSchedulerState+0x38>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007be8:	2302      	movs	r3, #2
 8007bea:	607b      	str	r3, [r7, #4]
 8007bec:	e001      	b.n	8007bf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bf2:	687b      	ldr	r3, [r7, #4]
	}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	20000ddc 	.word	0x20000ddc
 8007c04:	20000df8 	.word	0x20000df8

08007c08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c14:	2300      	movs	r3, #0
 8007c16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d056      	beq.n	8007ccc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c1e:	4b2e      	ldr	r3, [pc, #184]	; (8007cd8 <xTaskPriorityDisinherit+0xd0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d00a      	beq.n	8007c3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	60fb      	str	r3, [r7, #12]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60bb      	str	r3, [r7, #8]
}
 8007c58:	bf00      	nop
 8007c5a:	e7fe      	b.n	8007c5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c60:	1e5a      	subs	r2, r3, #1
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d02c      	beq.n	8007ccc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d128      	bne.n	8007ccc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fc30 	bl	80064e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9c:	4b0f      	ldr	r3, [pc, #60]	; (8007cdc <xTaskPriorityDisinherit+0xd4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d903      	bls.n	8007cac <xTaskPriorityDisinherit+0xa4>
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	4a0c      	ldr	r2, [pc, #48]	; (8007cdc <xTaskPriorityDisinherit+0xd4>)
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4a09      	ldr	r2, [pc, #36]	; (8007ce0 <xTaskPriorityDisinherit+0xd8>)
 8007cba:	441a      	add	r2, r3
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	f7fe fbb1 	bl	800642a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ccc:	697b      	ldr	r3, [r7, #20]
	}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	200008fc 	.word	0x200008fc
 8007cdc:	20000dd8 	.word	0x20000dd8
 8007ce0:	20000900 	.word	0x20000900

08007ce4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cee:	4b21      	ldr	r3, [pc, #132]	; (8007d74 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf4:	4b20      	ldr	r3, [pc, #128]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fbf2 	bl	80064e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d10a      	bne.n	8007d1e <prvAddCurrentTaskToDelayedList+0x3a>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d007      	beq.n	8007d1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d0e:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4619      	mov	r1, r3
 8007d16:	4819      	ldr	r0, [pc, #100]	; (8007d7c <prvAddCurrentTaskToDelayedList+0x98>)
 8007d18:	f7fe fb87 	bl	800642a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d1c:	e026      	b.n	8007d6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4413      	add	r3, r2
 8007d24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d26:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d209      	bcs.n	8007d4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d36:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f7fe fb95 	bl	8006472 <vListInsert>
}
 8007d48:	e010      	b.n	8007d6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f7fe fb8b 	bl	8006472 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d202      	bcs.n	8007d6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d66:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6013      	str	r3, [r2, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	20000dd4 	.word	0x20000dd4
 8007d78:	200008fc 	.word	0x200008fc
 8007d7c:	20000dbc 	.word	0x20000dbc
 8007d80:	20000d8c 	.word	0x20000d8c
 8007d84:	20000d88 	.word	0x20000d88
 8007d88:	20000df0 	.word	0x20000df0

08007d8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	; 0x28
 8007d90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d96:	f000 fb07 	bl	80083a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d9a:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <xTimerCreateTimerTask+0x80>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d021      	beq.n	8007de6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007daa:	1d3a      	adds	r2, r7, #4
 8007dac:	f107 0108 	add.w	r1, r7, #8
 8007db0:	f107 030c 	add.w	r3, r7, #12
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe faf1 	bl	800639c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	9202      	str	r2, [sp, #8]
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	460a      	mov	r2, r1
 8007dcc:	4910      	ldr	r1, [pc, #64]	; (8007e10 <xTimerCreateTimerTask+0x84>)
 8007dce:	4811      	ldr	r0, [pc, #68]	; (8007e14 <xTimerCreateTimerTask+0x88>)
 8007dd0:	f7ff f926 	bl	8007020 <xTaskCreateStatic>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	4a10      	ldr	r2, [pc, #64]	; (8007e18 <xTimerCreateTimerTask+0x8c>)
 8007dd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dda:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <xTimerCreateTimerTask+0x8c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007de2:	2301      	movs	r3, #1
 8007de4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	613b      	str	r3, [r7, #16]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e02:	697b      	ldr	r3, [r7, #20]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20000e2c 	.word	0x20000e2c
 8007e10:	08008e8c 	.word	0x08008e8c
 8007e14:	08007f51 	.word	0x08007f51
 8007e18:	20000e30 	.word	0x20000e30

08007e1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	623b      	str	r3, [r7, #32]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e4a:	4b1a      	ldr	r3, [pc, #104]	; (8007eb4 <xTimerGenericCommand+0x98>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d02a      	beq.n	8007ea8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	dc18      	bgt.n	8007e96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e64:	f7ff feb2 	bl	8007bcc <xTaskGetSchedulerState>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d109      	bne.n	8007e82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e6e:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <xTimerGenericCommand+0x98>)
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	f107 0110 	add.w	r1, r7, #16
 8007e76:	2300      	movs	r3, #0
 8007e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7a:	f7fe fc8d 	bl	8006798 <xQueueGenericSend>
 8007e7e:	6278      	str	r0, [r7, #36]	; 0x24
 8007e80:	e012      	b.n	8007ea8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e82:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <xTimerGenericCommand+0x98>)
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	f107 0110 	add.w	r1, r7, #16
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f7fe fc83 	bl	8006798 <xQueueGenericSend>
 8007e92:	6278      	str	r0, [r7, #36]	; 0x24
 8007e94:	e008      	b.n	8007ea8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <xTimerGenericCommand+0x98>)
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	f107 0110 	add.w	r1, r7, #16
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	f7fe fd5f 	bl	8006964 <xQueueGenericSendFromISR>
 8007ea6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3728      	adds	r7, #40	; 0x28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000e2c 	.word	0x20000e2c

08007eb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec2:	4b22      	ldr	r3, [pc, #136]	; (8007f4c <prvProcessExpiredTimer+0x94>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fb07 	bl	80064e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d022      	beq.n	8007f2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	699a      	ldr	r2, [r3, #24]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	18d1      	adds	r1, r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	6978      	ldr	r0, [r7, #20]
 8007ef2:	f000 f8d1 	bl	8008098 <prvInsertTimerInActiveList>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01f      	beq.n	8007f3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007efc:	2300      	movs	r3, #0
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	2300      	movs	r3, #0
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	2100      	movs	r1, #0
 8007f06:	6978      	ldr	r0, [r7, #20]
 8007f08:	f7ff ff88 	bl	8007e1c <xTimerGenericCommand>
 8007f0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d113      	bne.n	8007f3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	60fb      	str	r3, [r7, #12]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f30:	f023 0301 	bic.w	r3, r3, #1
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	6978      	ldr	r0, [r7, #20]
 8007f42:	4798      	blx	r3
}
 8007f44:	bf00      	nop
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20000e24 	.word	0x20000e24

08007f50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f58:	f107 0308 	add.w	r3, r7, #8
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 f857 	bl	8008010 <prvGetNextExpireTime>
 8007f62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	4619      	mov	r1, r3
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f803 	bl	8007f74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f6e:	f000 f8d5 	bl	800811c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f72:	e7f1      	b.n	8007f58 <prvTimerTask+0x8>

08007f74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f7e:	f7ff fa7b 	bl	8007478 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f82:	f107 0308 	add.w	r3, r7, #8
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f866 	bl	8008058 <prvSampleTimeNow>
 8007f8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d130      	bne.n	8007ff6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <prvProcessTimerOrBlockTask+0x3c>
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d806      	bhi.n	8007fb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fa2:	f7ff fa77 	bl	8007494 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fa6:	68f9      	ldr	r1, [r7, #12]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff ff85 	bl	8007eb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fae:	e024      	b.n	8007ffa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fb6:	4b13      	ldr	r3, [pc, #76]	; (8008004 <prvProcessTimerOrBlockTask+0x90>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <prvProcessTimerOrBlockTask+0x50>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <prvProcessTimerOrBlockTask+0x52>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fc8:	4b0f      	ldr	r3, [pc, #60]	; (8008008 <prvProcessTimerOrBlockTask+0x94>)
 8007fca:	6818      	ldr	r0, [r3, #0]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	f7fe ffef 	bl	8006fb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fda:	f7ff fa5b 	bl	8007494 <xTaskResumeAll>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fe4:	4b09      	ldr	r3, [pc, #36]	; (800800c <prvProcessTimerOrBlockTask+0x98>)
 8007fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	f3bf 8f6f 	isb	sy
}
 8007ff4:	e001      	b.n	8007ffa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ff6:	f7ff fa4d 	bl	8007494 <xTaskResumeAll>
}
 8007ffa:	bf00      	nop
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20000e28 	.word	0x20000e28
 8008008:	20000e2c 	.word	0x20000e2c
 800800c:	e000ed04 	.word	0xe000ed04

08008010 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008018:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <prvGetNextExpireTime+0x44>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <prvGetNextExpireTime+0x16>
 8008022:	2201      	movs	r2, #1
 8008024:	e000      	b.n	8008028 <prvGetNextExpireTime+0x18>
 8008026:	2200      	movs	r2, #0
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d105      	bne.n	8008040 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008034:	4b07      	ldr	r3, [pc, #28]	; (8008054 <prvGetNextExpireTime+0x44>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60fb      	str	r3, [r7, #12]
 800803e:	e001      	b.n	8008044 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008044:	68fb      	ldr	r3, [r7, #12]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20000e24 	.word	0x20000e24

08008058 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008060:	f7ff faa8 	bl	80075b4 <xTaskGetTickCount>
 8008064:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008066:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <prvSampleTimeNow+0x3c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	429a      	cmp	r2, r3
 800806e:	d205      	bcs.n	800807c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008070:	f000 f936 	bl	80082e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e002      	b.n	8008082 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008082:	4a04      	ldr	r2, [pc, #16]	; (8008094 <prvSampleTimeNow+0x3c>)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008088:	68fb      	ldr	r3, [r7, #12]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20000e34 	.word	0x20000e34

08008098 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d812      	bhi.n	80080e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	1ad2      	subs	r2, r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d302      	bcc.n	80080d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080cc:	2301      	movs	r3, #1
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	e01b      	b.n	800810a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080d2:	4b10      	ldr	r3, [pc, #64]	; (8008114 <prvInsertTimerInActiveList+0x7c>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3304      	adds	r3, #4
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f7fe f9c8 	bl	8006472 <vListInsert>
 80080e2:	e012      	b.n	800810a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d206      	bcs.n	80080fa <prvInsertTimerInActiveList+0x62>
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d302      	bcc.n	80080fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	e007      	b.n	800810a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080fa:	4b07      	ldr	r3, [pc, #28]	; (8008118 <prvInsertTimerInActiveList+0x80>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3304      	adds	r3, #4
 8008102:	4619      	mov	r1, r3
 8008104:	4610      	mov	r0, r2
 8008106:	f7fe f9b4 	bl	8006472 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800810a:	697b      	ldr	r3, [r7, #20]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	20000e28 	.word	0x20000e28
 8008118:	20000e24 	.word	0x20000e24

0800811c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08e      	sub	sp, #56	; 0x38
 8008120:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008122:	e0ca      	b.n	80082ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	da18      	bge.n	800815c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800812a:	1d3b      	adds	r3, r7, #4
 800812c:	3304      	adds	r3, #4
 800812e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	61fb      	str	r3, [r7, #28]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008152:	6850      	ldr	r0, [r2, #4]
 8008154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008156:	6892      	ldr	r2, [r2, #8]
 8008158:	4611      	mov	r1, r2
 800815a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f2c0 80aa 	blt.w	80082b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d004      	beq.n	800817a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	3304      	adds	r3, #4
 8008174:	4618      	mov	r0, r3
 8008176:	f7fe f9b5 	bl	80064e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800817a:	463b      	mov	r3, r7
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff ff6b 	bl	8008058 <prvSampleTimeNow>
 8008182:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b09      	cmp	r3, #9
 8008188:	f200 8097 	bhi.w	80082ba <prvProcessReceivedCommands+0x19e>
 800818c:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <prvProcessReceivedCommands+0x78>)
 800818e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008192:	bf00      	nop
 8008194:	080081bd 	.word	0x080081bd
 8008198:	080081bd 	.word	0x080081bd
 800819c:	080081bd 	.word	0x080081bd
 80081a0:	08008231 	.word	0x08008231
 80081a4:	08008245 	.word	0x08008245
 80081a8:	0800828f 	.word	0x0800828f
 80081ac:	080081bd 	.word	0x080081bd
 80081b0:	080081bd 	.word	0x080081bd
 80081b4:	08008231 	.word	0x08008231
 80081b8:	08008245 	.word	0x08008245
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c2:	f043 0301 	orr.w	r3, r3, #1
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	18d1      	adds	r1, r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081dc:	f7ff ff5c 	bl	8008098 <prvInsertTimerInActiveList>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d069      	beq.n	80082ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d05e      	beq.n	80082ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	441a      	add	r2, r3
 8008204:	2300      	movs	r3, #0
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	2300      	movs	r3, #0
 800820a:	2100      	movs	r1, #0
 800820c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800820e:	f7ff fe05 	bl	8007e1c <xTimerGenericCommand>
 8008212:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d14f      	bne.n	80082ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	61bb      	str	r3, [r7, #24]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008236:	f023 0301 	bic.w	r3, r3, #1
 800823a:	b2da      	uxtb	r2, r3
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008242:	e03a      	b.n	80082ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	b2da      	uxtb	r2, r3
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	617b      	str	r3, [r7, #20]
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	18d1      	adds	r1, r2, r3
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008288:	f7ff ff06 	bl	8008098 <prvInsertTimerInActiveList>
					break;
 800828c:	e015      	b.n	80082ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d103      	bne.n	80082a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800829c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800829e:	f000 fbdf 	bl	8008a60 <vPortFree>
 80082a2:	e00a      	b.n	80082ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082aa:	f023 0301 	bic.w	r3, r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082b6:	e000      	b.n	80082ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082ba:	4b08      	ldr	r3, [pc, #32]	; (80082dc <prvProcessReceivedCommands+0x1c0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	1d39      	adds	r1, r7, #4
 80082c0:	2200      	movs	r2, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fbea 	bl	8006a9c <xQueueReceive>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f47f af2a 	bne.w	8008124 <prvProcessReceivedCommands+0x8>
	}
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	3730      	adds	r7, #48	; 0x30
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20000e2c 	.word	0x20000e2c

080082e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082e6:	e048      	b.n	800837a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082e8:	4b2d      	ldr	r3, [pc, #180]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f2:	4b2b      	ldr	r3, [pc, #172]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3304      	adds	r3, #4
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe f8ef 	bl	80064e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d02e      	beq.n	800837a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4413      	add	r3, r2
 8008324:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	429a      	cmp	r2, r3
 800832c:	d90e      	bls.n	800834c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800833a:	4b19      	ldr	r3, [pc, #100]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3304      	adds	r3, #4
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f7fe f894 	bl	8006472 <vListInsert>
 800834a:	e016      	b.n	800837a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800834c:	2300      	movs	r3, #0
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	2300      	movs	r3, #0
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	2100      	movs	r1, #0
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fd60 	bl	8007e1c <xTimerGenericCommand>
 800835c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	603b      	str	r3, [r7, #0]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800837a:	4b09      	ldr	r3, [pc, #36]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1b1      	bne.n	80082e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008384:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800838a:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <prvSwitchTimerLists+0xc4>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a04      	ldr	r2, [pc, #16]	; (80083a0 <prvSwitchTimerLists+0xc0>)
 8008390:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008392:	4a04      	ldr	r2, [pc, #16]	; (80083a4 <prvSwitchTimerLists+0xc4>)
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	6013      	str	r3, [r2, #0]
}
 8008398:	bf00      	nop
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20000e24 	.word	0x20000e24
 80083a4:	20000e28 	.word	0x20000e28

080083a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083ae:	f000 f969 	bl	8008684 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <prvCheckForValidListAndQueue+0x60>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d120      	bne.n	80083fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083ba:	4814      	ldr	r0, [pc, #80]	; (800840c <prvCheckForValidListAndQueue+0x64>)
 80083bc:	f7fe f808 	bl	80063d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083c0:	4813      	ldr	r0, [pc, #76]	; (8008410 <prvCheckForValidListAndQueue+0x68>)
 80083c2:	f7fe f805 	bl	80063d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083c6:	4b13      	ldr	r3, [pc, #76]	; (8008414 <prvCheckForValidListAndQueue+0x6c>)
 80083c8:	4a10      	ldr	r2, [pc, #64]	; (800840c <prvCheckForValidListAndQueue+0x64>)
 80083ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083cc:	4b12      	ldr	r3, [pc, #72]	; (8008418 <prvCheckForValidListAndQueue+0x70>)
 80083ce:	4a10      	ldr	r2, [pc, #64]	; (8008410 <prvCheckForValidListAndQueue+0x68>)
 80083d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083d2:	2300      	movs	r3, #0
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	4b11      	ldr	r3, [pc, #68]	; (800841c <prvCheckForValidListAndQueue+0x74>)
 80083d8:	4a11      	ldr	r2, [pc, #68]	; (8008420 <prvCheckForValidListAndQueue+0x78>)
 80083da:	2110      	movs	r1, #16
 80083dc:	200a      	movs	r0, #10
 80083de:	f7fe f906 	bl	80065ee <xQueueGenericCreateStatic>
 80083e2:	4603      	mov	r3, r0
 80083e4:	4a08      	ldr	r2, [pc, #32]	; (8008408 <prvCheckForValidListAndQueue+0x60>)
 80083e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083e8:	4b07      	ldr	r3, [pc, #28]	; (8008408 <prvCheckForValidListAndQueue+0x60>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083f0:	4b05      	ldr	r3, [pc, #20]	; (8008408 <prvCheckForValidListAndQueue+0x60>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	490b      	ldr	r1, [pc, #44]	; (8008424 <prvCheckForValidListAndQueue+0x7c>)
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fdb4 	bl	8006f64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083fc:	f000 f972 	bl	80086e4 <vPortExitCritical>
}
 8008400:	bf00      	nop
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000e2c 	.word	0x20000e2c
 800840c:	20000dfc 	.word	0x20000dfc
 8008410:	20000e10 	.word	0x20000e10
 8008414:	20000e24 	.word	0x20000e24
 8008418:	20000e28 	.word	0x20000e28
 800841c:	20000ed8 	.word	0x20000ed8
 8008420:	20000e38 	.word	0x20000e38
 8008424:	08008e94 	.word	0x08008e94

08008428 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3b04      	subs	r3, #4
 8008438:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b04      	subs	r3, #4
 8008446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f023 0201 	bic.w	r2, r3, #1
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3b04      	subs	r3, #4
 8008456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008458:	4a0c      	ldr	r2, [pc, #48]	; (800848c <pxPortInitialiseStack+0x64>)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3b14      	subs	r3, #20
 8008462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3b04      	subs	r3, #4
 800846e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f06f 0202 	mvn.w	r2, #2
 8008476:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3b20      	subs	r3, #32
 800847c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800847e:	68fb      	ldr	r3, [r7, #12]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	08008491 	.word	0x08008491

08008490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800849a:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <prvTaskExitError+0x54>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a2:	d00a      	beq.n	80084ba <prvTaskExitError+0x2a>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	60fb      	str	r3, [r7, #12]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <prvTaskExitError+0x28>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	60bb      	str	r3, [r7, #8]
}
 80084cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084ce:	bf00      	nop
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0fc      	beq.n	80084d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	2000000c 	.word	0x2000000c
	...

080084f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084f0:	4b07      	ldr	r3, [pc, #28]	; (8008510 <pxCurrentTCBConst2>)
 80084f2:	6819      	ldr	r1, [r3, #0]
 80084f4:	6808      	ldr	r0, [r1, #0]
 80084f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fa:	f380 8809 	msr	PSP, r0
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f04f 0000 	mov.w	r0, #0
 8008506:	f380 8811 	msr	BASEPRI, r0
 800850a:	4770      	bx	lr
 800850c:	f3af 8000 	nop.w

08008510 <pxCurrentTCBConst2>:
 8008510:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop

08008518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008518:	4808      	ldr	r0, [pc, #32]	; (800853c <prvPortStartFirstTask+0x24>)
 800851a:	6800      	ldr	r0, [r0, #0]
 800851c:	6800      	ldr	r0, [r0, #0]
 800851e:	f380 8808 	msr	MSP, r0
 8008522:	f04f 0000 	mov.w	r0, #0
 8008526:	f380 8814 	msr	CONTROL, r0
 800852a:	b662      	cpsie	i
 800852c:	b661      	cpsie	f
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	df00      	svc	0
 8008538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800853a:	bf00      	nop
 800853c:	e000ed08 	.word	0xe000ed08

08008540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008546:	4b46      	ldr	r3, [pc, #280]	; (8008660 <xPortStartScheduler+0x120>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a46      	ldr	r2, [pc, #280]	; (8008664 <xPortStartScheduler+0x124>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d10a      	bne.n	8008566 <xPortStartScheduler+0x26>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	613b      	str	r3, [r7, #16]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008566:	4b3e      	ldr	r3, [pc, #248]	; (8008660 <xPortStartScheduler+0x120>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a3f      	ldr	r2, [pc, #252]	; (8008668 <xPortStartScheduler+0x128>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d10a      	bne.n	8008586 <xPortStartScheduler+0x46>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	60fb      	str	r3, [r7, #12]
}
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008586:	4b39      	ldr	r3, [pc, #228]	; (800866c <xPortStartScheduler+0x12c>)
 8008588:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	b2db      	uxtb	r3, r3
 8008590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	22ff      	movs	r2, #255	; 0xff
 8008596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	4b31      	ldr	r3, [pc, #196]	; (8008670 <xPortStartScheduler+0x130>)
 80085ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085ae:	4b31      	ldr	r3, [pc, #196]	; (8008674 <xPortStartScheduler+0x134>)
 80085b0:	2207      	movs	r2, #7
 80085b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085b4:	e009      	b.n	80085ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80085b6:	4b2f      	ldr	r3, [pc, #188]	; (8008674 <xPortStartScheduler+0x134>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	4a2d      	ldr	r2, [pc, #180]	; (8008674 <xPortStartScheduler+0x134>)
 80085be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085c0:	78fb      	ldrb	r3, [r7, #3]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d2:	2b80      	cmp	r3, #128	; 0x80
 80085d4:	d0ef      	beq.n	80085b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085d6:	4b27      	ldr	r3, [pc, #156]	; (8008674 <xPortStartScheduler+0x134>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f1c3 0307 	rsb	r3, r3, #7
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d00a      	beq.n	80085f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	60bb      	str	r3, [r7, #8]
}
 80085f4:	bf00      	nop
 80085f6:	e7fe      	b.n	80085f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085f8:	4b1e      	ldr	r3, [pc, #120]	; (8008674 <xPortStartScheduler+0x134>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	021b      	lsls	r3, r3, #8
 80085fe:	4a1d      	ldr	r2, [pc, #116]	; (8008674 <xPortStartScheduler+0x134>)
 8008600:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008602:	4b1c      	ldr	r3, [pc, #112]	; (8008674 <xPortStartScheduler+0x134>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800860a:	4a1a      	ldr	r2, [pc, #104]	; (8008674 <xPortStartScheduler+0x134>)
 800860c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	b2da      	uxtb	r2, r3
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008616:	4b18      	ldr	r3, [pc, #96]	; (8008678 <xPortStartScheduler+0x138>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a17      	ldr	r2, [pc, #92]	; (8008678 <xPortStartScheduler+0x138>)
 800861c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008622:	4b15      	ldr	r3, [pc, #84]	; (8008678 <xPortStartScheduler+0x138>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a14      	ldr	r2, [pc, #80]	; (8008678 <xPortStartScheduler+0x138>)
 8008628:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800862c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800862e:	f000 f8dd 	bl	80087ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008632:	4b12      	ldr	r3, [pc, #72]	; (800867c <xPortStartScheduler+0x13c>)
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008638:	f000 f8fc 	bl	8008834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800863c:	4b10      	ldr	r3, [pc, #64]	; (8008680 <xPortStartScheduler+0x140>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a0f      	ldr	r2, [pc, #60]	; (8008680 <xPortStartScheduler+0x140>)
 8008642:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008646:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008648:	f7ff ff66 	bl	8008518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800864c:	f7ff f858 	bl	8007700 <vTaskSwitchContext>
	prvTaskExitError();
 8008650:	f7ff ff1e 	bl	8008490 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	e000ed00 	.word	0xe000ed00
 8008664:	410fc271 	.word	0x410fc271
 8008668:	410fc270 	.word	0x410fc270
 800866c:	e000e400 	.word	0xe000e400
 8008670:	20000f28 	.word	0x20000f28
 8008674:	20000f2c 	.word	0x20000f2c
 8008678:	e000ed20 	.word	0xe000ed20
 800867c:	2000000c 	.word	0x2000000c
 8008680:	e000ef34 	.word	0xe000ef34

08008684 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	607b      	str	r3, [r7, #4]
}
 800869c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800869e:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <vPortEnterCritical+0x58>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	4a0d      	ldr	r2, [pc, #52]	; (80086dc <vPortEnterCritical+0x58>)
 80086a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086a8:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <vPortEnterCritical+0x58>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d10f      	bne.n	80086d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086b0:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <vPortEnterCritical+0x5c>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	603b      	str	r3, [r7, #0]
}
 80086cc:	bf00      	nop
 80086ce:	e7fe      	b.n	80086ce <vPortEnterCritical+0x4a>
	}
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	2000000c 	.word	0x2000000c
 80086e0:	e000ed04 	.word	0xe000ed04

080086e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086ea:	4b12      	ldr	r3, [pc, #72]	; (8008734 <vPortExitCritical+0x50>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <vPortExitCritical+0x24>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	607b      	str	r3, [r7, #4]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008708:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <vPortExitCritical+0x50>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3b01      	subs	r3, #1
 800870e:	4a09      	ldr	r2, [pc, #36]	; (8008734 <vPortExitCritical+0x50>)
 8008710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008712:	4b08      	ldr	r3, [pc, #32]	; (8008734 <vPortExitCritical+0x50>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d105      	bne.n	8008726 <vPortExitCritical+0x42>
 800871a:	2300      	movs	r3, #0
 800871c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	f383 8811 	msr	BASEPRI, r3
}
 8008724:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	2000000c 	.word	0x2000000c
	...

08008740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008740:	f3ef 8009 	mrs	r0, PSP
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	4b15      	ldr	r3, [pc, #84]	; (80087a0 <pxCurrentTCBConst>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	f01e 0f10 	tst.w	lr, #16
 8008750:	bf08      	it	eq
 8008752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875a:	6010      	str	r0, [r2, #0]
 800875c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008764:	f380 8811 	msr	BASEPRI, r0
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f7fe ffc6 	bl	8007700 <vTaskSwitchContext>
 8008774:	f04f 0000 	mov.w	r0, #0
 8008778:	f380 8811 	msr	BASEPRI, r0
 800877c:	bc09      	pop	{r0, r3}
 800877e:	6819      	ldr	r1, [r3, #0]
 8008780:	6808      	ldr	r0, [r1, #0]
 8008782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008786:	f01e 0f10 	tst.w	lr, #16
 800878a:	bf08      	it	eq
 800878c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008790:	f380 8809 	msr	PSP, r0
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	f3af 8000 	nop.w

080087a0 <pxCurrentTCBConst>:
 80087a0:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop

080087a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	607b      	str	r3, [r7, #4]
}
 80087c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087c2:	f7fe ff07 	bl	80075d4 <xTaskIncrementTick>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087cc:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <xPortSysTickHandler+0x40>)
 80087ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	2300      	movs	r3, #0
 80087d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	f383 8811 	msr	BASEPRI, r3
}
 80087de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087f0:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <vPortSetupTimerInterrupt+0x34>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <vPortSetupTimerInterrupt+0x38>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087fc:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <vPortSetupTimerInterrupt+0x3c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a0a      	ldr	r2, [pc, #40]	; (800882c <vPortSetupTimerInterrupt+0x40>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	099b      	lsrs	r3, r3, #6
 8008808:	4a09      	ldr	r2, [pc, #36]	; (8008830 <vPortSetupTimerInterrupt+0x44>)
 800880a:	3b01      	subs	r3, #1
 800880c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800880e:	4b04      	ldr	r3, [pc, #16]	; (8008820 <vPortSetupTimerInterrupt+0x34>)
 8008810:	2207      	movs	r2, #7
 8008812:	601a      	str	r2, [r3, #0]
}
 8008814:	bf00      	nop
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	e000e010 	.word	0xe000e010
 8008824:	e000e018 	.word	0xe000e018
 8008828:	20000000 	.word	0x20000000
 800882c:	10624dd3 	.word	0x10624dd3
 8008830:	e000e014 	.word	0xe000e014

08008834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008844 <vPortEnableVFP+0x10>
 8008838:	6801      	ldr	r1, [r0, #0]
 800883a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800883e:	6001      	str	r1, [r0, #0]
 8008840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008842:	bf00      	nop
 8008844:	e000ed88 	.word	0xe000ed88

08008848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800884e:	f3ef 8305 	mrs	r3, IPSR
 8008852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b0f      	cmp	r3, #15
 8008858:	d914      	bls.n	8008884 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800885a:	4a17      	ldr	r2, [pc, #92]	; (80088b8 <vPortValidateInterruptPriority+0x70>)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008864:	4b15      	ldr	r3, [pc, #84]	; (80088bc <vPortValidateInterruptPriority+0x74>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	7afa      	ldrb	r2, [r7, #11]
 800886a:	429a      	cmp	r2, r3
 800886c:	d20a      	bcs.n	8008884 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	607b      	str	r3, [r7, #4]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008884:	4b0e      	ldr	r3, [pc, #56]	; (80088c0 <vPortValidateInterruptPriority+0x78>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800888c:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <vPortValidateInterruptPriority+0x7c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	429a      	cmp	r2, r3
 8008892:	d90a      	bls.n	80088aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	603b      	str	r3, [r7, #0]
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <vPortValidateInterruptPriority+0x60>
	}
 80088aa:	bf00      	nop
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	e000e3f0 	.word	0xe000e3f0
 80088bc:	20000f28 	.word	0x20000f28
 80088c0:	e000ed0c 	.word	0xe000ed0c
 80088c4:	20000f2c 	.word	0x20000f2c

080088c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08a      	sub	sp, #40	; 0x28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088d4:	f7fe fdd0 	bl	8007478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088d8:	4b5b      	ldr	r3, [pc, #364]	; (8008a48 <pvPortMalloc+0x180>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088e0:	f000 f920 	bl	8008b24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088e4:	4b59      	ldr	r3, [pc, #356]	; (8008a4c <pvPortMalloc+0x184>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f040 8093 	bne.w	8008a18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d01d      	beq.n	8008934 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80088f8:	2208      	movs	r2, #8
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4413      	add	r3, r2
 80088fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	2b00      	cmp	r3, #0
 8008908:	d014      	beq.n	8008934 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f023 0307 	bic.w	r3, r3, #7
 8008910:	3308      	adds	r3, #8
 8008912:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00a      	beq.n	8008934 <pvPortMalloc+0x6c>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	617b      	str	r3, [r7, #20]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d06e      	beq.n	8008a18 <pvPortMalloc+0x150>
 800893a:	4b45      	ldr	r3, [pc, #276]	; (8008a50 <pvPortMalloc+0x188>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d869      	bhi.n	8008a18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008944:	4b43      	ldr	r3, [pc, #268]	; (8008a54 <pvPortMalloc+0x18c>)
 8008946:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008948:	4b42      	ldr	r3, [pc, #264]	; (8008a54 <pvPortMalloc+0x18c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800894e:	e004      	b.n	800895a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d903      	bls.n	800896c <pvPortMalloc+0xa4>
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f1      	bne.n	8008950 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800896c:	4b36      	ldr	r3, [pc, #216]	; (8008a48 <pvPortMalloc+0x180>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008972:	429a      	cmp	r2, r3
 8008974:	d050      	beq.n	8008a18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2208      	movs	r2, #8
 800897c:	4413      	add	r3, r2
 800897e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	2308      	movs	r3, #8
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	429a      	cmp	r2, r3
 8008996:	d91f      	bls.n	80089d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4413      	add	r3, r2
 800899e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	f003 0307 	and.w	r3, r3, #7
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <pvPortMalloc+0xf8>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	613b      	str	r3, [r7, #16]
}
 80089bc:	bf00      	nop
 80089be:	e7fe      	b.n	80089be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	1ad2      	subs	r2, r2, r3
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089d2:	69b8      	ldr	r0, [r7, #24]
 80089d4:	f000 f908 	bl	8008be8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089d8:	4b1d      	ldr	r3, [pc, #116]	; (8008a50 <pvPortMalloc+0x188>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	4a1b      	ldr	r2, [pc, #108]	; (8008a50 <pvPortMalloc+0x188>)
 80089e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089e6:	4b1a      	ldr	r3, [pc, #104]	; (8008a50 <pvPortMalloc+0x188>)
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <pvPortMalloc+0x190>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d203      	bcs.n	80089fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089f2:	4b17      	ldr	r3, [pc, #92]	; (8008a50 <pvPortMalloc+0x188>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a18      	ldr	r2, [pc, #96]	; (8008a58 <pvPortMalloc+0x190>)
 80089f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <pvPortMalloc+0x184>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a0e:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <pvPortMalloc+0x194>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3301      	adds	r3, #1
 8008a14:	4a11      	ldr	r2, [pc, #68]	; (8008a5c <pvPortMalloc+0x194>)
 8008a16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a18:	f7fe fd3c 	bl	8007494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <pvPortMalloc+0x174>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	60fb      	str	r3, [r7, #12]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <pvPortMalloc+0x172>
	return pvReturn;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3728      	adds	r7, #40	; 0x28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20004b38 	.word	0x20004b38
 8008a4c:	20004b4c 	.word	0x20004b4c
 8008a50:	20004b3c 	.word	0x20004b3c
 8008a54:	20004b30 	.word	0x20004b30
 8008a58:	20004b40 	.word	0x20004b40
 8008a5c:	20004b44 	.word	0x20004b44

08008a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d04d      	beq.n	8008b0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a72:	2308      	movs	r3, #8
 8008a74:	425b      	negs	r3, r3
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	4413      	add	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <vPortFree+0xb8>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10a      	bne.n	8008aa4 <vPortFree+0x44>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	60fb      	str	r3, [r7, #12]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00a      	beq.n	8008ac2 <vPortFree+0x62>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	60bb      	str	r3, [r7, #8]
}
 8008abe:	bf00      	nop
 8008ac0:	e7fe      	b.n	8008ac0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	4b14      	ldr	r3, [pc, #80]	; (8008b18 <vPortFree+0xb8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4013      	ands	r3, r2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d01e      	beq.n	8008b0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d11a      	bne.n	8008b0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <vPortFree+0xb8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	401a      	ands	r2, r3
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ae8:	f7fe fcc6 	bl	8007478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <vPortFree+0xbc>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4413      	add	r3, r2
 8008af6:	4a09      	ldr	r2, [pc, #36]	; (8008b1c <vPortFree+0xbc>)
 8008af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008afa:	6938      	ldr	r0, [r7, #16]
 8008afc:	f000 f874 	bl	8008be8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b00:	4b07      	ldr	r3, [pc, #28]	; (8008b20 <vPortFree+0xc0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3301      	adds	r3, #1
 8008b06:	4a06      	ldr	r2, [pc, #24]	; (8008b20 <vPortFree+0xc0>)
 8008b08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b0a:	f7fe fcc3 	bl	8007494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b0e:	bf00      	nop
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20004b4c 	.word	0x20004b4c
 8008b1c:	20004b3c 	.word	0x20004b3c
 8008b20:	20004b48 	.word	0x20004b48

08008b24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b30:	4b27      	ldr	r3, [pc, #156]	; (8008bd0 <prvHeapInit+0xac>)
 8008b32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00c      	beq.n	8008b58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3307      	adds	r3, #7
 8008b42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0307 	bic.w	r3, r3, #7
 8008b4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	4a1f      	ldr	r2, [pc, #124]	; (8008bd0 <prvHeapInit+0xac>)
 8008b54:	4413      	add	r3, r2
 8008b56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b5c:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <prvHeapInit+0xb0>)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b62:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <prvHeapInit+0xb0>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b70:	2208      	movs	r2, #8
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1a9b      	subs	r3, r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f023 0307 	bic.w	r3, r3, #7
 8008b7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4a15      	ldr	r2, [pc, #84]	; (8008bd8 <prvHeapInit+0xb4>)
 8008b84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b86:	4b14      	ldr	r3, [pc, #80]	; (8008bd8 <prvHeapInit+0xb4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b8e:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <prvHeapInit+0xb4>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	1ad2      	subs	r2, r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ba4:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <prvHeapInit+0xb4>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	; (8008bdc <prvHeapInit+0xb8>)
 8008bb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	4a09      	ldr	r2, [pc, #36]	; (8008be0 <prvHeapInit+0xbc>)
 8008bba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bbc:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <prvHeapInit+0xc0>)
 8008bbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bc2:	601a      	str	r2, [r3, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	20000f30 	.word	0x20000f30
 8008bd4:	20004b30 	.word	0x20004b30
 8008bd8:	20004b38 	.word	0x20004b38
 8008bdc:	20004b40 	.word	0x20004b40
 8008be0:	20004b3c 	.word	0x20004b3c
 8008be4:	20004b4c 	.word	0x20004b4c

08008be8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bf0:	4b28      	ldr	r3, [pc, #160]	; (8008c94 <prvInsertBlockIntoFreeList+0xac>)
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e002      	b.n	8008bfc <prvInsertBlockIntoFreeList+0x14>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d8f7      	bhi.n	8008bf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	4413      	add	r3, r2
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d108      	bne.n	8008c2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	441a      	add	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	441a      	add	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d118      	bne.n	8008c70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4b15      	ldr	r3, [pc, #84]	; (8008c98 <prvInsertBlockIntoFreeList+0xb0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d00d      	beq.n	8008c66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	441a      	add	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	e008      	b.n	8008c78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <prvInsertBlockIntoFreeList+0xb0>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	e003      	b.n	8008c78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d002      	beq.n	8008c86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c86:	bf00      	nop
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	20004b30 	.word	0x20004b30
 8008c98:	20004b38 	.word	0x20004b38

08008c9c <atoi>:
 8008c9c:	220a      	movs	r2, #10
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	f000 b8c2 	b.w	8008e28 <strtol>

08008ca4 <__errno>:
 8008ca4:	4b01      	ldr	r3, [pc, #4]	; (8008cac <__errno+0x8>)
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	20000010 	.word	0x20000010

08008cb0 <__libc_init_array>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	4d0d      	ldr	r5, [pc, #52]	; (8008ce8 <__libc_init_array+0x38>)
 8008cb4:	4c0d      	ldr	r4, [pc, #52]	; (8008cec <__libc_init_array+0x3c>)
 8008cb6:	1b64      	subs	r4, r4, r5
 8008cb8:	10a4      	asrs	r4, r4, #2
 8008cba:	2600      	movs	r6, #0
 8008cbc:	42a6      	cmp	r6, r4
 8008cbe:	d109      	bne.n	8008cd4 <__libc_init_array+0x24>
 8008cc0:	4d0b      	ldr	r5, [pc, #44]	; (8008cf0 <__libc_init_array+0x40>)
 8008cc2:	4c0c      	ldr	r4, [pc, #48]	; (8008cf4 <__libc_init_array+0x44>)
 8008cc4:	f000 f8ba 	bl	8008e3c <_init>
 8008cc8:	1b64      	subs	r4, r4, r5
 8008cca:	10a4      	asrs	r4, r4, #2
 8008ccc:	2600      	movs	r6, #0
 8008cce:	42a6      	cmp	r6, r4
 8008cd0:	d105      	bne.n	8008cde <__libc_init_array+0x2e>
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd8:	4798      	blx	r3
 8008cda:	3601      	adds	r6, #1
 8008cdc:	e7ee      	b.n	8008cbc <__libc_init_array+0xc>
 8008cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce2:	4798      	blx	r3
 8008ce4:	3601      	adds	r6, #1
 8008ce6:	e7f2      	b.n	8008cce <__libc_init_array+0x1e>
 8008ce8:	08009058 	.word	0x08009058
 8008cec:	08009058 	.word	0x08009058
 8008cf0:	08009058 	.word	0x08009058
 8008cf4:	0800905c 	.word	0x0800905c

08008cf8 <memcpy>:
 8008cf8:	440a      	add	r2, r1
 8008cfa:	4291      	cmp	r1, r2
 8008cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d00:	d100      	bne.n	8008d04 <memcpy+0xc>
 8008d02:	4770      	bx	lr
 8008d04:	b510      	push	{r4, lr}
 8008d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d0e:	4291      	cmp	r1, r2
 8008d10:	d1f9      	bne.n	8008d06 <memcpy+0xe>
 8008d12:	bd10      	pop	{r4, pc}

08008d14 <memset>:
 8008d14:	4402      	add	r2, r0
 8008d16:	4603      	mov	r3, r0
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d100      	bne.n	8008d1e <memset+0xa>
 8008d1c:	4770      	bx	lr
 8008d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d22:	e7f9      	b.n	8008d18 <memset+0x4>

08008d24 <_strtol_l.constprop.0>:
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d2a:	d001      	beq.n	8008d30 <_strtol_l.constprop.0+0xc>
 8008d2c:	2b24      	cmp	r3, #36	; 0x24
 8008d2e:	d906      	bls.n	8008d3e <_strtol_l.constprop.0+0x1a>
 8008d30:	f7ff ffb8 	bl	8008ca4 <__errno>
 8008d34:	2316      	movs	r3, #22
 8008d36:	6003      	str	r3, [r0, #0]
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e24 <_strtol_l.constprop.0+0x100>
 8008d42:	460d      	mov	r5, r1
 8008d44:	462e      	mov	r6, r5
 8008d46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d4a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008d4e:	f017 0708 	ands.w	r7, r7, #8
 8008d52:	d1f7      	bne.n	8008d44 <_strtol_l.constprop.0+0x20>
 8008d54:	2c2d      	cmp	r4, #45	; 0x2d
 8008d56:	d132      	bne.n	8008dbe <_strtol_l.constprop.0+0x9a>
 8008d58:	782c      	ldrb	r4, [r5, #0]
 8008d5a:	2701      	movs	r7, #1
 8008d5c:	1cb5      	adds	r5, r6, #2
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d05b      	beq.n	8008e1a <_strtol_l.constprop.0+0xf6>
 8008d62:	2b10      	cmp	r3, #16
 8008d64:	d109      	bne.n	8008d7a <_strtol_l.constprop.0+0x56>
 8008d66:	2c30      	cmp	r4, #48	; 0x30
 8008d68:	d107      	bne.n	8008d7a <_strtol_l.constprop.0+0x56>
 8008d6a:	782c      	ldrb	r4, [r5, #0]
 8008d6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008d70:	2c58      	cmp	r4, #88	; 0x58
 8008d72:	d14d      	bne.n	8008e10 <_strtol_l.constprop.0+0xec>
 8008d74:	786c      	ldrb	r4, [r5, #1]
 8008d76:	2310      	movs	r3, #16
 8008d78:	3502      	adds	r5, #2
 8008d7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008d7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d82:	f04f 0c00 	mov.w	ip, #0
 8008d86:	fbb8 f9f3 	udiv	r9, r8, r3
 8008d8a:	4666      	mov	r6, ip
 8008d8c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008d90:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008d94:	f1be 0f09 	cmp.w	lr, #9
 8008d98:	d816      	bhi.n	8008dc8 <_strtol_l.constprop.0+0xa4>
 8008d9a:	4674      	mov	r4, lr
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	dd24      	ble.n	8008dea <_strtol_l.constprop.0+0xc6>
 8008da0:	f1bc 0f00 	cmp.w	ip, #0
 8008da4:	db1e      	blt.n	8008de4 <_strtol_l.constprop.0+0xc0>
 8008da6:	45b1      	cmp	r9, r6
 8008da8:	d31c      	bcc.n	8008de4 <_strtol_l.constprop.0+0xc0>
 8008daa:	d101      	bne.n	8008db0 <_strtol_l.constprop.0+0x8c>
 8008dac:	45a2      	cmp	sl, r4
 8008dae:	db19      	blt.n	8008de4 <_strtol_l.constprop.0+0xc0>
 8008db0:	fb06 4603 	mla	r6, r6, r3, r4
 8008db4:	f04f 0c01 	mov.w	ip, #1
 8008db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dbc:	e7e8      	b.n	8008d90 <_strtol_l.constprop.0+0x6c>
 8008dbe:	2c2b      	cmp	r4, #43	; 0x2b
 8008dc0:	bf04      	itt	eq
 8008dc2:	782c      	ldrbeq	r4, [r5, #0]
 8008dc4:	1cb5      	addeq	r5, r6, #2
 8008dc6:	e7ca      	b.n	8008d5e <_strtol_l.constprop.0+0x3a>
 8008dc8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008dcc:	f1be 0f19 	cmp.w	lr, #25
 8008dd0:	d801      	bhi.n	8008dd6 <_strtol_l.constprop.0+0xb2>
 8008dd2:	3c37      	subs	r4, #55	; 0x37
 8008dd4:	e7e2      	b.n	8008d9c <_strtol_l.constprop.0+0x78>
 8008dd6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008dda:	f1be 0f19 	cmp.w	lr, #25
 8008dde:	d804      	bhi.n	8008dea <_strtol_l.constprop.0+0xc6>
 8008de0:	3c57      	subs	r4, #87	; 0x57
 8008de2:	e7db      	b.n	8008d9c <_strtol_l.constprop.0+0x78>
 8008de4:	f04f 3cff 	mov.w	ip, #4294967295
 8008de8:	e7e6      	b.n	8008db8 <_strtol_l.constprop.0+0x94>
 8008dea:	f1bc 0f00 	cmp.w	ip, #0
 8008dee:	da05      	bge.n	8008dfc <_strtol_l.constprop.0+0xd8>
 8008df0:	2322      	movs	r3, #34	; 0x22
 8008df2:	6003      	str	r3, [r0, #0]
 8008df4:	4646      	mov	r6, r8
 8008df6:	b942      	cbnz	r2, 8008e0a <_strtol_l.constprop.0+0xe6>
 8008df8:	4630      	mov	r0, r6
 8008dfa:	e79e      	b.n	8008d3a <_strtol_l.constprop.0+0x16>
 8008dfc:	b107      	cbz	r7, 8008e00 <_strtol_l.constprop.0+0xdc>
 8008dfe:	4276      	negs	r6, r6
 8008e00:	2a00      	cmp	r2, #0
 8008e02:	d0f9      	beq.n	8008df8 <_strtol_l.constprop.0+0xd4>
 8008e04:	f1bc 0f00 	cmp.w	ip, #0
 8008e08:	d000      	beq.n	8008e0c <_strtol_l.constprop.0+0xe8>
 8008e0a:	1e69      	subs	r1, r5, #1
 8008e0c:	6011      	str	r1, [r2, #0]
 8008e0e:	e7f3      	b.n	8008df8 <_strtol_l.constprop.0+0xd4>
 8008e10:	2430      	movs	r4, #48	; 0x30
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1b1      	bne.n	8008d7a <_strtol_l.constprop.0+0x56>
 8008e16:	2308      	movs	r3, #8
 8008e18:	e7af      	b.n	8008d7a <_strtol_l.constprop.0+0x56>
 8008e1a:	2c30      	cmp	r4, #48	; 0x30
 8008e1c:	d0a5      	beq.n	8008d6a <_strtol_l.constprop.0+0x46>
 8008e1e:	230a      	movs	r3, #10
 8008e20:	e7ab      	b.n	8008d7a <_strtol_l.constprop.0+0x56>
 8008e22:	bf00      	nop
 8008e24:	08008f4d 	.word	0x08008f4d

08008e28 <strtol>:
 8008e28:	4613      	mov	r3, r2
 8008e2a:	460a      	mov	r2, r1
 8008e2c:	4601      	mov	r1, r0
 8008e2e:	4802      	ldr	r0, [pc, #8]	; (8008e38 <strtol+0x10>)
 8008e30:	6800      	ldr	r0, [r0, #0]
 8008e32:	f7ff bf77 	b.w	8008d24 <_strtol_l.constprop.0>
 8008e36:	bf00      	nop
 8008e38:	20000010 	.word	0x20000010

08008e3c <_init>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr

08008e48 <_fini>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr
