
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007898  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007a38  08007a38  00017a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007afc  08007afc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007afc  08007afc  00017afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b04  08007b04  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b04  08007b04  00017b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b08  08007b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a8c  20000010  08007b1c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004a9c  08007b1c  00024a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016274  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003469  00000000  00000000  000362b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00039720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d24  00000000  00000000  0003bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014903  00000000  00000000  000537e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000948ca  00000000  00000000  000680e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc9b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d8c  00000000  00000000  000fca04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a20 	.word	0x08007a20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08007a20 	.word	0x08007a20

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <DWT_Delay_Init>:


#include "stm32f4xx_hal.h"
//uint32_t DWT_Delay_Init(void);
__STATIC_INLINE uint32_t DWT_Delay_Init(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d6e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000d9a:	bf00      	nop
    __ASM volatile ("NOP");
 8000d9c:	bf00      	nop
    __ASM volatile ("NOP");
 8000d9e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000da8:	2300      	movs	r3, #0
 8000daa:	e000      	b.n	8000dae <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000dac:	2301      	movs	r3, #1
    }
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000edf0 	.word	0xe000edf0
 8000dbc:	e0001000 	.word	0xe0001000

08000dc0 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <DWT_Delay_us+0x40>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000dce:	f002 fb0f 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <DWT_Delay_us+0x44>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	0c9b      	lsrs	r3, r3, #18
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000de4:	bf00      	nop
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <DWT_Delay_us+0x40>)
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d3f8      	bcc.n	8000de6 <DWT_Delay_us+0x26>
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e0001000 	.word	0xe0001000
 8000e04:	431bde83 	.word	0x431bde83

08000e08 <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b096      	sub	sp, #88	; 0x58
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8000e14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]

    DWT_Delay_Init();
 8000e4a:	f7ff ff89 	bl	8000d60 <DWT_Delay_Init>

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 8000e4e:	79fa      	ldrb	r2, [r7, #7]
 8000e50:	49a2      	ldr	r1, [pc, #648]	; (80010dc <HCSR04_Init+0x2d4>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4aa0      	ldr	r2, [pc, #640]	; (80010e0 <HCSR04_Init+0x2d8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d10e      	bne.n	8000e82 <HCSR04_Init+0x7a>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	4b9e      	ldr	r3, [pc, #632]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a9d      	ldr	r2, [pc, #628]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b9b      	ldr	r3, [pc, #620]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	e066      	b.n	8000f50 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	4995      	ldr	r1, [pc, #596]	; (80010dc <HCSR04_Init+0x2d4>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a95      	ldr	r2, [pc, #596]	; (80010e8 <HCSR04_Init+0x2e0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d10e      	bne.n	8000eb6 <HCSR04_Init+0xae>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	4b91      	ldr	r3, [pc, #580]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a90      	ldr	r2, [pc, #576]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b8e      	ldr	r3, [pc, #568]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	e04c      	b.n	8000f50 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	4988      	ldr	r1, [pc, #544]	; (80010dc <HCSR04_Init+0x2d4>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a89      	ldr	r2, [pc, #548]	; (80010ec <HCSR04_Init+0x2e4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d10e      	bne.n	8000eea <HCSR04_Init+0xe2>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	4b84      	ldr	r3, [pc, #528]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	4a83      	ldr	r2, [pc, #524]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6313      	str	r3, [r2, #48]	; 0x30
 8000edc:	4b81      	ldr	r3, [pc, #516]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	e032      	b.n	8000f50 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	497b      	ldr	r1, [pc, #492]	; (80010dc <HCSR04_Init+0x2d4>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7d      	ldr	r2, [pc, #500]	; (80010f0 <HCSR04_Init+0x2e8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d10e      	bne.n	8000f1e <HCSR04_Init+0x116>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b77      	ldr	r3, [pc, #476]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a76      	ldr	r2, [pc, #472]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f10:	4b74      	ldr	r3, [pc, #464]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	e018      	b.n	8000f50 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	496e      	ldr	r1, [pc, #440]	; (80010dc <HCSR04_Init+0x2d4>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a71      	ldr	r2, [pc, #452]	; (80010f4 <HCSR04_Init+0x2ec>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d10d      	bne.n	8000f50 <HCSR04_Init+0x148>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	4b6a      	ldr	r3, [pc, #424]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a69      	ldr	r2, [pc, #420]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b67      	ldr	r3, [pc, #412]	; (80010e4 <HCSR04_Init+0x2dc>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    }
    HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, GPIO_PIN_RESET);
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	4962      	ldr	r1, [pc, #392]	; (80010dc <HCSR04_Init+0x2d4>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	79fa      	ldrb	r2, [r7, #7]
 8000f62:	495e      	ldr	r1, [pc, #376]	; (80010dc <HCSR04_Init+0x2d4>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3304      	adds	r3, #4
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	4619      	mov	r1, r3
 8000f76:	f001 fdfd 	bl	8002b74 <HAL_GPIO_WritePin>
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 8000f7a:	79fa      	ldrb	r2, [r7, #7]
 8000f7c:	4957      	ldr	r1, [pc, #348]	; (80010dc <HCSR04_Init+0x2d4>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	3304      	adds	r3, #4
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8000f9a:	79fa      	ldrb	r2, [r7, #7]
 8000f9c:	494f      	ldr	r1, [pc, #316]	; (80010dc <HCSR04_Init+0x2d4>)
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fc5b 	bl	800286c <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	4948      	ldr	r1, [pc, #288]	; (80010dc <HCSR04_Init+0x2d4>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	79fa      	ldrb	r2, [r7, #7]
 8000fca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fcc:	484a      	ldr	r0, [pc, #296]	; (80010f8 <HCSR04_Init+0x2f0>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4403      	add	r3, r0
 8000fd8:	3304      	adds	r3, #4
 8000fda:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 8000fdc:	79fa      	ldrb	r2, [r7, #7]
 8000fde:	493f      	ldr	r1, [pc, #252]	; (80010dc <HCSR04_Init+0x2d4>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3308      	adds	r3, #8
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ff2:	4841      	ldr	r0, [pc, #260]	; (80010f8 <HCSR04_Init+0x2f0>)
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4403      	add	r3, r0
 8000ffe:	3308      	adds	r3, #8
 8001000:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8001002:	79fa      	ldrb	r2, [r7, #7]
 8001004:	493c      	ldr	r1, [pc, #240]	; (80010f8 <HCSR04_Init+0x2f0>)
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3302      	adds	r3, #2
 8001012:	2200      	movs	r2, #0
 8001014:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	4937      	ldr	r1, [pc, #220]	; (80010f8 <HCSR04_Init+0x2f0>)
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	331c      	adds	r3, #28
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	4932      	ldr	r1, [pc, #200]	; (80010f8 <HCSR04_Init+0x2f0>)
 800102e:	4613      	mov	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3308      	adds	r3, #8
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <HCSR04_Init+0x24e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8001040:	79fa      	ldrb	r2, [r7, #7]
 8001042:	492d      	ldr	r1, [pc, #180]	; (80010f8 <HCSR04_Init+0x2f0>)
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	3308      	adds	r3, #8
 8001050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001054:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 8001056:	79fa      	ldrb	r2, [r7, #7]
 8001058:	4920      	ldr	r1, [pc, #128]	; (80010dc <HCSR04_Init+0x2d4>)
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	330c      	adds	r3, #12
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10a      	bne.n	8001082 <HCSR04_Init+0x27a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	4922      	ldr	r1, [pc, #136]	; (80010f8 <HCSR04_Init+0x2f0>)
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	3320      	adds	r3, #32
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e051      	b.n	8001126 <HCSR04_Init+0x31e>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	4915      	ldr	r1, [pc, #84]	; (80010dc <HCSR04_Init+0x2d4>)
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	330c      	adds	r3, #12
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b04      	cmp	r3, #4
 8001096:	d10a      	bne.n	80010ae <HCSR04_Init+0x2a6>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8001098:	79fa      	ldrb	r2, [r7, #7]
 800109a:	4917      	ldr	r1, [pc, #92]	; (80010f8 <HCSR04_Init+0x2f0>)
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	3320      	adds	r3, #32
 80010a8:	2202      	movs	r2, #2
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e03b      	b.n	8001126 <HCSR04_Init+0x31e>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	490a      	ldr	r1, [pc, #40]	; (80010dc <HCSR04_Init+0x2d4>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	330c      	adds	r3, #12
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d11b      	bne.n	80010fc <HCSR04_Init+0x2f4>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	490c      	ldr	r1, [pc, #48]	; (80010f8 <HCSR04_Init+0x2f0>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3320      	adds	r3, #32
 80010d4:	2204      	movs	r2, #4
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e025      	b.n	8001126 <HCSR04_Init+0x31e>
 80010da:	bf00      	nop
 80010dc:	08007a70 	.word	0x08007a70
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	2000002c 	.word	0x2000002c
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	493f      	ldr	r1, [pc, #252]	; (80011fc <HCSR04_Init+0x3f4>)
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	330c      	adds	r3, #12
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b0c      	cmp	r3, #12
 8001110:	d109      	bne.n	8001126 <HCSR04_Init+0x31e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8001112:	79fa      	ldrb	r2, [r7, #7]
 8001114:	493a      	ldr	r1, [pc, #232]	; (8001200 <HCSR04_Init+0x3f8>)
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3320      	adds	r3, #32
 8001122:	2208      	movs	r2, #8
 8001124:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	4934      	ldr	r1, [pc, #208]	; (80011fc <HCSR04_Init+0x3f4>)
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	3308      	adds	r3, #8
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	4930      	ldr	r1, [pc, #192]	; (8001200 <HCSR04_Init+0x3f8>)
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3304      	adds	r3, #4
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	4929      	ldr	r1, [pc, #164]	; (8001200 <HCSR04_Init+0x3f8>)
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3308      	adds	r3, #8
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
	//TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f002 f98a 	bl	8003494 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8001186:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800118a:	4619      	mov	r1, r3
 800118c:	6838      	ldr	r0, [r7, #0]
 800118e:	f002 ff71 	bl	8004074 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 8001192:	6838      	ldr	r0, [r7, #0]
 8001194:	f002 fb94 	bl	80038c0 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80011a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a4:	4619      	mov	r1, r3
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f003 fc78 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b0:	2301      	movs	r3, #1
 80011b2:	623b      	str	r3, [r7, #32]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigIC.ICFilter = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	490f      	ldr	r1, [pc, #60]	; (80011fc <HCSR04_Init+0x3f4>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	330c      	adds	r3, #12
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f002 fdef 	bl	8003db8 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	//HAL_TIM_Base_Start_IT(TMR_Handle);
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <HCSR04_Init+0x3f4>)
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	330c      	adds	r3, #12
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f002 fbc0 	bl	8003974 <HAL_TIM_IC_Start_IT>
}
 80011f4:	bf00      	nop
 80011f6:	3758      	adds	r7, #88	; 0x58
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08007a70 	.word	0x08007a70
 8001200:	2000002c 	.word	0x2000002c

08001204 <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e023      	b.n	800125e <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6819      	ldr	r1, [r3, #0]
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <HCSR04_TMR_OVF_ISR+0x70>)
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4403      	add	r3, r0
 8001228:	3308      	adds	r3, #8
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4299      	cmp	r1, r3
 800122e:	d113      	bne.n	8001258 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	4911      	ldr	r1, [pc, #68]	; (8001278 <HCSR04_TMR_OVF_ISR+0x74>)
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	3302      	adds	r3, #2
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	b298      	uxth	r0, r3
 8001246:	490c      	ldr	r1, [pc, #48]	; (8001278 <HCSR04_TMR_OVF_ISR+0x74>)
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	3302      	adds	r3, #2
 8001254:	4602      	mov	r2, r0
 8001256:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3301      	adds	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0d8      	beq.n	8001216 <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	08007a70 	.word	0x08007a70
 8001278:	2000002c 	.word	0x2000002c
 800127c:	00000000 	.word	0x00000000

08001280 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e230      	b.n	80016f8 <HCSR04_TMR_IC_ISR+0x478>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance)/* && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH)*/)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6819      	ldr	r1, [r3, #0]
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	489c      	ldr	r0, [pc, #624]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4403      	add	r3, r0
 80012a8:	3308      	adds	r3, #8
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4299      	cmp	r1, r3
 80012ae:	f040 8220 	bne.w	80016f2 <HCSR04_TMR_IC_ISR+0x472>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	4997      	ldr	r1, [pc, #604]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 80b3 	bne.w	800142e <HCSR04_TMR_IC_ISR+0x1ae>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	4991      	ldr	r1, [pc, #580]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	330c      	adds	r3, #12
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	7bfc      	ldrb	r4, [r7, #15]
 80012dc:	4619      	mov	r1, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f002 ff90 	bl	8004204 <HAL_TIM_ReadCapturedValue>
 80012e4:	4602      	mov	r2, r0
 80012e6:	498b      	ldr	r1, [pc, #556]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80012e8:	4623      	mov	r3, r4
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4423      	add	r3, r4
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	330c      	adds	r3, #12
 80012f4:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	4986      	ldr	r1, [pc, #536]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
				//gs_HCSR04_info[i].T1 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	4981      	ldr	r1, [pc, #516]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	330c      	adds	r3, #12
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d108      	bne.n	8001330 <HCSR04_TMR_IC_ISR+0xb0>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 020a 	bic.w	r2, r2, #10
 800132c:	621a      	str	r2, [r3, #32]
 800132e:	e02f      	b.n	8001390 <HCSR04_TMR_IC_ISR+0x110>
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	4977      	ldr	r1, [pc, #476]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	330c      	adds	r3, #12
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b04      	cmp	r3, #4
 8001344:	d108      	bne.n	8001358 <HCSR04_TMR_IC_ISR+0xd8>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001354:	6213      	str	r3, [r2, #32]
 8001356:	e01b      	b.n	8001390 <HCSR04_TMR_IC_ISR+0x110>
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	496d      	ldr	r1, [pc, #436]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	330c      	adds	r3, #12
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b08      	cmp	r3, #8
 800136c:	d108      	bne.n	8001380 <HCSR04_TMR_IC_ISR+0x100>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	e007      	b.n	8001390 <HCSR04_TMR_IC_ISR+0x110>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	495f      	ldr	r1, [pc, #380]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	330c      	adds	r3, #12
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d108      	bne.n	80013b8 <HCSR04_TMR_IC_ISR+0x138>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a1a      	ldr	r2, [r3, #32]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0202 	orr.w	r2, r2, #2
 80013b4:	621a      	str	r2, [r3, #32]
 80013b6:	e02f      	b.n	8001418 <HCSR04_TMR_IC_ISR+0x198>
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	4955      	ldr	r1, [pc, #340]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	330c      	adds	r3, #12
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d108      	bne.n	80013e0 <HCSR04_TMR_IC_ISR+0x160>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	6213      	str	r3, [r2, #32]
 80013de:	e01b      	b.n	8001418 <HCSR04_TMR_IC_ISR+0x198>
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	494b      	ldr	r1, [pc, #300]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	330c      	adds	r3, #12
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d108      	bne.n	8001408 <HCSR04_TMR_IC_ISR+0x188>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001404:	6213      	str	r3, [r2, #32]
 8001406:	e007      	b.n	8001418 <HCSR04_TMR_IC_ISR+0x198>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001416:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	493e      	ldr	r1, [pc, #248]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3302      	adds	r3, #2
 8001428:	2200      	movs	r2, #0
 800142a:	801a      	strh	r2, [r3, #0]
 800142c:	e161      	b.n	80016f2 <HCSR04_TMR_IC_ISR+0x472>
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	4938      	ldr	r1, [pc, #224]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	f040 8157 	bne.w	80016f2 <HCSR04_TMR_IC_ISR+0x472>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	4932      	ldr	r1, [pc, #200]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	3308      	adds	r3, #8
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	492c      	ldr	r1, [pc, #176]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	3308      	adds	r3, #8
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001470:	4828      	ldr	r0, [pc, #160]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4403      	add	r3, r0
 800147c:	3308      	adds	r3, #8
 800147e:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	4923      	ldr	r1, [pc, #140]	; (8001510 <HCSR04_TMR_IC_ISR+0x290>)
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	330c      	adds	r3, #12
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	7bfc      	ldrb	r4, [r7, #15]
 8001494:	4619      	mov	r1, r3
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f002 feb4 	bl	8004204 <HAL_TIM_ReadCapturedValue>
 800149c:	4602      	mov	r2, r0
 800149e:	491d      	ldr	r1, [pc, #116]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80014a0:	4623      	mov	r3, r4
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4423      	add	r3, r4
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3310      	adds	r3, #16
 80014ac:	601a      	str	r2, [r3, #0]
				//gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
				//gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
				if(gs_HCSR04_info[i].T2 > gs_HCSR04_info[i].T1)
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	4918      	ldr	r1, [pc, #96]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	3310      	adds	r3, #16
 80014be:	6819      	ldr	r1, [r3, #0]
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4403      	add	r3, r0
 80014ce:	330c      	adds	r3, #12
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4299      	cmp	r1, r3
 80014d4:	d920      	bls.n	8001518 <HCSR04_TMR_IC_ISR+0x298>
				{
					gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	490e      	ldr	r1, [pc, #56]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3310      	adds	r3, #16
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4403      	add	r3, r0
 80014f6:	330c      	adds	r3, #12
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	1ac9      	subs	r1, r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <HCSR04_TMR_IC_ISR+0x294>)
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4403      	add	r3, r0
 800150a:	3314      	adds	r3, #20
 800150c:	6019      	str	r1, [r3, #0]
 800150e:	e022      	b.n	8001556 <HCSR04_TMR_IC_ISR+0x2d6>
 8001510:	08007a70 	.word	0x08007a70
 8001514:	2000002c 	.word	0x2000002c
				}
				else
				{
					gs_HCSR04_info[i].DIFF = (0xffff-gs_HCSR04_info[i].T1) + gs_HCSR04_info[i].T2;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	497f      	ldr	r1, [pc, #508]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3310      	adds	r3, #16
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	487a      	ldr	r0, [pc, #488]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4403      	add	r3, r0
 8001538:	330c      	adds	r3, #12
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	1acb      	subs	r3, r1, r3
 800153e:	7bf9      	ldrb	r1, [r7, #15]
 8001540:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
 8001544:	32ff      	adds	r2, #255	; 0xff
 8001546:	4874      	ldr	r0, [pc, #464]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 8001548:	460b      	mov	r3, r1
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4403      	add	r3, r0
 8001552:	3314      	adds	r3, #20
 8001554:	601a      	str	r2, [r3, #0]
				}
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	496f      	ldr	r1, [pc, #444]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	3314      	adds	r3, #20
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff7b 	bl	8000464 <__aeabi_ui2d>
 800156e:	a368      	add	r3, pc, #416	; (adr r3, 8001710 <HCSR04_TMR_IC_ISR+0x490>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7fe fff0 	bl	8000558 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	4966      	ldr	r1, [pc, #408]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3310      	adds	r3, #16
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3301      	adds	r3, #1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff62 	bl	8000464 <__aeabi_ui2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7ff f900 	bl	80007ac <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	7bfc      	ldrb	r4, [r7, #15]
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fa01 	bl	80009bc <__aeabi_d2f>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4956      	ldr	r1, [pc, #344]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 80015be:	4623      	mov	r3, r4
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4423      	add	r3, r4
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	3318      	adds	r3, #24
 80015ca:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	4952      	ldr	r1, [pc, #328]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
				gs_HCSR04_info[i].TMR_OVC = 0;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	494d      	ldr	r1, [pc, #308]	; (8001718 <HCSR04_TMR_IC_ISR+0x498>)
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	3302      	adds	r3, #2
 80015ee:	2200      	movs	r2, #0
 80015f0:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	4949      	ldr	r1, [pc, #292]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	330c      	adds	r3, #12
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <HCSR04_TMR_IC_ISR+0x39a>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6a1a      	ldr	r2, [r3, #32]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 020a 	bic.w	r2, r2, #10
 8001616:	621a      	str	r2, [r3, #32]
 8001618:	e02f      	b.n	800167a <HCSR04_TMR_IC_ISR+0x3fa>
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	493f      	ldr	r1, [pc, #252]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	330c      	adds	r3, #12
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b04      	cmp	r3, #4
 800162e:	d108      	bne.n	8001642 <HCSR04_TMR_IC_ISR+0x3c2>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e01b      	b.n	800167a <HCSR04_TMR_IC_ISR+0x3fa>
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	4935      	ldr	r1, [pc, #212]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	330c      	adds	r3, #12
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b08      	cmp	r3, #8
 8001656:	d108      	bne.n	800166a <HCSR04_TMR_IC_ISR+0x3ea>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	e007      	b.n	800167a <HCSR04_TMR_IC_ISR+0x3fa>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	4927      	ldr	r1, [pc, #156]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	330c      	adds	r3, #12
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <HCSR04_TMR_IC_ISR+0x41e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a12      	ldr	r2, [r2, #32]
 800169a:	621a      	str	r2, [r3, #32]
 800169c:	e029      	b.n	80016f2 <HCSR04_TMR_IC_ISR+0x472>
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	491e      	ldr	r1, [pc, #120]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	330c      	adds	r3, #12
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d106      	bne.n	80016c2 <HCSR04_TMR_IC_ISR+0x442>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e017      	b.n	80016f2 <HCSR04_TMR_IC_ISR+0x472>
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	4915      	ldr	r1, [pc, #84]	; (800171c <HCSR04_TMR_IC_ISR+0x49c>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	330c      	adds	r3, #12
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d106      	bne.n	80016e6 <HCSR04_TMR_IC_ISR+0x466>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	e005      	b.n	80016f2 <HCSR04_TMR_IC_ISR+0x472>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	3301      	adds	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f43f adcb 	beq.w	8001296 <HCSR04_TMR_IC_ISR+0x16>
				//HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
				//HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
			}
		}
	}
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bdb0      	pop	{r4, r5, r7, pc}
 800170a:	bf00      	nop
 800170c:	f3af 8000 	nop.w
 8001710:	b020c49c 	.word	0xb020c49c
 8001714:	3f916872 	.word	0x3f916872
 8001718:	2000002c 	.word	0x2000002c
 800171c:	08007a70 	.word	0x08007a70

08001720 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 800172a:	79fa      	ldrb	r2, [r7, #7]
 800172c:	4908      	ldr	r1, [pc, #32]	; (8001750 <HCSR04_Read+0x30>)
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3318      	adds	r3, #24
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	ee07 3a90 	vmov	s15, r3
}
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2000002c 	.word	0x2000002c

08001754 <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	//__HAL_TIM_SET_COUNTER(gs_HCSR04_info[au8_HCSR04_Instance].HTIM, 0);
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	4917      	ldr	r1, [pc, #92]	; (80017c0 <HCSR04_Trigger+0x6c>)
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	79fa      	ldrb	r2, [r7, #7]
 8001770:	4913      	ldr	r1, [pc, #76]	; (80017c0 <HCSR04_Trigger+0x6c>)
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3304      	adds	r3, #4
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	4619      	mov	r1, r3
 8001784:	f001 f9f6 	bl	8002b74 <HAL_GPIO_WritePin>
	//HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
	//HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
	//DWT_Delay_us(2);
	DWT_Delay_us(10);
 8001788:	200a      	movs	r0, #10
 800178a:	f7ff fb19 	bl	8000dc0 <DWT_Delay_us>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	490b      	ldr	r1, [pc, #44]	; (80017c0 <HCSR04_Trigger+0x6c>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	79fa      	ldrb	r2, [r7, #7]
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <HCSR04_Trigger+0x6c>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	3304      	adds	r3, #4
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	f001 f9de 	bl	8002b74 <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	08007a70 	.word	0x08007a70

080017c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of motorQueue */
  motorQueueHandle = osMessageQueueNew (16, sizeof(motorControl_t), &motorQueue_attributes);
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <MX_FREERTOS_Init+0x38>)
 80017ca:	2106      	movs	r1, #6
 80017cc:	2010      	movs	r0, #16
 80017ce:	f003 fb22 	bl	8004e16 <osMessageQueueNew>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <MX_FREERTOS_Init+0x3c>)
 80017d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartmotorTask, NULL, &motorTask_attributes);
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <MX_FREERTOS_Init+0x40>)
 80017da:	2100      	movs	r1, #0
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <MX_FREERTOS_Init+0x44>)
 80017de:	f003 fa6d 	bl	8004cbc <osThreadNew>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a09      	ldr	r2, [pc, #36]	; (800180c <MX_FREERTOS_Init+0x48>)
 80017e6:	6013      	str	r3, [r2, #0]

  /* creation of ACCTask */
  ACCTaskHandle = osThreadNew(StartACCTask, NULL, &ACCTask_attributes);
 80017e8:	4a09      	ldr	r2, [pc, #36]	; (8001810 <MX_FREERTOS_Init+0x4c>)
 80017ea:	2100      	movs	r1, #0
 80017ec:	4809      	ldr	r0, [pc, #36]	; (8001814 <MX_FREERTOS_Init+0x50>)
 80017ee:	f003 fa65 	bl	8004cbc <osThreadNew>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a08      	ldr	r2, [pc, #32]	; (8001818 <MX_FREERTOS_Init+0x54>)
 80017f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	08007acc 	.word	0x08007acc
 8001800:	2000005c 	.word	0x2000005c
 8001804:	08007a84 	.word	0x08007a84
 8001808:	08001821 	.word	0x08001821
 800180c:	20000054 	.word	0x20000054
 8001810:	08007aa8 	.word	0x08007aa8
 8001814:	080019a5 	.word	0x080019a5
 8001818:	20000058 	.word	0x20000058
 800181c:	00000000 	.word	0x00000000

08001820 <StartmotorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartmotorTask */
void StartmotorTask(void *argument)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  motorControl_t motortask;
	  uint8_t motortask_prio;
	  if(osMessageQueueGet(motorQueueHandle, &motortask, &motortask_prio, 10) == osOK)
 8001828:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <StartmotorTask+0x178>)
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	f107 020f 	add.w	r2, r7, #15
 8001830:	f107 0110 	add.w	r1, r7, #16
 8001834:	230a      	movs	r3, #10
 8001836:	f003 fbc1 	bl	8004fbc <osMessageQueueGet>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 80a2 	bne.w	8001986 <StartmotorTask+0x166>
	  {
		  if(motortask.motors[0].speed > 0 && motortask.motors[0].speed < 40)
 8001842:	7c7b      	ldrb	r3, [r7, #17]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00d      	beq.n	8001864 <StartmotorTask+0x44>
 8001848:	7c7b      	ldrb	r3, [r7, #17]
 800184a:	2b27      	cmp	r3, #39	; 0x27
 800184c:	d80a      	bhi.n	8001864 <StartmotorTask+0x44>
		  {
			  Motor1_SetSpeed(70);
 800184e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8001990 <StartmotorTask+0x170>
 8001852:	f000 fdf9 	bl	8002448 <Motor1_SetSpeed>
			  Motor2_SetSpeed(70);
 8001856:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8001990 <StartmotorTask+0x170>
 800185a:	f000 fe45 	bl	80024e8 <Motor2_SetSpeed>
			  HAL_Delay(5);
 800185e:	2005      	movs	r0, #5
 8001860:	f000 fefe 	bl	8002660 <HAL_Delay>
		  }
		  for(uint8_t i = 0; i < 2; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800186a:	e087      	b.n	800197c <StartmotorTask+0x15c>
		  {
			  uint16_t INx1_pin, INx2_pin;
			  GPIO_TypeDef *INx1_port, *INx2_port;
			  if(motortask.motors[i].modify == 0) continue;
 800186c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	3328      	adds	r3, #40	; 0x28
 8001878:	443b      	add	r3, r7
 800187a:	3b18      	subs	r3, #24
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d076      	beq.n	8001970 <StartmotorTask+0x150>
			  if(i == 0){
 8001882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001886:	2b00      	cmp	r3, #0
 8001888:	d11a      	bne.n	80018c0 <StartmotorTask+0xa0>
				  Motor1_SetSpeed(motortask.motors[i].speed);
 800188a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	3328      	adds	r3, #40	; 0x28
 8001896:	443b      	add	r3, r7
 8001898:	3b17      	subs	r3, #23
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fde1 	bl	8000464 <__aeabi_ui2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	ec43 2b10 	vmov	d0, r2, r3
 80018aa:	f000 fdcd 	bl	8002448 <Motor1_SetSpeed>
				  INx1_port = MOTOR_IN1_GPIO_Port;
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <StartmotorTask+0x17c>)
 80018b0:	61fb      	str	r3, [r7, #28]
				  INx2_port = MOTOR_IN2_GPIO_Port;
 80018b2:	4b3a      	ldr	r3, [pc, #232]	; (800199c <StartmotorTask+0x17c>)
 80018b4:	61bb      	str	r3, [r7, #24]
				  INx1_pin = MOTOR_IN1_Pin;
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	84bb      	strh	r3, [r7, #36]	; 0x24
				  INx2_pin = MOTOR_IN2_Pin;
 80018ba:	2340      	movs	r3, #64	; 0x40
 80018bc:	847b      	strh	r3, [r7, #34]	; 0x22
 80018be:	e01e      	b.n	80018fe <StartmotorTask+0xde>
			  }
			  else if(i == 1){
 80018c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d11a      	bne.n	80018fe <StartmotorTask+0xde>
				  Motor2_SetSpeed(motortask.motors[i].speed);
 80018c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	3328      	adds	r3, #40	; 0x28
 80018d4:	443b      	add	r3, r7
 80018d6:	3b17      	subs	r3, #23
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fdc2 	bl	8000464 <__aeabi_ui2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	ec43 2b10 	vmov	d0, r2, r3
 80018e8:	f000 fdfe 	bl	80024e8 <Motor2_SetSpeed>
				  INx1_port = MOTOR_IN3_GPIO_Port;
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <StartmotorTask+0x17c>)
 80018ee:	61fb      	str	r3, [r7, #28]
				  INx2_port = MOTOR_IN4_GPIO_Port;
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <StartmotorTask+0x180>)
 80018f2:	61bb      	str	r3, [r7, #24]
				  INx1_pin = MOTOR_IN3_Pin;
 80018f4:	2320      	movs	r3, #32
 80018f6:	84bb      	strh	r3, [r7, #36]	; 0x24
				  INx2_pin = MOTOR_IN4_Pin;
 80018f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fc:	847b      	strh	r3, [r7, #34]	; 0x22
			  }
		  switch(motortask.motors[i].control)
 80018fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	3328      	adds	r3, #40	; 0x28
 800190a:	443b      	add	r3, r7
 800190c:	3b16      	subs	r3, #22
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d020      	beq.n	8001956 <StartmotorTask+0x136>
 8001914:	2b04      	cmp	r3, #4
 8001916:	dc2c      	bgt.n	8001972 <StartmotorTask+0x152>
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <StartmotorTask+0x102>
 800191c:	2b02      	cmp	r3, #2
 800191e:	d00d      	beq.n	800193c <StartmotorTask+0x11c>
 8001920:	e027      	b.n	8001972 <StartmotorTask+0x152>
		  {
		  case MOTOR_OFF:
			  HAL_GPIO_WritePin(INx1_port, INx1_pin, 0);
 8001922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001924:	2200      	movs	r2, #0
 8001926:	4619      	mov	r1, r3
 8001928:	69f8      	ldr	r0, [r7, #28]
 800192a:	f001 f923 	bl	8002b74 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(INx2_port, INx2_pin, 0);
 800192e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	69b8      	ldr	r0, [r7, #24]
 8001936:	f001 f91d 	bl	8002b74 <HAL_GPIO_WritePin>
			  break;
 800193a:	e01a      	b.n	8001972 <StartmotorTask+0x152>
		  case MOTOR_FWD:
			  HAL_GPIO_WritePin(INx1_port, INx1_pin, 1);
 800193c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800193e:	2201      	movs	r2, #1
 8001940:	4619      	mov	r1, r3
 8001942:	69f8      	ldr	r0, [r7, #28]
 8001944:	f001 f916 	bl	8002b74 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(INx2_port, INx2_pin, 0);
 8001948:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800194a:	2200      	movs	r2, #0
 800194c:	4619      	mov	r1, r3
 800194e:	69b8      	ldr	r0, [r7, #24]
 8001950:	f001 f910 	bl	8002b74 <HAL_GPIO_WritePin>
			  break;
 8001954:	e00d      	b.n	8001972 <StartmotorTask+0x152>
		  case MOTOR_REV:
			  HAL_GPIO_WritePin(INx1_port, INx1_pin, 0);
 8001956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001958:	2200      	movs	r2, #0
 800195a:	4619      	mov	r1, r3
 800195c:	69f8      	ldr	r0, [r7, #28]
 800195e:	f001 f909 	bl	8002b74 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(INx2_port, INx2_pin, 1);
 8001962:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001964:	2201      	movs	r2, #1
 8001966:	4619      	mov	r1, r3
 8001968:	69b8      	ldr	r0, [r7, #24]
 800196a:	f001 f903 	bl	8002b74 <HAL_GPIO_WritePin>
			  break;
 800196e:	e000      	b.n	8001972 <StartmotorTask+0x152>
			  if(motortask.motors[i].modify == 0) continue;
 8001970:	bf00      	nop
		  for(uint8_t i = 0; i < 2; i++)
 8001972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001976:	3301      	adds	r3, #1
 8001978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800197c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001980:	2b01      	cmp	r3, #1
 8001982:	f67f af73 	bls.w	800186c <StartmotorTask+0x4c>
		  }
		  }
	  }
    osDelay(10);
 8001986:	200a      	movs	r0, #10
 8001988:	f003 fa2a 	bl	8004de0 <osDelay>
  {
 800198c:	e74c      	b.n	8001828 <StartmotorTask+0x8>
 800198e:	bf00      	nop
 8001990:	00000000 	.word	0x00000000
 8001994:	40518000 	.word	0x40518000
 8001998:	2000005c 	.word	0x2000005c
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020000 	.word	0x40020000

080019a4 <StartACCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartACCTask */
void StartACCTask(void *argument)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	; 0x40
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	static uint8_t TRIG_Ticks = 0;
	static double prev_distance;
  /* Infinite loop */
  for(;;)
  {
	  Distance = HCSR04_Read(HCSR04_SENSOR1);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff feb7 	bl	8001720 <HCSR04_Read>
 80019b2:	eef0 7a40 	vmov.f32	s15, s0
 80019b6:	4bce      	ldr	r3, [pc, #824]	; (8001cf0 <StartACCTask+0x34c>)
 80019b8:	edc3 7a00 	vstr	s15, [r3]
	  TRIG_Ticks++;
 80019bc:	4bcd      	ldr	r3, [pc, #820]	; (8001cf4 <StartACCTask+0x350>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4bcb      	ldr	r3, [pc, #812]	; (8001cf4 <StartACCTask+0x350>)
 80019c6:	701a      	strb	r2, [r3, #0]
	  if(TRIG_Ticks >= 5)
 80019c8:	4bca      	ldr	r3, [pc, #808]	; (8001cf4 <StartACCTask+0x350>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d905      	bls.n	80019dc <StartACCTask+0x38>
	  {
		  HCSR04_Trigger(HCSR04_SENSOR1);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff febf 	bl	8001754 <HCSR04_Trigger>
		  TRIG_Ticks = 0;
 80019d6:	4bc7      	ldr	r3, [pc, #796]	; (8001cf4 <StartACCTask+0x350>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
		 break;
	 }
	 }
#endif
#if 1
	  if(Distance > DISTANCE_1)
 80019dc:	4bc4      	ldr	r3, [pc, #784]	; (8001cf0 <StartACCTask+0x34c>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8001cf8 <StartACCTask+0x354>
 80019e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	dd38      	ble.n	8001a62 <StartACCTask+0xbe>
	  {
		  motorControl_t payload = {0};
 80019f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a00:	e022      	b.n	8001a48 <StartACCTask+0xa4>
		  {
			  payload.motors[i].modify = 1;
 8001a02:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3340      	adds	r3, #64	; 0x40
 8001a0e:	443b      	add	r3, r7
 8001a10:	3b0c      	subs	r3, #12
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = SPEED_1;
 8001a16:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	3340      	adds	r3, #64	; 0x40
 8001a22:	443b      	add	r3, r7
 8001a24:	3b0b      	subs	r3, #11
 8001a26:	2264      	movs	r2, #100	; 0x64
 8001a28:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_FWD;
 8001a2a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	3340      	adds	r3, #64	; 0x40
 8001a36:	443b      	add	r3, r7
 8001a38:	3b0a      	subs	r3, #10
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001a3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a42:	3301      	adds	r3, #1
 8001a44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d9d8      	bls.n	8001a02 <StartACCTask+0x5e>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001a50:	4baa      	ldr	r3, [pc, #680]	; (8001cfc <StartACCTask+0x358>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f003 fa4e 	bl	8004efc <osMessageQueuePut>
 8001a60:	e17f      	b.n	8001d62 <StartACCTask+0x3be>
	  }
	  else if(Distance < DISTANCE_1 && Distance > DISTANCE_2)
 8001a62:	4ba3      	ldr	r3, [pc, #652]	; (8001cf0 <StartACCTask+0x34c>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001cf8 <StartACCTask+0x354>
 8001a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	d542      	bpl.n	8001afc <StartACCTask+0x158>
 8001a76:	4b9e      	ldr	r3, [pc, #632]	; (8001cf0 <StartACCTask+0x34c>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001d00 <StartACCTask+0x35c>
 8001a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	dd38      	ble.n	8001afc <StartACCTask+0x158>
	  {
		  motorControl_t payload = {0};
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001a9a:	e022      	b.n	8001ae2 <StartACCTask+0x13e>
		  {
			  payload.motors[i].modify = 1;
 8001a9c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3340      	adds	r3, #64	; 0x40
 8001aa8:	443b      	add	r3, r7
 8001aaa:	3b14      	subs	r3, #20
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = SPEED_2;
 8001ab0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	3340      	adds	r3, #64	; 0x40
 8001abc:	443b      	add	r3, r7
 8001abe:	3b13      	subs	r3, #19
 8001ac0:	2250      	movs	r2, #80	; 0x50
 8001ac2:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_FWD;
 8001ac4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	3340      	adds	r3, #64	; 0x40
 8001ad0:	443b      	add	r3, r7
 8001ad2:	3b12      	subs	r3, #18
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001ad8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001adc:	3301      	adds	r3, #1
 8001ade:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ae2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d9d8      	bls.n	8001a9c <StartACCTask+0xf8>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001aea:	4b84      	ldr	r3, [pc, #528]	; (8001cfc <StartACCTask+0x358>)
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001af2:	2301      	movs	r3, #1
 8001af4:	2200      	movs	r2, #0
 8001af6:	f003 fa01 	bl	8004efc <osMessageQueuePut>
	  {
 8001afa:	e132      	b.n	8001d62 <StartACCTask+0x3be>
	  }
	  else if(Distance < DISTANCE_2 && Distance > DISTANCE_3)
 8001afc:	4b7c      	ldr	r3, [pc, #496]	; (8001cf0 <StartACCTask+0x34c>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001d00 <StartACCTask+0x35c>
 8001b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	d542      	bpl.n	8001b96 <StartACCTask+0x1f2>
 8001b10:	4b77      	ldr	r3, [pc, #476]	; (8001cf0 <StartACCTask+0x34c>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b22:	dd38      	ble.n	8001b96 <StartACCTask+0x1f2>
	  {
		  motorControl_t payload = {0};
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001b34:	e022      	b.n	8001b7c <StartACCTask+0x1d8>
		  {
			  payload.motors[i].modify = 1;
 8001b36:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	3340      	adds	r3, #64	; 0x40
 8001b42:	443b      	add	r3, r7
 8001b44:	3b1c      	subs	r3, #28
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = SPEED_3;
 8001b4a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	3340      	adds	r3, #64	; 0x40
 8001b56:	443b      	add	r3, r7
 8001b58:	3b1b      	subs	r3, #27
 8001b5a:	223c      	movs	r2, #60	; 0x3c
 8001b5c:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_FWD;
 8001b5e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	3340      	adds	r3, #64	; 0x40
 8001b6a:	443b      	add	r3, r7
 8001b6c:	3b1a      	subs	r3, #26
 8001b6e:	2202      	movs	r2, #2
 8001b70:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001b72:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b76:	3301      	adds	r3, #1
 8001b78:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001b7c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d9d8      	bls.n	8001b36 <StartACCTask+0x192>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001b84:	4b5d      	ldr	r3, [pc, #372]	; (8001cfc <StartACCTask+0x358>)
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f003 f9b4 	bl	8004efc <osMessageQueuePut>
	  {
 8001b94:	e0e5      	b.n	8001d62 <StartACCTask+0x3be>
	  }
	  else if(Distance < DISTANCE_3 && Distance > DISTANCE_4)
 8001b96:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <StartACCTask+0x34c>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba8:	d542      	bpl.n	8001c30 <StartACCTask+0x28c>
 8001baa:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <StartACCTask+0x34c>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	dd38      	ble.n	8001c30 <StartACCTask+0x28c>
	  {
		  motorControl_t payload = {0};
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001bce:	e022      	b.n	8001c16 <StartACCTask+0x272>
		  {
			  payload.motors[i].modify = 1;
 8001bd0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	3340      	adds	r3, #64	; 0x40
 8001bdc:	443b      	add	r3, r7
 8001bde:	3b24      	subs	r3, #36	; 0x24
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = SPEED_4;
 8001be4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	3340      	adds	r3, #64	; 0x40
 8001bf0:	443b      	add	r3, r7
 8001bf2:	3b23      	subs	r3, #35	; 0x23
 8001bf4:	2228      	movs	r2, #40	; 0x28
 8001bf6:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_FWD;
 8001bf8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	3340      	adds	r3, #64	; 0x40
 8001c04:	443b      	add	r3, r7
 8001c06:	3b22      	subs	r3, #34	; 0x22
 8001c08:	2202      	movs	r2, #2
 8001c0a:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001c0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001c10:	3301      	adds	r3, #1
 8001c12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001c16:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d9d8      	bls.n	8001bd0 <StartACCTask+0x22c>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <StartACCTask+0x358>)
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	f107 011c 	add.w	r1, r7, #28
 8001c26:	2301      	movs	r3, #1
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f003 f967 	bl	8004efc <osMessageQueuePut>
	  {
 8001c2e:	e098      	b.n	8001d62 <StartACCTask+0x3be>
	  }
	  else if(Distance < DISTANCE_4 && Distance > DISTANCE_5)
 8001c30:	4b2f      	ldr	r3, [pc, #188]	; (8001cf0 <StartACCTask+0x34c>)
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	d542      	bpl.n	8001cca <StartACCTask+0x326>
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <StartACCTask+0x34c>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	dd38      	ble.n	8001cca <StartACCTask+0x326>
	  {
		  motorControl_t payload = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001c68:	e022      	b.n	8001cb0 <StartACCTask+0x30c>
		  {
			  payload.motors[i].modify = 1;
 8001c6a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	3340      	adds	r3, #64	; 0x40
 8001c76:	443b      	add	r3, r7
 8001c78:	3b2c      	subs	r3, #44	; 0x2c
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = SPEED_5;
 8001c7e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	3340      	adds	r3, #64	; 0x40
 8001c8a:	443b      	add	r3, r7
 8001c8c:	3b2b      	subs	r3, #43	; 0x2b
 8001c8e:	2214      	movs	r2, #20
 8001c90:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_FWD;
 8001c92:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3340      	adds	r3, #64	; 0x40
 8001c9e:	443b      	add	r3, r7
 8001ca0:	3b2a      	subs	r3, #42	; 0x2a
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001ca6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001caa:	3301      	adds	r3, #1
 8001cac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001cb0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d9d8      	bls.n	8001c6a <StartACCTask+0x2c6>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001cb8:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <StartACCTask+0x358>)
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	f107 0114 	add.w	r1, r7, #20
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f003 f91a 	bl	8004efc <osMessageQueuePut>
	  {
 8001cc8:	e04b      	b.n	8001d62 <StartACCTask+0x3be>
	  }
	  else if(Distance < DISTANCE_5)
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <StartACCTask+0x34c>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cdc:	d541      	bpl.n	8001d62 <StartACCTask+0x3be>
	  {
		  motorControl_t payload = {0};
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	809a      	strh	r2, [r3, #4]
		  for(uint8_t i = 0; i < 2; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001cee:	e02c      	b.n	8001d4a <StartACCTask+0x3a6>
 8001cf0:	20000050 	.word	0x20000050
 8001cf4:	20000060 	.word	0x20000060
 8001cf8:	42480000 	.word	0x42480000
 8001cfc:	2000005c 	.word	0x2000005c
 8001d00:	420c0000 	.word	0x420c0000
		  {
			  payload.motors[i].modify = 1;
 8001d04:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3340      	adds	r3, #64	; 0x40
 8001d10:	443b      	add	r3, r7
 8001d12:	3b34      	subs	r3, #52	; 0x34
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].speed = 0;
 8001d18:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	3340      	adds	r3, #64	; 0x40
 8001d24:	443b      	add	r3, r7
 8001d26:	3b33      	subs	r3, #51	; 0x33
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
			  payload.motors[i].control = MOTOR_OFF;
 8001d2c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	3340      	adds	r3, #64	; 0x40
 8001d38:	443b      	add	r3, r7
 8001d3a:	3b32      	subs	r3, #50	; 0x32
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i = 0; i < 2; i++)
 8001d40:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d44:	3301      	adds	r3, #1
 8001d46:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001d4a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d9d8      	bls.n	8001d04 <StartACCTask+0x360>
		  }
		  osMessageQueuePut(motorQueueHandle, &payload, 0, 1);
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <StartACCTask+0x3dc>)
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	f107 010c 	add.w	r1, r7, #12
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f003 f8cd 	bl	8004efc <osMessageQueuePut>
	  }
#endif
	  prev_distance = Distance;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <StartACCTask+0x3e0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fb9e 	bl	80004a8 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4905      	ldr	r1, [pc, #20]	; (8001d88 <StartACCTask+0x3e4>)
 8001d72:	e9c1 2300 	strd	r2, r3, [r1]
	  // ACC END
	 #endif
	  osDelay(20);
 8001d76:	2014      	movs	r0, #20
 8001d78:	f003 f832 	bl	8004de0 <osDelay>
	  Distance = HCSR04_Read(HCSR04_SENSOR1);
 8001d7c:	e616      	b.n	80019ac <StartACCTask+0x8>
 8001d7e:	bf00      	nop
 8001d80:	2000005c 	.word	0x2000005c
 8001d84:	20000050 	.word	0x20000050
 8001d88:	20000068 	.word	0x20000068

08001d8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <MX_GPIO_Init+0xac>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a23      	ldr	r2, [pc, #140]	; (8001e38 <MX_GPIO_Init+0xac>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <MX_GPIO_Init+0xac>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <MX_GPIO_Init+0xac>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <MX_GPIO_Init+0xac>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_GPIO_Init+0xac>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|MOTOR_IN3_Pin|MOTOR_IN2_Pin|MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f244 01e0 	movw	r1, #16608	; 0x40e0
 8001de0:	4816      	ldr	r0, [pc, #88]	; (8001e3c <MX_GPIO_Init+0xb0>)
 8001de2:	f000 fec7 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_IN4_GPIO_Port, MOTOR_IN4_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dec:	4814      	ldr	r0, [pc, #80]	; (8001e40 <MX_GPIO_Init+0xb4>)
 8001dee:	f000 fec1 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|MOTOR_IN3_Pin|MOTOR_IN2_Pin|MOTOR_IN1_Pin;
 8001df2:	f244 03e0 	movw	r3, #16608	; 0x40e0
 8001df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480c      	ldr	r0, [pc, #48]	; (8001e3c <MX_GPIO_Init+0xb0>)
 8001e0c:	f000 fd2e 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_IN4_Pin;
 8001e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_IN4_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_GPIO_Init+0xb4>)
 8001e2a:	f000 fd1f 	bl	800286c <HAL_GPIO_Init>

}
 8001e2e:	bf00      	nop
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020000 	.word	0x40020000

08001e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e48:	f000 fbc8 	bl	80025dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e4c:	f000 f81e 	bl	8001e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e50:	f7ff ff9c 	bl	8001d8c <MX_GPIO_Init>
  MX_TIM5_Init();
 8001e54:	f000 f9ea 	bl	800222c <MX_TIM5_Init>
  MX_TIM2_Init();
 8001e58:	f000 f978 	bl	800214c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HCSR04_Init(HCSR04_SENSOR1, &htim2);
 8001e5c:	4909      	ldr	r1, [pc, #36]	; (8001e84 <main+0x40>)
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7fe ffd2 	bl	8000e08 <HCSR04_Init>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001e64:	2100      	movs	r1, #0
 8001e66:	4808      	ldr	r0, [pc, #32]	; (8001e88 <main+0x44>)
 8001e68:	f001 fc16 	bl	8003698 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <main+0x44>)
 8001e70:	f001 fc12 	bl	8003698 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e74:	f002 fed8 	bl	8004c28 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e78:	f7ff fca4 	bl	80017c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e7c:	f002 fef8 	bl	8004c70 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <main+0x3c>
 8001e82:	bf00      	nop
 8001e84:	200000b8 	.word	0x200000b8
 8001e88:	20000100 	.word	0x20000100

08001e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b094      	sub	sp, #80	; 0x50
 8001e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e92:	f107 0320 	add.w	r3, r7, #32
 8001e96:	2230      	movs	r2, #48	; 0x30
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 fdb8 	bl	8007a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <SystemClock_Config+0xb8>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <SystemClock_Config+0xb8>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <SystemClock_Config+0xb8>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <SystemClock_Config+0xbc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <SystemClock_Config+0xbc>)
 8001eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <SystemClock_Config+0xbc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eec:	2302      	movs	r3, #2
 8001eee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efc:	f107 0320 	add.w	r3, r7, #32
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fe51 	bl	8002ba8 <HAL_RCC_OscConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001f0c:	f000 f83e 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f10:	230f      	movs	r3, #15
 8001f12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 f8b4 	bl	8003098 <HAL_RCC_ClockConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f36:	f000 f829 	bl	8001f8c <Error_Handler>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	3750      	adds	r7, #80	; 0x50
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40007000 	.word	0x40007000

08001f4c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_IC_ISR(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff f993 	bl	8001280 <HCSR04_TMR_IC_ISR>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f76:	f000 fb53 	bl	8002620 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  HCSR04_TMR_OVF_ISR(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff f942 	bl	8001204 <HCSR04_TMR_OVF_ISR>
  /* USER CODE END Callback 1 */
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40014400 	.word	0x40014400

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <Error_Handler+0x8>
	...

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_MspInit+0x54>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_MspInit+0x54>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_MspInit+0x54>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_MspInit+0x54>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_MspInit+0x54>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_MspInit+0x54>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	210f      	movs	r1, #15
 8001fda:	f06f 0001 	mvn.w	r0, #1
 8001fde:	f000 fc1b 	bl	8002818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	; 0x30
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <HAL_InitTick+0xd0>)
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	4a2d      	ldr	r2, [pc, #180]	; (80020c0 <HAL_InitTick+0xd0>)
 800200a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200e:	6453      	str	r3, [r2, #68]	; 0x44
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_InitTick+0xd0>)
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800201c:	f107 020c 	add.w	r2, r7, #12
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f001 fa02 	bl	8003430 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800202c:	f001 f9ec 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8002030:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <HAL_InitTick+0xd4>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9b      	lsrs	r3, r3, #18
 800203c:	3b01      	subs	r3, #1
 800203e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <HAL_InitTick+0xd8>)
 8002042:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_InitTick+0xdc>)
 8002044:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_InitTick+0xd8>)
 8002048:	f240 32e7 	movw	r2, #999	; 0x3e7
 800204c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <HAL_InitTick+0xd8>)
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_InitTick+0xd8>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_InitTick+0xd8>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_InitTick+0xd8>)
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8002066:	4818      	ldr	r0, [pc, #96]	; (80020c8 <HAL_InitTick+0xd8>)
 8002068:	f001 fa14 	bl	8003494 <HAL_TIM_Base_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002076:	2b00      	cmp	r3, #0
 8002078:	d11b      	bne.n	80020b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800207a:	4813      	ldr	r0, [pc, #76]	; (80020c8 <HAL_InitTick+0xd8>)
 800207c:	f001 fa5a 	bl	8003534 <HAL_TIM_Base_Start_IT>
 8002080:	4603      	mov	r3, r0
 8002082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800208a:	2b00      	cmp	r3, #0
 800208c:	d111      	bne.n	80020b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800208e:	2019      	movs	r0, #25
 8002090:	f000 fbde 	bl	8002850 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b0f      	cmp	r3, #15
 8002098:	d808      	bhi.n	80020ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800209a:	2200      	movs	r2, #0
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	2019      	movs	r0, #25
 80020a0:	f000 fbba 	bl	8002818 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_InitTick+0xe0>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e002      	b.n	80020b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80020b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3730      	adds	r7, #48	; 0x30
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	431bde83 	.word	0x431bde83
 80020c8:	20000070 	.word	0x20000070
 80020cc:	40014400 	.word	0x40014400
 80020d0:	20000004 	.word	0x20000004

080020d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <NMI_Handler+0x4>

080020da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <HardFault_Handler+0x4>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <MemManage_Handler+0x4>

080020e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <BusFault_Handler+0x4>

080020ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <UsageFault_Handler+0x4>

080020f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HCSR04_TMR_OVF_ISR(&htim1);
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002106:	f001 fd4f 	bl	8003ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000070 	.word	0x20000070

08002114 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <TIM2_IRQHandler+0x10>)
 800211a:	f001 fd45 	bl	8003ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200000b8 	.word	0x200000b8

08002128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002152:	f107 0318 	add.w	r3, r7, #24
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800216a:	463b      	mov	r3, r7
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002176:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <MX_TIM2_Init+0xdc>)
 8002178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800217c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <MX_TIM2_Init+0xdc>)
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <MX_TIM2_Init+0xdc>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800218a:	4b27      	ldr	r3, [pc, #156]	; (8002228 <MX_TIM2_Init+0xdc>)
 800218c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002190:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <MX_TIM2_Init+0xdc>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002198:	4b23      	ldr	r3, [pc, #140]	; (8002228 <MX_TIM2_Init+0xdc>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800219e:	4822      	ldr	r0, [pc, #136]	; (8002228 <MX_TIM2_Init+0xdc>)
 80021a0:	f001 f978 	bl	8003494 <HAL_TIM_Base_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80021aa:	f7ff feef 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021b4:	f107 0318 	add.w	r3, r7, #24
 80021b8:	4619      	mov	r1, r3
 80021ba:	481b      	ldr	r0, [pc, #108]	; (8002228 <MX_TIM2_Init+0xdc>)
 80021bc:	f001 ff5a 	bl	8004074 <HAL_TIM_ConfigClockSource>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80021c6:	f7ff fee1 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80021ca:	4817      	ldr	r0, [pc, #92]	; (8002228 <MX_TIM2_Init+0xdc>)
 80021cc:	f001 fb78 	bl	80038c0 <HAL_TIM_IC_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021d6:	f7ff fed9 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	4619      	mov	r1, r3
 80021e8:	480f      	ldr	r0, [pc, #60]	; (8002228 <MX_TIM2_Init+0xdc>)
 80021ea:	f002 fc57 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80021f4:	f7ff feca 	bl	8001f8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021f8:	2300      	movs	r3, #0
 80021fa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021fc:	2301      	movs	r3, #1
 80021fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002208:	463b      	mov	r3, r7
 800220a:	2200      	movs	r2, #0
 800220c:	4619      	mov	r1, r3
 800220e:	4806      	ldr	r0, [pc, #24]	; (8002228 <MX_TIM2_Init+0xdc>)
 8002210:	f001 fdd2 	bl	8003db8 <HAL_TIM_IC_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800221a:	f7ff feb7 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200000b8 	.word	0x200000b8

0800222c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]
 800224a:	615a      	str	r2, [r3, #20]
 800224c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800224e:	4b27      	ldr	r3, [pc, #156]	; (80022ec <MX_TIM5_Init+0xc0>)
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <MX_TIM5_Init+0xc4>)
 8002252:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <MX_TIM5_Init+0xc0>)
 8002256:	220f      	movs	r2, #15
 8002258:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <MX_TIM5_Init+0xc0>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8002260:	4b22      	ldr	r3, [pc, #136]	; (80022ec <MX_TIM5_Init+0xc0>)
 8002262:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002266:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002268:	4b20      	ldr	r3, [pc, #128]	; (80022ec <MX_TIM5_Init+0xc0>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <MX_TIM5_Init+0xc0>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002274:	481d      	ldr	r0, [pc, #116]	; (80022ec <MX_TIM5_Init+0xc0>)
 8002276:	f001 f9bf 	bl	80035f8 <HAL_TIM_PWM_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002280:	f7ff fe84 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800228c:	f107 0320 	add.w	r3, r7, #32
 8002290:	4619      	mov	r1, r3
 8002292:	4816      	ldr	r0, [pc, #88]	; (80022ec <MX_TIM5_Init+0xc0>)
 8002294:	f002 fc02 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800229e:	f7ff fe75 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a2:	2360      	movs	r3, #96	; 0x60
 80022a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2200      	movs	r2, #0
 80022b6:	4619      	mov	r1, r3
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <MX_TIM5_Init+0xc0>)
 80022ba:	f001 fe19 	bl	8003ef0 <HAL_TIM_PWM_ConfigChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80022c4:	f7ff fe62 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2204      	movs	r2, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4807      	ldr	r0, [pc, #28]	; (80022ec <MX_TIM5_Init+0xc0>)
 80022d0:	f001 fe0e 	bl	8003ef0 <HAL_TIM_PWM_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80022da:	f7ff fe57 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022de:	4803      	ldr	r0, [pc, #12]	; (80022ec <MX_TIM5_Init+0xc0>)
 80022e0:	f000 f878 	bl	80023d4 <HAL_TIM_MspPostInit>

}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000100 	.word	0x20000100
 80022f0:	40000c00 	.word	0x40000c00

080022f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002314:	d133      	bne.n	800237e <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_TIM_Base_MspInit+0x94>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_TIM_Base_MspInit+0x94>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_TIM_Base_MspInit+0x94>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_TIM_Base_MspInit+0x94>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_TIM_Base_MspInit+0x94>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_TIM_Base_MspInit+0x94>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800234e:	2320      	movs	r3, #32
 8002350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800235e:	2301      	movs	r3, #1
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4808      	ldr	r0, [pc, #32]	; (800238c <HAL_TIM_Base_MspInit+0x98>)
 800236a:	f000 fa7f 	bl	800286c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2105      	movs	r1, #5
 8002372:	201c      	movs	r0, #28
 8002374:	f000 fa50 	bl	8002818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002378:	201c      	movs	r0, #28
 800237a:	f000 fa69 	bl	8002850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800237e:	bf00      	nop
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40020000 	.word	0x40020000

08002390 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_TIM_PWM_MspInit+0x3c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d10d      	bne.n	80023be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_TIM_PWM_MspInit+0x40>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_TIM_PWM_MspInit+0x40>)
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	6413      	str	r3, [r2, #64]	; 0x40
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_TIM_PWM_MspInit+0x40>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40000c00 	.word	0x40000c00
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_TIM_MspPostInit+0x68>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d11d      	bne.n	8002432 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_TIM_MspPostInit+0x6c>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <HAL_TIM_MspPostInit+0x6c>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_TIM_MspPostInit+0x6c>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_EN1_Pin|MOTOR_EN2_Pin;
 8002412:	2303      	movs	r3, #3
 8002414:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002422:	2302      	movs	r3, #2
 8002424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	4619      	mov	r1, r3
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <HAL_TIM_MspPostInit+0x70>)
 800242e:	f000 fa1d 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40000c00 	.word	0x40000c00
 8002440:	40023800 	.word	0x40023800
 8002444:	40020000 	.word	0x40020000

08002448 <Motor1_SetSpeed>:
  }
}

/* USER CODE BEGIN 1 */
void Motor1_SetSpeed(double speed)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	ed87 0b00 	vstr	d0, [r7]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	611a      	str	r2, [r3, #16]
 8002462:	615a      	str	r2, [r3, #20]
 8002464:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002466:	2360      	movs	r3, #96	; 0x60
 8002468:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = (speed/100.0) * (20000-1);
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <Motor1_SetSpeed+0x98>)
 8002470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002474:	f7fe f99a 	bl	80007ac <__aeabi_ddiv>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	a315      	add	r3, pc, #84	; (adr r3, 80024d8 <Motor1_SetSpeed+0x90>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fe f867 	bl	8000558 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	f7fe fa73 	bl	800097c <__aeabi_d2uiz>
 8002496:	4603      	mov	r3, r0
 8002498:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024a2:	f107 030c 	add.w	r3, r7, #12
 80024a6:	2200      	movs	r2, #0
 80024a8:	4619      	mov	r1, r3
 80024aa:	480e      	ldr	r0, [pc, #56]	; (80024e4 <Motor1_SetSpeed+0x9c>)
 80024ac:	f001 fd20 	bl	8003ef0 <HAL_TIM_PWM_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <Motor1_SetSpeed+0x72>
	  {
	    Error_Handler();
 80024b6:	f7ff fd69 	bl	8001f8c <Error_Handler>
	  }
	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 80024ba:	2100      	movs	r1, #0
 80024bc:	4809      	ldr	r0, [pc, #36]	; (80024e4 <Motor1_SetSpeed+0x9c>)
 80024be:	f001 f99b 	bl	80037f8 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80024c2:	2100      	movs	r1, #0
 80024c4:	4807      	ldr	r0, [pc, #28]	; (80024e4 <Motor1_SetSpeed+0x9c>)
 80024c6:	f001 f8e7 	bl	8003698 <HAL_TIM_PWM_Start>
}
 80024ca:	bf00      	nop
 80024cc:	3728      	adds	r7, #40	; 0x28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	f3af 8000 	nop.w
 80024d8:	00000000 	.word	0x00000000
 80024dc:	40d387c0 	.word	0x40d387c0
 80024e0:	40590000 	.word	0x40590000
 80024e4:	20000100 	.word	0x20000100

080024e8 <Motor2_SetSpeed>:

void Motor2_SetSpeed(double speed)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	ed87 0b00 	vstr	d0, [r7]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f2:	f107 030c 	add.w	r3, r7, #12
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	611a      	str	r2, [r3, #16]
 8002502:	615a      	str	r2, [r3, #20]
 8002504:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002506:	2360      	movs	r3, #96	; 0x60
 8002508:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = (speed/100.0) * (20000-1);
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <Motor2_SetSpeed+0x98>)
 8002510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002514:	f7fe f94a 	bl	80007ac <__aeabi_ddiv>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	a315      	add	r3, pc, #84	; (adr r3, 8002578 <Motor2_SetSpeed+0x90>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f817 	bl	8000558 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe fa23 	bl	800097c <__aeabi_d2uiz>
 8002536:	4603      	mov	r3, r0
 8002538:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	2204      	movs	r2, #4
 8002548:	4619      	mov	r1, r3
 800254a:	480e      	ldr	r0, [pc, #56]	; (8002584 <Motor2_SetSpeed+0x9c>)
 800254c:	f001 fcd0 	bl	8003ef0 <HAL_TIM_PWM_ConfigChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <Motor2_SetSpeed+0x72>
	  {
	    Error_Handler();
 8002556:	f7ff fd19 	bl	8001f8c <Error_Handler>
	  }
	  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
 800255a:	2104      	movs	r1, #4
 800255c:	4809      	ldr	r0, [pc, #36]	; (8002584 <Motor2_SetSpeed+0x9c>)
 800255e:	f001 f94b 	bl	80037f8 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002562:	2104      	movs	r1, #4
 8002564:	4807      	ldr	r0, [pc, #28]	; (8002584 <Motor2_SetSpeed+0x9c>)
 8002566:	f001 f897 	bl	8003698 <HAL_TIM_PWM_Start>
}
 800256a:	bf00      	nop
 800256c:	3728      	adds	r7, #40	; 0x28
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	f3af 8000 	nop.w
 8002578:	00000000 	.word	0x00000000
 800257c:	40d387c0 	.word	0x40d387c0
 8002580:	40590000 	.word	0x40590000
 8002584:	20000100 	.word	0x20000100

08002588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800258c:	480d      	ldr	r0, [pc, #52]	; (80025c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800258e:	490e      	ldr	r1, [pc, #56]	; (80025c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025a4:	4c0b      	ldr	r4, [pc, #44]	; (80025d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025b2:	f7ff fdb9 	bl	8002128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025b6:	f005 f9f9 	bl	80079ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ba:	f7ff fc43 	bl	8001e44 <main>
  bx  lr    
 80025be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80025cc:	08007b0c 	.word	0x08007b0c
  ldr r2, =_sbss
 80025d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80025d4:	20004a9c 	.word	0x20004a9c

080025d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC_IRQHandler>
	...

080025dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <HAL_Init+0x40>)
 80025e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_Init+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0a      	ldr	r2, [pc, #40]	; (800261c <HAL_Init+0x40>)
 80025f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_Init+0x40>)
 80025fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002604:	2003      	movs	r0, #3
 8002606:	f000 f8fc 	bl	8002802 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260a:	200f      	movs	r0, #15
 800260c:	f7ff fcf0 	bl	8001ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002610:	f7ff fcc2 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00

08002620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x20>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x24>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_IncTick+0x24>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000008 	.word	0x20000008
 8002644:	20000148 	.word	0x20000148

08002648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_GetTick+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000148 	.word	0x20000148

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff ffee 	bl	8002648 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d005      	beq.n	8002686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_Delay+0x44>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002686:	bf00      	nop
 8002688:	f7ff ffde 	bl	8002648 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d8f7      	bhi.n	8002688 <HAL_Delay+0x28>
  {
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000008 	.word	0x20000008

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026da:	4a04      	ldr	r2, [pc, #16]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	60d3      	str	r3, [r2, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db0b      	blt.n	8002736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4907      	ldr	r1, [pc, #28]	; (8002744 <__NVIC_EnableIRQ+0x38>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2001      	movs	r0, #1
 800272e:	fa00 f202 	lsl.w	r2, r0, r2
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000e100 	.word	0xe000e100

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	db0a      	blt.n	8002772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	490c      	ldr	r1, [pc, #48]	; (8002794 <__NVIC_SetPriority+0x4c>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	440b      	add	r3, r1
 800276c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002770:	e00a      	b.n	8002788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <__NVIC_SetPriority+0x50>)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3b04      	subs	r3, #4
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	440b      	add	r3, r1
 8002786:	761a      	strb	r2, [r3, #24]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000e100 	.word	0xe000e100
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f1c3 0307 	rsb	r3, r3, #7
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	bf28      	it	cs
 80027ba:	2304      	movcs	r3, #4
 80027bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d902      	bls.n	80027cc <NVIC_EncodePriority+0x30>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3b03      	subs	r3, #3
 80027ca:	e000      	b.n	80027ce <NVIC_EncodePriority+0x32>
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	4313      	orrs	r3, r2
         );
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ff4c 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282a:	f7ff ff61 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 800282e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	6978      	ldr	r0, [r7, #20]
 8002836:	f7ff ffb1 	bl	800279c <NVIC_EncodePriority>
 800283a:	4602      	mov	r2, r0
 800283c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff80 	bl	8002748 <__NVIC_SetPriority>
}
 8002848:	bf00      	nop
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff54 	bl	800270c <__NVIC_EnableIRQ>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	e159      	b.n	8002b3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002888:	2201      	movs	r2, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f040 8148 	bne.w	8002b36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d005      	beq.n	80028be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d130      	bne.n	8002920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	2203      	movs	r2, #3
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f4:	2201      	movs	r2, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 0201 	and.w	r2, r3, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b03      	cmp	r3, #3
 800292a:	d017      	beq.n	800295c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d123      	bne.n	80029b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	08da      	lsrs	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3208      	adds	r2, #8
 8002970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	08da      	lsrs	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3208      	adds	r2, #8
 80029aa:	69b9      	ldr	r1, [r7, #24]
 80029ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0203 	and.w	r2, r3, #3
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a2 	beq.w	8002b36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <HAL_GPIO_Init+0x2e8>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a56      	ldr	r2, [pc, #344]	; (8002b54 <HAL_GPIO_Init+0x2e8>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b54      	ldr	r3, [pc, #336]	; (8002b54 <HAL_GPIO_Init+0x2e8>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0e:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_GPIO_Init+0x2ec>)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a49      	ldr	r2, [pc, #292]	; (8002b5c <HAL_GPIO_Init+0x2f0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d019      	beq.n	8002a6e <HAL_GPIO_Init+0x202>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a48      	ldr	r2, [pc, #288]	; (8002b60 <HAL_GPIO_Init+0x2f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_GPIO_Init+0x1fe>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a47      	ldr	r2, [pc, #284]	; (8002b64 <HAL_GPIO_Init+0x2f8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00d      	beq.n	8002a66 <HAL_GPIO_Init+0x1fa>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a46      	ldr	r2, [pc, #280]	; (8002b68 <HAL_GPIO_Init+0x2fc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <HAL_GPIO_Init+0x1f6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a45      	ldr	r2, [pc, #276]	; (8002b6c <HAL_GPIO_Init+0x300>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_GPIO_Init+0x1f2>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e008      	b.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a5e:	2307      	movs	r3, #7
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a62:	2303      	movs	r3, #3
 8002a64:	e004      	b.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x204>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f002 0203 	and.w	r2, r2, #3
 8002a76:	0092      	lsls	r2, r2, #2
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a80:	4935      	ldr	r1, [pc, #212]	; (8002b58 <HAL_GPIO_Init+0x2ec>)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8e:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab2:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002adc:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae2:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b06:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0c:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b30:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b0f      	cmp	r3, #15
 8002b40:	f67f aea2 	bls.w	8002888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3724      	adds	r7, #36	; 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40020800 	.word	0x40020800
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40013c00 	.word	0x40013c00

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b90:	e003      	b.n	8002b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b92:	887b      	ldrh	r3, [r7, #2]
 8002b94:	041a      	lsls	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	619a      	str	r2, [r3, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e267      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d075      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bc6:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d00c      	beq.n	8002bec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd2:	4b85      	ldr	r3, [pc, #532]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d112      	bne.n	8002c04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bde:	4b82      	ldr	r3, [pc, #520]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bea:	d10b      	bne.n	8002c04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	4b7e      	ldr	r3, [pc, #504]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d05b      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x108>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d157      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e242      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCC_OscConfig+0x74>
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a75      	ldr	r2, [pc, #468]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0xb0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x98>
 8002c26:	4b70      	ldr	r3, [pc, #448]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a6f      	ldr	r2, [pc, #444]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b6d      	ldr	r3, [pc, #436]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6c      	ldr	r2, [pc, #432]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0xb0>
 8002c40:	4b69      	ldr	r3, [pc, #420]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a68      	ldr	r2, [pc, #416]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b66      	ldr	r3, [pc, #408]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a65      	ldr	r2, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fcf2 	bl	8002648 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff fcee 	bl	8002648 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e207      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b5b      	ldr	r3, [pc, #364]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0xc0>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7ff fcde 	bl	8002648 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff fcda 	bl	8002648 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1f3      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	4b51      	ldr	r3, [pc, #324]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0xe8>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d063      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd6:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x152>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1c7      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4937      	ldr	r1, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	e03a      	b.n	8002d86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_RCC_OscConfig+0x244>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7ff fc93 	bl	8002648 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d26:	f7ff fc8f 	bl	8002648 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1a8      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4925      	ldr	r1, [pc, #148]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
 8002d58:	e015      	b.n	8002d86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCC_OscConfig+0x244>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff fc72 	bl	8002648 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d68:	f7ff fc6e 	bl	8002648 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e187      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d036      	beq.n	8002e00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d016      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_RCC_OscConfig+0x248>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7ff fc52 	bl	8002648 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da8:	f7ff fc4e 	bl	8002648 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e167      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x200>
 8002dc6:	e01b      	b.n	8002e00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_RCC_OscConfig+0x248>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7ff fc3b 	bl	8002648 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	e00e      	b.n	8002df4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7ff fc37 	bl	8002648 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d907      	bls.n	8002df4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e150      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	42470000 	.word	0x42470000
 8002df0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	4b88      	ldr	r3, [pc, #544]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ea      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8097 	beq.w	8002f3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e12:	4b81      	ldr	r3, [pc, #516]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10f      	bne.n	8002e3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	4b7d      	ldr	r3, [pc, #500]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a7c      	ldr	r2, [pc, #496]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b7a      	ldr	r3, [pc, #488]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3e:	4b77      	ldr	r3, [pc, #476]	; (800301c <HAL_RCC_OscConfig+0x474>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d118      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4a:	4b74      	ldr	r3, [pc, #464]	; (800301c <HAL_RCC_OscConfig+0x474>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a73      	ldr	r2, [pc, #460]	; (800301c <HAL_RCC_OscConfig+0x474>)
 8002e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e56:	f7ff fbf7 	bl	8002648 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5e:	f7ff fbf3 	bl	8002648 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e10c      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	4b6a      	ldr	r3, [pc, #424]	; (800301c <HAL_RCC_OscConfig+0x474>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x2ea>
 8002e84:	4b64      	ldr	r3, [pc, #400]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a63      	ldr	r2, [pc, #396]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	e01c      	b.n	8002ecc <HAL_RCC_OscConfig+0x324>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x30c>
 8002e9a:	4b5f      	ldr	r3, [pc, #380]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a5e      	ldr	r2, [pc, #376]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea6:	4b5c      	ldr	r3, [pc, #368]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a5b      	ldr	r2, [pc, #364]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0x324>
 8002eb4:	4b58      	ldr	r3, [pc, #352]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a57      	ldr	r2, [pc, #348]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	4b55      	ldr	r3, [pc, #340]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a54      	ldr	r2, [pc, #336]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	f023 0304 	bic.w	r3, r3, #4
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d015      	beq.n	8002f00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7ff fbb8 	bl	8002648 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7ff fbb4 	bl	8002648 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0cb      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef2:	4b49      	ldr	r3, [pc, #292]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ee      	beq.n	8002edc <HAL_RCC_OscConfig+0x334>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7ff fba2 	bl	8002648 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7ff fb9e 	bl	8002648 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0b5      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1e:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ee      	bne.n	8002f08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f30:	4b39      	ldr	r3, [pc, #228]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	4a38      	ldr	r2, [pc, #224]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80a1 	beq.w	8003088 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f46:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d05c      	beq.n	800300c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d141      	bne.n	8002fde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b31      	ldr	r3, [pc, #196]	; (8003020 <HAL_RCC_OscConfig+0x478>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7ff fb72 	bl	8002648 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f68:	f7ff fb6e 	bl	8002648 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e087      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	491b      	ldr	r1, [pc, #108]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x478>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7ff fb47 	bl	8002648 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7ff fb43 	bl	8002648 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e05c      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd0:	4b11      	ldr	r3, [pc, #68]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x416>
 8002fdc:	e054      	b.n	8003088 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <HAL_RCC_OscConfig+0x478>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7ff fb30 	bl	8002648 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fec:	f7ff fb2c 	bl	8002648 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e045      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_RCC_OscConfig+0x470>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x444>
 800300a:	e03d      	b.n	8003088 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d107      	bne.n	8003024 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e038      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
 8003018:	40023800 	.word	0x40023800
 800301c:	40007000 	.word	0x40007000
 8003020:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x4ec>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d028      	beq.n	8003084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d121      	bne.n	8003084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d11a      	bne.n	8003084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800305a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800305c:	4293      	cmp	r3, r2
 800305e:	d111      	bne.n	8003084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	3b01      	subs	r3, #1
 800306e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d107      	bne.n	8003084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0cc      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b68      	ldr	r3, [pc, #416]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d90c      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b63      	ldr	r3, [pc, #396]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0b8      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d020      	beq.n	8003122 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ec:	4b59      	ldr	r3, [pc, #356]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4a58      	ldr	r2, [pc, #352]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003104:	4b53      	ldr	r3, [pc, #332]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4a52      	ldr	r2, [pc, #328]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800310e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003110:	4b50      	ldr	r3, [pc, #320]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	494d      	ldr	r1, [pc, #308]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d044      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d119      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e07f      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d003      	beq.n	8003156 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003152:	2b03      	cmp	r3, #3
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06f      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e067      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4934      	ldr	r1, [pc, #208]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003188:	f7ff fa5e 	bl	8002648 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7ff fa5a 	bl	8002648 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e04f      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d20c      	bcs.n	80031e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e032      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	4916      	ldr	r1, [pc, #88]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	490e      	ldr	r1, [pc, #56]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800321e:	f000 f821 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003222:	4602      	mov	r2, r0
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	490a      	ldr	r1, [pc, #40]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	5ccb      	ldrb	r3, [r1, r3]
 8003232:	fa22 f303 	lsr.w	r3, r2, r3
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fed6 	bl	8001ff0 <HAL_InitTick>

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40023c00 	.word	0x40023c00
 8003254:	40023800 	.word	0x40023800
 8003258:	08007ae4 	.word	0x08007ae4
 800325c:	20000000 	.word	0x20000000
 8003260:	20000004 	.word	0x20000004

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003268:	b090      	sub	sp, #64	; 0x40
 800326a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	637b      	str	r3, [r7, #52]	; 0x34
 8003270:	2300      	movs	r3, #0
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003274:	2300      	movs	r3, #0
 8003276:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800327c:	4b59      	ldr	r3, [pc, #356]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b08      	cmp	r3, #8
 8003286:	d00d      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003288:	2b08      	cmp	r3, #8
 800328a:	f200 80a1 	bhi.w	80033d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x34>
 8003292:	2b04      	cmp	r3, #4
 8003294:	d003      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x3a>
 8003296:	e09b      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003298:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800329a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800329c:	e09b      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329e:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_GetSysClockFreq+0x188>)
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032a2:	e098      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a4:	4b4f      	ldr	r3, [pc, #316]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ae:	4b4d      	ldr	r3, [pc, #308]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d028      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ba:	4b4a      	ldr	r3, [pc, #296]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	099b      	lsrs	r3, r3, #6
 80032c0:	2200      	movs	r2, #0
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	627a      	str	r2, [r7, #36]	; 0x24
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032cc:	2100      	movs	r1, #0
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_GetSysClockFreq+0x188>)
 80032d0:	fb03 f201 	mul.w	r2, r3, r1
 80032d4:	2300      	movs	r3, #0
 80032d6:	fb00 f303 	mul.w	r3, r0, r3
 80032da:	4413      	add	r3, r2
 80032dc:	4a43      	ldr	r2, [pc, #268]	; (80033ec <HAL_RCC_GetSysClockFreq+0x188>)
 80032de:	fba0 1202 	umull	r1, r2, r0, r2
 80032e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032e4:	460a      	mov	r2, r1
 80032e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80032e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ea:	4413      	add	r3, r2
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f0:	2200      	movs	r2, #0
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	61fa      	str	r2, [r7, #28]
 80032f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032fe:	f7fd fbad 	bl	8000a5c <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4613      	mov	r3, r2
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330a:	e053      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330c:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	2200      	movs	r2, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	617a      	str	r2, [r7, #20]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800331e:	f04f 0b00 	mov.w	fp, #0
 8003322:	4652      	mov	r2, sl
 8003324:	465b      	mov	r3, fp
 8003326:	f04f 0000 	mov.w	r0, #0
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	0159      	lsls	r1, r3, #5
 8003330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003334:	0150      	lsls	r0, r2, #5
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	ebb2 080a 	subs.w	r8, r2, sl
 800333e:	eb63 090b 	sbc.w	r9, r3, fp
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800334e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003352:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003356:	ebb2 0408 	subs.w	r4, r2, r8
 800335a:	eb63 0509 	sbc.w	r5, r3, r9
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	00eb      	lsls	r3, r5, #3
 8003368:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800336c:	00e2      	lsls	r2, r4, #3
 800336e:	4614      	mov	r4, r2
 8003370:	461d      	mov	r5, r3
 8003372:	eb14 030a 	adds.w	r3, r4, sl
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	eb45 030b 	adc.w	r3, r5, fp
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	e9d7 4500 	ldrd	r4, r5, [r7]
 800338a:	4629      	mov	r1, r5
 800338c:	028b      	lsls	r3, r1, #10
 800338e:	4621      	mov	r1, r4
 8003390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003394:	4621      	mov	r1, r4
 8003396:	028a      	lsls	r2, r1, #10
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339e:	2200      	movs	r2, #0
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	60fa      	str	r2, [r7, #12]
 80033a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a8:	f7fd fb58 	bl	8000a5c <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4613      	mov	r3, r2
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	3301      	adds	r3, #1
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033ce:	e002      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3740      	adds	r7, #64	; 0x40
 80033dc:	46bd      	mov	sp, r7
 80033de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800
 80033e8:	00f42400 	.word	0x00f42400
 80033ec:	017d7840 	.word	0x017d7840

080033f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f6:	681b      	ldr	r3, [r3, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000000 	.word	0x20000000

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800340c:	f7ff fff0 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	0b5b      	lsrs	r3, r3, #13
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4903      	ldr	r1, [pc, #12]	; (800342c <HAL_RCC_GetPCLK2Freq+0x24>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40023800 	.word	0x40023800
 800342c:	08007af4 	.word	0x08007af4

08003430 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	220f      	movs	r2, #15
 800343e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_RCC_GetClockConfig+0x5c>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0203 	and.w	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_RCC_GetClockConfig+0x5c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_RCC_GetClockConfig+0x5c>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_RCC_GetClockConfig+0x5c>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	08db      	lsrs	r3, r3, #3
 800346a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_RCC_GetClockConfig+0x60>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0207 	and.w	r2, r3, #7
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	601a      	str	r2, [r3, #0]
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40023c00 	.word	0x40023c00

08003494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e041      	b.n	800352a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe ff1a 	bl	80022f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f000 fef8 	bl	80042c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d001      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e044      	b.n	80035d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d018      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x6c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003576:	d013      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00e      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a19      	ldr	r2, [pc, #100]	; (80035ec <HAL_TIM_Base_Start_IT+0xb8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x6c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d111      	bne.n	80035c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d010      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c2:	e007      	b.n	80035d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40014000 	.word	0x40014000

080035f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e041      	b.n	800368e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe feb6 	bl	8002390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 fe46 	bl	80042c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d109      	bne.n	80036bc <HAL_TIM_PWM_Start+0x24>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e022      	b.n	8003702 <HAL_TIM_PWM_Start+0x6a>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d109      	bne.n	80036d6 <HAL_TIM_PWM_Start+0x3e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	e015      	b.n	8003702 <HAL_TIM_PWM_Start+0x6a>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d109      	bne.n	80036f0 <HAL_TIM_PWM_Start+0x58>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e008      	b.n	8003702 <HAL_TIM_PWM_Start+0x6a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e068      	b.n	80037dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <HAL_TIM_PWM_Start+0x82>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003718:	e013      	b.n	8003742 <HAL_TIM_PWM_Start+0xaa>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d104      	bne.n	800372a <HAL_TIM_PWM_Start+0x92>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003728:	e00b      	b.n	8003742 <HAL_TIM_PWM_Start+0xaa>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d104      	bne.n	800373a <HAL_TIM_PWM_Start+0xa2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003738:	e003      	b.n	8003742 <HAL_TIM_PWM_Start+0xaa>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2201      	movs	r2, #1
 8003748:	6839      	ldr	r1, [r7, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f001 f980 	bl	8004a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <HAL_TIM_PWM_Start+0x14c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d107      	bne.n	800376a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_TIM_PWM_Start+0x14c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d018      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x10e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377c:	d013      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x10e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <HAL_TIM_PWM_Start+0x150>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00e      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x10e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_TIM_PWM_Start+0x154>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d009      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x10e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <HAL_TIM_PWM_Start+0x158>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x10e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <HAL_TIM_PWM_Start+0x15c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d111      	bne.n	80037ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b06      	cmp	r3, #6
 80037b6:	d010      	beq.n	80037da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c8:	e007      	b.n	80037da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40000c00 	.word	0x40000c00
 80037f4:	40014000 	.word	0x40014000

080037f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f001 f920 	bl	8004a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a29      	ldr	r2, [pc, #164]	; (80038bc <HAL_TIM_PWM_Stop+0xc4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d117      	bne.n	800384a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	f241 1311 	movw	r3, #4369	; 0x1111
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10f      	bne.n	800384a <HAL_TIM_PWM_Stop+0x52>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	f240 4344 	movw	r3, #1092	; 0x444
 8003834:	4013      	ands	r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d107      	bne.n	800384a <HAL_TIM_PWM_Stop+0x52>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	f241 1311 	movw	r3, #4369	; 0x1111
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <HAL_TIM_PWM_Stop+0x82>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a1a      	ldr	r2, [r3, #32]
 8003860:	f240 4344 	movw	r3, #1092	; 0x444
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d107      	bne.n	800387a <HAL_TIM_PWM_Stop+0x82>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <HAL_TIM_PWM_Stop+0x92>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003888:	e013      	b.n	80038b2 <HAL_TIM_PWM_Stop+0xba>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d104      	bne.n	800389a <HAL_TIM_PWM_Stop+0xa2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003898:	e00b      	b.n	80038b2 <HAL_TIM_PWM_Stop+0xba>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d104      	bne.n	80038aa <HAL_TIM_PWM_Stop+0xb2>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a8:	e003      	b.n	80038b2 <HAL_TIM_PWM_Stop+0xba>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40010000 	.word	0x40010000

080038c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e041      	b.n	8003956 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f839 	bl	800395e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f000 fce2 	bl	80042c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d104      	bne.n	8003992 <HAL_TIM_IC_Start_IT+0x1e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800398e:	b2db      	uxtb	r3, r3
 8003990:	e013      	b.n	80039ba <HAL_TIM_IC_Start_IT+0x46>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b04      	cmp	r3, #4
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_IC_Start_IT+0x2e>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	e00b      	b.n	80039ba <HAL_TIM_IC_Start_IT+0x46>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_IC_Start_IT+0x3e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e003      	b.n	80039ba <HAL_TIM_IC_Start_IT+0x46>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d104      	bne.n	80039cc <HAL_TIM_IC_Start_IT+0x58>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e013      	b.n	80039f4 <HAL_TIM_IC_Start_IT+0x80>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d104      	bne.n	80039dc <HAL_TIM_IC_Start_IT+0x68>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	e00b      	b.n	80039f4 <HAL_TIM_IC_Start_IT+0x80>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d104      	bne.n	80039ec <HAL_TIM_IC_Start_IT+0x78>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e003      	b.n	80039f4 <HAL_TIM_IC_Start_IT+0x80>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80039f6:	7bbb      	ldrb	r3, [r7, #14]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d102      	bne.n	8003a02 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80039fc:	7b7b      	ldrb	r3, [r7, #13]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0c2      	b.n	8003b8c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <HAL_TIM_IC_Start_IT+0xa2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a14:	e013      	b.n	8003a3e <HAL_TIM_IC_Start_IT+0xca>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d104      	bne.n	8003a26 <HAL_TIM_IC_Start_IT+0xb2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a24:	e00b      	b.n	8003a3e <HAL_TIM_IC_Start_IT+0xca>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d104      	bne.n	8003a36 <HAL_TIM_IC_Start_IT+0xc2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a34:	e003      	b.n	8003a3e <HAL_TIM_IC_Start_IT+0xca>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_IC_Start_IT+0xda>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a4c:	e013      	b.n	8003a76 <HAL_TIM_IC_Start_IT+0x102>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_IC_Start_IT+0xea>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a5c:	e00b      	b.n	8003a76 <HAL_TIM_IC_Start_IT+0x102>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_IC_Start_IT+0xfa>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a6c:	e003      	b.n	8003a76 <HAL_TIM_IC_Start_IT+0x102>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b0c      	cmp	r3, #12
 8003a7a:	d841      	bhi.n	8003b00 <HAL_TIM_IC_Start_IT+0x18c>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <HAL_TIM_IC_Start_IT+0x110>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003b01 	.word	0x08003b01
 8003a8c:	08003b01 	.word	0x08003b01
 8003a90:	08003b01 	.word	0x08003b01
 8003a94:	08003acb 	.word	0x08003acb
 8003a98:	08003b01 	.word	0x08003b01
 8003a9c:	08003b01 	.word	0x08003b01
 8003aa0:	08003b01 	.word	0x08003b01
 8003aa4:	08003add 	.word	0x08003add
 8003aa8:	08003b01 	.word	0x08003b01
 8003aac:	08003b01 	.word	0x08003b01
 8003ab0:	08003b01 	.word	0x08003b01
 8003ab4:	08003aef 	.word	0x08003aef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0202 	orr.w	r2, r2, #2
 8003ac6:	60da      	str	r2, [r3, #12]
      break;
 8003ac8:	e01d      	b.n	8003b06 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0204 	orr.w	r2, r2, #4
 8003ad8:	60da      	str	r2, [r3, #12]
      break;
 8003ada:	e014      	b.n	8003b06 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0208 	orr.w	r2, r2, #8
 8003aea:	60da      	str	r2, [r3, #12]
      break;
 8003aec:	e00b      	b.n	8003b06 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0210 	orr.w	r2, r2, #16
 8003afc:	60da      	str	r2, [r3, #12]
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      break;
 8003b04:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d13e      	bne.n	8003b8a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2201      	movs	r2, #1
 8003b12:	6839      	ldr	r1, [r7, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 ff9b 	bl	8004a50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <HAL_TIM_IC_Start_IT+0x220>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d018      	beq.n	8003b56 <HAL_TIM_IC_Start_IT+0x1e2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d013      	beq.n	8003b56 <HAL_TIM_IC_Start_IT+0x1e2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <HAL_TIM_IC_Start_IT+0x224>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_TIM_IC_Start_IT+0x1e2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <HAL_TIM_IC_Start_IT+0x228>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_TIM_IC_Start_IT+0x1e2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <HAL_TIM_IC_Start_IT+0x22c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_TIM_IC_Start_IT+0x1e2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <HAL_TIM_IC_Start_IT+0x230>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d111      	bne.n	8003b7a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b06      	cmp	r3, #6
 8003b66:	d010      	beq.n	8003b8a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b78:	e007      	b.n	8003b8a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0201 	orr.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40014000 	.word	0x40014000

08003ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0202 	mvn.w	r2, #2
 8003bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe f9ae 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fb4a 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fb51 	bl	80042a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d122      	bne.n	8003c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d11b      	bne.n	8003c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0204 	mvn.w	r2, #4
 8003c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fe f984 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fb20 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fb27 	bl	80042a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d122      	bne.n	8003cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d11b      	bne.n	8003cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0208 	mvn.w	r2, #8
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2204      	movs	r2, #4
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fe f95a 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 faf6 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fafd 	bl	80042a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d122      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d11b      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0210 	mvn.w	r2, #16
 8003cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe f930 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 facc 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fad3 	bl	80042a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0201 	mvn.w	r2, #1
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fe f91c 	bl	8001f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d10e      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	2b80      	cmp	r3, #128	; 0x80
 8003d46:	d107      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 ff1a 	bl	8004b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fa98 	bl	80042b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0220 	mvn.w	r2, #32
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fee4 	bl	8004b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e088      	b.n	8003ee8 <HAL_TIM_IC_ConfigChannel+0x130>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	6819      	ldr	r1, [r3, #0]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fc74 	bl	80046e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 020c 	bic.w	r2, r2, #12
 8003e06:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6999      	ldr	r1, [r3, #24]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	619a      	str	r2, [r3, #24]
 8003e1a:	e060      	b.n	8003ede <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d11c      	bne.n	8003e5c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f000 fcec 	bl	800480e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e44:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6999      	ldr	r1, [r3, #24]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	021a      	lsls	r2, r3, #8
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	619a      	str	r2, [r3, #24]
 8003e5a:	e040      	b.n	8003ede <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d11b      	bne.n	8003e9a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f000 fd39 	bl	80048e8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 020c 	bic.w	r2, r2, #12
 8003e84:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69d9      	ldr	r1, [r3, #28]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	61da      	str	r2, [r3, #28]
 8003e98:	e021      	b.n	8003ede <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d11c      	bne.n	8003eda <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6819      	ldr	r1, [r3, #0]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f000 fd56 	bl	8004960 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69da      	ldr	r2, [r3, #28]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ec2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69d9      	ldr	r1, [r3, #28]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	021a      	lsls	r2, r3, #8
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	61da      	str	r2, [r3, #28]
 8003ed8:	e001      	b.n	8003ede <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e0ae      	b.n	800406c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b0c      	cmp	r3, #12
 8003f1a:	f200 809f 	bhi.w	800405c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f59 	.word	0x08003f59
 8003f28:	0800405d 	.word	0x0800405d
 8003f2c:	0800405d 	.word	0x0800405d
 8003f30:	0800405d 	.word	0x0800405d
 8003f34:	08003f99 	.word	0x08003f99
 8003f38:	0800405d 	.word	0x0800405d
 8003f3c:	0800405d 	.word	0x0800405d
 8003f40:	0800405d 	.word	0x0800405d
 8003f44:	08003fdb 	.word	0x08003fdb
 8003f48:	0800405d 	.word	0x0800405d
 8003f4c:	0800405d 	.word	0x0800405d
 8003f50:	0800405d 	.word	0x0800405d
 8003f54:	0800401b 	.word	0x0800401b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fa32 	bl	80043c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0208 	orr.w	r2, r2, #8
 8003f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0204 	bic.w	r2, r2, #4
 8003f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6999      	ldr	r1, [r3, #24]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	619a      	str	r2, [r3, #24]
      break;
 8003f96:	e064      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fa78 	bl	8004494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6999      	ldr	r1, [r3, #24]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	021a      	lsls	r2, r3, #8
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	619a      	str	r2, [r3, #24]
      break;
 8003fd8:	e043      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fac3 	bl	800456c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0208 	orr.w	r2, r2, #8
 8003ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0204 	bic.w	r2, r2, #4
 8004004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69d9      	ldr	r1, [r3, #28]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	61da      	str	r2, [r3, #28]
      break;
 8004018:	e023      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fb0d 	bl	8004640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69d9      	ldr	r1, [r3, #28]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	021a      	lsls	r2, r3, #8
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	61da      	str	r2, [r3, #28]
      break;
 800405a:	e002      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800406a:	7dfb      	ldrb	r3, [r7, #23]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIM_ConfigClockSource+0x1c>
 800408c:	2302      	movs	r3, #2
 800408e:	e0b4      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x186>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c8:	d03e      	beq.n	8004148 <HAL_TIM_ConfigClockSource+0xd4>
 80040ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ce:	f200 8087 	bhi.w	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	f000 8086 	beq.w	80041e6 <HAL_TIM_ConfigClockSource+0x172>
 80040da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040de:	d87f      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e0:	2b70      	cmp	r3, #112	; 0x70
 80040e2:	d01a      	beq.n	800411a <HAL_TIM_ConfigClockSource+0xa6>
 80040e4:	2b70      	cmp	r3, #112	; 0x70
 80040e6:	d87b      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e8:	2b60      	cmp	r3, #96	; 0x60
 80040ea:	d050      	beq.n	800418e <HAL_TIM_ConfigClockSource+0x11a>
 80040ec:	2b60      	cmp	r3, #96	; 0x60
 80040ee:	d877      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b50      	cmp	r3, #80	; 0x50
 80040f2:	d03c      	beq.n	800416e <HAL_TIM_ConfigClockSource+0xfa>
 80040f4:	2b50      	cmp	r3, #80	; 0x50
 80040f6:	d873      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d058      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x13a>
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	d86f      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b30      	cmp	r3, #48	; 0x30
 8004102:	d064      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x15a>
 8004104:	2b30      	cmp	r3, #48	; 0x30
 8004106:	d86b      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d060      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x15a>
 800410c:	2b20      	cmp	r3, #32
 800410e:	d867      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d05c      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x15a>
 8004114:	2b10      	cmp	r3, #16
 8004116:	d05a      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x15a>
 8004118:	e062      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6899      	ldr	r1, [r3, #8]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f000 fc71 	bl	8004a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800413c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	609a      	str	r2, [r3, #8]
      break;
 8004146:	e04f      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6899      	ldr	r1, [r3, #8]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f000 fc5a 	bl	8004a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800416a:	609a      	str	r2, [r3, #8]
      break;
 800416c:	e03c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6859      	ldr	r1, [r3, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	461a      	mov	r2, r3
 800417c:	f000 fb18 	bl	80047b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2150      	movs	r1, #80	; 0x50
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fc27 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 800418c:	e02c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6859      	ldr	r1, [r3, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	461a      	mov	r2, r3
 800419c:	f000 fb74 	bl	8004888 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2160      	movs	r1, #96	; 0x60
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fc17 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80041ac:	e01c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6859      	ldr	r1, [r3, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	461a      	mov	r2, r3
 80041bc:	f000 faf8 	bl	80047b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2140      	movs	r1, #64	; 0x40
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fc07 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80041cc:	e00c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4619      	mov	r1, r3
 80041d8:	4610      	mov	r0, r2
 80041da:	f000 fbfe 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80041de:	e003      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      break;
 80041e4:	e000      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b0c      	cmp	r3, #12
 8004216:	d831      	bhi.n	800427c <HAL_TIM_ReadCapturedValue+0x78>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_TIM_ReadCapturedValue+0x1c>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004255 	.word	0x08004255
 8004224:	0800427d 	.word	0x0800427d
 8004228:	0800427d 	.word	0x0800427d
 800422c:	0800427d 	.word	0x0800427d
 8004230:	0800425f 	.word	0x0800425f
 8004234:	0800427d 	.word	0x0800427d
 8004238:	0800427d 	.word	0x0800427d
 800423c:	0800427d 	.word	0x0800427d
 8004240:	08004269 	.word	0x08004269
 8004244:	0800427d 	.word	0x0800427d
 8004248:	0800427d 	.word	0x0800427d
 800424c:	0800427d 	.word	0x0800427d
 8004250:	08004273 	.word	0x08004273
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425a:	60fb      	str	r3, [r7, #12]

      break;
 800425c:	e00f      	b.n	800427e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	60fb      	str	r3, [r7, #12]

      break;
 8004266:	e00a      	b.n	800427e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	60fb      	str	r3, [r7, #12]

      break;
 8004270:	e005      	b.n	800427e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	60fb      	str	r3, [r7, #12]

      break;
 800427a:	e000      	b.n	800427e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800427c:	bf00      	nop
  }

  return tmpreg;
 800427e:	68fb      	ldr	r3, [r7, #12]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a34      	ldr	r2, [pc, #208]	; (80043ac <TIM_Base_SetConfig+0xe4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00f      	beq.n	8004300 <TIM_Base_SetConfig+0x38>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e6:	d00b      	beq.n	8004300 <TIM_Base_SetConfig+0x38>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a31      	ldr	r2, [pc, #196]	; (80043b0 <TIM_Base_SetConfig+0xe8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_Base_SetConfig+0x38>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a30      	ldr	r2, [pc, #192]	; (80043b4 <TIM_Base_SetConfig+0xec>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0x38>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a2f      	ldr	r2, [pc, #188]	; (80043b8 <TIM_Base_SetConfig+0xf0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d108      	bne.n	8004312 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a25      	ldr	r2, [pc, #148]	; (80043ac <TIM_Base_SetConfig+0xe4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01b      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d017      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a22      	ldr	r2, [pc, #136]	; (80043b0 <TIM_Base_SetConfig+0xe8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <TIM_Base_SetConfig+0xec>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00f      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <TIM_Base_SetConfig+0xf0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00b      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <TIM_Base_SetConfig+0xf4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d007      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <TIM_Base_SetConfig+0xf8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <TIM_Base_SetConfig+0xfc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d108      	bne.n	8004364 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a08      	ldr	r2, [pc, #32]	; (80043ac <TIM_Base_SetConfig+0xe4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	615a      	str	r2, [r3, #20]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400
 80043c4:	40014800 	.word	0x40014800

080043c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0201 	bic.w	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 0302 	bic.w	r3, r3, #2
 8004410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <TIM_OC1_SetConfig+0xc8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d10c      	bne.n	800443e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0308 	bic.w	r3, r3, #8
 800442a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a13      	ldr	r2, [pc, #76]	; (8004490 <TIM_OC1_SetConfig+0xc8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d111      	bne.n	800446a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800444c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	621a      	str	r2, [r3, #32]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40010000 	.word	0x40010000

08004494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f023 0210 	bic.w	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0320 	bic.w	r3, r3, #32
 80044de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <TIM_OC2_SetConfig+0xd4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d10d      	bne.n	8004510 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a15      	ldr	r2, [pc, #84]	; (8004568 <TIM_OC2_SetConfig+0xd4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d113      	bne.n	8004540 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800451e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000

0800456c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0303 	bic.w	r3, r3, #3
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1d      	ldr	r2, [pc, #116]	; (800463c <TIM_OC3_SetConfig+0xd0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10d      	bne.n	80045e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a14      	ldr	r2, [pc, #80]	; (800463c <TIM_OC3_SetConfig+0xd0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d113      	bne.n	8004616 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	621a      	str	r2, [r3, #32]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40010000 	.word	0x40010000

08004640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800468a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a10      	ldr	r2, [pc, #64]	; (80046dc <TIM_OC4_SetConfig+0x9c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d109      	bne.n	80046b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40010000 	.word	0x40010000

080046e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	f023 0201 	bic.w	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a24      	ldr	r2, [pc, #144]	; (800479c <TIM_TI1_SetConfig+0xbc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <TIM_TI1_SetConfig+0x56>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d00f      	beq.n	8004736 <TIM_TI1_SetConfig+0x56>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a21      	ldr	r2, [pc, #132]	; (80047a0 <TIM_TI1_SetConfig+0xc0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_TI1_SetConfig+0x56>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a20      	ldr	r2, [pc, #128]	; (80047a4 <TIM_TI1_SetConfig+0xc4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_TI1_SetConfig+0x56>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <TIM_TI1_SetConfig+0xc8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_TI1_SetConfig+0x56>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <TIM_TI1_SetConfig+0xcc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <TIM_TI1_SetConfig+0x5a>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <TIM_TI1_SetConfig+0x5c>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e003      	b.n	800475a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	b2db      	uxtb	r3, r3
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f023 030a 	bic.w	r3, r3, #10
 8004774:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f003 030a 	and.w	r3, r3, #10
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40010000 	.word	0x40010000
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40000c00 	.word	0x40000c00
 80047ac:	40014000 	.word	0x40014000

080047b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f023 0201 	bic.w	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f023 030a 	bic.w	r3, r3, #10
 80047ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800480e:	b480      	push	{r7}
 8004810:	b087      	sub	sp, #28
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	f023 0210 	bic.w	r2, r3, #16
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	021b      	lsls	r3, r3, #8
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800484c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	031b      	lsls	r3, r3, #12
 8004852:	b29b      	uxth	r3, r3
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004860:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f023 0210 	bic.w	r2, r3, #16
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	031b      	lsls	r3, r3, #12
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	621a      	str	r2, [r3, #32]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f023 0303 	bic.w	r3, r3, #3
 8004914:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004924:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	b2db      	uxtb	r3, r3
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004938:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800499e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	031b      	lsls	r3, r3, #12
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80049b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	031b      	lsls	r3, r3, #12
 80049b8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f043 0307 	orr.w	r3, r3, #7
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	021a      	lsls	r2, r3, #8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2201      	movs	r2, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1a      	ldr	r2, [r3, #32]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	401a      	ands	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e050      	b.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1c      	ldr	r2, [pc, #112]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b00:	d013      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10c      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800
 8004b70:	40000c00 	.word	0x40000c00
 8004b74:	40014000 	.word	0x40014000

08004b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <__NVIC_SetPriority>:
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	6039      	str	r1, [r7, #0]
 8004baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	db0a      	blt.n	8004bca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	490c      	ldr	r1, [pc, #48]	; (8004bec <__NVIC_SetPriority+0x4c>)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	0112      	lsls	r2, r2, #4
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bc8:	e00a      	b.n	8004be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	4908      	ldr	r1, [pc, #32]	; (8004bf0 <__NVIC_SetPriority+0x50>)
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	3b04      	subs	r3, #4
 8004bd8:	0112      	lsls	r2, r2, #4
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	440b      	add	r3, r1
 8004bde:	761a      	strb	r2, [r3, #24]
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	e000e100 	.word	0xe000e100
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <SysTick_Handler+0x1c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004bfc:	f001 fe6e 	bl	80068dc <xTaskGetSchedulerState>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d001      	beq.n	8004c0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c06:	f002 fc57 	bl	80074b8 <xPortSysTickHandler>
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	e000e010 	.word	0xe000e010

08004c14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	f06f 0004 	mvn.w	r0, #4
 8004c1e:	f7ff ffbf 	bl	8004ba0 <__NVIC_SetPriority>
#endif
}
 8004c22:	bf00      	nop
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c2e:	f3ef 8305 	mrs	r3, IPSR
 8004c32:	603b      	str	r3, [r7, #0]
  return(result);
 8004c34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c3a:	f06f 0305 	mvn.w	r3, #5
 8004c3e:	607b      	str	r3, [r7, #4]
 8004c40:	e00c      	b.n	8004c5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <osKernelInitialize+0x44>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <osKernelInitialize+0x44>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	e002      	b.n	8004c5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c56:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c5c:	687b      	ldr	r3, [r7, #4]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000014c 	.word	0x2000014c

08004c70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c76:	f3ef 8305 	mrs	r3, IPSR
 8004c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c82:	f06f 0305 	mvn.w	r3, #5
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	e010      	b.n	8004cac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <osKernelStart+0x48>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d109      	bne.n	8004ca6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c92:	f7ff ffbf 	bl	8004c14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <osKernelStart+0x48>)
 8004c98:	2202      	movs	r2, #2
 8004c9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c9c:	f001 fa0e 	bl	80060bc <vTaskStartScheduler>
      stat = osOK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	e002      	b.n	8004cac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cac:	687b      	ldr	r3, [r7, #4]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2000014c 	.word	0x2000014c

08004cbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08e      	sub	sp, #56	; 0x38
 8004cc0:	af04      	add	r7, sp, #16
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ccc:	f3ef 8305 	mrs	r3, IPSR
 8004cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8004cd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d17e      	bne.n	8004dd6 <osThreadNew+0x11a>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d07b      	beq.n	8004dd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004ce2:	2318      	movs	r3, #24
 8004ce4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d045      	beq.n	8004d82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <osThreadNew+0x48>
        name = attr->name;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <osThreadNew+0x6e>
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b38      	cmp	r3, #56	; 0x38
 8004d1c:	d805      	bhi.n	8004d2a <osThreadNew+0x6e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <osThreadNew+0x72>
        return (NULL);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e054      	b.n	8004dd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	089b      	lsrs	r3, r3, #2
 8004d3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00e      	beq.n	8004d64 <osThreadNew+0xa8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	2b5b      	cmp	r3, #91	; 0x5b
 8004d4c:	d90a      	bls.n	8004d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <osThreadNew+0xa8>
        mem = 1;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e010      	b.n	8004d86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10c      	bne.n	8004d86 <osThreadNew+0xca>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d108      	bne.n	8004d86 <osThreadNew+0xca>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <osThreadNew+0xca>
          mem = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e001      	b.n	8004d86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d110      	bne.n	8004dae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d94:	9202      	str	r2, [sp, #8]
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6a3a      	ldr	r2, [r7, #32]
 8004da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 ffc4 	bl	8005d30 <xTaskCreateStatic>
 8004da8:	4603      	mov	r3, r0
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	e013      	b.n	8004dd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d110      	bne.n	8004dd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f001 f80f 	bl	8005dea <xTaskCreate>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d001      	beq.n	8004dd6 <osThreadNew+0x11a>
            hTask = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004dd6:	693b      	ldr	r3, [r7, #16]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3728      	adds	r7, #40	; 0x28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004de8:	f3ef 8305 	mrs	r3, IPSR
 8004dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <osDelay+0x1c>
    stat = osErrorISR;
 8004df4:	f06f 0305 	mvn.w	r3, #5
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e007      	b.n	8004e0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 f924 	bl	8006054 <vTaskDelay>
    }
  }

  return (stat);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b08a      	sub	sp, #40	; 0x28
 8004e1a:	af02      	add	r7, sp, #8
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e26:	f3ef 8305 	mrs	r3, IPSR
 8004e2a:	613b      	str	r3, [r7, #16]
  return(result);
 8004e2c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d15f      	bne.n	8004ef2 <osMessageQueueNew+0xdc>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05c      	beq.n	8004ef2 <osMessageQueueNew+0xdc>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d059      	beq.n	8004ef2 <osMessageQueueNew+0xdc>
    mem = -1;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d029      	beq.n	8004e9e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d012      	beq.n	8004e78 <osMessageQueueNew+0x62>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2b4f      	cmp	r3, #79	; 0x4f
 8004e58:	d90e      	bls.n	8004e78 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d302      	bcc.n	8004e78 <osMessageQueueNew+0x62>
        mem = 1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e014      	b.n	8004ea2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d110      	bne.n	8004ea2 <osMessageQueueNew+0x8c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10c      	bne.n	8004ea2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <osMessageQueueNew+0x8c>
          mem = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e001      	b.n	8004ea2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10b      	bne.n	8004ec0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	9100      	str	r1, [sp, #0]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fa21 	bl	80052fe <xQueueGenericCreateStatic>
 8004ebc:	61f8      	str	r0, [r7, #28]
 8004ebe:	e008      	b.n	8004ed2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d105      	bne.n	8004ed2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fa8f 	bl	80053ee <xQueueGenericCreate>
 8004ed0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00c      	beq.n	8004ef2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e001      	b.n	8004eea <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	69f8      	ldr	r0, [r7, #28]
 8004eee:	f000 fec1 	bl	8005c74 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004ef2:	69fb      	ldr	r3, [r7, #28]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f14:	f3ef 8305 	mrs	r3, IPSR
 8004f18:	617b      	str	r3, [r7, #20]
  return(result);
 8004f1a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d028      	beq.n	8004f72 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <osMessageQueuePut+0x36>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <osMessageQueuePut+0x36>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004f32:	f06f 0303 	mvn.w	r3, #3
 8004f36:	61fb      	str	r3, [r7, #28]
 8004f38:	e038      	b.n	8004fac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004f3e:	f107 0210 	add.w	r2, r7, #16
 8004f42:	2300      	movs	r3, #0
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	69b8      	ldr	r0, [r7, #24]
 8004f48:	f000 fb94 	bl	8005674 <xQueueGenericSendFromISR>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d003      	beq.n	8004f5a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004f52:	f06f 0302 	mvn.w	r3, #2
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	e028      	b.n	8004fac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d025      	beq.n	8004fac <osMessageQueuePut+0xb0>
 8004f60:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <osMessageQueuePut+0xbc>)
 8004f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	e01c      	b.n	8004fac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <osMessageQueuePut+0x82>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004f7e:	f06f 0303 	mvn.w	r3, #3
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e012      	b.n	8004fac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004f86:	2300      	movs	r3, #0
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	69b8      	ldr	r0, [r7, #24]
 8004f8e:	f000 fa8b 	bl	80054a8 <xQueueGenericSend>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d009      	beq.n	8004fac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004f9e:	f06f 0301 	mvn.w	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e002      	b.n	8004fac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004fa6:	f06f 0302 	mvn.w	r3, #2
 8004faa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004fac:	69fb      	ldr	r3, [r7, #28]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fd2:	f3ef 8305 	mrs	r3, IPSR
 8004fd6:	617b      	str	r3, [r7, #20]
  return(result);
 8004fd8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d028      	beq.n	8005030 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <osMessageQueueGet+0x34>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <osMessageQueueGet+0x34>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004ff0:	f06f 0303 	mvn.w	r3, #3
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	e037      	b.n	8005068 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	461a      	mov	r2, r3
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	69b8      	ldr	r0, [r7, #24]
 8005006:	f000 fca5 	bl	8005954 <xQueueReceiveFromISR>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	d003      	beq.n	8005018 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005010:	f06f 0302 	mvn.w	r3, #2
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	e027      	b.n	8005068 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d024      	beq.n	8005068 <osMessageQueueGet+0xac>
 800501e:	4b15      	ldr	r3, [pc, #84]	; (8005074 <osMessageQueueGet+0xb8>)
 8005020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	e01b      	b.n	8005068 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <osMessageQueueGet+0x80>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d103      	bne.n	8005044 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800503c:	f06f 0303 	mvn.w	r3, #3
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	e011      	b.n	8005068 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	69b8      	ldr	r0, [r7, #24]
 800504a:	f000 fbaf 	bl	80057ac <xQueueReceive>
 800504e:	4603      	mov	r3, r0
 8005050:	2b01      	cmp	r3, #1
 8005052:	d009      	beq.n	8005068 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800505a:	f06f 0301 	mvn.w	r3, #1
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	e002      	b.n	8005068 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005062:	f06f 0302 	mvn.w	r3, #2
 8005066:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005068:	69fb      	ldr	r3, [r7, #28]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3720      	adds	r7, #32
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	e000ed04 	.word	0xe000ed04

08005078 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005088:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4a06      	ldr	r2, [pc, #24]	; (80050a8 <vApplicationGetIdleTaskMemory+0x30>)
 800508e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2280      	movs	r2, #128	; 0x80
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000150 	.word	0x20000150
 80050a8:	200001ac 	.word	0x200001ac

080050ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4a07      	ldr	r2, [pc, #28]	; (80050d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80050bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a06      	ldr	r2, [pc, #24]	; (80050dc <vApplicationGetTimerTaskMemory+0x30>)
 80050c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050ca:	601a      	str	r2, [r3, #0]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	200003ac 	.word	0x200003ac
 80050dc:	20000408 	.word	0x20000408

080050e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f103 0208 	add.w	r2, r3, #8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f103 0208 	add.w	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f103 0208 	add.w	r2, r3, #8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d103      	bne.n	80051a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e00c      	b.n	80051bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3308      	adds	r3, #8
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e002      	b.n	80051b0 <vListInsert+0x2e>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d2f6      	bcs.n	80051aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6892      	ldr	r2, [r2, #8]
 800520a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6852      	ldr	r2, [r2, #4]
 8005214:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	d103      	bne.n	8005228 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1e5a      	subs	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005272:	f002 f88f 	bl	8007394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005282:	fb01 f303 	mul.w	r3, r1, r3
 8005286:	441a      	add	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a2:	3b01      	subs	r3, #1
 80052a4:	68f9      	ldr	r1, [r7, #12]
 80052a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	441a      	add	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	22ff      	movs	r2, #255	; 0xff
 80052b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	22ff      	movs	r2, #255	; 0xff
 80052be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00f      	beq.n	80052f0 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3310      	adds	r3, #16
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 f949 	bl	800656c <xTaskRemoveFromEventList>
 80052da:	e009      	b.n	80052f0 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3310      	adds	r3, #16
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fefd 	bl	80050e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3324      	adds	r3, #36	; 0x24
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff fef8 	bl	80050e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052f0:	f002 f880 	bl	80073f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052f4:	2301      	movs	r3, #1
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b08e      	sub	sp, #56	; 0x38
 8005302:	af02      	add	r7, sp, #8
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005324:	bf00      	nop
 8005326:	e7fe      	b.n	8005326 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <xQueueGenericCreateStatic+0x52>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <xQueueGenericCreateStatic+0x56>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <xQueueGenericCreateStatic+0x58>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	623b      	str	r3, [r7, #32]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <xQueueGenericCreateStatic+0x7e>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <xQueueGenericCreateStatic+0x82>
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <xQueueGenericCreateStatic+0x84>
 8005380:	2300      	movs	r3, #0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	61fb      	str	r3, [r7, #28]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800539c:	2350      	movs	r3, #80	; 0x50
 800539e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b50      	cmp	r3, #80	; 0x50
 80053a4:	d00a      	beq.n	80053bc <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	61bb      	str	r3, [r7, #24]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f83f 	bl	8005462 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3730      	adds	r7, #48	; 0x30
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b08a      	sub	sp, #40	; 0x28
 80053f2:	af02      	add	r7, sp, #8
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	4613      	mov	r3, r2
 80053fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	613b      	str	r3, [r7, #16]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	fb02 f303 	mul.w	r3, r2, r3
 8005420:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3350      	adds	r3, #80	; 0x50
 8005426:	4618      	mov	r0, r3
 8005428:	f002 f8d6 	bl	80075d8 <pvPortMalloc>
 800542c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d011      	beq.n	8005458 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	3350      	adds	r3, #80	; 0x50
 800543c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005446:	79fa      	ldrb	r2, [r7, #7]
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f805 	bl	8005462 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005458:	69bb      	ldr	r3, [r7, #24]
	}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d103      	bne.n	800547e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	e002      	b.n	8005484 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005490:	2101      	movs	r1, #1
 8005492:	69b8      	ldr	r0, [r7, #24]
 8005494:	f7ff fed8 	bl	8005248 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	78fa      	ldrb	r2, [r7, #3]
 800549c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08e      	sub	sp, #56	; 0x38
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054b6:	2300      	movs	r3, #0
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xQueueGenericSend+0x32>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <xQueueGenericSend+0x40>
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <xQueueGenericSend+0x44>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <xQueueGenericSend+0x46>
 80054ec:	2300      	movs	r3, #0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10a      	bne.n	8005508 <xQueueGenericSend+0x60>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d103      	bne.n	8005516 <xQueueGenericSend+0x6e>
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <xQueueGenericSend+0x72>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <xQueueGenericSend+0x74>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <xQueueGenericSend+0x8e>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	623b      	str	r3, [r7, #32]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005536:	f001 f9d1 	bl	80068dc <xTaskGetSchedulerState>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <xQueueGenericSend+0x9e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <xQueueGenericSend+0xa2>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <xQueueGenericSend+0xa4>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xQueueGenericSend+0xbe>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	61fb      	str	r3, [r7, #28]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005566:	f001 ff15 	bl	8007394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <xQueueGenericSend+0xd4>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d112      	bne.n	80055a2 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005582:	f000 fa67 	bl	8005a54 <prvCopyDataToQueue>
 8005586:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	3324      	adds	r3, #36	; 0x24
 8005594:	4618      	mov	r0, r3
 8005596:	f000 ffe9 	bl	800656c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800559a:	f001 ff2b 	bl	80073f4 <vPortExitCritical>
				return pdPASS;
 800559e:	2301      	movs	r3, #1
 80055a0:	e062      	b.n	8005668 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d103      	bne.n	80055b0 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055a8:	f001 ff24 	bl	80073f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	e05b      	b.n	8005668 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055b6:	f107 0314 	add.w	r3, r7, #20
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 f83a 	bl	8006634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055c4:	f001 ff16 	bl	80073f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055c8:	f000 fdde 	bl	8006188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055cc:	f001 fee2 	bl	8007394 <vPortEnterCritical>
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055d6:	b25b      	sxtb	r3, r3
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d103      	bne.n	80055e6 <xQueueGenericSend+0x13e>
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ec:	b25b      	sxtb	r3, r3
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f2:	d103      	bne.n	80055fc <xQueueGenericSend+0x154>
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055fc:	f001 fefa 	bl	80073f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005600:	1d3a      	adds	r2, r7, #4
 8005602:	f107 0314 	add.w	r3, r7, #20
 8005606:	4611      	mov	r1, r2
 8005608:	4618      	mov	r0, r3
 800560a:	f001 f829 	bl	8006660 <xTaskCheckForTimeOut>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d123      	bne.n	800565c <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005616:	f000 fb15 	bl	8005c44 <prvIsQueueFull>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d017      	beq.n	8005650 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	3310      	adds	r3, #16
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f000 ff4f 	bl	80064cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800562e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005630:	f000 faa0 	bl	8005b74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005634:	f000 fdb6 	bl	80061a4 <xTaskResumeAll>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d193      	bne.n	8005566 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800563e:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <xQueueGenericSend+0x1c8>)
 8005640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	e78a      	b.n	8005566 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005652:	f000 fa8f 	bl	8005b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005656:	f000 fda5 	bl	80061a4 <xTaskResumeAll>
 800565a:	e784      	b.n	8005566 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800565c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800565e:	f000 fa89 	bl	8005b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005662:	f000 fd9f 	bl	80061a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005666:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005668:	4618      	mov	r0, r3
 800566a:	3738      	adds	r7, #56	; 0x38
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	e000ed04 	.word	0xe000ed04

08005674 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b090      	sub	sp, #64	; 0x40
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <xQueueGenericSendFromISR+0x3c>
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <xQueueGenericSendFromISR+0x40>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <xQueueGenericSendFromISR+0x42>
 80056b4:	2300      	movs	r3, #0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d103      	bne.n	80056de <xQueueGenericSendFromISR+0x6a>
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <xQueueGenericSendFromISR+0x6e>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueGenericSendFromISR+0x70>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	623b      	str	r3, [r7, #32]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056fe:	f001 ff2b 	bl	8007558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005702:	f3ef 8211 	mrs	r2, BASEPRI
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	61fa      	str	r2, [r7, #28]
 8005718:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800571a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	429a      	cmp	r2, r3
 8005728:	d302      	bcc.n	8005730 <xQueueGenericSendFromISR+0xbc>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d12f      	bne.n	8005790 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005746:	f000 f985 	bl	8005a54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800574a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d112      	bne.n	800577a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d016      	beq.n	800578a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	3324      	adds	r3, #36	; 0x24
 8005760:	4618      	mov	r0, r3
 8005762:	f000 ff03 	bl	800656c <xTaskRemoveFromEventList>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00e      	beq.n	800578a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e007      	b.n	800578a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800577a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800577e:	3301      	adds	r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	b25a      	sxtb	r2, r3
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800578a:	2301      	movs	r3, #1
 800578c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800578e:	e001      	b.n	8005794 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005790:	2300      	movs	r3, #0
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005796:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800579e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3740      	adds	r7, #64	; 0x40
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08c      	sub	sp, #48	; 0x30
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <xQueueReceive+0x30>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	623b      	str	r3, [r7, #32]
}
 80057d8:	bf00      	nop
 80057da:	e7fe      	b.n	80057da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <xQueueReceive+0x3e>
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <xQueueReceive+0x42>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <xQueueReceive+0x44>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <xQueueReceive+0x5e>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	61fb      	str	r3, [r7, #28]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800580a:	f001 f867 	bl	80068dc <xTaskGetSchedulerState>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <xQueueReceive+0x6e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <xQueueReceive+0x72>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <xQueueReceive+0x74>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <xQueueReceive+0x8e>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	61bb      	str	r3, [r7, #24]
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800583a:	f001 fdab 	bl	8007394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800584e:	f000 f96b 	bl	8005b28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	1e5a      	subs	r2, r3, #1
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d004      	beq.n	800586c <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	3310      	adds	r3, #16
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fe80 	bl	800656c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800586c:	f001 fdc2 	bl	80073f4 <vPortExitCritical>
				return pdPASS;
 8005870:	2301      	movs	r3, #1
 8005872:	e069      	b.n	8005948 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d103      	bne.n	8005882 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800587a:	f001 fdbb 	bl	80073f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800587e:	2300      	movs	r3, #0
 8005880:	e062      	b.n	8005948 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005888:	f107 0310 	add.w	r3, r7, #16
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fed1 	bl	8006634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005892:	2301      	movs	r3, #1
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005896:	f001 fdad 	bl	80073f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800589a:	f000 fc75 	bl	8006188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800589e:	f001 fd79 	bl	8007394 <vPortEnterCritical>
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058a8:	b25b      	sxtb	r3, r3
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d103      	bne.n	80058b8 <xQueueReceive+0x10c>
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058be:	b25b      	sxtb	r3, r3
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d103      	bne.n	80058ce <xQueueReceive+0x122>
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ce:	f001 fd91 	bl	80073f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058d2:	1d3a      	adds	r2, r7, #4
 80058d4:	f107 0310 	add.w	r3, r7, #16
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fec0 	bl	8006660 <xTaskCheckForTimeOut>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d123      	bne.n	800592e <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e8:	f000 f996 	bl	8005c18 <prvIsQueueEmpty>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d017      	beq.n	8005922 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	3324      	adds	r3, #36	; 0x24
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fde6 	bl	80064cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005902:	f000 f937 	bl	8005b74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005906:	f000 fc4d 	bl	80061a4 <xTaskResumeAll>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d194      	bne.n	800583a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005910:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <xQueueReceive+0x1a4>)
 8005912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	e78b      	b.n	800583a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005924:	f000 f926 	bl	8005b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005928:	f000 fc3c 	bl	80061a4 <xTaskResumeAll>
 800592c:	e785      	b.n	800583a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800592e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005930:	f000 f920 	bl	8005b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005934:	f000 fc36 	bl	80061a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800593a:	f000 f96d 	bl	8005c18 <prvIsQueueEmpty>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	f43f af7a 	beq.w	800583a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005946:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005948:	4618      	mov	r0, r3
 800594a:	3730      	adds	r7, #48	; 0x30
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	e000ed04 	.word	0xe000ed04

08005954 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08e      	sub	sp, #56	; 0x38
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	623b      	str	r3, [r7, #32]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d103      	bne.n	800598e <xQueueReceiveFromISR+0x3a>
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <xQueueReceiveFromISR+0x3e>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <xQueueReceiveFromISR+0x40>
 8005992:	2300      	movs	r3, #0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	61fb      	str	r3, [r7, #28]
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059ae:	f001 fdd3 	bl	8007558 <vPortValidateInterruptPriority>
	__asm volatile
 80059b2:	f3ef 8211 	mrs	r2, BASEPRI
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	61ba      	str	r2, [r7, #24]
 80059c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80059ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d02f      	beq.n	8005a3a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059e8:	f000 f89e 	bl	8005b28 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	1e5a      	subs	r2, r3, #1
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80059f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d112      	bne.n	8005a24 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d016      	beq.n	8005a34 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	3310      	adds	r3, #16
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fdae 	bl	800656c <xTaskRemoveFromEventList>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00e      	beq.n	8005a34 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00b      	beq.n	8005a34 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	e007      	b.n	8005a34 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a28:	3301      	adds	r3, #1
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	b25a      	sxtb	r2, r3
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005a34:	2301      	movs	r3, #1
 8005a36:	637b      	str	r3, [r7, #52]	; 0x34
 8005a38:	e001      	b.n	8005a3e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f383 8811 	msr	BASEPRI, r3
}
 8005a48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3738      	adds	r7, #56	; 0x38
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d14d      	bne.n	8005b16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 ff4a 	bl	8006918 <xTaskPriorityDisinherit>
 8005a84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	609a      	str	r2, [r3, #8]
 8005a8c:	e043      	b.n	8005b16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d119      	bne.n	8005ac8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6858      	ldr	r0, [r3, #4]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	f001 ffa8 	bl	80079f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	441a      	add	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d32b      	bcc.n	8005b16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	605a      	str	r2, [r3, #4]
 8005ac6:	e026      	b.n	8005b16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68d8      	ldr	r0, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	f001 ff8e 	bl	80079f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	425b      	negs	r3, r3
 8005ae2:	441a      	add	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d207      	bcs.n	8005b04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	425b      	negs	r3, r3
 8005afe:	441a      	add	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d105      	bne.n	8005b16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b1e:	697b      	ldr	r3, [r7, #20]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d018      	beq.n	8005b6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	441a      	add	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d303      	bcc.n	8005b5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68d9      	ldr	r1, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	461a      	mov	r2, r3
 8005b66:	6838      	ldr	r0, [r7, #0]
 8005b68:	f001 ff44 	bl	80079f4 <memcpy>
	}
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b7c:	f001 fc0a 	bl	8007394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b88:	e011      	b.n	8005bae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d012      	beq.n	8005bb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3324      	adds	r3, #36	; 0x24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fce8 	bl	800656c <xTaskRemoveFromEventList>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ba2:	f000 fdbf 	bl	8006724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	dce9      	bgt.n	8005b8a <prvUnlockQueue+0x16>
 8005bb6:	e000      	b.n	8005bba <prvUnlockQueue+0x46>
					break;
 8005bb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	22ff      	movs	r2, #255	; 0xff
 8005bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005bc2:	f001 fc17 	bl	80073f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bc6:	f001 fbe5 	bl	8007394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bd2:	e011      	b.n	8005bf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d012      	beq.n	8005c02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3310      	adds	r3, #16
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fcc3 	bl	800656c <xTaskRemoveFromEventList>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bec:	f000 fd9a 	bl	8006724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bf0:	7bbb      	ldrb	r3, [r7, #14]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	dce9      	bgt.n	8005bd4 <prvUnlockQueue+0x60>
 8005c00:	e000      	b.n	8005c04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	22ff      	movs	r2, #255	; 0xff
 8005c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c0c:	f001 fbf2 	bl	80073f4 <vPortExitCritical>
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c20:	f001 fbb8 	bl	8007394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e001      	b.n	8005c36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c36:	f001 fbdd 	bl	80073f4 <vPortExitCritical>

	return xReturn;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c4c:	f001 fba2 	bl	8007394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d102      	bne.n	8005c62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	e001      	b.n	8005c66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c66:	f001 fbc5 	bl	80073f4 <vPortExitCritical>

	return xReturn;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	e014      	b.n	8005cae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c84:	4a0f      	ldr	r2, [pc, #60]	; (8005cc4 <vQueueAddToRegistry+0x50>)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c90:	490c      	ldr	r1, [pc, #48]	; (8005cc4 <vQueueAddToRegistry+0x50>)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c9a:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <vQueueAddToRegistry+0x50>)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ca6:	e006      	b.n	8005cb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b07      	cmp	r3, #7
 8005cb2:	d9e7      	bls.n	8005c84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	20000808 	.word	0x20000808

08005cc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cd8:	f001 fb5c 	bl	8007394 <vPortEnterCritical>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ce2:	b25b      	sxtb	r3, r3
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d103      	bne.n	8005cf2 <vQueueWaitForMessageRestricted+0x2a>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cf8:	b25b      	sxtb	r3, r3
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	d103      	bne.n	8005d08 <vQueueWaitForMessageRestricted+0x40>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d08:	f001 fb74 	bl	80073f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	3324      	adds	r3, #36	; 0x24
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fbf9 	bl	8006514 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d22:	6978      	ldr	r0, [r7, #20]
 8005d24:	f7ff ff26 	bl	8005b74 <prvUnlockQueue>
	}
 8005d28:	bf00      	nop
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08e      	sub	sp, #56	; 0x38
 8005d34:	af04      	add	r7, sp, #16
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	623b      	str	r3, [r7, #32]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xTaskCreateStatic+0x46>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	61fb      	str	r3, [r7, #28]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d76:	235c      	movs	r3, #92	; 0x5c
 8005d78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b5c      	cmp	r3, #92	; 0x5c
 8005d7e:	d00a      	beq.n	8005d96 <xTaskCreateStatic+0x66>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	61bb      	str	r3, [r7, #24]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d01e      	beq.n	8005ddc <xTaskCreateStatic+0xac>
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01b      	beq.n	8005ddc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	2202      	movs	r2, #2
 8005db2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005db6:	2300      	movs	r3, #0
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	9302      	str	r3, [sp, #8]
 8005dbe:	f107 0314 	add.w	r3, r7, #20
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f850 	bl	8005e74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dd6:	f000 f8dd 	bl	8005f94 <prvAddNewTaskToReadyList>
 8005dda:	e001      	b.n	8005de0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005de0:	697b      	ldr	r3, [r7, #20]
	}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3728      	adds	r7, #40	; 0x28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b08c      	sub	sp, #48	; 0x30
 8005dee:	af04      	add	r7, sp, #16
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 fbea 	bl	80075d8 <pvPortMalloc>
 8005e04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00e      	beq.n	8005e2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e0c:	205c      	movs	r0, #92	; 0x5c
 8005e0e:	f001 fbe3 	bl	80075d8 <pvPortMalloc>
 8005e12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8005e20:	e005      	b.n	8005e2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e22:	6978      	ldr	r0, [r7, #20]
 8005e24:	f001 fca4 	bl	8007770 <vPortFree>
 8005e28:	e001      	b.n	8005e2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d017      	beq.n	8005e64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e3c:	88fa      	ldrh	r2, [r7, #6]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9303      	str	r3, [sp, #12]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	9302      	str	r3, [sp, #8]
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f80e 	bl	8005e74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e58:	69f8      	ldr	r0, [r7, #28]
 8005e5a:	f000 f89b 	bl	8005f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	e002      	b.n	8005e6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295
 8005e68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e6a:	69bb      	ldr	r3, [r7, #24]
	}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	21a5      	movs	r1, #165	; 0xa5
 8005e8e:	f001 fdbf 	bl	8007a10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f023 0307 	bic.w	r3, r3, #7
 8005eaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <prvInitialiseNewTask+0x58>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	617b      	str	r3, [r7, #20]
}
 8005ec8:	bf00      	nop
 8005eca:	e7fe      	b.n	8005eca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01f      	beq.n	8005f12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	e012      	b.n	8005efe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	7819      	ldrb	r1, [r3, #0]
 8005ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3334      	adds	r3, #52	; 0x34
 8005ee8:	460a      	mov	r2, r1
 8005eea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d006      	beq.n	8005f06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	3301      	adds	r3, #1
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b0f      	cmp	r3, #15
 8005f02:	d9e9      	bls.n	8005ed8 <prvInitialiseNewTask+0x64>
 8005f04:	e000      	b.n	8005f08 <prvInitialiseNewTask+0x94>
			{
				break;
 8005f06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f10:	e003      	b.n	8005f1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	2b37      	cmp	r3, #55	; 0x37
 8005f1e:	d901      	bls.n	8005f24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f20:	2337      	movs	r3, #55	; 0x37
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	2200      	movs	r2, #0
 8005f34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff f8f0 	bl	8005120 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	3318      	adds	r3, #24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff f8eb 	bl	8005120 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	2200      	movs	r2, #0
 8005f64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	68f9      	ldr	r1, [r7, #12]
 8005f72:	69b8      	ldr	r0, [r7, #24]
 8005f74:	f001 f8e0 	bl	8007138 <pxPortInitialiseStack>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f8a:	bf00      	nop
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f9c:	f001 f9fa 	bl	8007394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fa0:	4b26      	ldr	r3, [pc, #152]	; (800603c <prvAddNewTaskToReadyList+0xa8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4a25      	ldr	r2, [pc, #148]	; (800603c <prvAddNewTaskToReadyList+0xa8>)
 8005fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005faa:	4b25      	ldr	r3, [pc, #148]	; (8006040 <prvAddNewTaskToReadyList+0xac>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fb2:	4a23      	ldr	r2, [pc, #140]	; (8006040 <prvAddNewTaskToReadyList+0xac>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fb8:	4b20      	ldr	r3, [pc, #128]	; (800603c <prvAddNewTaskToReadyList+0xa8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d110      	bne.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fc0:	f000 fbce 	bl	8006760 <prvInitialiseTaskLists>
 8005fc4:	e00d      	b.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fc6:	4b1f      	ldr	r3, [pc, #124]	; (8006044 <prvAddNewTaskToReadyList+0xb0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fce:	4b1c      	ldr	r3, [pc, #112]	; (8006040 <prvAddNewTaskToReadyList+0xac>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d802      	bhi.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fdc:	4a18      	ldr	r2, [pc, #96]	; (8006040 <prvAddNewTaskToReadyList+0xac>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fe2:	4b19      	ldr	r3, [pc, #100]	; (8006048 <prvAddNewTaskToReadyList+0xb4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	4a17      	ldr	r2, [pc, #92]	; (8006048 <prvAddNewTaskToReadyList+0xb4>)
 8005fea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fec:	4b16      	ldr	r3, [pc, #88]	; (8006048 <prvAddNewTaskToReadyList+0xb4>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	4b14      	ldr	r3, [pc, #80]	; (800604c <prvAddNewTaskToReadyList+0xb8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d903      	bls.n	8006008 <prvAddNewTaskToReadyList+0x74>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	4a11      	ldr	r2, [pc, #68]	; (800604c <prvAddNewTaskToReadyList+0xb8>)
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4a0e      	ldr	r2, [pc, #56]	; (8006050 <prvAddNewTaskToReadyList+0xbc>)
 8006016:	441a      	add	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7ff f88b 	bl	800513a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006024:	f001 f9e6 	bl	80073f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <prvAddNewTaskToReadyList+0xb0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006030:	4b03      	ldr	r3, [pc, #12]	; (8006040 <prvAddNewTaskToReadyList+0xac>)
 8006032:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000d1c 	.word	0x20000d1c
 8006040:	20000848 	.word	0x20000848
 8006044:	20000d28 	.word	0x20000d28
 8006048:	20000d38 	.word	0x20000d38
 800604c:	20000d24 	.word	0x20000d24
 8006050:	2000084c 	.word	0x2000084c

08006054 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d017      	beq.n	8006096 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <vTaskDelay+0x60>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <vTaskDelay+0x30>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	60bb      	str	r3, [r7, #8]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006084:	f000 f880 	bl	8006188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006088:	2100      	movs	r1, #0
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fcb2 	bl	80069f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006090:	f000 f888 	bl	80061a4 <xTaskResumeAll>
 8006094:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d107      	bne.n	80060ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <vTaskDelay+0x64>)
 800609e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060ac:	bf00      	nop
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20000d44 	.word	0x20000d44
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	; 0x28
 80060c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060ca:	463a      	mov	r2, r7
 80060cc:	1d39      	adds	r1, r7, #4
 80060ce:	f107 0308 	add.w	r3, r7, #8
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe ffd0 	bl	8005078 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	9202      	str	r2, [sp, #8]
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	2300      	movs	r3, #0
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	2300      	movs	r3, #0
 80060e8:	460a      	mov	r2, r1
 80060ea:	4921      	ldr	r1, [pc, #132]	; (8006170 <vTaskStartScheduler+0xb4>)
 80060ec:	4821      	ldr	r0, [pc, #132]	; (8006174 <vTaskStartScheduler+0xb8>)
 80060ee:	f7ff fe1f 	bl	8005d30 <xTaskCreateStatic>
 80060f2:	4603      	mov	r3, r0
 80060f4:	4a20      	ldr	r2, [pc, #128]	; (8006178 <vTaskStartScheduler+0xbc>)
 80060f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060f8:	4b1f      	ldr	r3, [pc, #124]	; (8006178 <vTaskStartScheduler+0xbc>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006100:	2301      	movs	r3, #1
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e001      	b.n	800610a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d102      	bne.n	8006116 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006110:	f000 fcc4 	bl	8006a9c <xTimerCreateTimerTask>
 8006114:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d116      	bne.n	800614a <vTaskStartScheduler+0x8e>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	613b      	str	r3, [r7, #16]
}
 800612e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <vTaskStartScheduler+0xc0>)
 8006132:	f04f 32ff 	mov.w	r2, #4294967295
 8006136:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <vTaskStartScheduler+0xc4>)
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800613e:	4b11      	ldr	r3, [pc, #68]	; (8006184 <vTaskStartScheduler+0xc8>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006144:	f001 f884 	bl	8007250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006148:	e00e      	b.n	8006168 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006150:	d10a      	bne.n	8006168 <vTaskStartScheduler+0xac>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60fb      	str	r3, [r7, #12]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <vTaskStartScheduler+0xaa>
}
 8006168:	bf00      	nop
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	08007a58 	.word	0x08007a58
 8006174:	0800673d 	.word	0x0800673d
 8006178:	20000d40 	.word	0x20000d40
 800617c:	20000d3c 	.word	0x20000d3c
 8006180:	20000d28 	.word	0x20000d28
 8006184:	20000d20 	.word	0x20000d20

08006188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800618c:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <vTaskSuspendAll+0x18>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3301      	adds	r3, #1
 8006192:	4a03      	ldr	r2, [pc, #12]	; (80061a0 <vTaskSuspendAll+0x18>)
 8006194:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006196:	bf00      	nop
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	20000d44 	.word	0x20000d44

080061a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061ae:	2300      	movs	r3, #0
 80061b0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061b2:	4b3c      	ldr	r3, [pc, #240]	; (80062a4 <xTaskResumeAll+0x100>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	603b      	str	r3, [r7, #0]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061d0:	f001 f8e0 	bl	8007394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061d4:	4b33      	ldr	r3, [pc, #204]	; (80062a4 <xTaskResumeAll+0x100>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3b01      	subs	r3, #1
 80061da:	4a32      	ldr	r2, [pc, #200]	; (80062a4 <xTaskResumeAll+0x100>)
 80061dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061de:	4b31      	ldr	r3, [pc, #196]	; (80062a4 <xTaskResumeAll+0x100>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d156      	bne.n	8006294 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061e6:	4b30      	ldr	r3, [pc, #192]	; (80062a8 <xTaskResumeAll+0x104>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d052      	beq.n	8006294 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061ee:	e02f      	b.n	8006250 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f0:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <xTaskResumeAll+0x108>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3318      	adds	r3, #24
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fff9 	bl	80051f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3304      	adds	r3, #4
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe fff4 	bl	80051f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006210:	4b27      	ldr	r3, [pc, #156]	; (80062b0 <xTaskResumeAll+0x10c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d903      	bls.n	8006220 <xTaskResumeAll+0x7c>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	4a24      	ldr	r2, [pc, #144]	; (80062b0 <xTaskResumeAll+0x10c>)
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4a21      	ldr	r2, [pc, #132]	; (80062b4 <xTaskResumeAll+0x110>)
 800622e:	441a      	add	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3304      	adds	r3, #4
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f7fe ff7f 	bl	800513a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006240:	4b1d      	ldr	r3, [pc, #116]	; (80062b8 <xTaskResumeAll+0x114>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	429a      	cmp	r2, r3
 8006248:	d302      	bcc.n	8006250 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800624a:	4b1c      	ldr	r3, [pc, #112]	; (80062bc <xTaskResumeAll+0x118>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006250:	4b16      	ldr	r3, [pc, #88]	; (80062ac <xTaskResumeAll+0x108>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1cb      	bne.n	80061f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800625e:	f000 fb1d 	bl	800689c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006262:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <xTaskResumeAll+0x11c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d010      	beq.n	8006290 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800626e:	f000 f839 	bl	80062e4 <xTaskIncrementTick>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006278:	4b10      	ldr	r3, [pc, #64]	; (80062bc <xTaskResumeAll+0x118>)
 800627a:	2201      	movs	r2, #1
 800627c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	3b01      	subs	r3, #1
 8006282:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f1      	bne.n	800626e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <xTaskResumeAll+0x11c>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <xTaskResumeAll+0x118>)
 8006292:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006294:	f001 f8ae 	bl	80073f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006298:	687b      	ldr	r3, [r7, #4]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000d44 	.word	0x20000d44
 80062a8:	20000d1c 	.word	0x20000d1c
 80062ac:	20000cdc 	.word	0x20000cdc
 80062b0:	20000d24 	.word	0x20000d24
 80062b4:	2000084c 	.word	0x2000084c
 80062b8:	20000848 	.word	0x20000848
 80062bc:	20000d30 	.word	0x20000d30
 80062c0:	20000d2c 	.word	0x20000d2c

080062c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062ca:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <xTaskGetTickCount+0x1c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062d0:	687b      	ldr	r3, [r7, #4]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000d20 	.word	0x20000d20

080062e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ee:	4b3f      	ldr	r3, [pc, #252]	; (80063ec <xTaskIncrementTick+0x108>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d170      	bne.n	80063d8 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062f6:	4b3e      	ldr	r3, [pc, #248]	; (80063f0 <xTaskIncrementTick+0x10c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062fe:	4a3c      	ldr	r2, [pc, #240]	; (80063f0 <xTaskIncrementTick+0x10c>)
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d120      	bne.n	800634c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800630a:	4b3a      	ldr	r3, [pc, #232]	; (80063f4 <xTaskIncrementTick+0x110>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <xTaskIncrementTick+0x46>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	603b      	str	r3, [r7, #0]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <xTaskIncrementTick+0x44>
 800632a:	4b32      	ldr	r3, [pc, #200]	; (80063f4 <xTaskIncrementTick+0x110>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	4b31      	ldr	r3, [pc, #196]	; (80063f8 <xTaskIncrementTick+0x114>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a2f      	ldr	r2, [pc, #188]	; (80063f4 <xTaskIncrementTick+0x110>)
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	4a2f      	ldr	r2, [pc, #188]	; (80063f8 <xTaskIncrementTick+0x114>)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	4b2f      	ldr	r3, [pc, #188]	; (80063fc <xTaskIncrementTick+0x118>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3301      	adds	r3, #1
 8006344:	4a2d      	ldr	r2, [pc, #180]	; (80063fc <xTaskIncrementTick+0x118>)
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	f000 faa8 	bl	800689c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800634c:	4b2c      	ldr	r3, [pc, #176]	; (8006400 <xTaskIncrementTick+0x11c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	429a      	cmp	r2, r3
 8006354:	d345      	bcc.n	80063e2 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006356:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <xTaskIncrementTick+0x110>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006360:	4b27      	ldr	r3, [pc, #156]	; (8006400 <xTaskIncrementTick+0x11c>)
 8006362:	f04f 32ff 	mov.w	r2, #4294967295
 8006366:	601a      	str	r2, [r3, #0]
					break;
 8006368:	e03b      	b.n	80063e2 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800636a:	4b22      	ldr	r3, [pc, #136]	; (80063f4 <xTaskIncrementTick+0x110>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	429a      	cmp	r2, r3
 8006380:	d203      	bcs.n	800638a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006382:	4a1f      	ldr	r2, [pc, #124]	; (8006400 <xTaskIncrementTick+0x11c>)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006388:	e02b      	b.n	80063e2 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	3304      	adds	r3, #4
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe ff30 	bl	80051f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	3318      	adds	r3, #24
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fe ff27 	bl	80051f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063aa:	4b16      	ldr	r3, [pc, #88]	; (8006404 <xTaskIncrementTick+0x120>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d903      	bls.n	80063ba <xTaskIncrementTick+0xd6>
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	4a13      	ldr	r2, [pc, #76]	; (8006404 <xTaskIncrementTick+0x120>)
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4a10      	ldr	r2, [pc, #64]	; (8006408 <xTaskIncrementTick+0x124>)
 80063c8:	441a      	add	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	3304      	adds	r3, #4
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f7fe feb2 	bl	800513a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d6:	e7be      	b.n	8006356 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063d8:	4b0c      	ldr	r3, [pc, #48]	; (800640c <xTaskIncrementTick+0x128>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a0b      	ldr	r2, [pc, #44]	; (800640c <xTaskIncrementTick+0x128>)
 80063e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063e2:	697b      	ldr	r3, [r7, #20]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20000d44 	.word	0x20000d44
 80063f0:	20000d20 	.word	0x20000d20
 80063f4:	20000cd4 	.word	0x20000cd4
 80063f8:	20000cd8 	.word	0x20000cd8
 80063fc:	20000d34 	.word	0x20000d34
 8006400:	20000d3c 	.word	0x20000d3c
 8006404:	20000d24 	.word	0x20000d24
 8006408:	2000084c 	.word	0x2000084c
 800640c:	20000d2c 	.word	0x20000d2c

08006410 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006416:	4b28      	ldr	r3, [pc, #160]	; (80064b8 <vTaskSwitchContext+0xa8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800641e:	4b27      	ldr	r3, [pc, #156]	; (80064bc <vTaskSwitchContext+0xac>)
 8006420:	2201      	movs	r2, #1
 8006422:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006424:	e041      	b.n	80064aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006426:	4b25      	ldr	r3, [pc, #148]	; (80064bc <vTaskSwitchContext+0xac>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800642c:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <vTaskSwitchContext+0xb0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e010      	b.n	8006456 <vTaskSwitchContext+0x46>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10a      	bne.n	8006450 <vTaskSwitchContext+0x40>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	607b      	str	r3, [r7, #4]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <vTaskSwitchContext+0x3e>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3b01      	subs	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	491b      	ldr	r1, [pc, #108]	; (80064c4 <vTaskSwitchContext+0xb4>)
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4613      	mov	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	440b      	add	r3, r1
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0e4      	beq.n	8006434 <vTaskSwitchContext+0x24>
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <vTaskSwitchContext+0xb4>)
 8006476:	4413      	add	r3, r2
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	3308      	adds	r3, #8
 800648c:	429a      	cmp	r2, r3
 800648e:	d104      	bne.n	800649a <vTaskSwitchContext+0x8a>
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	605a      	str	r2, [r3, #4]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <vTaskSwitchContext+0xb8>)
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	4a06      	ldr	r2, [pc, #24]	; (80064c0 <vTaskSwitchContext+0xb0>)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6013      	str	r3, [r2, #0]
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	20000d44 	.word	0x20000d44
 80064bc:	20000d30 	.word	0x20000d30
 80064c0:	20000d24 	.word	0x20000d24
 80064c4:	2000084c 	.word	0x2000084c
 80064c8:	20000848 	.word	0x20000848

080064cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	60fb      	str	r3, [r7, #12]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064f2:	4b07      	ldr	r3, [pc, #28]	; (8006510 <vTaskPlaceOnEventList+0x44>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3318      	adds	r3, #24
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fe fe41 	bl	8005182 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006500:	2101      	movs	r1, #1
 8006502:	6838      	ldr	r0, [r7, #0]
 8006504:	f000 fa76 	bl	80069f4 <prvAddCurrentTaskToDelayedList>
}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000848 	.word	0x20000848

08006514 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	617b      	str	r3, [r7, #20]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800653c:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <vTaskPlaceOnEventListRestricted+0x54>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3318      	adds	r3, #24
 8006542:	4619      	mov	r1, r3
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7fe fdf8 	bl	800513a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006550:	f04f 33ff 	mov.w	r3, #4294967295
 8006554:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006556:	6879      	ldr	r1, [r7, #4]
 8006558:	68b8      	ldr	r0, [r7, #8]
 800655a:	f000 fa4b 	bl	80069f4 <prvAddCurrentTaskToDelayedList>
	}
 800655e:	bf00      	nop
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20000848 	.word	0x20000848

0800656c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	60fb      	str	r3, [r7, #12]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	3318      	adds	r3, #24
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe fe29 	bl	80051f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065a2:	4b1e      	ldr	r3, [pc, #120]	; (800661c <xTaskRemoveFromEventList+0xb0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d11d      	bne.n	80065e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fe20 	bl	80051f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	4b19      	ldr	r3, [pc, #100]	; (8006620 <xTaskRemoveFromEventList+0xb4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d903      	bls.n	80065c8 <xTaskRemoveFromEventList+0x5c>
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	4a16      	ldr	r2, [pc, #88]	; (8006620 <xTaskRemoveFromEventList+0xb4>)
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4a13      	ldr	r2, [pc, #76]	; (8006624 <xTaskRemoveFromEventList+0xb8>)
 80065d6:	441a      	add	r2, r3
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	3304      	adds	r3, #4
 80065dc:	4619      	mov	r1, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	f7fe fdab 	bl	800513a <vListInsertEnd>
 80065e4:	e005      	b.n	80065f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	3318      	adds	r3, #24
 80065ea:	4619      	mov	r1, r3
 80065ec:	480e      	ldr	r0, [pc, #56]	; (8006628 <xTaskRemoveFromEventList+0xbc>)
 80065ee:	f7fe fda4 	bl	800513a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	4b0d      	ldr	r3, [pc, #52]	; (800662c <xTaskRemoveFromEventList+0xc0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d905      	bls.n	800660c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006604:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <xTaskRemoveFromEventList+0xc4>)
 8006606:	2201      	movs	r2, #1
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e001      	b.n	8006610 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006610:	697b      	ldr	r3, [r7, #20]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000d44 	.word	0x20000d44
 8006620:	20000d24 	.word	0x20000d24
 8006624:	2000084c 	.word	0x2000084c
 8006628:	20000cdc 	.word	0x20000cdc
 800662c:	20000848 	.word	0x20000848
 8006630:	20000d30 	.word	0x20000d30

08006634 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <vTaskInternalSetTimeOutState+0x24>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <vTaskInternalSetTimeOutState+0x28>)
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	605a      	str	r2, [r3, #4]
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	20000d34 	.word	0x20000d34
 800665c:	20000d20 	.word	0x20000d20

08006660 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	613b      	str	r3, [r7, #16]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	60fb      	str	r3, [r7, #12]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80066a2:	f000 fe77 	bl	8007394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066a6:	4b1d      	ldr	r3, [pc, #116]	; (800671c <xTaskCheckForTimeOut+0xbc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066be:	d102      	bne.n	80066c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066c0:	2300      	movs	r3, #0
 80066c2:	61fb      	str	r3, [r7, #28]
 80066c4:	e023      	b.n	800670e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4b15      	ldr	r3, [pc, #84]	; (8006720 <xTaskCheckForTimeOut+0xc0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d007      	beq.n	80066e2 <xTaskCheckForTimeOut+0x82>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d302      	bcc.n	80066e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066dc:	2301      	movs	r3, #1
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	e015      	b.n	800670e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d20b      	bcs.n	8006704 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	1ad2      	subs	r2, r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff ff9b 	bl	8006634 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	e004      	b.n	800670e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800670a:	2301      	movs	r3, #1
 800670c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800670e:	f000 fe71 	bl	80073f4 <vPortExitCritical>

	return xReturn;
 8006712:	69fb      	ldr	r3, [r7, #28]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3720      	adds	r7, #32
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000d20 	.word	0x20000d20
 8006720:	20000d34 	.word	0x20000d34

08006724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006728:	4b03      	ldr	r3, [pc, #12]	; (8006738 <vTaskMissedYield+0x14>)
 800672a:	2201      	movs	r2, #1
 800672c:	601a      	str	r2, [r3, #0]
}
 800672e:	bf00      	nop
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000d30 	.word	0x20000d30

0800673c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006744:	f000 f84c 	bl	80067e0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <prvIdleTask+0x20>)
 800674a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006758:	e7f4      	b.n	8006744 <prvIdleTask+0x8>
 800675a:	bf00      	nop
 800675c:	e000ed04 	.word	0xe000ed04

08006760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006766:	2300      	movs	r3, #0
 8006768:	607b      	str	r3, [r7, #4]
 800676a:	e00c      	b.n	8006786 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4a12      	ldr	r2, [pc, #72]	; (80067c0 <prvInitialiseTaskLists+0x60>)
 8006778:	4413      	add	r3, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fcb0 	bl	80050e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3301      	adds	r3, #1
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b37      	cmp	r3, #55	; 0x37
 800678a:	d9ef      	bls.n	800676c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800678c:	480d      	ldr	r0, [pc, #52]	; (80067c4 <prvInitialiseTaskLists+0x64>)
 800678e:	f7fe fca7 	bl	80050e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006792:	480d      	ldr	r0, [pc, #52]	; (80067c8 <prvInitialiseTaskLists+0x68>)
 8006794:	f7fe fca4 	bl	80050e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006798:	480c      	ldr	r0, [pc, #48]	; (80067cc <prvInitialiseTaskLists+0x6c>)
 800679a:	f7fe fca1 	bl	80050e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800679e:	480c      	ldr	r0, [pc, #48]	; (80067d0 <prvInitialiseTaskLists+0x70>)
 80067a0:	f7fe fc9e 	bl	80050e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067a4:	480b      	ldr	r0, [pc, #44]	; (80067d4 <prvInitialiseTaskLists+0x74>)
 80067a6:	f7fe fc9b 	bl	80050e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <prvInitialiseTaskLists+0x78>)
 80067ac:	4a05      	ldr	r2, [pc, #20]	; (80067c4 <prvInitialiseTaskLists+0x64>)
 80067ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067b0:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <prvInitialiseTaskLists+0x7c>)
 80067b2:	4a05      	ldr	r2, [pc, #20]	; (80067c8 <prvInitialiseTaskLists+0x68>)
 80067b4:	601a      	str	r2, [r3, #0]
}
 80067b6:	bf00      	nop
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	2000084c 	.word	0x2000084c
 80067c4:	20000cac 	.word	0x20000cac
 80067c8:	20000cc0 	.word	0x20000cc0
 80067cc:	20000cdc 	.word	0x20000cdc
 80067d0:	20000cf0 	.word	0x20000cf0
 80067d4:	20000d08 	.word	0x20000d08
 80067d8:	20000cd4 	.word	0x20000cd4
 80067dc:	20000cd8 	.word	0x20000cd8

080067e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067e6:	e019      	b.n	800681c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067e8:	f000 fdd4 	bl	8007394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ec:	4b10      	ldr	r3, [pc, #64]	; (8006830 <prvCheckTasksWaitingTermination+0x50>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe fcfb 	bl	80051f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067fe:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <prvCheckTasksWaitingTermination+0x54>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3b01      	subs	r3, #1
 8006804:	4a0b      	ldr	r2, [pc, #44]	; (8006834 <prvCheckTasksWaitingTermination+0x54>)
 8006806:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <prvCheckTasksWaitingTermination+0x58>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3b01      	subs	r3, #1
 800680e:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <prvCheckTasksWaitingTermination+0x58>)
 8006810:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006812:	f000 fdef 	bl	80073f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f810 	bl	800683c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800681c:	4b06      	ldr	r3, [pc, #24]	; (8006838 <prvCheckTasksWaitingTermination+0x58>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e1      	bne.n	80067e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000cf0 	.word	0x20000cf0
 8006834:	20000d1c 	.word	0x20000d1c
 8006838:	20000d04 	.word	0x20000d04

0800683c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800684a:	2b00      	cmp	r3, #0
 800684c:	d108      	bne.n	8006860 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	4618      	mov	r0, r3
 8006854:	f000 ff8c 	bl	8007770 <vPortFree>
				vPortFree( pxTCB );
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 ff89 	bl	8007770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800685e:	e018      	b.n	8006892 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006866:	2b01      	cmp	r3, #1
 8006868:	d103      	bne.n	8006872 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 ff80 	bl	8007770 <vPortFree>
	}
 8006870:	e00f      	b.n	8006892 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006878:	2b02      	cmp	r3, #2
 800687a:	d00a      	beq.n	8006892 <prvDeleteTCB+0x56>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	60fb      	str	r3, [r7, #12]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <prvDeleteTCB+0x54>
	}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068a2:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <prvResetNextTaskUnblockTime+0x38>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068ac:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <prvResetNextTaskUnblockTime+0x3c>)
 80068ae:	f04f 32ff 	mov.w	r2, #4294967295
 80068b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068b4:	e008      	b.n	80068c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b6:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <prvResetNextTaskUnblockTime+0x38>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4a04      	ldr	r2, [pc, #16]	; (80068d8 <prvResetNextTaskUnblockTime+0x3c>)
 80068c6:	6013      	str	r3, [r2, #0]
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	20000cd4 	.word	0x20000cd4
 80068d8:	20000d3c 	.word	0x20000d3c

080068dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068e2:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <xTaskGetSchedulerState+0x34>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d102      	bne.n	80068f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068ea:	2301      	movs	r3, #1
 80068ec:	607b      	str	r3, [r7, #4]
 80068ee:	e008      	b.n	8006902 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <xTaskGetSchedulerState+0x38>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d102      	bne.n	80068fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068f8:	2302      	movs	r3, #2
 80068fa:	607b      	str	r3, [r7, #4]
 80068fc:	e001      	b.n	8006902 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068fe:	2300      	movs	r3, #0
 8006900:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006902:	687b      	ldr	r3, [r7, #4]
	}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	20000d28 	.word	0x20000d28
 8006914:	20000d44 	.word	0x20000d44

08006918 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d056      	beq.n	80069dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800692e:	4b2e      	ldr	r3, [pc, #184]	; (80069e8 <xTaskPriorityDisinherit+0xd0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	429a      	cmp	r2, r3
 8006936:	d00a      	beq.n	800694e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	60fb      	str	r3, [r7, #12]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	60bb      	str	r3, [r7, #8]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	1e5a      	subs	r2, r3, #1
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800697e:	429a      	cmp	r2, r3
 8006980:	d02c      	beq.n	80069dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006986:	2b00      	cmp	r3, #0
 8006988:	d128      	bne.n	80069dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	3304      	adds	r3, #4
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe fc30 	bl	80051f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ac:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <xTaskPriorityDisinherit+0xd4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d903      	bls.n	80069bc <xTaskPriorityDisinherit+0xa4>
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	4a0c      	ldr	r2, [pc, #48]	; (80069ec <xTaskPriorityDisinherit+0xd4>)
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <xTaskPriorityDisinherit+0xd8>)
 80069ca:	441a      	add	r2, r3
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	f7fe fbb1 	bl	800513a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069d8:	2301      	movs	r3, #1
 80069da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069dc:	697b      	ldr	r3, [r7, #20]
	}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000848 	.word	0x20000848
 80069ec:	20000d24 	.word	0x20000d24
 80069f0:	2000084c 	.word	0x2000084c

080069f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069fe:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a04:	4b20      	ldr	r3, [pc, #128]	; (8006a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe fbf2 	bl	80051f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a16:	d10a      	bne.n	8006a2e <prvAddCurrentTaskToDelayedList+0x3a>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a1e:	4b1a      	ldr	r3, [pc, #104]	; (8006a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	4819      	ldr	r0, [pc, #100]	; (8006a8c <prvAddCurrentTaskToDelayedList+0x98>)
 8006a28:	f7fe fb87 	bl	800513a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a2c:	e026      	b.n	8006a7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4413      	add	r3, r2
 8006a34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d209      	bcs.n	8006a5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a46:	4b12      	ldr	r3, [pc, #72]	; (8006a90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4619      	mov	r1, r3
 8006a52:	4610      	mov	r0, r2
 8006a54:	f7fe fb95 	bl	8005182 <vListInsert>
}
 8006a58:	e010      	b.n	8006a7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a5a:	4b0e      	ldr	r3, [pc, #56]	; (8006a94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f7fe fb8b 	bl	8005182 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a6c:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d202      	bcs.n	8006a7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a76:	4a08      	ldr	r2, [pc, #32]	; (8006a98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	6013      	str	r3, [r2, #0]
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000d20 	.word	0x20000d20
 8006a88:	20000848 	.word	0x20000848
 8006a8c:	20000d08 	.word	0x20000d08
 8006a90:	20000cd8 	.word	0x20000cd8
 8006a94:	20000cd4 	.word	0x20000cd4
 8006a98:	20000d3c 	.word	0x20000d3c

08006a9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08a      	sub	sp, #40	; 0x28
 8006aa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006aa6:	f000 fb07 	bl	80070b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006aaa:	4b1c      	ldr	r3, [pc, #112]	; (8006b1c <xTimerCreateTimerTask+0x80>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d021      	beq.n	8006af6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006aba:	1d3a      	adds	r2, r7, #4
 8006abc:	f107 0108 	add.w	r1, r7, #8
 8006ac0:	f107 030c 	add.w	r3, r7, #12
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe faf1 	bl	80050ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	9202      	str	r2, [sp, #8]
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	460a      	mov	r2, r1
 8006adc:	4910      	ldr	r1, [pc, #64]	; (8006b20 <xTimerCreateTimerTask+0x84>)
 8006ade:	4811      	ldr	r0, [pc, #68]	; (8006b24 <xTimerCreateTimerTask+0x88>)
 8006ae0:	f7ff f926 	bl	8005d30 <xTaskCreateStatic>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4a10      	ldr	r2, [pc, #64]	; (8006b28 <xTimerCreateTimerTask+0x8c>)
 8006ae8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006aea:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <xTimerCreateTimerTask+0x8c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006af2:	2301      	movs	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	613b      	str	r3, [r7, #16]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b12:	697b      	ldr	r3, [r7, #20]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000d78 	.word	0x20000d78
 8006b20:	08007a60 	.word	0x08007a60
 8006b24:	08006c61 	.word	0x08006c61
 8006b28:	20000d7c 	.word	0x20000d7c

08006b2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	; 0x28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	623b      	str	r3, [r7, #32]
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b5a:	4b1a      	ldr	r3, [pc, #104]	; (8006bc4 <xTimerGenericCommand+0x98>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d02a      	beq.n	8006bb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b05      	cmp	r3, #5
 8006b72:	dc18      	bgt.n	8006ba6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b74:	f7ff feb2 	bl	80068dc <xTaskGetSchedulerState>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d109      	bne.n	8006b92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b7e:	4b11      	ldr	r3, [pc, #68]	; (8006bc4 <xTimerGenericCommand+0x98>)
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	f107 0110 	add.w	r1, r7, #16
 8006b86:	2300      	movs	r3, #0
 8006b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8a:	f7fe fc8d 	bl	80054a8 <xQueueGenericSend>
 8006b8e:	6278      	str	r0, [r7, #36]	; 0x24
 8006b90:	e012      	b.n	8006bb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b92:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <xTimerGenericCommand+0x98>)
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	f107 0110 	add.w	r1, r7, #16
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f7fe fc83 	bl	80054a8 <xQueueGenericSend>
 8006ba2:	6278      	str	r0, [r7, #36]	; 0x24
 8006ba4:	e008      	b.n	8006bb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ba6:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <xTimerGenericCommand+0x98>)
 8006ba8:	6818      	ldr	r0, [r3, #0]
 8006baa:	f107 0110 	add.w	r1, r7, #16
 8006bae:	2300      	movs	r3, #0
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	f7fe fd5f 	bl	8005674 <xQueueGenericSendFromISR>
 8006bb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3728      	adds	r7, #40	; 0x28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000d78 	.word	0x20000d78

08006bc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd2:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <prvProcessExpiredTimer+0x94>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe fb07 	bl	80051f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d022      	beq.n	8006c3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	18d1      	adds	r1, r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	6978      	ldr	r0, [r7, #20]
 8006c02:	f000 f8d1 	bl	8006da8 <prvInsertTimerInActiveList>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01f      	beq.n	8006c4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	2300      	movs	r3, #0
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	2100      	movs	r1, #0
 8006c16:	6978      	ldr	r0, [r7, #20]
 8006c18:	f7ff ff88 	bl	8006b2c <xTimerGenericCommand>
 8006c1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d113      	bne.n	8006c4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	6978      	ldr	r0, [r7, #20]
 8006c52:	4798      	blx	r3
}
 8006c54:	bf00      	nop
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20000d70 	.word	0x20000d70

08006c60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c68:	f107 0308 	add.w	r3, r7, #8
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 f857 	bl	8006d20 <prvGetNextExpireTime>
 8006c72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4619      	mov	r1, r3
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f803 	bl	8006c84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c7e:	f000 f8d5 	bl	8006e2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c82:	e7f1      	b.n	8006c68 <prvTimerTask+0x8>

08006c84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c8e:	f7ff fa7b 	bl	8006188 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c92:	f107 0308 	add.w	r3, r7, #8
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 f866 	bl	8006d68 <prvSampleTimeNow>
 8006c9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d130      	bne.n	8006d06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <prvProcessTimerOrBlockTask+0x3c>
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d806      	bhi.n	8006cc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006cb2:	f7ff fa77 	bl	80061a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006cb6:	68f9      	ldr	r1, [r7, #12]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff ff85 	bl	8006bc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006cbe:	e024      	b.n	8006d0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d008      	beq.n	8006cd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006cc6:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <prvProcessTimerOrBlockTask+0x90>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <prvProcessTimerOrBlockTask+0x50>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e000      	b.n	8006cd6 <prvProcessTimerOrBlockTask+0x52>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <prvProcessTimerOrBlockTask+0x94>)
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	f7fe ffef 	bl	8005cc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cea:	f7ff fa5b 	bl	80061a4 <xTaskResumeAll>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cf4:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <prvProcessTimerOrBlockTask+0x98>)
 8006cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	f3bf 8f6f 	isb	sy
}
 8006d04:	e001      	b.n	8006d0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d06:	f7ff fa4d 	bl	80061a4 <xTaskResumeAll>
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000d74 	.word	0x20000d74
 8006d18:	20000d78 	.word	0x20000d78
 8006d1c:	e000ed04 	.word	0xe000ed04

08006d20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d28:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <prvGetNextExpireTime+0x44>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <prvGetNextExpireTime+0x16>
 8006d32:	2201      	movs	r2, #1
 8006d34:	e000      	b.n	8006d38 <prvGetNextExpireTime+0x18>
 8006d36:	2200      	movs	r2, #0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d105      	bne.n	8006d50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d44:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <prvGetNextExpireTime+0x44>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	e001      	b.n	8006d54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d54:	68fb      	ldr	r3, [r7, #12]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20000d70 	.word	0x20000d70

08006d68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d70:	f7ff faa8 	bl	80062c4 <xTaskGetTickCount>
 8006d74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d76:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <prvSampleTimeNow+0x3c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d205      	bcs.n	8006d8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d80:	f000 f936 	bl	8006ff0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	e002      	b.n	8006d92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d92:	4a04      	ldr	r2, [pc, #16]	; (8006da4 <prvSampleTimeNow+0x3c>)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d98:	68fb      	ldr	r3, [r7, #12]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20000d80 	.word	0x20000d80

08006da8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d812      	bhi.n	8006df4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d302      	bcc.n	8006de2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e01b      	b.n	8006e1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006de2:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <prvInsertTimerInActiveList+0x7c>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3304      	adds	r3, #4
 8006dea:	4619      	mov	r1, r3
 8006dec:	4610      	mov	r0, r2
 8006dee:	f7fe f9c8 	bl	8005182 <vListInsert>
 8006df2:	e012      	b.n	8006e1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d206      	bcs.n	8006e0a <prvInsertTimerInActiveList+0x62>
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d302      	bcc.n	8006e0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e04:	2301      	movs	r3, #1
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	e007      	b.n	8006e1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e0a:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <prvInsertTimerInActiveList+0x80>)
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f7fe f9b4 	bl	8005182 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e1a:	697b      	ldr	r3, [r7, #20]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20000d74 	.word	0x20000d74
 8006e28:	20000d70 	.word	0x20000d70

08006e2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08e      	sub	sp, #56	; 0x38
 8006e30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e32:	e0ca      	b.n	8006fca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	da18      	bge.n	8006e6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e3a:	1d3b      	adds	r3, r7, #4
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10a      	bne.n	8006e5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	61fb      	str	r3, [r7, #28]
}
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e62:	6850      	ldr	r0, [r2, #4]
 8006e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e66:	6892      	ldr	r2, [r2, #8]
 8006e68:	4611      	mov	r1, r2
 8006e6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f2c0 80aa 	blt.w	8006fc8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d004      	beq.n	8006e8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	3304      	adds	r3, #4
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe f9b5 	bl	80051f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e8a:	463b      	mov	r3, r7
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff ff6b 	bl	8006d68 <prvSampleTimeNow>
 8006e92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b09      	cmp	r3, #9
 8006e98:	f200 8097 	bhi.w	8006fca <prvProcessReceivedCommands+0x19e>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <prvProcessReceivedCommands+0x78>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006ecd 	.word	0x08006ecd
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006ecd 	.word	0x08006ecd
 8006eb0:	08006f41 	.word	0x08006f41
 8006eb4:	08006f55 	.word	0x08006f55
 8006eb8:	08006f9f 	.word	0x08006f9f
 8006ebc:	08006ecd 	.word	0x08006ecd
 8006ec0:	08006ecd 	.word	0x08006ecd
 8006ec4:	08006f41 	.word	0x08006f41
 8006ec8:	08006f55 	.word	0x08006f55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ed2:	f043 0301 	orr.w	r3, r3, #1
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	18d1      	adds	r1, r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eec:	f7ff ff5c 	bl	8006da8 <prvInsertTimerInActiveList>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d069      	beq.n	8006fca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006efc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d05e      	beq.n	8006fca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	441a      	add	r2, r3
 8006f14:	2300      	movs	r3, #0
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f1e:	f7ff fe05 	bl	8006b2c <xTimerGenericCommand>
 8006f22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d14f      	bne.n	8006fca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	61bb      	str	r3, [r7, #24]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f46:	f023 0301 	bic.w	r3, r3, #1
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f52:	e03a      	b.n	8006fca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	617b      	str	r3, [r7, #20]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	18d1      	adds	r1, r2, r3
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f98:	f7ff ff06 	bl	8006da8 <prvInsertTimerInActiveList>
					break;
 8006f9c:	e015      	b.n	8006fca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d103      	bne.n	8006fb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fae:	f000 fbdf 	bl	8007770 <vPortFree>
 8006fb2:	e00a      	b.n	8006fca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006fc6:	e000      	b.n	8006fca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006fc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fca:	4b08      	ldr	r3, [pc, #32]	; (8006fec <prvProcessReceivedCommands+0x1c0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	1d39      	adds	r1, r7, #4
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe fbea 	bl	80057ac <xQueueReceive>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f47f af2a 	bne.w	8006e34 <prvProcessReceivedCommands+0x8>
	}
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	3730      	adds	r7, #48	; 0x30
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000d78 	.word	0x20000d78

08006ff0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ff6:	e048      	b.n	800708a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ff8:	4b2d      	ldr	r3, [pc, #180]	; (80070b0 <prvSwitchTimerLists+0xc0>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007002:	4b2b      	ldr	r3, [pc, #172]	; (80070b0 <prvSwitchTimerLists+0xc0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe f8ef 	bl	80051f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d02e      	beq.n	800708a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4413      	add	r3, r2
 8007034:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	429a      	cmp	r2, r3
 800703c:	d90e      	bls.n	800705c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800704a:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <prvSwitchTimerLists+0xc0>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f7fe f894 	bl	8005182 <vListInsert>
 800705a:	e016      	b.n	800708a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800705c:	2300      	movs	r3, #0
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	2300      	movs	r3, #0
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	2100      	movs	r1, #0
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7ff fd60 	bl	8006b2c <xTimerGenericCommand>
 800706c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	603b      	str	r3, [r7, #0]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800708a:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <prvSwitchTimerLists+0xc0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1b1      	bne.n	8006ff8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007094:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <prvSwitchTimerLists+0xc0>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800709a:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <prvSwitchTimerLists+0xc4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a04      	ldr	r2, [pc, #16]	; (80070b0 <prvSwitchTimerLists+0xc0>)
 80070a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070a2:	4a04      	ldr	r2, [pc, #16]	; (80070b4 <prvSwitchTimerLists+0xc4>)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	6013      	str	r3, [r2, #0]
}
 80070a8:	bf00      	nop
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20000d70 	.word	0x20000d70
 80070b4:	20000d74 	.word	0x20000d74

080070b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070be:	f000 f969 	bl	8007394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070c2:	4b15      	ldr	r3, [pc, #84]	; (8007118 <prvCheckForValidListAndQueue+0x60>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d120      	bne.n	800710c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070ca:	4814      	ldr	r0, [pc, #80]	; (800711c <prvCheckForValidListAndQueue+0x64>)
 80070cc:	f7fe f808 	bl	80050e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070d0:	4813      	ldr	r0, [pc, #76]	; (8007120 <prvCheckForValidListAndQueue+0x68>)
 80070d2:	f7fe f805 	bl	80050e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070d6:	4b13      	ldr	r3, [pc, #76]	; (8007124 <prvCheckForValidListAndQueue+0x6c>)
 80070d8:	4a10      	ldr	r2, [pc, #64]	; (800711c <prvCheckForValidListAndQueue+0x64>)
 80070da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070dc:	4b12      	ldr	r3, [pc, #72]	; (8007128 <prvCheckForValidListAndQueue+0x70>)
 80070de:	4a10      	ldr	r2, [pc, #64]	; (8007120 <prvCheckForValidListAndQueue+0x68>)
 80070e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070e2:	2300      	movs	r3, #0
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	4b11      	ldr	r3, [pc, #68]	; (800712c <prvCheckForValidListAndQueue+0x74>)
 80070e8:	4a11      	ldr	r2, [pc, #68]	; (8007130 <prvCheckForValidListAndQueue+0x78>)
 80070ea:	2110      	movs	r1, #16
 80070ec:	200a      	movs	r0, #10
 80070ee:	f7fe f906 	bl	80052fe <xQueueGenericCreateStatic>
 80070f2:	4603      	mov	r3, r0
 80070f4:	4a08      	ldr	r2, [pc, #32]	; (8007118 <prvCheckForValidListAndQueue+0x60>)
 80070f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070f8:	4b07      	ldr	r3, [pc, #28]	; (8007118 <prvCheckForValidListAndQueue+0x60>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007100:	4b05      	ldr	r3, [pc, #20]	; (8007118 <prvCheckForValidListAndQueue+0x60>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	490b      	ldr	r1, [pc, #44]	; (8007134 <prvCheckForValidListAndQueue+0x7c>)
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe fdb4 	bl	8005c74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800710c:	f000 f972 	bl	80073f4 <vPortExitCritical>
}
 8007110:	bf00      	nop
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20000d78 	.word	0x20000d78
 800711c:	20000d48 	.word	0x20000d48
 8007120:	20000d5c 	.word	0x20000d5c
 8007124:	20000d70 	.word	0x20000d70
 8007128:	20000d74 	.word	0x20000d74
 800712c:	20000e24 	.word	0x20000e24
 8007130:	20000d84 	.word	0x20000d84
 8007134:	08007a68 	.word	0x08007a68

08007138 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3b04      	subs	r3, #4
 8007148:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3b04      	subs	r3, #4
 8007156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f023 0201 	bic.w	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3b04      	subs	r3, #4
 8007166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007168:	4a0c      	ldr	r2, [pc, #48]	; (800719c <pxPortInitialiseStack+0x64>)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3b14      	subs	r3, #20
 8007172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3b04      	subs	r3, #4
 800717e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f06f 0202 	mvn.w	r2, #2
 8007186:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3b20      	subs	r3, #32
 800718c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800718e:	68fb      	ldr	r3, [r7, #12]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	080071a1 	.word	0x080071a1

080071a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071aa:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <prvTaskExitError+0x54>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d00a      	beq.n	80071ca <prvTaskExitError+0x2a>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	60fb      	str	r3, [r7, #12]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <prvTaskExitError+0x28>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	60bb      	str	r3, [r7, #8]
}
 80071dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071de:	bf00      	nop
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0fc      	beq.n	80071e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071e6:	bf00      	nop
 80071e8:	bf00      	nop
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	2000000c 	.word	0x2000000c
	...

08007200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <pxCurrentTCBConst2>)
 8007202:	6819      	ldr	r1, [r3, #0]
 8007204:	6808      	ldr	r0, [r1, #0]
 8007206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720a:	f380 8809 	msr	PSP, r0
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f04f 0000 	mov.w	r0, #0
 8007216:	f380 8811 	msr	BASEPRI, r0
 800721a:	4770      	bx	lr
 800721c:	f3af 8000 	nop.w

08007220 <pxCurrentTCBConst2>:
 8007220:	20000848 	.word	0x20000848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop

08007228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007228:	4808      	ldr	r0, [pc, #32]	; (800724c <prvPortStartFirstTask+0x24>)
 800722a:	6800      	ldr	r0, [r0, #0]
 800722c:	6800      	ldr	r0, [r0, #0]
 800722e:	f380 8808 	msr	MSP, r0
 8007232:	f04f 0000 	mov.w	r0, #0
 8007236:	f380 8814 	msr	CONTROL, r0
 800723a:	b662      	cpsie	i
 800723c:	b661      	cpsie	f
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	df00      	svc	0
 8007248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800724a:	bf00      	nop
 800724c:	e000ed08 	.word	0xe000ed08

08007250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007256:	4b46      	ldr	r3, [pc, #280]	; (8007370 <xPortStartScheduler+0x120>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a46      	ldr	r2, [pc, #280]	; (8007374 <xPortStartScheduler+0x124>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d10a      	bne.n	8007276 <xPortStartScheduler+0x26>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	613b      	str	r3, [r7, #16]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007276:	4b3e      	ldr	r3, [pc, #248]	; (8007370 <xPortStartScheduler+0x120>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a3f      	ldr	r2, [pc, #252]	; (8007378 <xPortStartScheduler+0x128>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10a      	bne.n	8007296 <xPortStartScheduler+0x46>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	60fb      	str	r3, [r7, #12]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007296:	4b39      	ldr	r3, [pc, #228]	; (800737c <xPortStartScheduler+0x12c>)
 8007298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	22ff      	movs	r2, #255	; 0xff
 80072a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	4b31      	ldr	r3, [pc, #196]	; (8007380 <xPortStartScheduler+0x130>)
 80072bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072be:	4b31      	ldr	r3, [pc, #196]	; (8007384 <xPortStartScheduler+0x134>)
 80072c0:	2207      	movs	r2, #7
 80072c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072c4:	e009      	b.n	80072da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80072c6:	4b2f      	ldr	r3, [pc, #188]	; (8007384 <xPortStartScheduler+0x134>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	4a2d      	ldr	r2, [pc, #180]	; (8007384 <xPortStartScheduler+0x134>)
 80072ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e2:	2b80      	cmp	r3, #128	; 0x80
 80072e4:	d0ef      	beq.n	80072c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072e6:	4b27      	ldr	r3, [pc, #156]	; (8007384 <xPortStartScheduler+0x134>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f1c3 0307 	rsb	r3, r3, #7
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d00a      	beq.n	8007308 <xPortStartScheduler+0xb8>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60bb      	str	r3, [r7, #8]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007308:	4b1e      	ldr	r3, [pc, #120]	; (8007384 <xPortStartScheduler+0x134>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	4a1d      	ldr	r2, [pc, #116]	; (8007384 <xPortStartScheduler+0x134>)
 8007310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007312:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <xPortStartScheduler+0x134>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800731a:	4a1a      	ldr	r2, [pc, #104]	; (8007384 <xPortStartScheduler+0x134>)
 800731c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	b2da      	uxtb	r2, r3
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007326:	4b18      	ldr	r3, [pc, #96]	; (8007388 <xPortStartScheduler+0x138>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a17      	ldr	r2, [pc, #92]	; (8007388 <xPortStartScheduler+0x138>)
 800732c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <xPortStartScheduler+0x138>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a14      	ldr	r2, [pc, #80]	; (8007388 <xPortStartScheduler+0x138>)
 8007338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800733c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800733e:	f000 f8dd 	bl	80074fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007342:	4b12      	ldr	r3, [pc, #72]	; (800738c <xPortStartScheduler+0x13c>)
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007348:	f000 f8fc 	bl	8007544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800734c:	4b10      	ldr	r3, [pc, #64]	; (8007390 <xPortStartScheduler+0x140>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0f      	ldr	r2, [pc, #60]	; (8007390 <xPortStartScheduler+0x140>)
 8007352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007358:	f7ff ff66 	bl	8007228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800735c:	f7ff f858 	bl	8006410 <vTaskSwitchContext>
	prvTaskExitError();
 8007360:	f7ff ff1e 	bl	80071a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	e000ed00 	.word	0xe000ed00
 8007374:	410fc271 	.word	0x410fc271
 8007378:	410fc270 	.word	0x410fc270
 800737c:	e000e400 	.word	0xe000e400
 8007380:	20000e74 	.word	0x20000e74
 8007384:	20000e78 	.word	0x20000e78
 8007388:	e000ed20 	.word	0xe000ed20
 800738c:	2000000c 	.word	0x2000000c
 8007390:	e000ef34 	.word	0xe000ef34

08007394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	607b      	str	r3, [r7, #4]
}
 80073ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <vPortEnterCritical+0x58>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	4a0d      	ldr	r2, [pc, #52]	; (80073ec <vPortEnterCritical+0x58>)
 80073b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <vPortEnterCritical+0x58>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d10f      	bne.n	80073e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <vPortEnterCritical+0x5c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	603b      	str	r3, [r7, #0]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <vPortEnterCritical+0x4a>
	}
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	2000000c 	.word	0x2000000c
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073fa:	4b12      	ldr	r3, [pc, #72]	; (8007444 <vPortExitCritical+0x50>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <vPortExitCritical+0x24>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	607b      	str	r3, [r7, #4]
}
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007418:	4b0a      	ldr	r3, [pc, #40]	; (8007444 <vPortExitCritical+0x50>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3b01      	subs	r3, #1
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <vPortExitCritical+0x50>)
 8007420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007422:	4b08      	ldr	r3, [pc, #32]	; (8007444 <vPortExitCritical+0x50>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d105      	bne.n	8007436 <vPortExitCritical+0x42>
 800742a:	2300      	movs	r3, #0
 800742c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	f383 8811 	msr	BASEPRI, r3
}
 8007434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	2000000c 	.word	0x2000000c
	...

08007450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007450:	f3ef 8009 	mrs	r0, PSP
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	4b15      	ldr	r3, [pc, #84]	; (80074b0 <pxCurrentTCBConst>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	f01e 0f10 	tst.w	lr, #16
 8007460:	bf08      	it	eq
 8007462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746a:	6010      	str	r0, [r2, #0]
 800746c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007474:	f380 8811 	msr	BASEPRI, r0
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f7fe ffc6 	bl	8006410 <vTaskSwitchContext>
 8007484:	f04f 0000 	mov.w	r0, #0
 8007488:	f380 8811 	msr	BASEPRI, r0
 800748c:	bc09      	pop	{r0, r3}
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	6808      	ldr	r0, [r1, #0]
 8007492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007496:	f01e 0f10 	tst.w	lr, #16
 800749a:	bf08      	it	eq
 800749c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074a0:	f380 8809 	msr	PSP, r0
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	f3af 8000 	nop.w

080074b0 <pxCurrentTCBConst>:
 80074b0:	20000848 	.word	0x20000848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	607b      	str	r3, [r7, #4]
}
 80074d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074d2:	f7fe ff07 	bl	80062e4 <xTaskIncrementTick>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074dc:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <xPortSysTickHandler+0x40>)
 80074de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f383 8811 	msr	BASEPRI, r3
}
 80074ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <vPortSetupTimerInterrupt+0x34>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007506:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <vPortSetupTimerInterrupt+0x38>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <vPortSetupTimerInterrupt+0x3c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a0a      	ldr	r2, [pc, #40]	; (800753c <vPortSetupTimerInterrupt+0x40>)
 8007512:	fba2 2303 	umull	r2, r3, r2, r3
 8007516:	099b      	lsrs	r3, r3, #6
 8007518:	4a09      	ldr	r2, [pc, #36]	; (8007540 <vPortSetupTimerInterrupt+0x44>)
 800751a:	3b01      	subs	r3, #1
 800751c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800751e:	4b04      	ldr	r3, [pc, #16]	; (8007530 <vPortSetupTimerInterrupt+0x34>)
 8007520:	2207      	movs	r2, #7
 8007522:	601a      	str	r2, [r3, #0]
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	e000e010 	.word	0xe000e010
 8007534:	e000e018 	.word	0xe000e018
 8007538:	20000000 	.word	0x20000000
 800753c:	10624dd3 	.word	0x10624dd3
 8007540:	e000e014 	.word	0xe000e014

08007544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007554 <vPortEnableVFP+0x10>
 8007548:	6801      	ldr	r1, [r0, #0]
 800754a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800754e:	6001      	str	r1, [r0, #0]
 8007550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007552:	bf00      	nop
 8007554:	e000ed88 	.word	0xe000ed88

08007558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800755e:	f3ef 8305 	mrs	r3, IPSR
 8007562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b0f      	cmp	r3, #15
 8007568:	d914      	bls.n	8007594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800756a:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <vPortValidateInterruptPriority+0x70>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007574:	4b15      	ldr	r3, [pc, #84]	; (80075cc <vPortValidateInterruptPriority+0x74>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	7afa      	ldrb	r2, [r7, #11]
 800757a:	429a      	cmp	r2, r3
 800757c:	d20a      	bcs.n	8007594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	607b      	str	r3, [r7, #4]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007594:	4b0e      	ldr	r3, [pc, #56]	; (80075d0 <vPortValidateInterruptPriority+0x78>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800759c:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <vPortValidateInterruptPriority+0x7c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d90a      	bls.n	80075ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	603b      	str	r3, [r7, #0]
}
 80075b6:	bf00      	nop
 80075b8:	e7fe      	b.n	80075b8 <vPortValidateInterruptPriority+0x60>
	}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	e000e3f0 	.word	0xe000e3f0
 80075cc:	20000e74 	.word	0x20000e74
 80075d0:	e000ed0c 	.word	0xe000ed0c
 80075d4:	20000e78 	.word	0x20000e78

080075d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075e4:	f7fe fdd0 	bl	8006188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075e8:	4b5b      	ldr	r3, [pc, #364]	; (8007758 <pvPortMalloc+0x180>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075f0:	f000 f920 	bl	8007834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075f4:	4b59      	ldr	r3, [pc, #356]	; (800775c <pvPortMalloc+0x184>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8093 	bne.w	8007728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01d      	beq.n	8007644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007608:	2208      	movs	r2, #8
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	2b00      	cmp	r3, #0
 8007618:	d014      	beq.n	8007644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f023 0307 	bic.w	r3, r3, #7
 8007620:	3308      	adds	r3, #8
 8007622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <pvPortMalloc+0x6c>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	617b      	str	r3, [r7, #20]
}
 8007640:	bf00      	nop
 8007642:	e7fe      	b.n	8007642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d06e      	beq.n	8007728 <pvPortMalloc+0x150>
 800764a:	4b45      	ldr	r3, [pc, #276]	; (8007760 <pvPortMalloc+0x188>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d869      	bhi.n	8007728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007654:	4b43      	ldr	r3, [pc, #268]	; (8007764 <pvPortMalloc+0x18c>)
 8007656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007658:	4b42      	ldr	r3, [pc, #264]	; (8007764 <pvPortMalloc+0x18c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800765e:	e004      	b.n	800766a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	429a      	cmp	r2, r3
 8007672:	d903      	bls.n	800767c <pvPortMalloc+0xa4>
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1f1      	bne.n	8007660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800767c:	4b36      	ldr	r3, [pc, #216]	; (8007758 <pvPortMalloc+0x180>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007682:	429a      	cmp	r2, r3
 8007684:	d050      	beq.n	8007728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2208      	movs	r2, #8
 800768c:	4413      	add	r3, r2
 800768e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	2308      	movs	r3, #8
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d91f      	bls.n	80076e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4413      	add	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <pvPortMalloc+0xf8>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	613b      	str	r3, [r7, #16]
}
 80076cc:	bf00      	nop
 80076ce:	e7fe      	b.n	80076ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	1ad2      	subs	r2, r2, r3
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076e2:	69b8      	ldr	r0, [r7, #24]
 80076e4:	f000 f908 	bl	80078f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076e8:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <pvPortMalloc+0x188>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <pvPortMalloc+0x188>)
 80076f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076f6:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <pvPortMalloc+0x188>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b1b      	ldr	r3, [pc, #108]	; (8007768 <pvPortMalloc+0x190>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d203      	bcs.n	800770a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007702:	4b17      	ldr	r3, [pc, #92]	; (8007760 <pvPortMalloc+0x188>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a18      	ldr	r2, [pc, #96]	; (8007768 <pvPortMalloc+0x190>)
 8007708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <pvPortMalloc+0x184>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	431a      	orrs	r2, r3
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800771e:	4b13      	ldr	r3, [pc, #76]	; (800776c <pvPortMalloc+0x194>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	4a11      	ldr	r2, [pc, #68]	; (800776c <pvPortMalloc+0x194>)
 8007726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007728:	f7fe fd3c 	bl	80061a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <pvPortMalloc+0x174>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60fb      	str	r3, [r7, #12]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <pvPortMalloc+0x172>
	return pvReturn;
 800774c:	69fb      	ldr	r3, [r7, #28]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3728      	adds	r7, #40	; 0x28
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20004a84 	.word	0x20004a84
 800775c:	20004a98 	.word	0x20004a98
 8007760:	20004a88 	.word	0x20004a88
 8007764:	20004a7c 	.word	0x20004a7c
 8007768:	20004a8c 	.word	0x20004a8c
 800776c:	20004a90 	.word	0x20004a90

08007770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d04d      	beq.n	800781e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007782:	2308      	movs	r3, #8
 8007784:	425b      	negs	r3, r3
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	4413      	add	r3, r2
 800778a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	4b24      	ldr	r3, [pc, #144]	; (8007828 <vPortFree+0xb8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <vPortFree+0x44>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	60fb      	str	r3, [r7, #12]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <vPortFree+0x62>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60bb      	str	r3, [r7, #8]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <vPortFree+0xb8>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4013      	ands	r3, r2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01e      	beq.n	800781e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d11a      	bne.n	800781e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <vPortFree+0xb8>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	43db      	mvns	r3, r3
 80077f2:	401a      	ands	r2, r3
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077f8:	f7fe fcc6 	bl	8006188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	4b0a      	ldr	r3, [pc, #40]	; (800782c <vPortFree+0xbc>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4413      	add	r3, r2
 8007806:	4a09      	ldr	r2, [pc, #36]	; (800782c <vPortFree+0xbc>)
 8007808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800780a:	6938      	ldr	r0, [r7, #16]
 800780c:	f000 f874 	bl	80078f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007810:	4b07      	ldr	r3, [pc, #28]	; (8007830 <vPortFree+0xc0>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3301      	adds	r3, #1
 8007816:	4a06      	ldr	r2, [pc, #24]	; (8007830 <vPortFree+0xc0>)
 8007818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800781a:	f7fe fcc3 	bl	80061a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800781e:	bf00      	nop
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20004a98 	.word	0x20004a98
 800782c:	20004a88 	.word	0x20004a88
 8007830:	20004a94 	.word	0x20004a94

08007834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800783a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800783e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007840:	4b27      	ldr	r3, [pc, #156]	; (80078e0 <prvHeapInit+0xac>)
 8007842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3307      	adds	r3, #7
 8007852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0307 	bic.w	r3, r3, #7
 800785a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	4a1f      	ldr	r2, [pc, #124]	; (80078e0 <prvHeapInit+0xac>)
 8007864:	4413      	add	r3, r2
 8007866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800786c:	4a1d      	ldr	r2, [pc, #116]	; (80078e4 <prvHeapInit+0xb0>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007872:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <prvHeapInit+0xb0>)
 8007874:	2200      	movs	r2, #0
 8007876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	4413      	add	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007880:	2208      	movs	r2, #8
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0307 	bic.w	r3, r3, #7
 800788e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <prvHeapInit+0xb4>)
 8007894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007896:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <prvHeapInit+0xb4>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2200      	movs	r2, #0
 800789c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800789e:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <prvHeapInit+0xb4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078b4:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <prvHeapInit+0xb4>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	4a0a      	ldr	r2, [pc, #40]	; (80078ec <prvHeapInit+0xb8>)
 80078c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	4a09      	ldr	r2, [pc, #36]	; (80078f0 <prvHeapInit+0xbc>)
 80078ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078cc:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <prvHeapInit+0xc0>)
 80078ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078d2:	601a      	str	r2, [r3, #0]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	20000e7c 	.word	0x20000e7c
 80078e4:	20004a7c 	.word	0x20004a7c
 80078e8:	20004a84 	.word	0x20004a84
 80078ec:	20004a8c 	.word	0x20004a8c
 80078f0:	20004a88 	.word	0x20004a88
 80078f4:	20004a98 	.word	0x20004a98

080078f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007900:	4b28      	ldr	r3, [pc, #160]	; (80079a4 <prvInsertBlockIntoFreeList+0xac>)
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e002      	b.n	800790c <prvInsertBlockIntoFreeList+0x14>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	429a      	cmp	r2, r3
 8007914:	d8f7      	bhi.n	8007906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	4413      	add	r3, r2
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	429a      	cmp	r2, r3
 8007926:	d108      	bne.n	800793a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	441a      	add	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	441a      	add	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d118      	bne.n	8007980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d00d      	beq.n	8007976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	441a      	add	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e008      	b.n	8007988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007976:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	e003      	b.n	8007988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	429a      	cmp	r2, r3
 800798e:	d002      	beq.n	8007996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20004a7c 	.word	0x20004a7c
 80079a8:	20004a84 	.word	0x20004a84

080079ac <__libc_init_array>:
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	4d0d      	ldr	r5, [pc, #52]	; (80079e4 <__libc_init_array+0x38>)
 80079b0:	4c0d      	ldr	r4, [pc, #52]	; (80079e8 <__libc_init_array+0x3c>)
 80079b2:	1b64      	subs	r4, r4, r5
 80079b4:	10a4      	asrs	r4, r4, #2
 80079b6:	2600      	movs	r6, #0
 80079b8:	42a6      	cmp	r6, r4
 80079ba:	d109      	bne.n	80079d0 <__libc_init_array+0x24>
 80079bc:	4d0b      	ldr	r5, [pc, #44]	; (80079ec <__libc_init_array+0x40>)
 80079be:	4c0c      	ldr	r4, [pc, #48]	; (80079f0 <__libc_init_array+0x44>)
 80079c0:	f000 f82e 	bl	8007a20 <_init>
 80079c4:	1b64      	subs	r4, r4, r5
 80079c6:	10a4      	asrs	r4, r4, #2
 80079c8:	2600      	movs	r6, #0
 80079ca:	42a6      	cmp	r6, r4
 80079cc:	d105      	bne.n	80079da <__libc_init_array+0x2e>
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d4:	4798      	blx	r3
 80079d6:	3601      	adds	r6, #1
 80079d8:	e7ee      	b.n	80079b8 <__libc_init_array+0xc>
 80079da:	f855 3b04 	ldr.w	r3, [r5], #4
 80079de:	4798      	blx	r3
 80079e0:	3601      	adds	r6, #1
 80079e2:	e7f2      	b.n	80079ca <__libc_init_array+0x1e>
 80079e4:	08007b04 	.word	0x08007b04
 80079e8:	08007b04 	.word	0x08007b04
 80079ec:	08007b04 	.word	0x08007b04
 80079f0:	08007b08 	.word	0x08007b08

080079f4 <memcpy>:
 80079f4:	440a      	add	r2, r1
 80079f6:	4291      	cmp	r1, r2
 80079f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079fc:	d100      	bne.n	8007a00 <memcpy+0xc>
 80079fe:	4770      	bx	lr
 8007a00:	b510      	push	{r4, lr}
 8007a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a0a:	4291      	cmp	r1, r2
 8007a0c:	d1f9      	bne.n	8007a02 <memcpy+0xe>
 8007a0e:	bd10      	pop	{r4, pc}

08007a10 <memset>:
 8007a10:	4402      	add	r2, r0
 8007a12:	4603      	mov	r3, r0
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d100      	bne.n	8007a1a <memset+0xa>
 8007a18:	4770      	bx	lr
 8007a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a1e:	e7f9      	b.n	8007a14 <memset+0x4>

08007a20 <_init>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	bf00      	nop
 8007a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a26:	bc08      	pop	{r3}
 8007a28:	469e      	mov	lr, r3
 8007a2a:	4770      	bx	lr

08007a2c <_fini>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	bf00      	nop
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr
